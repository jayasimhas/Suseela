@{
    Layout = null;
}

@* General FE Note: Clearly this is only the bits of the Profile page mentioned in IITS2A-61, IITS2A-62, and IITS2A-66; it will need to be wrapped inside header/footer/etc and have a set alert button, related news component and leaderboard ad (all extant code) tagged on, much as seen on the home page.  Exactly how that markup should look can be extrapolated from the patternlab files for the Profile template or either Profile example page *@

<div class="profile">
	@* PersonName: individul being profiled's full name; this may make sense to break into first and last name, depending on how the data comes down. *@
	<h1 class="profile__name">@(Model.PersonName)</h1>
	<div class="l-left-rail">
		@* PersonTitle: Person's job title or titles; if multiple make comma-separated *@
		<h2 class="profile__title">@(Model.PersonTitle)</h2>
		@* PersonLocation: Individual's home city/state/country   Example in design was London, UK; Assuming inclusion of state if individual is from US, eg. Newark, OH, USA *@
		<div class="profile__location">@(Model.PersonLocation)</div>

		@* PersonImageExists: true/false as to whether to show image; may be able to get away with just checking existance of PersonImageUrl, not sure how C# handles that sort of thing *@
		@if (PersonImageExists) {
			@* PersonImageUrl: Just what it sounds like; path to person's profile image  *@
			<img class="profile__img" src="@(Model.PersonImageUrl)" />
		}
		<ul class="profile__links">
			@* PersonEmailExists: true/false as to whether to show email *@
			@if (PersonEmailExists) {
				<li>
					<svg class="alert__icon">
						<use xlink:href="/web/Website/dist/img/svg-sprite.svg#email"></use>
					</svg>
					@* PersonEmail: Email address, full *@
					<a href="mailto:@(Model.PersonEmail)">@(Model.PersonEmail)</a>
				</li>
			}
			@* PersonTwitterExists: true/false... I think you get the idea by now  *@
			@if (PersonTwitterExists) {
				<li>
					<svg class="alert__icon">
						<use xlink:href="/web/Website/dist/img/svg-sprite.svg#twitter"></use>
					</svg>
					@* PersonTwitterUrl: Path to twitter page  *@
					@* PersonTwitterName: Person's twitter name, at-symbol included  *@
					<a href="@(Model.PersonTwitterUrl)">@(Model.PersonTwitterName)</a>
				</li>
			}
			@* PersonLinkedInExists: same deal as for email and twitter *@
			@if (PersonLinkedInExists) {
				<li>
					@* NOTE: This extra class on the linkedIn svg is important!  Don't remove it!  And don't add it to the other SVGs! *@
					<svg class="alert__icon icon--linked-in">
						<use xlink:href="/web/Website/dist/img/svg-sprite.svg#linkedin"></use>
					</svg>
					@* PersonLinkedInUrl: Path to linked in profile  *@
					@* PersonLinkedInName: Somewhat unclear as to what this should be; may be able to be swapped out for static text.  *@
					<a href="@(Model.PersonLinkedInUrl)">@(Model.PersonLinkedInName)</a>
				</li>
			}
		</ul>
		<div class="profile__profile">
			@* PersonProfile: HTML paragraph or two of basic profile information from an RTE  *@
			@(Model.PersonProfile)
		</div>
		<ul class="profile__expertise">
			@* PersonHasAreasOfExpertise: yet another true/false to show/hide areas of expertise *@
			@if (PersonHasAreasOfExpertise) {
				<li>
					<div class="bar-separated-link-list">
						<span class="bar-separated-link-list__label">Areas of Expertise: </span>
						@* Tags: Here's where my razor knowledge is breaking down; this syntax is probably incorrect, but this should be a list of linked tags; See IITS2A-62 for details *@
						@foreach (var tag in Model.Tags)
						{
				            <a href="@tag.LinkableUrl">@tag.LinkableText</a>
				        }
					</div>
				</li>
			}
			@* PersonHasIndustryExpertise: yet another true/false to show/hide industry expertise *@
			@if (PersonHasIndustryExpertise) {
				<li>
					<div class="bar-separated-link-list">
						<span class="bar-separated-link-list__label">Industry Expertise: </span>
						@* Tags: Here's where my razor knowledge is breaking down; this syntax is probably incorrect, but this should be a list of linked tags; See IITS2A-62 for details *@
						@foreach (var tag in Model.Tags)
						{
						<a href="@tag.LinkableUrl">@tag.LinkableText</a>
						}
					</div>
				</li>
			}
			@* PersonWritesFor: yet another true/false to show/hide pubs written for *@
			@if (PersonWritesFor) {
				<li>
					<div class="bar-separated-link-list">
						<span class="bar-separated-link-list__label">Writes for: </span>
						@* Tags: Here's where my razor knowledge is breaking down; this syntax is probably incorrect, but this should be a list of linked tags; See IITS2A-62 for details *@
						@foreach (var tag in Model.Tags)
						{
				            <a href="@tag.LinkableUrl">@tag.LinkableText</a>
				        }
					</div>
				</li>
			}
		</ul>
	</div>
	<div class="l-right-rail">
		@* This may be the incorrect sort of ad; confirm with someone who knows for sure.  It should be the squarish-sort of ad *@
	    @Html.Sitecore().Placeholder("article-med-ad")
	</div>
</div>
