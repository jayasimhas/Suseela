@model Informa.Web.ViewModels.Casualty.AdobeChartViewModel

@{
    var AMGraph = Model.GraphDetail;
}
<div class="balticChartsWrapper">
    <script src="//www.amcharts.com/lib/3/amcharts.js" type="text/javascript"></script>
    <script src="//www.amcharts.com/lib/3/serial.js" type="text/javascript"></script>
    <script src="//www.amcharts.com/lib/3/amstock.js" type="text/javascript"></script>

    <div>
        <h6><span>@AMGraph.GraphTitle</span></h6>
    </div>

    <script>
        var graphcolor = '@AMGraph.GraphColor';
        var graphType = '@AMGraph.GraphType';
        var graphId = "@AMGraph.GraphID";
        if (graphId.indexOf('|') > 0) {
            var graphArray = graphId.split('|');
            var title = graphArray[0];
            var title1 = graphArray[1];
        } else {
            var title = graphId;
            var title1 = graphId;
        }
        var chartData = [];
        var chartData1 = [];
        AmCharts.ready(function () {
            generateChartData();

        });

        function CalculateDifference() {
            var LatestItem = chartData[chartData.length - 1].value,
                SecondLastItem = chartData[chartData.length - 2].value,
                Difference = LatestItem - SecondLastItem;
            LatestDate = chartData[chartData.length - 1].date;
            var status = "";
            if (Difference > 0) {
                status = "rise";
            } else {
                status = "fall";
            }
            $('#latest-value').html(LatestItem + '<span class="' + status + '">(' + Difference + ')</span> <span>' + LatestDate + '</span>');

            if (chartData1.length > 0) {

                var LatestItem1 = chartData1[chartData1.length - 1].value,
                SecondLastItem1 = chartData1[chartData1.length - 2].value,
                Difference1 = LatestItem1 - SecondLastItem1;
                LatestDate1 = chartData1[chartData1.length - 1].date;

                var status1 = "";
                if (Difference1 > 0) {
                    status1 = "rise";
                } else {
                    status1 = "fall";
                }
                $('#latest-value').html(title + LatestItem + '<span class="' + status + '">(' + Difference + ')</span>' + " " + title1 + " " + LatestItem1 + '<span class="' + status1 + '">(' + Difference1 + ')</span>');
            }

        }

        function generateChartData() {
            var feedata = '@AMGraph.FinanceResult';
            if ((feedata.indexOf(',') > 0) && (feedata.indexOf('|') > 0)) {
                if (feedata.indexOf("-$-") > 0) {
                    var feedataSrcOne = feedata.split("-$-")[0];
                    var feedataSrcTwo = feedata.split("-$-")[1];
                } else {
                    var feedataSrcOne = feedata;
                }

                if (feedataSrcOne.length > 0) {
                    var graphdata = feedataSrcOne.split("|");
                    for (var i = 0; i <= graphdata.length; i++) {
                        if (graphdata[i] != undefined && graphdata[i].indexOf(",") > 0) {
                            var year = graphdata[i].split(",")[0];
                            var val = graphdata[i].split(",")[1];
                            chartData.push({
                                date: year,
                                value: val,
                            });
                        }
                    }
                }

                if (feedataSrcTwo) {
                    var graphdata1 = feedataSrcTwo.split("|");
                    for (var i = 0; i <= graphdata.length; i++) {
                        if (graphdata1[i] != undefined && graphdata1[i].indexOf(",") > 0) {
                            var year = graphdata1[i].split(",")[0];
                            var val = graphdata1[i].split(",")[1];
                            chartData1.push({
                                date: year,
                                value: val,
                            });
                        }
                    }
                }
                createStockChart();
                setTimeout(function () { $("a[title='JavaScript charts']").hide() }, 600);
                CalculateDifference();
            } else {
                var Errormessage =
                                document.getElementById('hdnErrormessage').value;

                document.getElementById("chartdiv").innerHTML = '<div class="alert-error" style="display: block;"><svg class="alert__icon"><use xmlns:xlink="http://www.w3.org/1999/xlink&quot;" xlink:href="/dist/img/svg-sprite.svg#alert"></use></svg><p class="page-account-contact__error">' + Errormessage + '</p></div>';

                document.getElementById("chartdiv").style.height = "auto";
            }

        }




        var chart;

        function createStockChart() {
            chart = new AmCharts.AmStockChart();


            // DATASETS //////////////////////////////////////////
            var dataSet = new AmCharts.DataSet();
            dataSet.color = "#" + "@AMGraph.GraphColor";
            dataSet.title = title;
            dataSet.fieldMappings = [{
                fromField: "value",
                toField: "value"
            }];
            dataSet.dataProvider = chartData.reverse();
            dataSet.categoryField = "date";


            if (chartData1.length > 0) {
                //dataSet.compared = true;
                var dataSet1 = new AmCharts.DataSet();
                dataSet1.color = "#a6d64f";
                dataSet1.title = title1;
                dataSet1.fieldMappings = [{
                    fromField: "value",
                    toField: "value"
                }];
                dataSet1.dataProvider = chartData1.reverse();
                dataSet1.categoryField = "date";
                dataSet1.compared = true;

                chart.dataSets = [dataSet, dataSet1];
            } else {
                chart.dataSets = [dataSet];
            }
            // set data sets to the chart


            // PANELS ///////////////////////////////////////////
            // first stock panel
            var stockPanel1 = new AmCharts.StockPanel();
            stockPanel1.showCategoryAxis = true;
            stockPanel1.title = "Value";
            //stockPanel1.percentHeight = 70;

            // graph of first stock panel
            var graph1 = new AmCharts.StockGraph();
            graph1.valueField = "value";
            graph1.type = "@AMGraph.GraphType";
            graph1.graphl
            graph1.comparable = true;
            graph1.compareField = "value";
            graph1.bullet = "round";
            graph1.bulletBorderColor = "#FFFFFF";
            graph1.bulletBorderAlpha = 1;
            graph1.balloonText = "[[title]]:<b>[[value]]</b>";
            graph1.compareGraphBalloonText = "[[title]]:<b>[[value]]</b>";
            graph1.compareGraphBullet = "round";
            graph1.compareGraphBulletBorderColor = "#FFFFFF";
            graph1.compareGraphBulletBorderAlpha = 1;
            stockPanel1.addStockGraph(graph1);

            // create stock legend
            var stockLegend1 = new AmCharts.StockLegend();
            stockLegend1.markerType = "none";
            stockLegend1.periodValueTextRegular = "[[value.close]]";
            stockPanel1.stockLegend = stockLegend1;




            // set panels to the chart
            chart.panels = [stockPanel1];


            // OTHER SETTINGS ////////////////////////////////////
            var scrollbarSettings = new AmCharts.ChartScrollbarSettings();
            scrollbarSettings.graph = graph1;
            scrollbarSettings.updateOnReleaseOnly = false;
            chart.chartScrollbarSettings = scrollbarSettings;

            var cursorSettings = new AmCharts.ChartCursorSettings();
            cursorSettings.valueBalloonsEnabled = true;
            cursorSettings.graphBulletSize = 1;
            cursorSettings.selectedBackgroundColor = "#FFB6C1";

            chart.chartCursorSettings = cursorSettings;


            // PERIOD SELECTOR ///////////////////////////////////
            var periodSelector = new AmCharts.PeriodSelector();
            periodSelector.dateFormat = "YYYY-MM-DD";
            periodSelector.fromText = "Custom period";
            periodSelector.toText = "-";
            periodSelector.periods = [{
                period: "YYYY",
                count: 1,
                selected: true,
                label: "1Y"
            }, {
                period: "MM",
                count: 6,
                label: "6M"
            }, {
                period: "MM",
                count: 1,
                label: "1M"
            }, {
                period: "DD",
                count: 7,
                label: "1W"
            }, {
                period: "MAX",
                label: "MAX"
            }];
            chart.periodSelector = periodSelector;


            var panelsSettings = new AmCharts.PanelsSettings();
            panelsSettings.marginRight = 16;
            panelsSettings.marginLeft = 16;
            panelsSettings.usePrefixes = true;
            chart.panelsSettings = panelsSettings;
            chart.write('chartdiv');
        }
    </script>
    @*<style>
            .amcharts-period-input-selected{background: darkturquoise;
            font-weight: bold;}
        </style>*@
    <h6><p id="latest-value"></p></h6>
    <div id="chartdiv" class="balticChart"></div>
</div>

