@model Informa.Web.ViewModels.Articles.IArticlePrologueBookmarkViewModel
@using System.Diagnostics;
@{
    Stopwatch sw = Stopwatch.StartNew();
}

<li
	class="action-flag pop-out__trigger @( Model.IsUserAuthenticated ? "js-bookmark-article" : "js-pop-out-trigger" )"
    data-pop-out-type="sign-in"
    data-pop-out-align="right"
    data-bookmark-id="@Model.Article._Id"
    data-salesforce-id="@Model.SalesforceId"
    @( Model.IsArticleBookmarked ? "data-is-bookmarked=true" : null)
	data-analytics='{
		"event_name": "toolbar_use",
		"toolbar_tool": "bookmark",
		"bookmark": "true",
		"bookmark_title": "@Model.BookmarkTitle",
		"bookmark_publication": "@Model.BookmarkPublication"}'>

    @* Storing "bookmark" / "bookmarked" labels in data attributes so Javascript
        can use text provided by Sitecore when toggling state post-load. *@
	<span class="action-flag__label js-bookmark-label"
          data-label-bookmark="@Model.BookmarkText"
          data-label-bookmarked="@Model.BookmarkedText">
        @( Model.IsArticleBookmarked ? Model.BookmarkedText : Model.BookmarkText )
    </span>

	<svg class="action-flag__icon action-flag__icon--bookmark article-bookmark article-bookmark__bookmarked @( Model.IsArticleBookmarked ? "is-visible" : null)">
        <use xlink:href="/dist/img/svg-sprite.svg#bookmarked"></use>
    </svg>

	<svg class="action-flag__icon action-flag__icon--bookmark article-bookmark @( Model.IsArticleBookmarked ? null : "is-visible")">
        <use xlink:href="/dist/img/svg-sprite.svg#bookmark"></use>
    </svg>
</li>
@{
    Informa.Library.Utilities.Extensions.StringExtensions.WriteSitecoreLogs("ArticlePrologueBookmark.cshtml", sw, "ArticlePrologueBookmark");
}