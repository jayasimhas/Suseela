@using Glass.Mapper.Sc.Web.Mvc
@using Informa.Library.User.Entitlement
@using Informa.Web.Models
@model GlassArticleModel

<div class="article-body-content">
    <h1>@HttpUtility.HtmlDecode(Model.Title)</h1>
    <h3>@Model.Sub_Title</h3>

    <div class="article-metadata">
        <ul>
            <li>
                <time class="article-metadata__date">@Model.Date.ToString("dd MMM yyyy")</time>
            </li>
            @if (!string.IsNullOrEmpty(Model.Content_Type))
            {
                <li>
                    <h6>@Model.Content_Type</h6>
                </li>
            }
            @if (!string.IsNullOrEmpty(Model.Media_Type))
            {
                <li>
                    <svg class="article-metadata__media-type">
                        <use xlink:href="/dist/img/svg-sprite.svg#@Model.Media_Type"></use>
                    </svg>
                </li>
            }
        </ul>
    </div>

    @* MULTIPLE AUTHORS *@
    @if (Model.Authors.Count() == 1)
    {
        var author = Model.Authors.FirstOrDefault();
        @* SINGLE AUTHOR*@
        <div class="article-author article-author--solo">
            <ul class="article-author__list">
                <li>
                    @if (!string.IsNullOrWhiteSpace(author?.Image))
                    {
                        <div class="article-author__photo">
                            <img src="@author.Image">
                        </div>
                    }
                    <div class="article-author__solo-wrapper">
                        <span class="article-author__name">@author.Name</span>
                        <span class="article-author__contact">
                            @if (!string.IsNullOrEmpty(author.Twitter))
                            {
                                <a href="http://www.twitter.com/@author.Twitter" target="_blank">&#64;@author.Twitter</a>
                            }
                            @if (!string.IsNullOrEmpty(author.Email_Address))
                            {
                                <a href="mailto:@author.Email_Address">@author.Email_Address</a>
                            }
                        </span>
                    </div>
                </li>
            </ul>
        </div>

        @* END SINGLE AUTHOR *@

    }
    else if (Model.Authors.Count() > 1)
    {
        <div class="article-author">
            <ul class="article-author__list">
                @foreach (var author in Model.Authors.Take(3))
                {
                    <li>
                        <span class="article-author__name">@author.Name</span>
                        <span class="article-author__contact">
                            @if (!string.IsNullOrEmpty(author.Twitter))
                            {
                                <a href="http://www.twitter.com/@author.Twitter" target="_blank">&#64;@author.Twitter</a>
                            }
                            @if (!string.IsNullOrEmpty(author.Email_Address))
                            {
                                <a href="mailto:@author.Email_Address">@author.Email_Address</a>
                            }
                            </span>
                    </li>
                }
            </ul>
        </div>
    @* END MULTIPLE AUTHORs *@
    }

    @* If plugin created summary for article, it's the same as first paragraph... so hide summary. *@
    @if (!string.IsNullOrEmpty(Model.ListableSummary) && !Model.Body.Contains(Model.ListableSummary))
    {
        @* * * Executive Summary *@
        <div class="article-executive-summary">
            <h4>Executive Summary</h4>            
			@Html.Raw(Html.TokenTransform().RenderCompanyLink(x => x.ListableSummary))			
        </div>
        @* End Executive Summary  *@
    }

    @if (true)//Model.AccessLevel == EntitledAccessLevel.UnEntitled)
    {
        //This will show context for subscribe, login, register
        <div class="article-call-to-action">
            @{ Html.RenderPartial("../Article/UserCallToAction", Model.SignInViewModel); }
        </div>
    }



            @if (Model.Image != null)
            {
                @* * *  ARTICLE - FEATURED IMAGE
                    IIPP-117 *@
                <aside class="article-inline-image">
                    <img src="@Model.Image.ImageUrl">
                    @if (!string.IsNullOrEmpty(Model.Image.ImageSource))
                    {
                        <span class="article-inline-image__source">
                        @Model.FeaturedImageSource: @Model.Image.ImageSource
                        </span>
                    }
                    <span class="article-inline-image__caption">@Model.Image.ImageCaption</span>
                </aside>
                @* * *  END ARTICLE - FEATURED IMAGE *@
            }

            @Html.Raw(Html.TokenTransform().RenderTokenBody(x => x.Body, "../Article/_ArticleSidebar"))

        </div>

@*
    This element is a template for viewing tables on narrow screens
    On document ready, each article table gets one of these appended to it
    On narrow screens, the elements are visible so users can click/tap to view
*@
<div class="hidden-mobile-table-template js-mobile-table-template">
    <table class="article-table article-table--mobile-link" data-table-id="TABLEIDHERE">
        <thead>
            <tr>
                <th>Table</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="cell">
                    <p class="small">
                        <a class="js-mobile-table-link" href="#" target="_blank">
                            <svg class="article-table__expand-table">
                                <use xlink:href="/dist/img/svg-sprite.svg#expand-table"></use>
                            </svg>
                        </a>
                        <a class="js-mobile-table-link" href="#" target="_blank">View full table</a>
                    </p>
                </td>
            </tr>
        </tbody>
    </table>
</div>
                                                                                        