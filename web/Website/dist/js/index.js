(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var DragDropTouch,
    checkTouchType = true;
(function (DragDropTouch_1) {
    'use strict';
    /**
     * Object used to hold the data that is being dragged during drag and drop operations.
     *
     * It may hold one or more data items of different types. For more information about
     * drag and drop operations and data transfer objects, see
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer">HTML Drag and Drop API</a>.
     *
     * This object is created automatically by the @see:DragDropTouch singleton and is
     * accessible through the @see:dataTransfer property of all drag events.
     */
    var DataTransfer = (function () {
        function DataTransfer() {
            this._dropEffect = 'move';
            this._effectAllowed = 'all';
            this._data = {};
        }
        Object.defineProperty(DataTransfer.prototype, "dropEffect", {
            /**
             * Gets or sets the type of drag-and-drop operation currently selected.
             * The value must be 'none',  'copy',  'link', or 'move'.
             */
            get: function get() {
                return this._dropEffect;
            },
            set: function set(value) {
                this._dropEffect = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTransfer.prototype, "effectAllowed", {
            /**
             * Gets or sets the types of operations that are possible.
             * Must be one of 'none', 'copy', 'copyLink', 'copyMove', 'link',
             * 'linkMove', 'move', 'all' or 'uninitialized'.
             */
            get: function get() {
                return this._effectAllowed;
            },
            set: function set(value) {
                this._effectAllowed = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTransfer.prototype, "types", {
            /**
             * Gets an array of strings giving the formats that were set in the @see:dragstart event.
             */
            get: function get() {
                return Object.keys(this._data);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Removes the data associated with a given type.
         *
         * The type argument is optional. If the type is empty or not specified, the data
         * associated with all types is removed. If data for the specified type does not exist,
         * or the data transfer contains no data, this method will have no effect.
         *
         * @param type Type of data to remove.
         */
        DataTransfer.prototype.clearData = function (type) {
            if (type != null) {
                delete this._data[type];
            } else {
                this._data = null;
            }
        };
        /**
         * Retrieves the data for a given type, or an empty string if data for that type does
         * not exist or the data transfer contains no data.
         *
         * @param type Type of data to retrieve.
         */
        DataTransfer.prototype.getData = function (type) {
            return this._data[type] || '';
        };
        /**
         * Set the data for a given type.
         *
         * For a list of recommended drag types, please see
         * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Recommended_Drag_Types.
         *
         * @param type Type of data to add.
         * @param value Data to add.
         */
        DataTransfer.prototype.setData = function (type, value) {
            this._data[type] = value;
        };
        /**
         * Set the image to be used for dragging if a custom one is desired.
         *
         * @param img An image element to use as the drag feedback image.
         * @param offsetX The horizontal offset within the image.
         * @param offsetY The vertical offset within the image.
         */
        DataTransfer.prototype.setDragImage = function (img, offsetX, offsetY) {
            var ddt = DragDropTouch._instance;
            ddt._imgCustom = img;
            ddt._imgOffset = { x: offsetX, y: offsetY };
        };
        return DataTransfer;
    })();
    DragDropTouch_1.DataTransfer = DataTransfer;
    /**
     * Defines a class that adds support for touch-based HTML5 drag/drop operations.
     *
     * The @see:DragDropTouch class listens to touch events and raises the
     * appropriate HTML5 drag/drop events as if the events had been caused
     * by mouse actions.
     *
     * The purpose of this class is to enable using existing, standard HTML5
     * drag/drop code on mobile devices running IOS or Android.
     *
     * To use, include the DragDropTouch.js file on the page. The class will
     * automatically start monitoring touch events and will raise the HTML5
     * drag drop events (dragstart, dragenter, dragleave, drop, dragend) which
     * should be handled by the application.
     *
     * For details and examples on HTML drag and drop, see
     * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Drag_operations.
     */
    var DragDropTouch = (function () {
        /**
         * Initializes the single instance of the @see:DragDropTouch class.
         */
        function DragDropTouch() {
            this._lastClick = 0;
            // enforce singleton pattern
            if (DragDropTouch._instance) {
                throw 'DragDropTouch instance already created.';
            }
            // listen to touch events
            if ('ontouchstart' in document) {
                var d = document,
                    ts = this._touchstart.bind(this),
                    tm = this._touchmove.bind(this),
                    te = this._touchend.bind(this);
                d.addEventListener('touchstart', ts);
                d.addEventListener('touchmove', tm);
                d.addEventListener('touchend', te);
                d.addEventListener('touchcancel', te);
            }
        }
        /**
         * Gets a reference to the @see:DragDropTouch singleton.
         */
        DragDropTouch.getInstance = function () {
            return DragDropTouch._instance;
        };
        // ** event handlers
        DragDropTouch.prototype._touchstart = function (e) {
            var _this = this;
            if (this._shouldHandle(e)) {
                // raise double-click and prevent zooming
                if (Date.now() - this._lastClick < DragDropTouch._DBLCLICK) {
                    if (this._dispatchEvent(e, 'dblclick', e.target)) {
                        //e.preventDefault();
                        this._reset();
                        return;
                    }
                }
                // clear all variables
                this._reset();
                // get nearest draggable element
                var src = this._closestDraggable(e.target);
                if (src) {
                    // give caller a chance to handle the hover/move events
                    if (!this._dispatchEvent(e, 'mousemove', e.target) && !this._dispatchEvent(e, 'mousedown', e.target)) {
                        // get ready to start dragging
                        this._dragSource = src;
                        this._ptDown = this._getPoint(e);
                        this._lastTouch = e;
                        if (e.target.className == 'pull-left' || e.target.className == 'wd-15' || e.target.className == 'accordionImg' || e.target.className == 'accordionImg' || e.target.className == 'mobileMode' || e.target.className == 'mobileMode expanded' || e.target.className == 'mv') {
                            checkTouchType = true;
                            e.preventDefault();

                            if (e.target.className == 'accordionImg' || e.target.className == 'mobileMode' || e.target.className == 'mobileMode expanded') {
                                var $this = $(this),
                                    allPublications = $('#allPublicationsPan'),
                                    pPan = $this.closest('.publicationPan'),
                                    thead = pPan.find('thead'),
                                    tbody = pPan.find('tbody'),
                                    trs = tbody.find('tr'),
                                    disabledtrs = tbody.find('tr.disabled'),
                                    followlbl = thead.find('.followlbl'),
                                    followinglbl = thead.find('.followinglbl'),
                                    accStatusflwLbl = thead.find('.accordionStatus.flwLbl'),
                                    accStatusflwBtn = thead.find('.accordionStatus.flwBtn'),
                                    allpubpans = allPublications.find('.publicationPan'),
                                    pickTxt = thead.find('.pickTxt'),
                                    setFlag = true;

                                if ($this.hasClass('expanded')) {
                                    setFlag = false;
                                    tbody.addClass('tbodyhidden');
                                    //pPan.find('.smfollowingBtn').hide(); 
                                    accStatusflwLbl.removeClass('hideRow');
                                    accStatusflwBtn.addClass('hideRow');
                                    thead.find('.mtp').addClass('hideBtn');

                                    for (var i = 0; i < pickTxt.length; i++) {
                                        $(pickTxt[i]).closest('.accordionStatus').addClass('hideRow');
                                    }
                                    if (trs.length === disabledtrs.length) {
                                        followlbl.removeClass('hideBtn');
                                    } else {
                                        followinglbl.removeClass('hideBtn');
                                    }
                                    var position = $this.closest('.publicationPan').position();
                                    $(window).scrollTop(position.top - 40);
                                } else {
                                    allPublications.find('tbody').addClass('tbodyhidden');
                                    for (var i = 0; i < allpubpans.length; i++) {
                                        var eachPickTxt = $(allpubpans[i]).find('thead .pickTxt');
                                        for (var j = 0; j < eachPickTxt.length; j++) {
                                            $(eachPickTxt[j]).closest('.accordionStatus').addClass('hideRow');;
                                        }
                                    }
                                    thead.find('tr').removeClass('hidden');
                                    tbody.removeClass('tbodyhidden');
                                    pPan.find('.smfollowingBtn').show();
                                    for (var i = 0; i < pickTxt.length; i++) {
                                        $(pickTxt[i]).closest('.accordionStatus').removeClass('hideRow');
                                    }
                                    if (setFlag) {
                                        for (var i = 0; i < allpubpans.length; i++) {
                                            $(allpubpans[i]).find('.accordionStatus.flwLbl').removeClass('hideRow');
                                            $(allpubpans[i]).find('.accordionStatus.flwBtn').addClass('hideRow');
                                        }
                                    }
                                    accStatusflwLbl.addClass('hideRow');
                                    accStatusflwBtn.removeClass('hideRow');

                                    var position = $this.closest('.publicationPan').position();
                                    $(window).scrollTop(position.top - 40);

                                    for (var i = 0; i < allpubpans.length; i++) {
                                        var labelVal = $(allpubpans[i]).find('.firstrow .lableStatus').val();
                                        $('.' + labelVal, allpubpans[i]).removeClass('hideBtn');
                                    }
                                    thead.find('.mtp').addClass('hideBtn');
                                }
                            }
                        } else {
                            checkTouchType = false;
                            return false;
                        }

                        // show context menu if the user hasn't started dragging after a while
                        setTimeout(function () {
                            if (_this._dragSource == src && _this._img == null) {
                                if (_this._dispatchEvent(e, 'contextmenu', src)) {
                                    _this._reset();
                                }
                            }
                        }, DragDropTouch._CTXMENU);
                    }
                }
            }
        };
        DragDropTouch.prototype._touchmove = function (e) {
            if (checkTouchType) {
                if (this._shouldHandle(e)) {
                    // see if target wants to handle move
                    var target = this._getTarget(e);
                    if (this._dispatchEvent(e, 'mousemove', target)) {
                        this._lastTouch = e;
                        e.preventDefault();
                        return;
                    }
                    // start dragging
                    if (this._dragSource && !this._img) {
                        var delta = this._getDelta(e);
                        if (delta > DragDropTouch._THRESHOLD) {
                            this._dispatchEvent(e, 'dragstart', this._dragSource);
                            this._createImage(e);
                            this._dispatchEvent(e, 'dragenter', target);
                        }
                    }
                    // continue dragging
                    if (this._img) {
                        this._lastTouch = e;
                        e.preventDefault(); // prevent scrolling
                        if (target != this._lastTarget) {
                            this._dispatchEvent(this._lastTouch, 'dragleave', this._lastTarget);
                            this._dispatchEvent(e, 'dragenter', target);
                            this._lastTarget = target;
                        }
                        this._moveImage(e);
                        this._dispatchEvent(e, 'dragover', target);
                    }
                }
            }
        };
        DragDropTouch.prototype._touchend = function (e) {
            if (checkTouchType) {
                if (this._shouldHandle(e)) {
                    // see if target wants to handle up
                    if (this._dispatchEvent(this._lastTouch, 'mouseup', e.target)) {
                        e.preventDefault();
                        return;
                    }
                    // user clicked the element but didn't drag, so clear the source and simulate a click
                    if (!this._img) {
                        this._dragSource = null;
                        this._dispatchEvent(this._lastTouch, 'click', e.target);
                        this._lastClick = Date.now();
                    }
                    // finish dragging
                    this._destroyImage();
                    if (this._dragSource) {
                        if (e.type.indexOf('cancel') < 0) {
                            this._dispatchEvent(this._lastTouch, 'drop', this._lastTarget);
                        }
                        this._dispatchEvent(this._lastTouch, 'dragend', this._dragSource);
                        this._reset();
                    }
                }
            }
        };
        // ** utilities
        // ignore events that have been handled or that involve more than one touch
        DragDropTouch.prototype._shouldHandle = function (e) {
            return e && !e.defaultPrevented && e.touches && e.touches.length < 2;
        };
        // clear all members
        DragDropTouch.prototype._reset = function () {
            this._destroyImage();
            this._dragSource = null;
            this._lastTouch = null;
            this._lastTarget = null;
            this._ptDown = null;
            this._dataTransfer = new DataTransfer();
        };
        // get point for a touch event
        DragDropTouch.prototype._getPoint = function (e, page) {
            if (e && e.touches) {
                e = e.touches[0];
            }
            return { x: page ? e.pageX : e.clientX, y: page ? e.pageY : e.clientY };
        };
        // get distance between the current touch event and the first one
        DragDropTouch.prototype._getDelta = function (e) {
            var p = this._getPoint(e);
            return Math.abs(p.x - this._ptDown.x) + Math.abs(p.y - this._ptDown.y);
        };
        // get the element at a given touch event
        DragDropTouch.prototype._getTarget = function (e) {
            var pt = this._getPoint(e),
                el = document.elementFromPoint(pt.x, pt.y);
            while (el && getComputedStyle(el).pointerEvents == 'none') {
                el = el.parentElement;
            }
            return el;
        };
        // create drag image from source element
        DragDropTouch.prototype._createImage = function (e) {
            // just in case...
            if (this._img) {
                this._destroyImage();
            }
            // create drag image from custom element or drag source
            var src = this._imgCustom || this._dragSource;
            this._img = src.cloneNode(true);
            this._copyStyle(src, this._img);
            this._img.style.top = this._img.style.left = '-9999px';
            // if creating from drag source, apply offset and opacity
            if (!this._imgCustom) {
                var rc = src.getBoundingClientRect(),
                    pt = this._getPoint(e);
                this._imgOffset = { x: pt.x - rc.left, y: pt.y - rc.top };
                this._img.style.opacity = DragDropTouch._OPACITY.toString();
            }
            // add image to document
            this._moveImage(e);
            document.body.appendChild(this._img);
        };
        // dispose of drag image element
        DragDropTouch.prototype._destroyImage = function () {
            if (this._img && this._img.parentElement) {
                this._img.parentElement.removeChild(this._img);
            }
            this._img = null;
            this._imgCustom = null;
        };
        // move the drag image element
        DragDropTouch.prototype._moveImage = function (e) {
            var _this = this;
            requestAnimationFrame(function () {
                var pt = _this._getPoint(e, true),
                    s = _this._img.style;
                s.position = 'absolute';
                s.pointerEvents = 'none';
                s.zIndex = '999999';
                s.left = Math.round(pt.x - _this._imgOffset.x) + 'px';
                s.top = Math.round(pt.y - _this._imgOffset.y) + 'px';
            });
        };
        // copy properties from an object to another
        DragDropTouch.prototype._copyProps = function (dst, src, props) {
            for (var i = 0; i < props.length; i++) {
                var p = props[i];
                dst[p] = src[p];
            }
        };
        DragDropTouch.prototype._copyStyle = function (src, dst) {
            // remove potentially troublesome attributes
            DragDropTouch._rmvAtts.forEach(function (att) {
                dst.removeAttribute(att);
            });
            // copy canvas content
            if (src instanceof HTMLCanvasElement) {
                var cSrc = src,
                    cDst = dst;
                cDst.width = cSrc.width;
                cDst.height = cSrc.height;
                cDst.getContext('2d').drawImage(cSrc, 0, 0);
            }
            // copy style
            var cs = getComputedStyle(src);
            for (var i = 0; i < cs.length; i++) {
                var key = cs[i];
                dst.style[key] = cs[key];
            }
            dst.style.pointerEvents = 'none';
            // and repeat for all children
            for (var i = 0; i < src.children.length; i++) {
                this._copyStyle(src.children[i], dst.children[i]);
            }
        };
        DragDropTouch.prototype._dispatchEvent = function (e, type, target) {
            if (e && target) {
                var evt = document.createEvent('Event'),
                    t = e.touches ? e.touches[0] : e;
                evt.initEvent(type, true, true);
                evt.button = 0;
                evt.which = evt.buttons = 1;
                this._copyProps(evt, e, DragDropTouch._kbdProps);
                this._copyProps(evt, t, DragDropTouch._ptProps);
                evt.dataTransfer = this._dataTransfer;
                target.dispatchEvent(evt);
                return evt.defaultPrevented;
            }
            return false;
        };
        // gets an element's closest draggable ancestor
        DragDropTouch.prototype._closestDraggable = function (e) {
            for (; e; e = e.parentElement) {
                if (e.hasAttribute('draggable')) {
                    return e;
                }
            }
            return null;
        };
        /*private*/DragDropTouch._instance = new DragDropTouch(); // singleton
        // constants
        DragDropTouch._THRESHOLD = 5; // pixels to move before drag starts
        DragDropTouch._OPACITY = 0.5; // drag image opacity
        DragDropTouch._DBLCLICK = 500; // max ms between clicks in a double click
        DragDropTouch._CTXMENU = 900; // ms to hold before raising 'contextmenu' event
        // copy styles/attributes from drag source to drag image element
        DragDropTouch._rmvAtts = 'id,class,style,draggable'.split(',');
        // synthesize and dispatch an event
        // returns true if the event has been handled (e.preventDefault == true)
        DragDropTouch._kbdProps = 'altKey,ctrlKey,metaKey,shiftKey'.split(',');
        DragDropTouch._ptProps = 'pageX,pageY,clientX,clientY,screenX,screenY'.split(',');
        return DragDropTouch;
    })();
    DragDropTouch_1.DragDropTouch = DragDropTouch;
})(DragDropTouch || (DragDropTouch = {}));


},{}],2:[function(require,module,exports){
/**
 * if this popup is outside of it's parent, nudge it back in
 * @param  {element} popup: DOM elmenet of the popup to be placed
 * @param  {number} top: The top coordinate of where the popup should point
 * @param  {number} left: The left coordinate of where the popup should point
 * @param  {number} offset: an offet to be added to top/bottom or left/right
 * @param  {string} triangle: "top", "right", "bottom", or "left"
 * @param  {number} triangleSize: used to calculate the position
 * @param  {boolean} flipToContain: will flip the popup if it goes outside the parent container
 * @return {object} {
 *     realTop       : with no offset adjustment, the popup should go here, based on triangleSide
 *     realLeft      : ^^
 *     popupTop      : with adjustment when the popup butts up agains the parent
 *     popupLeft     : ^^
 *     overflow      : "top", "right", "bottom", "left".  Positive numbers are overflows
 *     triangleOffset: Amount the triangle needs to move to be on the dot, relative from 50%
 *     triangleSide  : Will be the same as passed in triangle, unless it fliped via flipToContain
 * }
 * use popupTop, popupLeft, and triangleOffset to position the popup
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
function calculatePopupOffsets(_ref) {
    var popup = _ref.popup;
    var top = _ref.top;
    var left = _ref.left;
    var _ref$offset = _ref.offset;
    var offset = _ref$offset === undefined ? 0 : _ref$offset;
    var _ref$triangle = _ref.triangle;
    var triangle = _ref$triangle === undefined ? "bottom" : _ref$triangle;
    var triangleSize = _ref.triangleSize;
    var _ref$flipToContain = _ref.flipToContain;
    var flipToContain = _ref$flipToContain === undefined ? false : _ref$flipToContain;

    // make a copy of this
    var triangleSide = triangle;

    // get the width and height of this popup from the DOM
    var width = popup.offsetWidth;
    var height = popup.offsetHeight;

    // get the width/height of the parent container div
    var parent = popup.parentNode;
    var parentWidth = parent.clientWidth;
    var parentHeight = parent.offsetHeight; // client height of body will only be the viewport height

    // common calculations
    var popupOnTop = top - height - triangleSize + offset;
    var popupOnBottom = top + triangleSize - offset;
    var popupOnLeft = left - width - triangleSize + offset;
    var popupOnRight = left + triangleSize - offset;

    // calculate where the top of the popup should be based on top/left
    var realTop = triangleSide === "bottom" ? popupOnTop : triangleSide === "top" ? popupOnBottom : top - height / 2; //  left or right

    var realLeft = triangleSide === "right" ? popupOnLeft : triangleSide === "left" ? popupOnRight : left - width / 2; // center

    // the amounts that this popup is outside of it's parent.
    var overflow = {
        top: -realTop,
        right: -(parentWidth - (realLeft + width)),
        bottom: -(parentHeight - (realTop + height)),
        left: -realLeft
    };

    // calculate where the popup should go
    // start with popupLeft as realLeft before nudging
    var popupTop = realTop;
    var popupLeft = realLeft;
    var triangleOffset = 0;

    // if there is an overflow on the right, adjust the popup and triangle position
    if (overflow.right > 0) {
        if (triangleSide === "top" || triangleSide === "bottom") {
            popupLeft = realLeft - overflow.right;
            triangleOffset = overflow.right;
        }

        // for left, flip the popup
        if (triangleSide === "left" && flipToContain) {
            triangleSide = "right";
            popupLeft = popupOnLeft;
        }
    }

    // if there is an overflow on the left, adjust the popup and triangle position
    if (overflow.left > 0) {
        if (triangleSide === "top" || triangleSide === "bottom") {
            popupLeft = realLeft + overflow.left;
            triangleOffset = -overflow.left;
        }

        // for right, flip the popup
        if (triangleSide === "right" && flipToContain) {
            triangleSide = "left";
            popupLeft = popupOnRight;
        }
    }

    // if there is an overflow on the bottom
    if (overflow.bottom > 0) {
        // for left/right, butt the popup against the bottom
        if (triangleSide === "left" || triangleSide === "right") {
            popupTop = realTop - overflow.bottom;
            triangleOffset = overflow.bottom;
        }
        // for top, flip the popup
        if (triangleSide === "top" && flipToContain) {
            triangleSide = "bottom";
            popupTop = popupOnTop;
        }
    }

    // if there is an overflow on the top
    if (overflow.top > 0) {

        if (triangleSide === "left" || triangleSide === "right") {
            popupTop = realTop + overflow.top;
            triangleOffset = -overflow.top;
        }

        // for bottom, flip the popup
        if (triangleSide === "bottom" && flipToContain) {
            triangleSide = "top";
            popupTop = popupOnBottom;
        }
    }

    // return all the measurements
    return {
        realTop: realTop, realLeft: realLeft, popupTop: popupTop, popupLeft: popupLeft, overflow: overflow, triangleOffset: triangleOffset, triangleSide: triangleSide
    };
}

exports["default"] = calculatePopupOffsets;
module.exports = exports["default"];

},{}],3:[function(require,module,exports){
"use strict";

(function e(t, n, r) {
	function s(o, u) {
		if (!n[o]) {
			if (!t[o]) {
				var a = typeof require == "function" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw (f.code = "MODULE_NOT_FOUND", f);
			}var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
				var n = t[o][1][e];return s(n ? n : e);
			}, l, l.exports, e, t, n, r);
		}return n[o].exports;
	}var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) s(r[o]);return s;
})({ 1: [function (require, module, exports) {
		/**
   * @name Owl Carousel - code name Phenix
   * @author Bartosz Wojciechowski
   * @release 2014
   * Licensed under MIT
   * 
   * @version 2.0.0-beta.1.8
   * @versionNotes Not compatibile with Owl Carousel <2.0.0
   */

		/*
  
  {0,0}
   )_)
   ""
  
  To do:
  
  * Lazy Load Icon
  * prevent animationend bubling
  * itemsScaleUp 
  * Test Zepto
  
  Callback events list:
  
  onInitBefore
  onInitAfter
  onResponsiveBefore
  onResponsiveAfter
  onTransitionStart
  onTransitionEnd
  onTouchStart
  onTouchEnd
  onChangeState
  onLazyLoaded
  onVideoPlay
  onVideoStop
  
  Custom events list:
  
  next.owl
  prev.owl
  goTo.owl
  jumpTo.owl
  addItem.owl
  removeItem.owl
  refresh.owl
  play.owl
  stop.owl
  stopVideo.owl
  
  */

		'use strict';

		;(function ($, window, document, undefined) {

			var defaults = {
				items: 3,
				loop: false,
				center: false,

				mouseDrag: true,
				touchDrag: true,
				pullDrag: true,
				freeDrag: false,

				margin: 0,
				stagePadding: 0,

				merge: false,
				mergeFit: true,
				autoWidth: false,
				autoHeight: false,

				startPosition: 0,
				URLhashListener: false,

				nav: false,
				navRewind: true,
				navText: ['prev', 'next'],
				slideBy: 1,
				dots: true,
				dotsEach: false,
				dotData: false,

				lazyLoad: false,
				lazyContent: false,

				autoplay: false,
				autoplayTimeout: 5000,
				autoplayHoverPause: false,

				smartSpeed: 250,
				fluidSpeed: false,
				autoplaySpeed: false,
				navSpeed: false,
				dotsSpeed: false,
				dragEndSpeed: false,

				responsive: {},
				responsiveRefreshRate: 200,
				responsiveBaseElement: window,
				responsiveClass: false,

				video: false,
				videoHeight: false,
				videoWidth: false,

				animateOut: false,
				animateIn: false,

				fallbackEasing: 'swing',

				callbacks: false,
				info: false,

				nestedItemSelector: false,
				itemElement: 'div',
				stageElement: 'div',

				//Classes and Names
				themeClass: 'owl-theme',
				baseClass: 'owl-carousel',
				itemClass: 'owl-item',
				centerClass: 'center',
				activeClass: 'active',
				navContainerClass: 'owl-nav',
				navClass: ['owl-prev', 'owl-next'],
				controlsClass: 'owl-controls',
				dotClass: 'owl-dot',
				dotsClass: 'owl-dots',
				autoHeightClass: 'owl-height'

			};

			// Reference to DOM elements
			// Those with $ sign are jQuery objects

			var dom = {
				el: null, // main element
				$el: null, // jQuery main element
				stage: null, // stage
				$stage: null, // jQuery stage
				oStage: null, // outer stage
				$oStage: null, // $ outer stage
				$items: null, // all items, clones and originals included
				$oItems: null, // original items
				$cItems: null, // cloned items only
				$cc: null,
				$navPrev: null,
				$navNext: null,
				$page: null,
				$nav: null,
				$content: null
			};

			/**
    * Variables
    * @since 2.0.0
    */

			// Only for development process

			// Widths

			var width = {
				el: 0,
				stage: 0,
				item: 0,
				prevWindow: 0,
				cloneLast: 0
			};

			// Numbers

			var num = {
				items: 0,
				oItems: 0,
				cItems: 0,
				active: 0,
				merged: [],
				nav: [],
				allPages: 0
			};

			// Positions

			var pos = {
				start: 0,
				max: 0,
				maxValue: 0,
				prev: 0,
				current: 0,
				currentAbs: 0,
				currentPage: 0,
				stage: 0,
				items: [],
				lsCurrent: 0
			};

			// Drag/Touches

			var drag = {
				start: 0,
				startX: 0,
				startY: 0,
				current: 0,
				currentX: 0,
				currentY: 0,
				offsetX: 0,
				offsetY: 0,
				distance: null,
				startTime: 0,
				endTime: 0,
				updatedX: 0,
				targetEl: null
			};

			// Speeds

			var speed = {
				onDragEnd: 300,
				nav: 300,
				css2speed: 0

			};

			// States

			var state = {
				isTouch: false,
				isScrolling: false,
				isSwiping: false,
				direction: false,
				inMotion: false,
				autoplay: false,
				lazyContent: false
			};

			// Event functions references

			var e = {
				_onDragStart: null,
				_onDragMove: null,
				_onDragEnd: null,
				_transitionEnd: null,
				_resizer: null,
				_responsiveCall: null,
				_goToLoop: null,
				_checkVisibile: null,
				_autoplay: null,
				_pause: null,
				_play: null,
				_stop: null
			};

			function Owl(element, options) {

				// add basic Owl information to dom element

				element.owlCarousel = {
					'name': 'Owl Carousel',
					'author': 'Bartosz Wojciechowski',
					'version': '2.0.0-beta.1.8',
					'released': '03.05.2014'
				};

				// Attach variables to object
				// Only for development process

				this.options = $.extend({}, defaults, options);
				this._options = $.extend({}, defaults, options);
				this.dom = $.extend({}, dom);
				this.width = $.extend({}, width);
				this.num = $.extend({}, num);
				this.pos = $.extend({}, pos);
				this.drag = $.extend({}, drag);
				this.speed = $.extend({}, speed);
				this.state = $.extend({}, state);
				this.e = $.extend({}, e);

				this.dom.el = element;
				this.dom.$el = $(element);
				this.init();
			}

			/**
    * init
    * @since 2.0.0
    */

			Owl.prototype.init = function () {

				this.fireCallback('onInitBefore');

				//Add base class
				if (!this.dom.$el.hasClass(this.options.baseClass)) {
					this.dom.$el.addClass(this.options.baseClass);
				}

				//Add theme class
				if (!this.dom.$el.hasClass(this.options.themeClass)) {
					this.dom.$el.addClass(this.options.themeClass);
				}

				//Add theme class
				if (this.options.rtl) {
					this.dom.$el.addClass('owl-rtl');
				}

				// Check support
				this.browserSupport();

				// Sort responsive items in array
				this.sortOptions();

				// Update options.items on given size
				this.setResponsiveOptions();

				if (this.options.autoWidth && this.state.imagesLoaded !== true) {
					var imgs = this.dom.$el.find('img');
					if (imgs.length) {
						this.preloadAutoWidthImages(imgs);
						return false;
					}
				}

				// Get and store window width
				// iOS safari likes to trigger unnecessary resize event
				this.width.prevWindow = this.windowWidth();

				// create stage object
				this.createStage();

				// Append local content
				this.fetchContent();

				// attach generic events
				this.eventsCall();

				// attach custom control events
				this.addCustomEvents();

				// attach generic events
				this.internalEvents();

				this.dom.$el.addClass('owl-loading');
				this.refresh(true);
				this.dom.$el.removeClass('owl-loading').addClass('owl-loaded');
				this.fireCallback('onInitAfter');
			};

			/**
    * sortOptions
    * @desc Sort responsive sizes 
    * @since 2.0.0
    */

			Owl.prototype.sortOptions = function () {

				var resOpt = this.options.responsive;
				this.responsiveSorted = {};
				var keys = [],
				    i,
				    j,
				    k;
				for (i in resOpt) {
					keys.push(i);
				}

				keys = keys.sort(function (a, b) {
					return a - b;
				});

				for (j = 0; j < keys.length; j++) {
					k = keys[j];
					this.responsiveSorted[k] = resOpt[k];
				}
			};

			/**
    * setResponsiveOptions
    * @since 2.0.0
    */

			Owl.prototype.setResponsiveOptions = function () {
				if (this.options.responsive === false) {
					return false;
				}

				var width = this.windowWidth();
				var resOpt = this.options.responsive;
				var i, j, k, minWidth;

				// overwrite non resposnive options
				for (k in this._options) {
					if (k !== 'responsive') {
						this.options[k] = this._options[k];
					}
				}

				// find responsive width
				for (i in this.responsiveSorted) {
					if (i <= width) {
						minWidth = i;
						// set responsive options
						for (j in this.responsiveSorted[minWidth]) {
							this.options[j] = this.responsiveSorted[minWidth][j];
						}
					}
				}
				this.num.breakpoint = minWidth;

				// Responsive Class
				if (this.options.responsiveClass) {
					this.dom.$el.attr('class', function (i, c) {
						return c.replace(/\b owl-responsive-\S+/g, '');
					}).addClass('owl-responsive-' + minWidth);
				}
			};

			/**
    * optionsLogic
    * @desc Update option logic if necessery
    * @since 2.0.0
    */

			Owl.prototype.optionsLogic = function () {
				// Toggle Center class
				this.dom.$el.toggleClass('owl-center', this.options.center);

				// Scroll per - 'page' option will scroll per visible items number
				// You can set this to any other number below visible items.
				if (this.options.slideBy && this.options.slideBy === 'page') {
					this.options.slideBy = this.options.items;
				} else if (this.options.slideBy > this.options.items) {
					this.options.slideBy = this.options.items;
				}

				// if items number is less than in body
				if (this.options.loop && this.num.oItems < this.options.items) {
					this.options.loop = false;
				}

				if (this.num.oItems <= this.options.items) {
					this.options.navRewind = false;
				}

				if (this.options.autoWidth) {
					this.options.stagePadding = false;
					this.options.dotsEach = 1;
					this.options.merge = false;
				}
				if (this.state.lazyContent) {
					this.options.loop = false;
					this.options.merge = false;
					this.options.dots = false;
					this.options.freeDrag = false;
					this.options.lazyContent = true;
				}

				if ((this.options.animateIn || this.options.animateOut) && this.options.items === 1 && this.support3d) {
					this.state.animate = true;
				} else {
					this.state.animate = false;
				}
			};

			/**
    * createStage
    * @desc Create stage and Outer-stage elements
    * @since 2.0.0
    */

			Owl.prototype.createStage = function () {
				var oStage = document.createElement('div');
				var stage = document.createElement(this.options.stageElement);

				oStage.className = 'owl-stage-outer';
				stage.className = 'owl-stage';

				oStage.appendChild(stage);
				this.dom.el.appendChild(oStage);

				this.dom.oStage = oStage;
				this.dom.$oStage = $(oStage);
				this.dom.stage = stage;
				this.dom.$stage = $(stage);

				oStage = null;
				stage = null;
			};

			/**
    * createItem
    * @desc Create item container
    * @since 2.0.0
    */

			Owl.prototype.createItem = function () {
				var item = document.createElement(this.options.itemElement);
				item.className = this.options.itemClass;
				return item;
			};

			/**
    * fetchContent
    * @since 2.0.0
    */

			Owl.prototype.fetchContent = function (extContent) {
				if (extContent) {
					this.dom.$content = extContent instanceof jQuery ? extContent : $(extContent);
				} else if (this.options.nestedItemSelector) {
					this.dom.$content = this.dom.$el.find('.' + this.options.nestedItemSelector).not('.owl-stage-outer');
				} else {
					this.dom.$content = this.dom.$el.children().not('.owl-stage-outer');
				}
				// content length
				this.num.oItems = this.dom.$content.length;

				// init Structure
				if (this.num.oItems !== 0) {
					this.initStructure();
				}
			};

			/**
    * initStructure
    * @param [refresh] - if refresh and not lazyContent then dont create normal structure
    * @since 2.0.0
    */

			Owl.prototype.initStructure = function () {

				// lazyContent needs at least 3*items

				if (this.options.lazyContent && this.num.oItems >= this.options.items * 3) {
					this.state.lazyContent = true;
				} else {
					this.state.lazyContent = false;
				}

				if (this.state.lazyContent) {

					// start position
					this.pos.currentAbs = this.options.items;

					//remove lazy content from DOM
					this.dom.$content.remove();
				} else {
					// create normal structure
					this.createNormalStructure();
				}
			};

			/**
    * createNormalStructure
    * @desc Create normal structure for small/mid weight content
    * @since 2.0.0
    */

			Owl.prototype.createNormalStructure = function () {
				for (var i = 0; i < this.num.oItems; i++) {
					// fill 'owl-item' with content
					var item = this.fillItem(this.dom.$content, i);
					// append into stage
					this.dom.$stage.append(item);
				}
				this.dom.$content = null;
			};

			/**
    * createCustomStructure
    * @since 2.0.0
    */

			Owl.prototype.createCustomStructure = function (howManyItems) {
				for (var i = 0; i < howManyItems; i++) {
					var emptyItem = this.createItem();
					var item = $(emptyItem);

					this.setData(item, false);
					this.dom.$stage.append(item);
				}
			};

			/**
    * createLazyContentStructure
    * @desc Create lazyContent structure for large content and better mobile experience
    * @since 2.0.0
    */

			Owl.prototype.createLazyContentStructure = function (refresh) {
				if (!this.state.lazyContent) {
					return false;
				}

				// prevent recreate - to do
				if (refresh && this.dom.$stage.children().length === this.options.items * 3) {
					return false;
				}
				// remove items from stage
				this.dom.$stage.empty();

				// create custom structure
				this.createCustomStructure(3 * this.options.items);
			};

			/**
    * fillItem
    * @desc Fill empty item container with provided content
    * @since 2.0.0
    * @param [content] - string/$dom - passed owl-item
    * @param [i] - index in jquery object
    * return $ new object
    */

			Owl.prototype.fillItem = function (content, i) {
				var emptyItem = this.createItem();
				var c = content[i] || content;
				// set item data
				var traversed = this.traversContent(c);
				this.setData(emptyItem, false, traversed);
				return $(emptyItem).append(c);
			};

			/**
    * traversContent
    * @since 2.0.0
    * @param [c] - content
    * return object
    */

			Owl.prototype.traversContent = function (c) {
				var $c = $(c),
				    dotValue,
				    hashValue;
				if (this.options.dotData) {
					dotValue = $c.find('[data-dot]').andSelf().data('dot');
				}
				// update URL hash
				if (this.options.URLhashListener) {
					hashValue = $c.find('[data-hash]').andSelf().data('hash');
				}
				return {
					dot: dotValue || false,
					hash: hashValue || false
				};
			};

			/**
    * setData
    * @desc Set item jQuery Data 
    * @since 2.0.0
    * @param [item] - dom - passed owl-item
    * @param [cloneObj] - $dom - passed clone item
    */

			Owl.prototype.setData = function (item, cloneObj, traversed) {
				var dot, hash;
				if (traversed) {
					dot = traversed.dot;
					hash = traversed.hash;
				}
				var itemData = {
					index: false,
					indexAbs: false,
					posLeft: false,
					clone: false,
					active: false,
					loaded: false,
					lazyLoad: false,
					current: false,
					width: false,
					center: false,
					page: false,
					hasVideo: false,
					playVideo: false,
					dot: dot,
					hash: hash
				};

				// copy itemData to cloned item

				if (cloneObj) {
					itemData = $.extend({}, itemData, cloneObj.data('owl-item'));
				}

				$(item).data('owl-item', itemData);
			};

			/**
    * updateLocalContent
    * @since 2.0.0
    */

			Owl.prototype.updateLocalContent = function () {
				this.dom.$oItems = this.dom.$stage.find('.' + this.options.itemClass).filter(function () {
					return $(this).data('owl-item').clone === false;
				});

				this.num.oItems = this.dom.$oItems.length;
				//update index on original items

				for (var k = 0; k < this.num.oItems; k++) {
					var item = this.dom.$oItems.eq(k);
					item.data('owl-item').index = k;
				}
			};

			/**
    * checkVideoLinks
    * @desc Check if for any videos links
    * @since 2.0.0
    */

			Owl.prototype.checkVideoLinks = function () {
				if (!this.options.video) {
					return false;
				}
				var videoEl, item;

				for (var i = 0; i < this.num.items; i++) {

					item = this.dom.$items.eq(i);
					if (item.data('owl-item').hasVideo) {
						continue;
					}

					videoEl = item.find('.owl-video');
					if (videoEl.length) {
						this.state.hasVideos = true;
						this.dom.$items.eq(i).data('owl-item').hasVideo = true;
						videoEl.css('display', 'none');
						this.getVideoInfo(videoEl, item);
					}
				}
			};

			/**
    * getVideoInfo
    * @desc Get Video ID and Type (YouTube/Vimeo only)
    * @since 2.0.0
    */

			Owl.prototype.getVideoInfo = function (videoEl, item) {

				var info,
				    type,
				    id,
				    vimeoId = videoEl.data('vimeo-id'),
				    youTubeId = videoEl.data('youtube-id'),
				    width = videoEl.data('width') || this.options.videoWidth,
				    height = videoEl.data('height') || this.options.videoHeight,
				    url = videoEl.attr('href');

				if (vimeoId) {
					type = 'vimeo';
					id = vimeoId;
				} else if (youTubeId) {
					type = 'youtube';
					id = youTubeId;
				} else if (url) {
					id = url.match(/(http:|https:|)\/\/(player.|www.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com))\/(video\/|embed\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/);

					if (id[3].indexOf('youtu') > -1) {
						type = 'youtube';
					} else if (id[3].indexOf('vimeo') > -1) {
						type = 'vimeo';
					}
					id = id[6];
				} else {
					throw new Error('Missing video link.');
				}

				item.data('owl-item').videoType = type;
				item.data('owl-item').videoId = id;
				item.data('owl-item').videoWidth = width;
				item.data('owl-item').videoHeight = height;

				info = {
					type: type,
					id: id
				};

				// Check dimensions
				var dimensions = width && height ? 'style="width:' + width + 'px;height:' + height + 'px;"' : '';

				// wrap video content into owl-video-wrapper div
				videoEl.wrap('<div class="owl-video-wrapper"' + dimensions + '></div>');

				this.createVideoTn(videoEl, info);
			};

			/**
    * createVideoTn
    * @desc Create Video Thumbnail
    * @since 2.0.0
    */

			Owl.prototype.createVideoTn = function (videoEl, info) {

				var tnLink, icon, height;
				var customTn = videoEl.find('img');
				var srcType = 'src';
				var lazyClass = '';
				var that = this;

				if (this.options.lazyLoad) {
					srcType = 'data-src';
					lazyClass = 'owl-lazy';
				}

				// Custom thumbnail

				if (customTn.length) {
					addThumbnail(customTn.attr(srcType));
					customTn.remove();
					return false;
				}

				function addThumbnail(tnPath) {
					icon = '<div class="owl-video-play-icon"></div>';

					if (that.options.lazyLoad) {
						tnLink = '<div class="owl-video-tn ' + lazyClass + '" ' + srcType + '="' + tnPath + '"></div>';
					} else {
						tnLink = '<div class="owl-video-tn" style="opacity:1;background-image:url(' + tnPath + ')"></div>';
					}
					videoEl.after(tnLink);
					videoEl.after(icon);
				}

				if (info.type === 'youtube') {
					var path = "http://img.youtube.com/vi/" + info.id + "/hqdefault.jpg";
					addThumbnail(path);
				} else if (info.type === 'vimeo') {
					$.ajax({
						type: 'GET',
						url: 'http://vimeo.com/api/v2/video/' + info.id + '.json',
						jsonp: 'callback',
						dataType: 'jsonp',
						success: function success(data) {
							var path = data[0].thumbnail_large;
							addThumbnail(path);
							if (that.options.loop) {
								that.updateItemState();
							}
						}
					});
				}
			};

			/**
    * stopVideo
    * @since 2.0.0
    */

			Owl.prototype.stopVideo = function () {
				this.fireCallback('onVideoStop');
				var item = this.dom.$items.eq(this.state.videoPlayIndex);
				item.find('.owl-video-frame').remove();
				item.removeClass('owl-video-playing');
				this.state.videoPlay = false;
			};

			/**
    * playVideo
    * @since 2.0.0
    */

			Owl.prototype.playVideo = function (ev) {
				this.fireCallback('onVideoPlay');

				if (this.state.videoPlay) {
					this.stopVideo();
				}
				var videoLink,
				    videoWrap,
				    target = $(ev.target || ev.srcElement),
				    item = target.closest('.' + this.options.itemClass);

				var videoType = item.data('owl-item').videoType,
				    id = item.data('owl-item').videoId,
				    width = item.data('owl-item').videoWidth || Math.floor(item.data('owl-item').width - this.options.margin),
				    height = item.data('owl-item').videoHeight || this.dom.$stage.height();

				if (videoType === 'youtube') {
					videoLink = "<iframe width=\"" + width + "\" height=\"" + height + "\" src=\"http://www.youtube.com/embed/" + id + "?autoplay=1&v=" + id + "\" frameborder=\"0\" allowfullscreen></iframe>";
				} else if (videoType === 'vimeo') {
					videoLink = '<iframe src="http://player.vimeo.com/video/' + id + '?autoplay=1" width="' + width + '" height="' + height + '" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>';
				}

				item.addClass('owl-video-playing');
				this.state.videoPlay = true;
				this.state.videoPlayIndex = item.data('owl-item').indexAbs;

				videoWrap = $('<div style="height:' + height + 'px; width:' + width + 'px" class="owl-video-frame">' + videoLink + '</div>');
				target.after(videoWrap);
			};

			/**
    * loopClone
    * @desc Make a clones for infinity loop
    * @since 2.0.0
    */

			Owl.prototype.loopClone = function () {
				if (!this.options.loop || this.state.lazyContent || this.num.oItems < this.options.items) {
					return false;
				}

				var firstClone,
				    lastClone,
				    i,
				    num = this.options.items,
				    lastNum = this.num.oItems - 1;

				// if neighbour margin then add one more duplicat
				if (this.options.stagePadding && this.options.items === 1) {
					num += 1;
				}
				this.num.cItems = num * 2;

				for (i = 0; i < num; i++) {
					// Clone item
					var first = this.dom.$oItems.eq(i).clone(true, true);
					var last = this.dom.$oItems.eq(lastNum - i).clone(true, true);
					firstClone = $(first[0]).addClass('cloned');
					lastClone = $(last[0]).addClass('cloned');

					// set clone data
					// Somehow data has reference to same data id in cash

					this.setData(firstClone[0], first);
					this.setData(lastClone[0], last);

					firstClone.data('owl-item').clone = true;
					lastClone.data('owl-item').clone = true;

					this.dom.$stage.append(firstClone);
					this.dom.$stage.prepend(lastClone);

					firstClone = lastClone = null;
				}

				this.dom.$cItems = this.dom.$stage.find('.' + this.options.itemClass).filter(function () {
					return $(this).data('owl-item').clone === true;
				});
			};

			/**
    * reClone
    * @desc Update Cloned elements
    * @since 2.0.0
    */

			Owl.prototype.reClone = function () {
				// remove cloned items
				if (this.dom.$cItems !== null) {
					// && (this.num.oItems !== 0 && this.num.oItems <= this.options.items)){
					this.dom.$cItems.remove();
					this.dom.$cItems = null;
					this.num.cItems = 0;
				}

				if (!this.options.loop) {
					return;
				}
				// generete new elements
				this.loopClone();
			};

			/**
    * calculate
    * @desc Update item index data
    * @since 2.0.0
    */

			Owl.prototype.calculate = function () {

				var i,
				    j,
				    k,
				    dist,
				    posLeft = 0,
				    fullWidth = 0;

				// element width minus neighbour
				this.width.el = this.dom.$el.width() - this.options.stagePadding * 2;

				//to check
				this.width.view = this.dom.$el.width();

				// calculate width minus addition margins
				var elMinusMargin = this.width.el - this.options.margin * (this.options.items === 1 ? 0 : this.options.items - 1);

				// calculate element width and item width
				this.width.el = this.width.el + this.options.margin;
				this.width.item = (elMinusMargin / this.options.items + this.options.margin).toFixed(3);

				this.dom.$items = this.dom.$stage.find('.owl-item');
				this.num.items = this.dom.$items.length;

				//change to autoWidths
				if (this.options.autoWidth) {
					this.dom.$items.css('width', '');
				}

				// Set grid array
				this.pos.items = [];
				this.num.merged = [];
				this.num.nav = [];

				// item distances
				if (this.options.rtl) {
					dist = this.options.center ? -(this.width.el / 2) : 0;
				} else {
					dist = this.options.center ? this.width.el / 2 : 0;
				}

				this.width.mergeStage = 0;

				// Calculate items positions
				for (i = 0; i < this.num.items; i++) {

					// check merged items

					if (this.options.merge) {
						var mergeNumber = this.dom.$items.eq(i).find('[data-merge]').attr('data-merge') || 1;
						if (this.options.mergeFit && mergeNumber > this.options.items) {
							mergeNumber = this.options.items;
						}
						this.num.merged.push(parseInt(mergeNumber));
						this.width.mergeStage += this.width.item * this.num.merged[i];
					} else {
						this.num.merged.push(1);
					}

					// Array based on merged items used by dots and navigation
					if (this.options.loop) {
						if (i >= this.num.cItems / 2 && i < this.num.cItems / 2 + this.num.oItems) {
							this.num.nav.push(this.num.merged[i]);
						}
					} else {
						this.num.nav.push(this.num.merged[i]);
					}

					var iWidth = this.width.item * this.num.merged[i];

					// autoWidth item size
					if (this.options.autoWidth) {
						iWidth = this.dom.$items.eq(i).width() + this.options.margin;
						if (this.options.rtl) {
							this.dom.$items[i].style.marginLeft = this.options.margin + 'px';
						} else {
							this.dom.$items[i].style.marginRight = this.options.margin + 'px';
						}
					}
					// push item position into array
					this.pos.items.push(dist);

					// update item data
					this.dom.$items.eq(i).data('owl-item').posLeft = posLeft;
					this.dom.$items.eq(i).data('owl-item').width = iWidth;

					// dist starts from middle of stage if center
					// posLeft always starts from 0
					if (this.options.rtl) {
						dist += iWidth;
						posLeft += iWidth;
					} else {
						dist -= iWidth;
						posLeft -= iWidth;
					}

					fullWidth -= Math.abs(iWidth);

					// update position if center
					if (this.options.center) {
						this.pos.items[i] = !this.options.rtl ? this.pos.items[i] - iWidth / 2 : this.pos.items[i] + iWidth / 2;
					}
				}

				if (this.options.autoWidth) {
					this.width.stage = this.options.center ? Math.abs(fullWidth) : Math.abs(dist);
				} else {
					this.width.stage = Math.abs(fullWidth);
				}

				//update indexAbs on all items
				var allItems = this.num.oItems + this.num.cItems;

				for (j = 0; j < allItems; j++) {
					this.dom.$items.eq(j).data('owl-item').indexAbs = j;
				}

				// Set Min and Max
				this.setMinMax();

				// Recalculate grid
				this.setSizes();
			};

			/**
    * setMinMax
    * @since 2.0.0
    */

			Owl.prototype.setMinMax = function () {

				// set Min
				var minimum = this.dom.$oItems.eq(0).data('owl-item').indexAbs;
				var i;
				this.pos.min = 0;
				this.pos.minValue = this.pos.items[minimum];

				// set max position
				if (!this.options.loop) {
					this.pos.max = this.num.oItems - 1;
				}

				if (this.options.loop) {
					this.pos.max = this.num.oItems + this.options.items;
				}

				if (!this.options.loop && !this.options.center) {
					this.pos.max = this.num.oItems - this.options.items;
				}

				if (this.options.loop && this.options.center) {
					this.pos.max = this.num.oItems + this.options.items;
				}

				//set max value
				this.pos.maxValue = this.pos.items[this.pos.max];

				//Max for autoWidth content
				if (!this.options.loop && !this.options.center && this.options.autoWidth || this.options.merge && !this.options.center) {
					var revert = this.options.rtl ? 1 : -1;
					for (i = 0; i < this.pos.items.length; i++) {
						if (this.pos.items[i] * revert < this.width.stage - this.width.el) {
							this.pos.max = i + 1;
						}
					}
					this.pos.maxValue = this.options.rtl ? this.width.stage - this.width.el : -(this.width.stage - this.width.el);
					this.pos.items[this.pos.max] = this.pos.maxValue;
				}

				// Set loop boundries
				if (this.options.center) {
					this.pos.loop = this.pos.items[0] - this.pos.items[this.num.oItems];
				} else {
					this.pos.loop = -this.pos.items[this.num.oItems];
				}

				//if is less items
				if (this.num.oItems < this.options.items && !this.options.center) {
					this.pos.max = 0;
					this.pos.maxValue = this.pos.items[0];
				}
			};

			/**
    * setSizes
    * @desc Set sizes on elements (from collectData function)
    * @since 2.0.0
    */

			Owl.prototype.setSizes = function () {

				// show neighbours
				if (this.options.stagePadding !== false) {
					this.dom.oStage.style.paddingLeft = this.options.stagePadding + 'px';
					this.dom.oStage.style.paddingRight = this.options.stagePadding + 'px';
				}

				// CRAZY FIX!!! Doublecheck this!
				//if(this.width.stagePrev > this.width.stage){
				if (this.options.rtl) {
					window.setTimeout((function () {
						this.dom.stage.style.width = this.width.stage + 'px';
					}).bind(this), 0);
				} else {
					this.dom.stage.style.width = this.width.stage + 'px';
				}

				for (var i = 0; i < this.num.items; i++) {

					// Set items width
					if (!this.options.autoWidth) {
						this.dom.$items[i].style.width = this.width.item - this.options.margin + 'px';
					}
					// add margin
					if (this.options.rtl) {
						this.dom.$items[i].style.marginLeft = this.options.margin + 'px';
					} else {
						this.dom.$items[i].style.marginRight = this.options.margin + 'px';
					}

					if (this.num.merged[i] !== 1 && !this.options.autoWidth) {
						this.dom.$items[i].style.width = this.width.item * this.num.merged[i] - this.options.margin + 'px';
					}
				}

				// save prev stage size
				this.width.stagePrev = this.width.stage;
			};

			/**
    * responsive
    * @desc Responsive function update all data by calling refresh() 
    * @since 2.0.0
    */

			Owl.prototype.responsive = function () {

				if (!this.num.oItems) {
					return false;
				}
				// If El width hasnt change then stop responsive
				var elChanged = this.isElWidthChanged();
				if (!elChanged) {
					return false;
				}

				// if Vimeo Fullscreen mode
				var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;
				if (fullscreenElement) {
					if ($(fullscreenElement.parentNode).hasClass('owl-video-frame')) {
						this.setSpeed(0);
						this.state.isFullScreen = true;
					}
				}

				if (fullscreenElement && this.state.isFullScreen && this.state.videoPlay) {
					return false;
				}

				// Comming back from fullscreen
				if (this.state.isFullScreen) {
					this.state.isFullScreen = false;
					return false;
				}

				// check full screen mode and window orientation
				if (this.state.videoPlay) {
					if (this.state.orientation !== window.orientation) {
						this.state.orientation = window.orientation;
						return false;
					}
				}

				this.fireCallback('onResponsiveBefore');
				this.state.responsive = true;
				this.refresh();
				this.state.responsive = false;
				this.fireCallback('onResponsiveAfter');
			};

			/**
    * refresh
    * @desc Refresh method is basically collection of functions that are responsible for Owl responsive functionality
    * @since 2.0.0
    */

			Owl.prototype.refresh = function (init) {

				if (this.state.videoPlay) {
					this.stopVideo();
				}

				// Update Options for given width
				this.setResponsiveOptions();

				//set lazy structure
				this.createLazyContentStructure(true);

				// update info about local content
				this.updateLocalContent();

				// udpate options
				this.optionsLogic();

				// if no items then stop
				if (this.num.oItems === 0) {
					if (this.dom.$page !== null) {
						this.dom.$page.hide();
					}
					return false;
				}

				// Hide and Show methods helps here to set a proper widths.
				// This prevents Scrollbar to be calculated in stage width
				this.dom.$stage.addClass('owl-refresh');

				// Remove clones and generate new ones
				this.reClone();

				// calculate
				this.calculate();

				//aaaand show.
				this.dom.$stage.removeClass('owl-refresh');

				// to do
				// lazyContent last position on refresh
				if (this.state.lazyContent) {
					this.pos.currentAbs = this.options.items;
				}

				this.initPosition(init);

				// jump to last position
				if (!this.state.lazyContent && !init) {
					this.jumpTo(this.pos.current, false); // fix that
				}

				//Check for videos ( YouTube and Vimeo currently supported)
				this.checkVideoLinks();

				this.updateItemState();

				// Update controls
				this.rebuildDots();

				this.updateControls();

				// update drag events
				//this.updateEvents();

				// update autoplay
				this.autoplay();

				this.autoHeight();

				this.state.orientation = window.orientation;

				this.watchVisibility();
			};

			/**
    * updateItemState
    * @desc Update information about current state of items (visibile, hidden, active, etc.)
    * @since 2.0.0
    */

			Owl.prototype.updateItemState = function (update) {

				if (!this.state.lazyContent) {
					this.updateActiveItems();
				} else {
					this.updateLazyContent(update);
				}

				if (this.options.center) {
					this.dom.$items.eq(this.pos.currentAbs).addClass(this.options.centerClass).data('owl-item').center = true;
				}

				if (this.options.lazyLoad) {
					this.lazyLoad();
				}
			};

			/**
    * updateActiveItems
    * @since 2.0.0
    */

			Owl.prototype.updateActiveItems = function () {
				var i, j, item, ipos, iwidth, wpos, stage, outsideView, foundCurrent, stageX, view;
				// clear states
				for (i = 0; i < this.num.items; i++) {
					this.dom.$items.eq(i).data('owl-item').active = false;
					this.dom.$items.eq(i).data('owl-item').current = false;
					this.dom.$items.eq(i).removeClass(this.options.activeClass).removeClass(this.options.centerClass);
				}

				this.num.active = 0;
				stageX = this.pos.stage;
				view = this.options.rtl ? this.width.view : -this.width.view;

				for (j = 0; j < this.num.items; j++) {

					item = this.dom.$items.eq(j);
					ipos = item.data('owl-item').posLeft;
					iwidth = item.data('owl-item').width;
					outsideView = this.options.rtl ? ipos + iwidth : ipos - iwidth;

					if (this.op(ipos, '<=', stageX) && this.op(ipos, '>', stageX + view) || this.op(outsideView, '<', stageX) && this.op(outsideView, '>', stageX + view)) {

						this.num.active++;

						if (this.options.freeDrag && !foundCurrent) {
							foundCurrent = true;
							this.pos.current = item.data('owl-item').index;
							this.pos.currentAbs = item.data('owl-item').indexAbs;
						}

						item.data('owl-item').active = true;
						item.data('owl-item').current = true;
						item.addClass(this.options.activeClass);

						if (!this.options.lazyLoad) {
							item.data('owl-item').loaded = true;
						}
						if (this.options.loop && (this.options.lazyLoad || this.options.center)) {
							this.updateClonedItemsState(item.data('owl-item').index);
						}
					}
				}
			};

			/**
    * updateClonedItemsState
    * @desc Set current state on sibilings items for lazyLoad and center
    * @since 2.0.0
    */

			Owl.prototype.updateClonedItemsState = function (activeIndex) {

				//find cloned center
				var center, $el, i;
				if (this.options.center) {
					center = this.dom.$items.eq(this.pos.currentAbs).data('owl-item').index;
				}

				for (i = 0; i < this.num.items; i++) {
					$el = this.dom.$items.eq(i);
					if ($el.data('owl-item').index === activeIndex) {
						$el.data('owl-item').current = true;
						if ($el.data('owl-item').index === center) {
							$el.addClass(this.options.centerClass);
						}
					}
				}
			};

			/**
    * updateLazyPosition
    * @desc Set current state on sibilings items for lazyLoad and center
    * @since 2.0.0
    */

			Owl.prototype.updateLazyPosition = function () {
				var jumpTo = this.pos.goToLazyContent || 0;

				this.pos.lcMovedBy = Math.abs(this.options.items - this.pos.currentAbs);

				if (this.options.items < this.pos.currentAbs) {
					this.pos.lcCurrent += this.pos.currentAbs - this.options.items;
					this.state.lcDirection = 'right';
				} else if (this.options.items > this.pos.currentAbs) {
					this.pos.lcCurrent -= this.options.items - this.pos.currentAbs;
					this.state.lcDirection = 'left';
				}

				this.pos.lcCurrent = jumpTo !== 0 ? jumpTo : this.pos.lcCurrent;

				if (this.pos.lcCurrent >= this.dom.$content.length) {
					this.pos.lcCurrent = this.pos.lcCurrent - this.dom.$content.length;
				} else if (this.pos.lcCurrent < -this.dom.$content.length + 1) {
					this.pos.lcCurrent = this.pos.lcCurrent + this.dom.$content.length;
				}

				if (this.options.startPosition > 0) {
					this.pos.lcCurrent = this.options.startPosition;
					this._options.startPosition = this.options.startPosition = 0;
				}

				this.pos.lcCurrentAbs = this.pos.lcCurrent < 0 ? this.pos.lcCurrent + this.dom.$content.length : this.pos.lcCurrent;
			};

			/**
    * updateLazyContent
    * @param [update] - boolean - update call by content manipulations
    * @since 2.0.0
    */

			Owl.prototype.updateLazyContent = function (update) {

				if (this.pos.lcCurrent === undefined) {
					this.pos.lcCurrent = 0;
					this.pos.current = this.pos.currentAbs = this.options.items;
				}

				if (!update) {
					this.updateLazyPosition();
				}
				var i, j, item, contentPos, content, freshItem, freshData;

				if (this.state.lcDirection !== false) {
					for (i = 0; i < this.pos.lcMovedBy; i++) {

						if (this.state.lcDirection === 'right') {
							item = this.dom.$stage.find('.owl-item').eq(0); //.appendTo(this.dom.$stage);
							item.appendTo(this.dom.$stage);
						}
						if (this.state.lcDirection === 'left') {
							item = this.dom.$stage.find('.owl-item').eq(-1);
							item.prependTo(this.dom.$stage);
						}
						item.data('owl-item').active = false;
					}
				}

				// recollect
				this.dom.$items = this.dom.$stage.find('.owl-item');

				for (j = 0; j < this.num.items; j++) {
					// to do
					this.dom.$items.eq(j).removeClass(this.options.centerClass);

					// get Content
					contentPos = this.pos.lcCurrent + j - this.options.items; // + this.options.startPosition;

					if (contentPos >= this.dom.$content.length) {
						contentPos = contentPos - this.dom.$content.length;
					}
					if (contentPos < -this.dom.$content.length) {
						contentPos = contentPos + this.dom.$content.length;
					}

					content = this.dom.$content.eq(contentPos);
					freshItem = this.dom.$items.eq(j);
					freshData = freshItem.data('owl-item');

					if (freshData.active === false || this.pos.goToLazyContent !== 0 || update === true) {

						freshItem.empty();
						freshItem.append(content.clone(true, true));
						freshData.active = true;
						freshData.current = true;
						if (!this.options.lazyLoad) {
							freshData.loaded = true;
						} else {
							freshData.loaded = false;
						}
					}
				}

				this.pos.goToLazyContent = 0;
				this.pos.current = this.pos.currentAbs = this.options.items;
				this.setSpeed(0);
				this.animStage(this.pos.items[this.options.items]);
			};

			/**
    * eventsCall
    * @desc Save internal event references and add event based functions like transitionEnd,responsive etc.
    * @since 2.0.0
    */

			Owl.prototype.eventsCall = function () {
				// Save events references
				this.e._onDragStart = (function (e) {
					this.onDragStart(e);
				}).bind(this);
				this.e._onDragMove = (function (e) {
					this.onDragMove(e);
				}).bind(this);
				this.e._onDragEnd = (function (e) {
					this.onDragEnd(e);
				}).bind(this);
				this.e._transitionEnd = (function (e) {
					this.transitionEnd(e);
				}).bind(this);
				this.e._resizer = (function () {
					this.responsiveTimer();
				}).bind(this);
				this.e._responsiveCall = (function () {
					this.responsive();
				}).bind(this);
				this.e._preventClick = (function (e) {
					this.preventClick(e);
				}).bind(this);
				this.e._goToHash = (function () {
					this.goToHash();
				}).bind(this);
				this.e._goToPage = (function (e) {
					this.goToPage(e);
				}).bind(this);
				this.e._ap = (function () {
					this.autoplay();
				}).bind(this);
				this.e._play = (function () {
					this.play();
				}).bind(this);
				this.e._pause = (function () {
					this.pause();
				}).bind(this);
				this.e._playVideo = (function (e) {
					this.playVideo(e);
				}).bind(this);

				this.e._navNext = (function (e) {
					if ($(e.target).hasClass('disabled')) {
						return false;
					}
					e.preventDefault();
					this.next();
				}).bind(this);

				this.e._navPrev = (function (e) {
					if ($(e.target).hasClass('disabled')) {
						return false;
					}
					e.preventDefault();
					this.prev();
				}).bind(this);
			};

			/**
    * responsiveTimer
    * @desc Check Window resize event with 200ms delay / this.options.responsiveRefreshRate
    * @since 2.0.0
    */

			Owl.prototype.responsiveTimer = function () {
				if (this.windowWidth() === this.width.prevWindow) {
					return false;
				}
				window.clearInterval(this.e._autoplay);
				window.clearTimeout(this.resizeTimer);
				this.resizeTimer = window.setTimeout(this.e._responsiveCall, this.options.responsiveRefreshRate);
				this.width.prevWindow = this.windowWidth();
			};

			/**
    * internalEvents
    * @desc Checks for touch/mouse drag options and add necessery event handlers.
    * @since 2.0.0
    */

			Owl.prototype.internalEvents = function () {
				var isTouch = isTouchSupport();
				var isTouchIE = isTouchSupportIE();

				if (isTouch && !isTouchIE) {
					this.dragType = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];
				} else if (isTouch && isTouchIE) {
					this.dragType = ['MSPointerDown', 'MSPointerMove', 'MSPointerUp', 'MSPointerCancel'];
				} else {
					this.dragType = ['mousedown', 'mousemove', 'mouseup'];
				}

				if ((isTouch || isTouchIE) && this.options.touchDrag) {
					//touch cancel event
					this.on(document, this.dragType[3], this.e._onDragEnd);
				} else {
					// firefox startdrag fix - addeventlistener doesnt work here :/
					this.dom.$stage.on('dragstart', function () {
						return false;
					});

					if (this.options.mouseDrag) {
						//disable text select
						this.dom.stage.onselectstart = function () {
							return false;
						};
					} else {
						// enable text select
						this.dom.$el.addClass('owl-text-select-on');
					}
				}

				// Video Play Button event delegation
				this.dom.$stage.on(this.dragType[2], '.owl-video-play-icon', this.e._playVideo);

				if (this.options.URLhashListener) {
					this.on(window, 'hashchange', this.e._goToHash, false);
				}

				if (this.options.autoplayHoverPause) {
					var that = this;
					this.dom.$stage.on('mouseover', this.e._pause);
					this.dom.$stage.on('mouseleave', this.e._ap);
				}

				// Catch transitionEnd event
				if (this.transitionEndVendor) {
					this.on(this.dom.stage, this.transitionEndVendor, this.e._transitionEnd, false);
				}

				// Responsive
				if (this.options.responsive !== false) {
					this.on(window, 'resize', this.e._resizer, false);
				}

				this.updateEvents();
			};

			/**
    * updateEvents
    * @since 2.0.0
    */

			Owl.prototype.updateEvents = function () {

				if (this.options.touchDrag && (this.dragType[0] === 'touchstart' || this.dragType[0] === 'MSPointerDown')) {
					this.on(this.dom.stage, this.dragType[0], this.e._onDragStart, false);
				} else if (this.options.mouseDrag && this.dragType[0] === 'mousedown') {
					this.on(this.dom.stage, this.dragType[0], this.e._onDragStart, false);
				} else {
					this.off(this.dom.stage, this.dragType[0], this.e._onDragStart);
				}
			};

			/**
    * onDragStart
    * @desc touchstart/mousedown event
    * @since 2.0.0
    */

			Owl.prototype.onDragStart = function (event) {
				var ev = event.originalEvent || event || window.event;
				// prevent right click
				if (ev.which === 3) {
					return false;
				}

				if (this.dragType[0] === 'mousedown') {
					this.dom.$stage.addClass('owl-grab');
				}

				this.fireCallback('onTouchStart');
				this.drag.startTime = new Date().getTime();
				this.setSpeed(0);
				this.state.isTouch = true;
				this.state.isScrolling = false;
				this.state.isSwiping = false;
				this.drag.distance = 0;

				// if is 'touchstart'
				var isTouchEvent = ev.type === 'touchstart';
				var pageX = isTouchEvent ? event.targetTouches[0].pageX : ev.pageX || ev.clientX;
				var pageY = isTouchEvent ? event.targetTouches[0].pageY : ev.pageY || ev.clientY;

				//get stage position left
				this.drag.offsetX = this.dom.$stage.position().left - this.options.stagePadding;
				this.drag.offsetY = this.dom.$stage.position().top;

				if (this.options.rtl) {
					this.drag.offsetX = this.dom.$stage.position().left + this.width.stage - this.width.el + this.options.margin;
				}

				//catch position // ie to fix
				if (this.state.inMotion && this.support3d) {
					var animatedPos = this.getTransformProperty();
					this.drag.offsetX = animatedPos;
					this.animStage(animatedPos);
				} else if (this.state.inMotion && !this.support3d) {
					this.state.inMotion = false;
					return false;
				}

				this.drag.startX = pageX - this.drag.offsetX;
				this.drag.startY = pageY - this.drag.offsetY;

				this.drag.start = pageX - this.drag.startX;
				this.drag.targetEl = ev.target || ev.srcElement;
				this.drag.updatedX = this.drag.start;

				// to do/check
				//prevent links and images dragging;
				//this.drag.targetEl.draggable = false;

				this.on(document, this.dragType[1], this.e._onDragMove, false);
				this.on(document, this.dragType[2], this.e._onDragEnd, false);
			};

			/**
    * onDragMove
    * @desc touchmove/mousemove event
    * @since 2.0.0
    */

			Owl.prototype.onDragMove = function (event) {
				if (!this.state.isTouch) {
					return;
				}

				if (this.state.isScrolling) {
					return;
				}

				var neighbourItemWidth = 0;
				var ev = event.originalEvent || event || window.event;

				// if is 'touchstart'
				var isTouchEvent = ev.type == 'touchmove';
				var pageX = isTouchEvent ? ev.targetTouches[0].pageX : ev.pageX || ev.clientX;
				var pageY = isTouchEvent ? ev.targetTouches[0].pageY : ev.pageY || ev.clientY;

				// Drag Direction
				this.drag.currentX = pageX - this.drag.startX;
				this.drag.currentY = pageY - this.drag.startY;
				this.drag.distance = this.drag.currentX - this.drag.offsetX;

				// Check move direction
				if (this.drag.distance < 0) {
					this.state.direction = this.options.rtl ? 'right' : 'left';
				} else if (this.drag.distance > 0) {
					this.state.direction = this.options.rtl ? 'left' : 'right';
				}
				// Loop
				if (this.options.loop) {
					if (this.op(this.drag.currentX, '>', this.pos.minValue) && this.state.direction === 'right') {
						this.drag.currentX -= this.pos.loop;
					} else if (this.op(this.drag.currentX, '<', this.pos.maxValue) && this.state.direction === 'left') {
						this.drag.currentX += this.pos.loop;
					}
				} else {
					// pull
					var minValue = this.options.rtl ? this.pos.maxValue : this.pos.minValue;
					var maxValue = this.options.rtl ? this.pos.minValue : this.pos.maxValue;
					var pull = this.options.pullDrag ? this.drag.distance / 5 : 0;
					this.drag.currentX = Math.max(Math.min(this.drag.currentX, minValue + pull), maxValue + pull);
				}

				// Lock browser if swiping horizontal

				if (this.drag.distance > 8 || this.drag.distance < -8) {
					if (ev.preventDefault !== undefined) {
						ev.preventDefault();
					} else {
						ev.returnValue = false;
					}
					this.state.isSwiping = true;
				}

				this.drag.updatedX = this.drag.currentX;

				// Lock Owl if scrolling
				if ((this.drag.currentY > 16 || this.drag.currentY < -16) && this.state.isSwiping === false) {
					this.state.isScrolling = true;
					this.drag.updatedX = this.drag.start;
				}

				this.animStage(this.drag.updatedX);
			};

			/**
    * onDragEnd 
    * @desc touchend/mouseup event
    * @since 2.0.0
    */

			Owl.prototype.onDragEnd = function (event) {
				if (!this.state.isTouch) {
					return;
				}
				if (this.dragType[0] === 'mousedown') {
					this.dom.$stage.removeClass('owl-grab');
				}

				this.fireCallback('onTouchEnd');

				//prevent links and images dragging;
				//this.drag.targetEl.draggable = true;

				//remove drag event listeners

				this.state.isTouch = false;
				this.state.isScrolling = false;
				this.state.isSwiping = false;

				//to check
				if (this.drag.distance === 0 && this.state.inMotion !== true) {
					this.state.inMotion = false;
					return false;
				}

				// prevent clicks while scrolling

				this.drag.endTime = new Date().getTime();
				var compareTimes = this.drag.endTime - this.drag.startTime;
				var distanceAbs = Math.abs(this.drag.distance);

				//to test
				if (distanceAbs > 3 || compareTimes > 300) {
					this.removeClick(this.drag.targetEl);
				}

				var closest = this.closest(this.drag.updatedX);

				this.setSpeed(this.options.dragEndSpeed, false, true);
				this.animStage(this.pos.items[closest]);

				//if pullDrag is off then fire transitionEnd event manually when stick to border
				if (!this.options.pullDrag && this.drag.updatedX === this.pos.items[closest]) {
					this.transitionEnd();
				}

				this.drag.distance = 0;

				this.off(document, this.dragType[1], this.e._onDragMove);
				this.off(document, this.dragType[2], this.e._onDragEnd);
			};

			/**
    * removeClick
    * @desc Attach preventClick function to disable link while swipping
    * @since 2.0.0
    * @param [target] - clicked dom element
    */

			Owl.prototype.removeClick = function (target) {
				this.drag.targetEl = target;
				this.on(target, 'click', this.e._preventClick, false);
			};

			/**
    * preventClick
    * @desc Add preventDefault for any link and then remove removeClick event hanlder
    * @since 2.0.0
    */

			Owl.prototype.preventClick = function (ev) {
				if (ev.preventDefault) {
					ev.preventDefault();
				} else {
					ev.returnValue = false;
				}
				if (ev.stopPropagation) {
					ev.stopPropagation();
				}
				this.off(this.drag.targetEl, 'click', this.e._preventClick, false);
			};

			/**
    * getTransformProperty
    * @desc catch stage position while animate (only css3)
    * @since 2.0.0
    */

			Owl.prototype.getTransformProperty = function () {
				var transform = window.getComputedStyle(this.dom.stage, null).getPropertyValue(this.vendorName + 'transform');
				//var transform = this.dom.$stage.css(this.vendorName + 'transform')
				transform = transform.replace(/matrix(3d)?\(|\)/g, '').split(',');
				var matrix3d = transform.length === 16;

				return matrix3d !== true ? transform[4] : transform[12];
			};

			/**
    * closest
    * @desc Get closest item after touchend/mouseup
    * @since 2.0.0
    * @param [x] - curent position in pixels
    * return position in pixels
    */

			Owl.prototype.closest = function (x) {
				var newX = 0,
				    pull = 30;

				if (!this.options.freeDrag) {
					// Check closest item
					for (var i = 0; i < this.num.items; i++) {
						if (x > this.pos.items[i] - pull && x < this.pos.items[i] + pull) {
							newX = i;
						} else if (this.op(x, '<', this.pos.items[i]) && this.op(x, '>', this.pos.items[i + 1 || this.pos.items[i] - this.width.el])) {
							newX = this.state.direction === 'left' ? i + 1 : i;
						}
					}
				}
				//non loop boundries
				if (!this.options.loop) {
					if (this.op(x, '>', this.pos.minValue)) {
						newX = x = this.pos.min;
					} else if (this.op(x, '<', this.pos.maxValue)) {
						newX = x = this.pos.max;
					}
				}

				if (!this.options.freeDrag) {
					// set positions
					this.pos.currentAbs = newX;
					this.pos.current = this.dom.$items.eq(newX).data('owl-item').index;
				} else {
					this.updateItemState();
					return x;
				}

				return newX;
			};

			/**
    * animStage
    * @desc animate stage position (both css3/css2) and perform onChange functions/events
    * @since 2.0.0
    * @param [x] - curent position in pixels
    */

			Owl.prototype.animStage = function (pos) {

				// if speed is 0 the set inMotion to false
				if (this.speed.current !== 0 && this.pos.currentAbs !== this.pos.min) {
					this.fireCallback('onTransitionStart');
					this.state.inMotion = true;
				}

				var posX = this.pos.stage = pos,
				    style = this.dom.stage.style;

				if (this.support3d) {
					var translate = 'translate3d(' + posX + 'px' + ',0px, 0px)';
					style[this.transformVendor] = translate;
				} else if (this.state.isTouch) {
					style.left = posX + 'px';
				} else {
					this.dom.$stage.animate({ left: posX }, this.speed.css2speed, this.options.fallbackEasing, (function () {
						if (this.state.inMotion) {
							this.transitionEnd();
						}
					}).bind(this));
				}

				this.onChange();
			};

			/**
    * updatePosition
    * @desc Update current positions
    * @since 2.0.0
    * @param [pos] - number - new position
    */

			Owl.prototype.updatePosition = function (pos) {

				// if no items then stop
				if (this.num.oItems === 0) {
					return false;
				}
				// to do
				//if(pos > this.num.items){pos = 0;}
				if (pos === undefined) {
					return false;
				}

				//pos - new current position
				var nextPos = pos;
				this.pos.prev = this.pos.currentAbs;

				if (this.state.revert) {
					this.pos.current = this.dom.$items.eq(nextPos).data('owl-item').index;
					this.pos.currentAbs = nextPos;
					return;
				}

				if (!this.options.loop) {
					if (this.options.navRewind) {
						nextPos = nextPos > this.pos.max ? this.pos.min : nextPos < 0 ? this.pos.max : nextPos;
					} else {
						nextPos = nextPos > this.pos.max ? this.pos.max : nextPos <= 0 ? 0 : nextPos;
					}
				} else {
					nextPos = nextPos >= this.num.oItems ? this.num.oItems - 1 : nextPos;
				}

				this.pos.current = this.dom.$oItems.eq(nextPos).data('owl-item').index;
				this.pos.currentAbs = this.dom.$oItems.eq(nextPos).data('owl-item').indexAbs;
			};

			/**
    * setSpeed
    * @since 2.0.0
    * @param [speed] - number
    * @param [pos] - number - next position - use this param to calculate smartSpeed
    * @param [drag] - boolean - if drag is true then smart speed is disabled
    * return speed
    */

			Owl.prototype.setSpeed = function (speed, pos, drag) {
				var s = speed,
				    nextPos = pos;

				if (s === false && s !== 0 && drag !== true || s === undefined) {

					//Double check this
					// var nextPx = this.pos.items[nextPos];
					// var currPx = this.pos.stage
					// var diff = Math.abs(nextPx-currPx);
					// var s = diff/1
					// if(s>1000){
					// 	s = 1000;
					// }

					var diff = Math.abs(nextPos - this.pos.prev);
					diff = diff === 0 ? 1 : diff;
					if (diff > 6) {
						diff = 6;
					}
					s = diff * this.options.smartSpeed;
				}

				if (s === false && drag === true) {
					s = this.options.smartSpeed;
				}

				if (s === 0) {
					s = 0;
				}

				if (this.support3d) {
					var style = this.dom.stage.style;
					style.webkitTransitionDuration = style.MsTransitionDuration = style.msTransitionDuration = style.MozTransitionDuration = style.OTransitionDuration = style.transitionDuration = s / 1000 + 's';
				} else {
					this.speed.css2speed = s;
				}
				this.speed.current = s;
				return s;
			};

			/**
    * jumpTo
    * @since 2.0.0
    * @param [pos] - number - next position - use this param to calculate smartSpeed
    * @param [update] - boolean - if drag is true then smart speed is disabled
    */

			Owl.prototype.jumpTo = function (pos, update) {
				if (this.state.lazyContent) {
					this.pos.goToLazyContent = pos;
				}
				this.updatePosition(pos);
				this.setSpeed(0);
				this.animStage(this.pos.items[this.pos.currentAbs]);
				if (update !== true) {
					this.updateItemState();
				}
			};

			/**
    * goTo
    * @since 2.0.0
    * @param [pos] - number
    * @param [speed] - speed in ms
    * @param [speed] - speed in ms
    */

			Owl.prototype.goTo = function (pos, speed) {
				if (this.state.lazyContent && this.state.inMotion) {
					return false;
				}

				this.updatePosition(pos);

				if (this.state.animate) {
					speed = 0;
				}
				this.setSpeed(speed, this.pos.currentAbs);

				if (this.state.animate) {
					this.animate();
				}
				this.animStage(this.pos.items[this.pos.currentAbs]);
			};

			/**
    * next
    * @since 2.0.0
    */

			Owl.prototype.next = function (optionalSpeed) {
				var s = optionalSpeed || this.options.navSpeed;
				if (this.options.loop && !this.state.lazyContent) {
					this.goToLoop(this.options.slideBy, s);
				} else {
					this.goTo(this.pos.current + this.options.slideBy, s);
				}
			};

			/**
    * prev
    * @since 2.0.0
    */

			Owl.prototype.prev = function (optionalSpeed) {
				var s = optionalSpeed || this.options.navSpeed;
				if (this.options.loop && !this.state.lazyContent) {
					this.goToLoop(-this.options.slideBy, s);
				} else {
					this.goTo(this.pos.current - this.options.slideBy, s);
				}
			};

			/**
    * goToLoop
    * @desc Go to given position if loop is enabled - used only internal
    * @since 2.0.0
    * @param [distance] - number -how far to go
    * @param [speed] - number - speed in ms
    */

			Owl.prototype.goToLoop = function (distance, speed) {

				var revert = this.pos.currentAbs,
				    prevPosition = this.pos.currentAbs,
				    newPosition = this.pos.currentAbs + distance,
				    direction = prevPosition - newPosition < 0 ? true : false;

				this.state.revert = true;

				if (newPosition < 1 && direction === false) {

					this.state.bypass = true;
					revert = this.num.items - (this.options.items - prevPosition) - this.options.items;
					this.jumpTo(revert, true);
				} else if (newPosition >= this.num.items - this.options.items && direction === true) {

					this.state.bypass = true;
					revert = prevPosition - this.num.oItems;
					this.jumpTo(revert, true);
				}
				window.clearTimeout(this.e._goToLoop);
				this.e._goToLoop = window.setTimeout((function () {
					this.state.bypass = false;
					this.goTo(revert + distance, speed);
					this.state.revert = false;
				}).bind(this), 30);
			};

			/**
    * initPosition
    * @since 2.0.0
    */

			Owl.prototype.initPosition = function (init) {

				if (!this.dom.$oItems || !init || this.state.lazyContent) {
					return false;
				}
				var pos = this.options.startPosition;

				if (this.options.startPosition === 'URLHash') {
					pos = this.options.startPosition = this.hashPosition();
				} else if (typeof this.options.startPosition !== Number && !this.options.center) {
					this.options.startPosition = 0;
				}
				this.dom.oStage.scrollLeft = 0;
				this.jumpTo(pos, true);
			};

			/**
    * goToHash
    * @since 2.0.0
    */

			Owl.prototype.goToHash = function () {
				var pos = this.hashPosition();
				if (pos === false) {
					pos = 0;
				}
				this.dom.oStage.scrollLeft = 0;
				this.goTo(pos, this.options.navSpeed);
			};

			/**
    * hashPosition
    * @desc Find hash in URL then look into items to find contained ID
    * @since 2.0.0
    * return hashPos - number of item
    */

			Owl.prototype.hashPosition = function () {
				var hash = window.location.hash.substring(1),
				    hashPos;
				if (hash === "") {
					return false;
				}

				for (var i = 0; i < this.num.oItems; i++) {
					if (hash === this.dom.$oItems.eq(i).data('owl-item').hash) {
						hashPos = i;
					}
				}
				return hashPos;
			};

			/**
    * Autoplay
    * @since 2.0.0
    */

			Owl.prototype.autoplay = function () {
				if (this.options.autoplay && !this.state.videoPlay) {
					window.clearInterval(this.e._autoplay);
					this.e._autoplay = window.setInterval(this.e._play, this.options.autoplayTimeout);
				} else {
					window.clearInterval(this.e._autoplay);
					this.state.autoplay = false;
				}
			};

			/**
    * play
    * @param [timeout] - Integrer
    * @param [speed] - Integrer
    * @since 2.0.0
    */

			Owl.prototype.play = function (timeout, speed) {

				// if tab is inactive - doesnt work in <IE10
				if (document.hidden === true) {
					return false;
				}

				// overwrite default options (custom options are always priority)
				if (!this.options.autoplay) {
					this._options.autoplay = this.options.autoplay = true;
					this._options.autoplayTimeout = this.options.autoplayTimeout = timeout || this.options.autoplayTimeout || 4000;
					this._options.autoplaySpeed = speed || this.options.autoplaySpeed;
				}

				if (this.options.autoplay === false || this.state.isTouch || this.state.isScrolling || this.state.isSwiping || this.state.inMotion) {
					window.clearInterval(this.e._autoplay);
					return false;
				}

				if (!this.options.loop && this.pos.current >= this.pos.max) {
					window.clearInterval(this.e._autoplay);
					this.goTo(0);
				} else {
					this.next(this.options.autoplaySpeed);
				}
				this.state.autoplay = true;
			};

			/**
    * stop
    * @since 2.0.0
    */

			Owl.prototype.stop = function () {
				this._options.autoplay = this.options.autoplay = false;
				this.state.autoplay = false;
				window.clearInterval(this.e._autoplay);
			};

			Owl.prototype.pause = function () {
				window.clearInterval(this.e._autoplay);
			};

			/**
    * transitionEnd
    * @desc event used by css3 animation end and $.animate callback like transitionEnd,responsive etc.
    * @since 2.0.0
    */

			Owl.prototype.transitionEnd = function (event) {

				// if css2 animation then event object is undefined
				if (event !== undefined) {
					event.stopPropagation();

					// Catch only owl-stage transitionEnd event
					var eventTarget = event.target || event.srcElement || event.originalTarget;
					if (eventTarget !== this.dom.stage) {
						return false;
					}
				}

				this.state.inMotion = false;
				this.updateItemState();
				this.autoplay();
				this.fireCallback('onTransitionEnd');
			};

			/**
    * isElWidthChanged
    * @desc Check if element width has changed
    * @since 2.0.0
    */

			Owl.prototype.isElWidthChanged = function () {
				var newElWidth = this.dom.$el.width() - this.options.stagePadding,
				   
				//to check
				prevElWidth = this.width.el + this.options.margin;
				return newElWidth !== prevElWidth;
			};

			/**
    * windowWidth
    * @desc Get Window/responsiveBaseElement width
    * @since 2.0.0
    */

			Owl.prototype.windowWidth = function () {
				if (this.options.responsiveBaseElement !== window) {
					this.width.window = $(this.options.responsiveBaseElement).width();
				} else if (window.innerWidth) {
					this.width.window = window.innerWidth;
				} else if (document.documentElement && document.documentElement.clientWidth) {
					this.width.window = document.documentElement.clientWidth;
				}
				return this.width.window;
			};

			/**
    * Controls
    * @desc Calls controls container, navigation and dots creator
    * @since 2.0.0
    */

			Owl.prototype.controls = function () {
				var cc = document.createElement('div');
				cc.className = this.options.controlsClass;
				this.dom.$el.append(cc);
				this.dom.$cc = $(cc);
			};

			/**
    * updateControls 
    * @since 2.0.0
    */

			Owl.prototype.updateControls = function () {

				if (this.dom.$cc === null && (this.options.nav || this.options.dots)) {
					this.controls();
				}

				if (this.dom.$nav === null && this.options.nav) {
					this.createNavigation(this.dom.$cc[0]);
				}

				if (this.dom.$page === null && this.options.dots) {
					this.createDots(this.dom.$cc[0]);
				}

				if (this.dom.$nav !== null) {
					if (this.options.nav) {
						this.dom.$nav.show();
						this.updateNavigation();
					} else {
						this.dom.$nav.hide();
					}
				}

				if (this.dom.$page !== null) {
					if (this.options.dots) {
						this.dom.$page.show();
						this.updateDots();
					} else {
						this.dom.$page.hide();
					}
				}
			};

			/**
    * createNavigation
    * @since 2.0.0
    * @param [cc] - dom element - Controls Container
    */

			Owl.prototype.createNavigation = function (cc) {

				// Create nav container
				var nav = document.createElement('div');
				nav.className = this.options.navContainerClass;
				cc.appendChild(nav);

				// Create left and right buttons
				var navPrev = document.createElement('div'),
				    navNext = document.createElement('div');

				navPrev.className = this.options.navClass[0];
				navNext.className = this.options.navClass[1];

				nav.appendChild(navPrev);
				nav.appendChild(navNext);

				this.dom.$nav = $(nav);
				this.dom.$navPrev = $(navPrev).html(this.options.navText[0]);
				this.dom.$navNext = $(navNext).html(this.options.navText[1]);

				// add events to do
				//this.on(navPrev, this.dragType[2], this.e._navPrev, false);
				//this.on(navNext, this.dragType[2], this.e._navNext, false);

				//FF fix?
				this.dom.$nav.on(this.dragType[2], '.' + this.options.navClass[0], this.e._navPrev);
				this.dom.$nav.on(this.dragType[2], '.' + this.options.navClass[1], this.e._navNext);
			};

			/**
    * createNavigation
    * @since 2.0.0
    * @param [cc] - dom element - Controls Container
    */

			Owl.prototype.createDots = function (cc) {

				// Create dots container
				var page = document.createElement('div');
				page.className = this.options.dotsClass;
				cc.appendChild(page);

				// save reference
				this.dom.$page = $(page);

				// add events
				//this.on(page, this.dragType[2], this.e._goToPage, false);

				// FF fix? To test!
				var that = this;
				this.dom.$page.on(this.dragType[2], '.' + this.options.dotClass, goToPage);

				function goToPage(e) {
					e.preventDefault();
					var page = $(this).data('page');
					that.goTo(page, that.options.dotsSpeed);
				}
				// build dots
				this.rebuildDots();
			};

			/**
    * goToPage
    * @desc Event used by dots
    * @since 2.0.0
    */

			// Owl.prototype.goToPage = function(e){
			// 	console.log(e.taget);
			// 	var page = $(e.currentTarget).data('page')
			// 	this.goTo(page,this.options.dotsSpeed);
			// 	return false;
			// };

			/**
    * rebuildDots
    * @since 2.0.0
    */

			Owl.prototype.rebuildDots = function () {
				if (this.dom.$page === null) {
					return false;
				}
				var each,
				    dot,
				    span,
				    counter = 0,
				    last = 0,
				    i,
				    page = 0,
				    roundPages = 0;

				each = this.options.dotsEach || this.options.items;

				// display full dots if center
				if (this.options.center || this.options.dotData) {
					each = 1;
				}

				// clear dots
				this.dom.$page.html('');

				for (i = 0; i < this.num.nav.length; i++) {

					if (counter >= each || counter === 0) {

						dot = document.createElement('div');
						dot.className = this.options.dotClass;
						span = document.createElement('span');
						dot.appendChild(span);
						var $dot = $(dot);

						if (this.options.dotData) {
							$dot.html(this.dom.$oItems.eq(i).data('owl-item').dot);
						}

						$dot.data('page', page);
						$dot.data('goToPage', roundPages);

						this.dom.$page.append(dot);

						counter = 0;
						roundPages++;
					}

					this.dom.$oItems.eq(i).data('owl-item').page = roundPages - 1;

					//add merged items
					counter += this.num.nav[i];
					page++;
				}
				// find rest of dots
				if (!this.options.loop && !this.options.center) {
					for (var j = this.num.nav.length - 1; j >= 0; j--) {
						last += this.num.nav[j];
						this.dom.$oItems.eq(j).data('owl-item').page = roundPages - 1;
						if (last >= each) {
							break;
						}
					}
				}

				this.num.allPages = roundPages - 1;
			};

			/**
    * updateDots
    * @since 2.0.0
    */

			Owl.prototype.updateDots = function () {
				var dots = this.dom.$page.children();
				var itemIndex = this.dom.$oItems.eq(this.pos.current).data('owl-item').page;

				for (var i = 0; i < dots.length; i++) {
					var dotPage = dots.eq(i).data('goToPage');

					if (dotPage === itemIndex) {
						this.pos.currentPage = i;
						dots.eq(i).addClass('active');
					} else {
						dots.eq(i).removeClass('active');
					}
				}
			};

			/**
    * updateNavigation
    * @since 2.0.0
    */

			Owl.prototype.updateNavigation = function () {

				var isNav = this.options.nav;

				this.dom.$navNext.toggleClass('disabled', !isNav);
				this.dom.$navPrev.toggleClass('disabled', !isNav);

				if (!this.options.loop && isNav && !this.options.navRewind) {

					if (this.pos.current <= 0) {
						this.dom.$navPrev.addClass('disabled');
					}
					if (this.pos.current >= this.pos.max) {
						this.dom.$navNext.addClass('disabled');
					}
				}
			};

			Owl.prototype.insertContent = function (content) {
				this.dom.$stage.empty();
				this.fetchContent(content);
				this.refresh();
			};

			/**
    * addItem - Add an item
    * @since 2.0.0
    * @param [content] - dom element / string '<div>content</div>'
    * @param [pos] - number - position
    */

			Owl.prototype.addItem = function (content, pos) {
				pos = pos || 0;

				if (this.state.lazyContent) {
					this.dom.$content = this.dom.$content.add($(content));
					this.updateItemState(true);
				} else {
					// wrap content
					var item = this.fillItem(content);
					// if carousel is empty then append item
					if (this.dom.$oItems.length === 0) {
						this.dom.$stage.append(item);
					} else {
						// append item
						var it = this.dom.$oItems.eq(pos);
						if (pos !== -1) {
							it.before(item);
						} else {
							it.after(item);
						}
					}
					// update and calculate carousel
					this.refresh();
				}
			};

			/**
    * removeItem - Remove an Item
    * @since 2.0.0
    * @param [pos] - number - position
    */

			Owl.prototype.removeItem = function (pos) {
				if (this.state.lazyContent) {
					this.dom.$content.splice(pos, 1);
					this.updateItemState(true);
				} else {
					this.dom.$oItems.eq(pos).remove();
					this.refresh();
				}
			};

			/**
    * addCustomEvents
    * @desc Add custom events by jQuery .on method
    * @since 2.0.0
    */

			Owl.prototype.addCustomEvents = function () {

				this.e.next = (function (e, s) {
					this.next(s);
				}).bind(this);
				this.e.prev = (function (e, s) {
					this.prev(s);
				}).bind(this);
				this.e.goTo = (function (e, p, s) {
					this.goTo(p, s);
				}).bind(this);
				this.e.jumpTo = (function (e, p) {
					this.jumpTo(p);
				}).bind(this);
				this.e.addItem = (function (e, c, p) {
					this.addItem(c, p);
				}).bind(this);
				this.e.removeItem = (function (e, p) {
					this.removeItem(p);
				}).bind(this);
				this.e.refresh = (function (e) {
					this.refresh();
				}).bind(this);
				this.e.destroy = (function (e) {
					this.destroy();
				}).bind(this);
				this.e.autoHeight = (function (e) {
					this.autoHeight(true);
				}).bind(this);
				this.e.stop = (function () {
					this.stop();
				}).bind(this);
				this.e.play = (function (e, t, s) {
					this.play(t, s);
				}).bind(this);
				this.e.insertContent = (function (e, d) {
					this.insertContent(d);
				}).bind(this);

				this.dom.$el.on('next.owl', this.e.next);
				this.dom.$el.on('prev.owl', this.e.prev);
				this.dom.$el.on('goTo.owl', this.e.goTo);
				this.dom.$el.on('jumpTo.owl', this.e.jumpTo);
				this.dom.$el.on('addItem.owl', this.e.addItem);
				this.dom.$el.on('removeItem.owl', this.e.removeItem);
				this.dom.$el.on('destroy.owl', this.e.destroy);
				this.dom.$el.on('refresh.owl', this.e.refresh);
				this.dom.$el.on('autoHeight.owl', this.e.autoHeight);
				this.dom.$el.on('play.owl', this.e.play);
				this.dom.$el.on('stop.owl', this.e.stop);
				this.dom.$el.on('stopVideo.owl', this.e.stop);
				this.dom.$el.on('insertContent.owl', this.e.insertContent);
			};

			/**
    * on
    * @desc On method for adding internal events
    * @since 2.0.0
    */

			Owl.prototype.on = function (element, event, listener, capture) {

				if (element.addEventListener) {
					element.addEventListener(event, listener, capture);
				} else if (element.attachEvent) {
					element.attachEvent('on' + event, listener);
				}
			};

			/**
    * off
    * @desc Off method for removing internal events
    * @since 2.0.0
    */

			Owl.prototype.off = function (element, event, listener, capture) {
				if (element.removeEventListener) {
					element.removeEventListener(event, listener, capture);
				} else if (element.detachEvent) {
					element.detachEvent('on' + event, listener);
				}
			};

			/**
    * fireCallback
    * @since 2.0.0
    * @param event - string - event name
    * @param data - object - additional options - to do
    */

			Owl.prototype.fireCallback = function (event, data) {
				if (!this.options.callbacks) {
					return;
				}

				if (this.dom.el.dispatchEvent) {

					// dispatch event
					var evt = document.createEvent('CustomEvent');

					//evt.initEvent(event, false, true );
					evt.initCustomEvent(event, true, true, data);
					return this.dom.el.dispatchEvent(evt);
				} else if (!this.dom.el.dispatchEvent) {

					//	There is no clean solution for custom events name in <=IE8
					//	But if you know better way, please let me know :)
					return this.dom.$el.trigger(event);
				}
			};

			/**
    * watchVisibility
    * @desc check if el is visible - handy if Owl is inside hidden content (tabs etc.)
    * @since 2.0.0
    */

			Owl.prototype.watchVisibility = function () {

				// test on zepto
				if (!isElVisible(this.dom.el)) {
					this.dom.$el.addClass('owl-hidden');
					window.clearInterval(this.e._checkVisibile);
					this.e._checkVisibile = window.setInterval(checkVisible.bind(this), 500);
				}

				function isElVisible(el) {
					return el.offsetWidth > 0 && el.offsetHeight > 0;
				}

				function checkVisible() {
					if (isElVisible(this.dom.el)) {
						this.dom.$el.removeClass('owl-hidden');
						this.refresh();
						window.clearInterval(this.e._checkVisibile);
					}
				}
			};

			/**
    * onChange
    * @since 2.0.0
    */

			Owl.prototype.onChange = function () {

				if (!this.state.isTouch && !this.state.bypass && !this.state.responsive) {

					if (this.options.nav || this.options.dots) {
						this.updateControls();
					}
					this.autoHeight();

					this.fireCallback('onChangeState');
				}

				if (!this.state.isTouch && !this.state.bypass) {
					// set Status to do
					this.storeInfo();

					// stopVideo
					if (this.state.videoPlay) {
						this.stopVideo();
					}
				}
			};

			/**
    * storeInfo
    * store basic information about current states
    * @since 2.0.0
    */

			Owl.prototype.storeInfo = function () {
				var currentPosition = this.state.lazyContent ? this.pos.lcCurrentAbs || 0 : this.pos.current;
				var allItems = this.state.lazyContent ? this.dom.$content.length - 1 : this.num.oItems;

				this.info = {
					items: this.options.items,
					allItems: allItems,
					currentPosition: currentPosition,
					currentPage: this.pos.currentPage,
					allPages: this.num.allPages,
					autoplay: this.state.autoplay,
					windowWidth: this.width.window,
					elWidth: this.width.el,
					breakpoint: this.num.breakpoint
				};

				if (typeof this.options.info === 'function') {
					this.options.info.apply(this, [this.info, this.dom.el]);
				}
			};

			/**
    * autoHeight
    * @since 2.0.0
    */

			Owl.prototype.autoHeight = function (callback) {
				if (this.options.autoHeight !== true && callback !== true) {
					return false;
				}
				if (!this.dom.$oStage.hasClass(this.options.autoHeightClass)) {
					this.dom.$oStage.addClass(this.options.autoHeightClass);
				}

				var loaded = this.dom.$items.eq(this.pos.currentAbs);
				var stage = this.dom.$oStage;
				var iterations = 0;

				var isLoaded = window.setInterval(function () {
					iterations += 1;
					if (loaded.data('owl-item').loaded) {
						stage.height(loaded.height() + 'px');
						clearInterval(isLoaded);
					} else if (iterations === 500) {
						clearInterval(isLoaded);
					}
				}, 100);
			};

			/**
    * preloadAutoWidthImages
    * @desc still to test
    * @since 2.0.0
    */

			Owl.prototype.preloadAutoWidthImages = function (imgs) {
				var loaded = 0;
				var that = this;
				imgs.each(function (i, el) {
					var $el = $(el);
					var img = new Image();

					img.onload = function () {
						loaded++;
						$el.attr('src', img.src);
						$el.css('opacity', 1);
						if (loaded >= imgs.length) {
							that.state.imagesLoaded = true;
							that.init();
						}
					};

					img.src = $el.attr('src') || $el.attr('data-src') || $el.attr('data-src-retina');;
				});
			};

			/**
    * lazyLoad
    * @desc lazyLoad images
    * @since 2.0.0
    */

			Owl.prototype.lazyLoad = function () {
				var attr = isRetina() ? 'data-src-retina' : 'data-src';
				var src, img, i;

				for (i = 0; i < this.num.items; i++) {
					var $item = this.dom.$items.eq(i);

					if ($item.data('owl-item').current === true && $item.data('owl-item').loaded === false) {
						img = $item.find('.owl-lazy');
						src = img.attr(attr);
						src = src || img.attr('data-src');
						if (src) {
							img.css('opacity', '0');
							this.preload(img, $item);
						}
					}
				}
			};

			/**
    * preload
    * @since 2.0.0
    */

			Owl.prototype.preload = function (images, $item) {
				var that = this; // fix this later

				images.each(function (i, el) {
					var $el = $(el);
					var img = new Image();

					img.onload = function () {

						$item.data('owl-item').loaded = true;
						if ($el.is('img')) {
							$el.attr('src', img.src);
						} else {
							$el.css('background-image', 'url(' + img.src + ')');
						}

						$el.css('opacity', 1);
						that.fireCallback('onLazyLoaded');
					};
					img.src = $el.attr('data-src') || $el.attr('data-src-retina');
				});
			};

			/**
    * animate
    * @since 2.0.0
    */

			Owl.prototype.animate = function () {

				var prevItem = this.dom.$items.eq(this.pos.prev),
				    prevPos = Math.abs(prevItem.data('owl-item').width) * this.pos.prev,
				    currentItem = this.dom.$items.eq(this.pos.currentAbs),
				    currentPos = Math.abs(currentItem.data('owl-item').width) * this.pos.currentAbs;

				if (this.pos.currentAbs === this.pos.prev) {
					return false;
				}

				var pos = currentPos - prevPos;
				var tIn = this.options.animateIn;
				var tOut = this.options.animateOut;
				var that = this;

				removeStyles = function () {
					$(this).css({
						"left": ""
					}).removeClass('animated owl-animated-out owl-animated-in').removeClass(tIn).removeClass(tOut);

					that.transitionEnd();
				};

				if (tOut) {
					prevItem.css({
						"left": pos + "px"
					}).addClass('animated owl-animated-out ' + tOut).one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', removeStyles);
				}

				if (tIn) {
					currentItem.addClass('animated owl-animated-in ' + tIn).one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', removeStyles);
				}
			};

			/**
    * destroy
    * @desc Remove Owl structure and events :(
    * @since 2.0.0
    */

			Owl.prototype.destroy = function () {

				window.clearInterval(this.e._autoplay);

				if (this.dom.$el.hasClass(this.options.themeClass)) {
					this.dom.$el.removeClass(this.options.themeClass);
				}

				if (this.options.responsive !== false) {
					this.off(window, 'resize', this.e._resizer);
				}

				if (this.transitionEndVendor) {
					this.off(this.dom.stage, this.transitionEndVendor, this.e._transitionEnd);
				}

				if (this.options.mouseDrag || this.options.touchDrag) {
					this.off(this.dom.stage, this.dragType[0], this.e._onDragStart);
					if (this.options.mouseDrag) {
						this.off(document, this.dragType[3], this.e._onDragStart);
					}
					if (this.options.mouseDrag) {
						this.dom.$stage.off('dragstart', function () {
							return false;
						});
						this.dom.stage.onselectstart = function () {};
					}
				}

				if (this.options.URLhashListener) {
					this.off(window, 'hashchange', this.e._goToHash);
				}

				this.dom.$el.off('next.owl', this.e.next);
				this.dom.$el.off('prev.owl', this.e.prev);
				this.dom.$el.off('goTo.owl', this.e.goTo);
				this.dom.$el.off('jumpTo.owl', this.e.jumpTo);
				this.dom.$el.off('addItem.owl', this.e.addItem);
				this.dom.$el.off('removeItem.owl', this.e.removeItem);
				this.dom.$el.off('refresh.owl', this.e.refresh);
				this.dom.$el.off('autoHeight.owl', this.e.autoHeight);
				this.dom.$el.off('play.owl', this.e.play);
				this.dom.$el.off('stop.owl', this.e.stop);
				this.dom.$el.off('stopVideo.owl', this.e.stop);
				this.dom.$stage.off('click', this.e._playVideo);

				if (this.dom.$cc !== null) {
					this.dom.$cc.remove();
				}
				if (this.dom.$cItems !== null) {
					this.dom.$cItems.remove();
				}
				this.e = null;
				this.dom.$el.data('owlCarousel', null);
				delete this.dom.el.owlCarousel;

				this.dom.$stage.unwrap();
				this.dom.$items.unwrap();
				this.dom.$items.contents().unwrap();
				this.dom = null;
			};

			/**
    * Opertators 
    * @desc Used to calculate RTL
    * @param [a] - Number - left side
    * @param [o] - String - operator 
    * @param [b] - Number - right side
    * @since 2.0.0
    */

			Owl.prototype.op = function (a, o, b) {
				var rtl = this.options.rtl;
				switch (o) {
					case '<':
						return rtl ? a > b : a < b;
					case '>':
						return rtl ? a < b : a > b;
					case '>=':
						return rtl ? a <= b : a >= b;
					case '<=':
						return rtl ? a >= b : a <= b;
					default:
						break;
				}
			};

			/**
    * Opertators 
    * @desc Used to calculate RTL
    * @since 2.0.0
    */

			Owl.prototype.browserSupport = function () {
				this.support3d = isPerspective();

				if (this.support3d) {
					this.transformVendor = isTransform();

					// take transitionend event name by detecting transition
					var endVendors = ['transitionend', 'webkitTransitionEnd', 'transitionend', 'oTransitionEnd'];
					this.transitionEndVendor = endVendors[isTransition()];

					// take vendor name from transform name
					this.vendorName = this.transformVendor.replace(/Transform/i, '');
					this.vendorName = this.vendorName !== '' ? '-' + this.vendorName.toLowerCase() + '-' : '';
				}

				this.state.orientation = window.orientation;
			};

			// Pivate methods

			// CSS detection;
			function isStyleSupported(array) {
				var p,
				    s,
				    fake = document.createElement('div'),
				    list = array;
				for (p in list) {
					s = list[p];
					if (typeof fake.style[s] !== 'undefined') {
						fake = null;
						return [s, p];
					}
				}
				return [false];
			}

			function isTransition() {
				return isStyleSupported(['transition', 'WebkitTransition', 'MozTransition', 'OTransition'])[1];
			}

			function isTransform() {
				return isStyleSupported(['transform', 'WebkitTransform', 'MozTransform', 'OTransform', 'msTransform'])[0];
			}

			function isPerspective() {
				return isStyleSupported(['perspective', 'webkitPerspective', 'MozPerspective', 'OPerspective', 'MsPerspective'])[0];
			}

			function isTouchSupport() {
				return 'ontouchstart' in window || !!navigator.msMaxTouchPoints;
			}

			function isTouchSupportIE() {
				return window.navigator.msPointerEnabled;
			}

			function isRetina() {
				return window.devicePixelRatio > 1;
			}

			$.fn.owlCarousel = function (options) {
				return this.each(function () {
					if (!$(this).data('owlCarousel')) {
						$(this).data('owlCarousel', new Owl(this, options));
					}
				});
			};
		})(window.Zepto || window.jQuery, window, document);

		//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
		//The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.

		if (!Function.prototype.bind) {
			Function.prototype.bind = function (oThis) {
				if (typeof this !== 'function') {
					// closest thing possible to the ECMAScript 5 internal IsCallable function
					throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
				}

				var aArgs = Array.prototype.slice.call(arguments, 1),
				    fToBind = this,
				    fNOP = function fNOP() {},
				    fBound = function fBound() {
					return fToBind.apply(this instanceof fNOP && oThis ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
				};
				fNOP.prototype = this.prototype;
				fBound.prototype = new fNOP();
				return fBound;
			};
		}
	}, {}] }, {}, [1]);

},{}],4:[function(require,module,exports){
//     Zepto.js
//     (c) 2010-2014 Thomas Fuchs
//     Zepto.js may be freely distributed under the MIT license.

// The following code is heavily inspired by jQuery's $.fn.data()

'use strict';

;(function ($) {
  var data = {},
      dataAttr = $.fn.data,
      camelize = $.camelCase,
      exp = $.expando = 'Zepto' + +new Date(),
      emptyArray = [];

  // Get value from node:
  // 1. first try key as given,
  // 2. then try camelized key,
  // 3. fall back to reading "data-*" attribute.
  function getData(node, name) {
    var id = node[exp],
        store = id && data[id];
    if (name === undefined) return store || setData(node);else {
      if (store) {
        if (name in store) return store[name];
        var camelName = camelize(name);
        if (camelName in store) return store[camelName];
      }
      return dataAttr.call($(node), name);
    }
  }

  // Store value under camelized key on node
  function setData(node, name, value) {
    var id = node[exp] || (node[exp] = ++$.uuid),
        store = data[id] || (data[id] = attributeData(node));
    if (name !== undefined) store[camelize(name)] = value;
    return store;
  }

  // Read all "data-*" attributes from a node
  function attributeData(node) {
    var store = {};
    $.each(node.attributes || emptyArray, function (i, attr) {
      if (attr.name.indexOf('data-') == 0) store[camelize(attr.name.replace('data-', ''))] = $.zepto.deserializeValue(attr.value);
    });
    return store;
  }

  $.fn.data = function (name, value) {
    return value === undefined ?
    // set multiple values via object
    $.isPlainObject(name) ? this.each(function (i, node) {
      $.each(name, function (key, value) {
        setData(node, key, value);
      });
    }) :
    // get value from first element
    this.length == 0 ? undefined : getData(this[0], name) :
    // set value on all elements
    this.each(function () {
      setData(this, name, value);
    });
  };

  $.fn.removeData = function (names) {
    if (typeof names == 'string') names = names.split(/\s+/);
    return this.each(function () {
      var id = this[exp],
          store = id && data[id];
      if (store) $.each(names || store, function (key) {
        delete store[names ? camelize(this) : key];
      });
    });
  };

  // Generate extended `remove` and `empty` functions
  ['remove', 'empty'].forEach(function (methodName) {
    var origFn = $.fn[methodName];
    $.fn[methodName] = function () {
      var elements = this.find('*');
      if (methodName === 'remove') elements = elements.add(this);
      elements.removeData();
      return origFn.call(this);
    };
  });
})(Zepto);

},{}],5:[function(require,module,exports){
'use strict';

$(document).ready(function () {
    if ($('.merge-acquistion').length > 0) {
        var FirstChartType = $('#chartdiv-deals').attr('data-type'),
            FirstChartColor = $('#chartdiv-deals').attr('data-color'),
            SecondChartType = $('#chartdiv-region').attr('data-type'),
            SecondChartColor = $('#chartdiv-region').attr('data-color'),
            ThirdChartType = $('#chartdiv-region2').attr('data-type'),
            ThirdChartColor = $('#chartdiv-region2').attr('data-color'),
            FourthChartType = $('#chartdiv-type').attr('data-type'),
            FourthChartColor = $('#chartdiv-type').attr('data-color');
        AmCharts.ready(function () {
            var chart = new AmCharts.AmSerialChart();
            chart.dataProvider = generateChartDataSizeRange();
            chart.categoryField = "range";
            var valueAxis1 = new AmCharts.ValueAxis();
            valueAxis1.integersOnly = true;
            chart.addValueAxis(valueAxis1);
            var graph = new AmCharts.AmGraph();
            graph.valueField = "count";
            graph.type = FirstChartType;
            graph.fillAlphas = 0.7;FourthChartType;
            graph.lineAlpha = 0.5;
            graph.balloonText = "[[title]]: [[count]]";
            graph.balloonColor = '#' + FirstChartColor;
            graph.fillColors = '#' + FirstChartColor;
            graph.lineColor = '#' + FirstChartColor;
            chart.addGraph(graph);
            chart.write('chartdiv-deals');
            var chart2 = new AmCharts.AmSerialChart();
            chart2.dataProvider = generateChartDataDealsByRegion();
            chart2.categoryField = "region";
            var valueAxis2 = new AmCharts.ValueAxis();
            valueAxis2.integersOnly = true;
            chart2.addValueAxis(valueAxis2);
            var graph2 = new AmCharts.AmGraph();
            graph2.valueField = "tally";
            graph2.type = SecondChartType;
            graph2.fillAlphas = 0.7;
            graph2.lineAlpha = 0.5;
            graph2.balloonText = "[[title]]: [[value]]";
            graph2.balloonColor = '#' + SecondChartColor;
            graph2.fillColors = '#' + SecondChartColor;
            graph2.lineColor = '#' + SecondChartColor;
            chart2.categoryAxis.labelRotation = 40;
            chart2.categoryAxis.autoGridCount = false;
            chart2.addGraph(graph2);
            chart2.write('chartdiv-region');
            var chart3 = new AmCharts.AmSerialChart();
            chart3.dataProvider = generateChartDataByRegion();
            chart3.categoryField = "region";
            var valueAxis3 = new AmCharts.ValueAxis();
            valueAxis3.integersOnly = true;
            chart3.addValueAxis(valueAxis3);
            var graph3 = new AmCharts.AmGraph();
            graph3.valueField = "count";
            graph3.type = ThirdChartType;
            graph3.fillAlphas = 0.7;
            graph3.lineAlpha = 0.5;
            graph3.balloonText = "[[title]]: [[value]]";
            graph3.balloonColor = '#' + ThirdChartColor;
            graph3.fillColors = '#' + ThirdChartColor;
            graph3.lineColor = '#' + ThirdChartColor;
            chart3.categoryAxis.labelRotation = 40;
            chart3.categoryAxis.autoGridCount = false;
            chart3.addGraph(graph3);
            chart3.write('chartdiv-region2');
            var chart4 = new AmCharts.AmSerialChart();
            chart4.dataProvider = generateChartData();
            chart4.validateData();
            chart4.categoryField = "type";
            var valueAxis4 = new AmCharts.ValueAxis();
            valueAxis4.integersOnly = true;
            chart4.addValueAxis(valueAxis4);
            var graph4 = new AmCharts.AmGraph();
            graph4.valueField = "count";
            graph4.type = FourthChartType;
            graph4.fillAlphas = 0.7;
            graph4.lineAlpha = 0.5;
            graph4.balloonText = "[[title]]: [[value]]";
            graph4.balloonColor = '#' + FourthChartColor;
            graph4.fillColors = '#' + FourthChartColor;
            graph4.lineColor = '#' + FourthChartColor;
            chart4.addGraph(graph4);
            chart4.write('chartdiv-type');
            var inputSet = $(".merge-acquistion th input");
            inputSet.each(function () {
                if (!$(this).hasClass('range-field')) {
                    $(this).keyup(function () {
                        chart.dataProvider = generateChartDataSizeRange();
                        chart.validateData();
                        chart2.dataProvider = generateChartDataDealsByRegion();
                        chart2.validateData();
                        chart3.dataProvider = generateChartDataByRegion();
                        chart3.validateData();
                        chart4.dataProvider = generateChartData();
                        chart4.validateData();
                    });
                }
            });
            // $("#filterDropDown").change(function() {
            //     chart.dataProvider = generateChartDataSizeRange();
            //     chart.validateData();
            //     chart2.dataProvider = generateChartDataDealsByRegion();
            //     chart2.validateData();
            //     chart3.dataProvider = generateChartDataByRegion();
            //     chart3.validateData();
            //     chart4.dataProvider = generateChartData();
            //     chart4.validateData();
            // });
            $($(".range-field")[0]).keyup(function () {
                chart.dataProvider = generateChartDataSizeRange();
                chart.validateData();
                chart2.dataProvider = generateChartDataDealsByRegion();
                chart2.validateData();
                chart3.dataProvider = generateChartDataByRegion();
                chart3.validateData();
                chart4.dataProvider = generateChartData();
                chart4.validateData();
            });
            $($(".range-field")[1]).keyup(function () {
                chart.dataProvider = generateChartDataSizeRange();
                chart.validateData();
                chart2.dataProvider = generateChartDataDealsByRegion();
                chart2.validateData();
                chart3.dataProvider = generateChartDataByRegion();
                chart3.validateData();
                chart4.dataProvider = generateChartData();
                chart4.validateData();
            });
            // $("#largest-deals").click(function() {
            //     chart.dataProvider = generateChartDataSizeRange();
            //     chart.validateData();
            //     chart2.dataProvider = generateChartDataDealsByRegion();
            //     chart2.validateData();
            //     chart3.dataProvider = generateChartDataByRegion();
            //     chart3.validateData();
            //     chart4.dataProvider = generateChartData();
            //     chart4.validateData();
            // });
            var defaultRegions = ["Africa", "Asia-Pacific", "Bermuda", "Europe", "Global", "Latin America", "London/UK", "North America"];
            var defaultTypes = ["non-life", "life", "international/reinsurance", "composite"];

            function generateChartDataSizeRange() {
                var chartDataType = [];
                var price = [];
                var i;
                $(".merge-acquistion td[deal='Price']").each(function () {
                    var tempPrice = $(this).text();
                    price.push(tempPrice);
                });
                var range = {
                    100: 0,
                    250: 0,
                    1000: 0
                };
                for (i = 0; i < price.length; i++) {
                    if (price[i] >= 100 && price[i] < 250) {
                        range[100] = range[100] + 1;
                    } else if (price[i] >= 250 && price[i] < 1000) {
                        range[250] = range[250] + 1;
                    } else if (price[i] >= 1000) {
                        range[1000] = range[1000] + 1;
                    }
                }
                var rangeAsArray = [];
                var rangeCountAsArray = [];
                for (var key in range) {
                    rangeAsArray.push(key);
                    rangeCountAsArray.push(range[key]);
                }
                for (i = 0; i < rangeAsArray.length; i++) {
                    rangeAsArray[i] = rangeAsArray[i] + "+";
                    var obj = {
                        range: rangeAsArray[i],
                        count: rangeCountAsArray[i],
                        title: rangeAsArray[i]
                    };
                    chartDataType.push(obj);
                }
                return chartDataType;
            }

            function generateChartDataDealsByRegion() {
                var chartDataType = [];
                var regions = [];
                $(".merge-acquistion td[deal='TargetLocation']").each(function () {
                    var tempRegion = $(this).text();
                    regions.push(tempRegion);
                });
                var price = [];
                $(".merge-acquistion td[deal='Price']").each(function () {
                    var tempPrice = $(this).text();
                    price.push(tempPrice);
                });
                var regionWithTotalPrice = {};
                var regionName = {};
                for (i = 0; i < regions.length; ++i) {
                    regionWithTotalPrice[regions[i]] = 0;
                    regionName[regions[i]] = regions[i];
                }
                for (i = 0; i < regions.length; ++i) {
                    if (price[i] != "-" && price[i] >= 100) {
                        regionWithTotalPrice[regions[i]] = regionWithTotalPrice[regions[i]] + parseFloat(price[i]);
                    }
                }
                var regionNameAsArray = [];
                for (var key in regionName) {
                    if (regionName.hasOwnProperty(key)) {
                        regionNameAsArray.push(regionName[key]);
                    }
                }
                regionNameAsArray.sort();
                var isNull = false;
                isNull = jQuery.isEmptyObject(price);
                if (!isNull) {
                    for (var i = 0; i < regionNameAsArray.length; i++) {
                        if (regionWithTotalPrice[regionNameAsArray[i]] != 0) {
                            var abbrRegionNameAsArray = abbreviate(regionNameAsArray[i]);
                            var obj = {
                                region: abbrRegionNameAsArray,
                                tally: regionWithTotalPrice[regionNameAsArray[i]],
                                title: regionNameAsArray[i]
                            };
                            chartDataType.push(obj);
                        }
                    }
                } else {
                    for (i = 0; i < defaultRegions.length; i++) {
                        var abbrRegionNameAsArray = abbreviate(defaultRegions[i]);
                        var obj = {
                            region: abbrRegionNameAsArray,
                            tally: 0,
                            title: defaultRegions[i]
                        };
                        chartDataType.push(obj);
                    }
                }
                if (chartDataType.length === 0) {
                    for (i = 0; i < defaultRegions.length; i++) {
                        var abbrRegionNameAsArray = abbreviate(defaultRegions[i]);
                        var obj = {
                            region: abbrRegionNameAsArray,
                            tally: 0,
                            title: defaultRegions[i]
                        };
                        chartDataType.push(obj);
                    }
                }
                return chartDataType;
            }

            function generateChartDataByRegion() {
                var chartDataType = [];
                var regions = [];
                $(".merge-acquistion td[deal='TargetLocation']").each(function () {
                    var tempRegion = $(this).text();
                    regions.push(tempRegion);
                });
                var price = [];
                $(".merge-acquistion td[deal='Price']").each(function () {
                    var tempPrice = $(this).text();
                    price.push(tempPrice);
                });
                var regionOver100m = [];
                for (var i = 0; i < regions.length; i++) {
                    if (price[i] != "-" && price[i] >= 100) {
                        regionOver100m.push(regions[i]);
                    }
                }
                var uniqueRegions = new stringSet();
                if (regionOver100m.length != 0) {
                    for (i = 0; i < regionOver100m.length; i++) {
                        uniqueRegions.add(regionOver100m[i]);
                    }
                }
                var orderedValueRegions = uniqueRegions.values();
                orderedValueRegions.sort();
                var cR = uniqueRegions.count();
                var isNull = false;
                isNull = jQuery.isEmptyObject(uniqueRegions.count());
                if (!isNull) {
                    for (i = 0; i < orderedValueRegions.length; i++) {
                        var abbrUniqueValueType = abbreviate(orderedValueRegions[i]);
                        var obj = {
                            region: abbrUniqueValueType,
                            count: cR[orderedValueRegions[i]],
                            title: orderedValueRegions[i]
                        };
                        chartDataType.push(obj);
                    }
                } else {
                    for (i = 0; i < defaultRegions.length; i++) {
                        var abbrRegionNameAsArray = abbreviate(defaultRegions[i]);
                        var obj = {
                            region: abbrRegionNameAsArray,
                            count: 0,
                            title: defaultRegions[i]
                        };
                        chartDataType.push(obj);
                    }
                }
                return chartDataType;
            }

            function generateChartData() {
                var chartDataType = [];
                var types = [];
                $(".merge-acquistion td[deal='TargetSector']").each(function () {
                    var tempType = $(this).text();
                    types.push(tempType);
                });
                var price = [];
                $(".merge-acquistion td[deal='Price']").each(function () {
                    var tempPrice = $(this).text();
                    price.push(tempPrice);
                });
                var typesOver100m = [];
                for (var i = 0; i < types.length; i++) {
                    if (price[i] != "-" && price[i] >= 100) {
                        typesOver100m.push(types[i]);
                    }
                }
                var uniqueTypes = new stringSet();
                if (typesOver100m.length != 0) {
                    for (i = 0; i < typesOver100m.length; i++) {
                        uniqueTypes.add(typesOver100m[i]);
                    }
                }
                var uniqueValueTypes = uniqueTypes.values();
                uniqueValueTypes.sort();
                uniqueValueTypes.reverse();
                var cT = uniqueTypes.count();
                var isNull = false;
                isNull = jQuery.isEmptyObject(uniqueTypes.count());
                if (!isNull) {
                    for (i = 0; i < uniqueValueTypes.length; i++) {
                        var abbrUniqueValueType = abbreviate(uniqueValueTypes[i]);
                        var obj = {
                            type: abbrUniqueValueType,
                            count: cT[uniqueValueTypes[i]],
                            title: uniqueValueTypes[i]
                        };
                        chartDataType.push(obj);
                    }
                } else {
                    for (i = 0; i < defaultTypes.length; i++) {
                        var abbrTypeNameAsArray = abbreviate(defaultTypes[i]);
                        var obj = {
                            type: abbrTypeNameAsArray,
                            count: 0,
                            title: defaultTypes[i]
                        };
                        chartDataType.push(obj);
                    }
                }
                return chartDataType;
            }

            function abbreviate(str) {
                if (str == "international/reinsurance") {
                    str = "int/re";
                }
                if (str == "composite") {
                    str = "com";
                }
                if (str == "Africa") {
                    str = "AF";
                }
                if (str == "Asia-Pacific") {
                    str = "APAC";
                }
                if (str == "Bermuda") {
                    str = "BM";
                }
                if (str == "Europe") {
                    str = "EU";
                }
                if (str == "Global") {
                    str = "G";
                }
                if (str == "Latin America") {
                    str = "LA";
                }
                if (str == "London/UK") {
                    str = "UK";
                }
                if (str == "North America") {
                    str = "NA";
                }
                return str;
            }

            function stringSet() {
                var setObj = {},
                    val = {};
                var objectCount = {};
                this.add = function (str) {
                    setObj[str] = val;
                    if (objectCount[str] == null || objectCount[str] == {}) {
                        objectCount[str] = 1;
                    } else {
                        var count = objectCount[str];
                        objectCount[str] = count + 1;
                    }
                };
                this.count = function () {
                    return objectCount;
                };
                this.contains = function (str) {
                    return setObj[str] === val;
                };
                this.remove = function (str) {
                    delete setObj[str];
                };
                this.values = function () {
                    var values = [];
                    for (var i in setObj) {
                        if (setObj[i] === val) {
                            values.push(i);
                        }
                    }
                    return values;
                };
            }
        });
    }
});

},{}],6:[function(require,module,exports){
'use strict';

var articleSidebarAd, articleSidebarAdParent, lastActionFlagsBar, stickyFloor, sidebarIsTaller;
$(document).ready(function () {
    articleSidebarAdParent = $('.article-right-rail section:last-child');
    articleSidebarAd = articleSidebarAdParent.find('.advertising');
    lastActionFlagsBar = $('.action-flags-bar:last-of-type');
    sidebarIsTaller = $('.article-right-rail').height() > $('.article-left-rail').height();
});
$(window).on('scroll', function () {
    if (articleSidebarAdParent && articleSidebarAdParent.length && !sidebarIsTaller) {
        // pageYOffset instead of scrollY for IE / pre-Edge compatibility
        stickyFloor = lastActionFlagsBar.offset().top - window.pageYOffset - articleSidebarAd.height();
        if (articleSidebarAdParent.offset().top - window.pageYOffset <= 16) {
            articleSidebarAdParent.addClass('advertising--sticky');
        } else {
            articleSidebarAdParent.removeClass('advertising--sticky');
        }
        if (stickyFloor <= 40) {
            articleSidebarAd.css('top', stickyFloor - 40 + 'px');
        } else {
            articleSidebarAd.css('top', '');
        }
    }
});

},{}],7:[function(require,module,exports){
'use strict';

(function () {
    var RecomendedContent = {
        AjaxData: function AjaxData(url, type, data, SuccessCallback) {
            console.log(JSON.stringify(data));
            $.ajax({
                url: url,
                data: JSON.stringify(data),
                dataType: 'json',
                contentType: "application/json",
                type: type,
                cache: false,
                success: function success(data) {
                    //if (data.articles && typeof data.articles === "object" && data.articles.length >= 3) {
                    SuccessCallback(data);
                    //}
                }
            });
        },
        RecomendedTemplate: function RecomendedTemplate(data) {
            var Template = '';
            if (data.articles.length > 0) {
                for (var i = 0; i < 3; i++) {
                    if (data.articles[i].listableImage == null) {
                        Template += '<div class="section-article">' + '<span class="article-related-content__category"> ' + data.articles[i].listablePublication + ' </span>' + '<h5><a class="click-utag" href="' + data.articles[i].linkableUrl + '">' + data.articles[i].listableTitle + '</a></h5>' + '<time class="article-related-content__date">' + data.articles[i].listableDate + '</time>' + '</div>';
                    } else {
                        Template += '<div class="section-article">' + '<img class="article-related-content__img" src="' + data.articles[i].listableImage + '">' + '<span class="article-related-content__category"> ' + data.articles[i].listablePublication + ' </span>' + '<h5><a class="click-utag" href="' + data.articles[i].linkableUrl + '">' + data.articles[i].listableTitle + '</a></h5>' + '<time class="article-related-content__date">' + data.articles[i].listableDate + '</time>' + '</div>';
                    }
                }
            }

            Template += '</div>';

            $('.ContentRecomm-ReadNext').append(Template);
        },
        SuggestedTemplate: function SuggestedTemplate(data) {
            var Template = '';
            if (data.articles.length > 0) {
                for (var i = 0; i < 3; i++) {
                    if (data.articles[i].listableImage == null) {
                        Template += '<div class="contentRecomm-article">' + '<span class="article-related-content__category"> ' + data.articles[i].listablePublication + ' </span>' + '<h5><a class="click-utag" href="' + data.articles[i].linkableUrl + '">' + data.articles[i].listableTitle + '</a></h5>' + '<time class="article-related-content__date">' + data.articles[i].listableDate + '</time>' + '</div>';
                    } else {
                        Template += '<div class="contentRecomm-article">' + '<img class="article-related-content__img" src="' + data.articles[i].listableImage + '">' + '<span class="article-related-content__category"> ' + data.articles[i].listablePublication + ' </span>' + '<h5><a class="click-utag" href="' + data.articles[i].linkableUrl + '">' + data.articles[i].listableTitle + '</a></h5>' + '<time class="article-related-content__date">' + data.articles[i].listableDate + '</time>' + '</div>';
                    }
                }
            }

            Template += '</div>';

            $('.suggested-article').append(Template);
        },
        init: function init() {
            var self = this;
            if ($('.ContentRecomm-ReadNext').length > 0) {
                self.AjaxData('/api/articlesearch', 'POST', { 'TaxonomyIds': $('#hdnTaxonomyIds').val().split(","), 'PageNo': 1, 'PageSize': 4 }, self.RecomendedTemplate);
            }
            if ($('#hdnPreferanceIds').val()) {
                self.AjaxData('/api/articlesearch', 'POST', { 'TaxonomyIds': $('#hdnPreferanceIds').val().split(","), 'PageNo': 1, 'PageSize': 4 }, self.SuggestedTemplate);
            }
        }
    };

    RecomendedContent.init();
})();

},{}],8:[function(require,module,exports){
'use strict';

$(function () {
	$('.availableGraphs').off('click').on('click', 'li a', function () {
		var $this = $(this),
		    id = $this.attr('id'),
		    getFocusId = id.split('-')[1];
		$(window).scrollTop($('#' + getFocusId).offset().top);
		if (!$('#' + getFocusId).find('.chartexpand').hasClass('active')) {
			$('#' + getFocusId).find('.chartexpand').trigger('click');
		}
	});

	var chartAccordionIDs = ["GWP", "NWP", "UR", "NP", "SF", "NWPNR", "SFNR", "NPSFR"];
	$('.expandAll', '.compareChart').click(function () {
		var eachChartData = $('.eachChartData');
		for (var i = 0; i < chartAccordionIDs.length; i++) {
			if (!$(eachChartData[i]).find('.chartexpand').hasClass('active')) {
				$(eachChartData[i]).find('.chartexpand').click();
			}
		}
		$('.chartexpand', '.compareChart').addClass('active');
	});

	$('.collapseAll', '.compareChart').click(function () {
		if ($('.graph-container') && $('.graph-container').length) {
			$('.graph-container', '.compareChart').addClass('hide');
		}
		$('.chartData', '.compareChart').addClass('hide');
		$('.chartexpand', '.compareChart').removeClass('active');
	});

	$('.chartexpand', '.eachChartData').click(function () {
		var $this = $(this),
		    eachChartData = $this.closest('.eachChartData'),
		    chartexpand = eachChartData.find('.chartexpand'),
		    graphCont = eachChartData.find('.graph-container');
		if (chartexpand.hasClass('active')) {
			graphCont.addClass('hide');
			$this.removeClass('active');
		} else {
			graphCont.removeClass('hide');
			$this.addClass('active');
		}
	});

	var geturl = window.location.href;
	if (geturl.indexOf('graphid=') !== -1) {
		var getId = geturl.split('graphid=')[1];
		$(window).scrollTop($('#' + getId).offset().top);
		$('#' + getId).find('.chartexpand').trigger('click');
	}
});

},{}],9:[function(require,module,exports){
'use strict';

(function () {
	// body...
	'use strict';

	var ResponsiveTable = {
		GetAjaxData: function GetAjaxData(data, id) {
			var self = this;
			if (data) {
				window.ResponsiveJSON = data;
				window.ResponsiveModalJSON = data;
				self.RenderCarousel(data, id);
				self.RenderModal(data, id);
				//}
			}
		},
		RenderModal: function RenderModal(data, id) {
			var ModalId = $(id).attr('data-modal'),
			    Parent = $('#' + ModalId),
			    HeaderData = data[0],
			    Header = "",
			    category = "";

			Parent.find('.table').empty();
			for (var key in HeaderData) {
				if (key !== "ID") {
					Header += "<div class='tableHead'><strong>" + key + "</strong><a href='#' class='sort' category='" + category + "' type='ascending'></a><a href='#' class='sort' category='" + category + "' type='descending'></a></div>";
				}
			}
			Parent.find('.table').append('<div class="tableRow">' + Header + '</div>');
			for (var key in data) {
				var Item = data[key],
				    Template = "";
				for (var val in Item) {
					var content = "";
					if (val !== "ID") {
						if (Array.isArray(Item[val])) {
							content = Item[val][0].value;
						} else {
							content = Item[val];
						}
						Template += "<div class='tableCell'>" + content + "</div>";
					}
				}
				Parent.find('.table').append('<div class="tableRow">' + Template + '</div>');
			}
		},
		RenderCarousel: function RenderCarousel(data, Parent) {

			Parent.find('.owl-carousel').remove();
			Parent.find('.states_heading').find('.RB16').remove();
			Parent.find('.states_heading').after('<div class="owl-carousel"></div>');
			var CreateList = window.jsonMappingData;

			for (var key in CreateList) {
				Parent.find('.owl-carousel').append('<div class="article" data-head="' + CreateList[key].Key + '"><div class="year_heading"><span>' + CreateList[key].Value + '</span><a href="#" class="sort" type="ascending"><svg class="sorting-arrows__arrow sorting-arrows__arrow--up"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#sort-down-arrow"></use></svg></a><a href="#" class="sort" type="descending"><svg class="sorting-arrows__arrow sorting-arrows__arrow--down"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#sort-down-arrow"></use></svg></a></div></div>');
			}
			var Items = Parent.find('.owl-carousel').find('.article');

			for (var i = 0; i < data.length; i++) {
				var Item = data[i],
				    index = i,
				    CompanyLink = data[i].Company.toLowerCase().split(" ").join("-");
				Parent.find('.states_heading').append('<div class="RB16"><a href="' + data[i].CompanyPageUrl + '">' + data[i].Company + '</a></div>');
				for (var key in Item) {
					if (Array.isArray(Item[key])) {
						Parent.find('.article[data-head="' + key + '"]').append('<div  class="R16 TableRow' + index + '">' + Item[key][0].value + '</div>');
					}
				}
			}
			this.InitiateCarousel(Parent);
			this.HeightManagement(Parent);
		},
		HeightManagement: function HeightManagement(Parent) {
			var HeadingItems = Parent.find('.year_heading'),
			    MaxHeadingHeight = 0;

			Parent.find('.states_heading .RB16').each(function (key) {
				var Height = $(this).height(),
				    Item = [];

				$('.article').each(function () {
					var CurrentItem = $(this).find('.R16')[key];
					Item.push(CurrentItem);
				});

				for (var i = 0; i < Item.length; i++) {
					$(Item[i]).height(Height);
				}
			});
			// HeadingItems.height(0);
			HeadingItems.each(function () {
				var thisHeight = $(this).height();
				if (thisHeight > MaxHeadingHeight) {
					MaxHeadingHeight = thisHeight;
				}
			});
			$(HeadingItems).find('span').height(MaxHeadingHeight);
		},
		InitiateCarousel: function InitiateCarousel(Parent) {

			Parent.find('.owl-carousel').owlCarousel({
				loop: true,
				margin: 10,
				merge: true,
				nav: true,
				navText: ["<img src='/dist/img/lessthan.png'/>", "<img src='/dist/img/greaterthan.png'/>"],
				slideBy: 3,
				responsive: {
					0: {
						items: 3
					},
					678: {
						items: 3
					},
					320: {
						items: 2
					},
					480: {
						items: 2
					},
					1000: {
						items: 3
					}
				}
			});
		},
		ModalEvents: function ModalEvents() {
			$(document).on('click', 'a[data-toggle="modal-comparefinancialresults"]', function (e) {
				e.preventDefault();
				$('#modal-comparefinancialresults').show();
			});
			$(document).on('click', '#modal-comparefinancialresults .table_close', function (e) {
				e.preventDefault();
				$(this).parents('.ID-responsive-table-modal').hide();
			});
			$(document).on('click', '.ID-responsive-table-modal', function (e) {
				if ($(e.target).parents('.container').length > 0 || $(e.target).hasClass('.container')) {
					return false;
				} else {
					$(this).hide();
				}
			});
		},
		SortingModal: function SortingModal(id) {
			var self = this;

			$(document).on('click', '#modal-table .sort', function (e) {
				e.preventDefault();
				var MainData = window.ResponsiveJSON,
				    Index = $(this).parents('.tableHead').index(),
				    Items = [],
				    type = $(this).attr('type'),
				    Category = $(this).attr('category'),
				    ModalData = window.ResponsiveModalJSON,
				    UpdatedJson = [],
				    HeadingText = $(this).parents('.tableHead').find('strong').text();

				$('#modal-table .tableRow').each(function () {
					if ($(this).find('.tableCell').length > 0) {
						var Text = $($(this).find('.tableCell')[Index]).text();
						if (HeadingText == 'Company') {
							Items.push(Text);
						} else {
							Items.push(parseFloat(Text));
						}
					}
				});

				if (HeadingText == 'Company') {
					if (type == "descending") {
						Items.sort().reverse();
					} else {
						Items.sort();
					}

					for (var key in Items) {
						for (var json in ModalData) {
							if (Items[key] == ModalData[json].Company) {
								UpdatedJson.push(ModalData[json]);
							}
						}
					}
				} else {
					if (type == "descending") {
						Items.sort(function (a, b) {
							return b - a;
						});
					} else {
						Items.sort(function (a, b) {
							return a - b;
						});
					}

					for (var key in Items) {
						for (var json in ModalData) {
							if (Items[key] == ModalData[json][HeadingText][0].value) {
								UpdatedJson.push(ModalData[json]);
							}
						}
					}
				}
				window.ResponsiveModalJSON = UpdatedJson;

				self.RenderModal(window.ResponsiveModalJSON, id);
			});
		},
		SortingFunctionality: function SortingFunctionality(id) {
			//Sorting Functionality
			var self = this;
			$(document).on('click', '.year_heading .sort', function (e) {
				e.preventDefault();
				var Parent = $(this).parents('.article'),
				    Values = Parent.find('.R16'),
				    Content = Parent.attr('data-head'),
				    type = $(this).attr('type'),
				    category = $(this).attr('category'),
				    Items = [],
				    CarouselControl = $(this).parents('.ID-Responsive-Table').find('.owl-controls').find('.owl-dots'),
				    ControlIndex = CarouselControl.find('.active').index(),
				    CarouselStyles = $('#comparefinancialresults .owl-stage').attr('style'),
				    OwlItems = $('#comparefinancialresults .owl-stage').find('.owl-item'),
				    ClonedItems = [],
				    ActiveItems = [];

				OwlItems.each(function () {
					if ($(this).hasClass('cloned')) {
						ClonedItems.push($(this).index());
					}
					if ($(this).hasClass('active')) {
						ActiveItems.push($(this).index());
					}
				});
				$('.year_heading .sort').removeClass('active');
				$(this).addClass('active');

				if (category == 'companies') {
					var CompanyNames = $(this).parents('.states_heading').find('.RB16');

					CompanyNames.each(function () {
						Items.push($(this).text());
					});
					if (type == "descending") {
						Items.sort().reverse();
					} else {
						Items.sort();
					}
				} else {
					Values.each(function () {
						if ($(this).length > 0) {
							Items.push(parseFloat($(this).text()));
						}
					});
					if (type == "descending") {
						Items.sort(function (a, b) {
							return b - a;
						});
					} else {
						Items.sort(function (a, b) {
							return a - b;
						});
					}
				}

				self.RecreateObject(Content, Items, window.ResponsiveJSON, id, category);

				$('#comparefinancialresults .owl-stage').attr('style', CarouselStyles);
				$('#comparefinancialresults .owl-stage .owl-item').removeClass('cloned');
				$('#comparefinancialresults .owl-stage .owl-item').removeClass('active');
				for (var key in ClonedItems) {
					$($('#comparefinancialresults .owl-stage .owl-item')[ClonedItems[key]]).addClass('cloned');
				}

				for (var key in ActiveItems) {
					$($('#comparefinancialresults .owl-stage .owl-item')[ActiveItems[key]]).addClass('active');
				}

				$('#comparefinancialresults .owl-dot').removeClass('active');
				$($('#comparefinancialresults .owl-dot')[ControlIndex]).addClass('active');
				$('#comparefinancialresults .article[data-head="' + Content + '"] .sort[type="' + type + '"]').addClass('active');
			});
		},
		RecreateObject: function RecreateObject(Content, SortedItem, MainArray, id, category, modal) {
			var self = this,
			    RecreatedArray = [];
			// id.find('.RB16').remove();
			if (category === 'companies') {
				for (var i = 0; i < SortedItem.length; i++) {
					for (var key in MainArray) {
						var Name = MainArray[key].Company;
						if (Name == SortedItem[i]) {
							RecreatedArray.push(MainArray[key]);
						}
					}
				}
			} else {
				for (var i = 0; i < SortedItem.length; i++) {
					for (var key in MainArray) {
						var _Object = MainArray[key];
						if (_Object[Content][0].value == SortedItem[i]) {
							RecreatedArray.push(_Object);
						}
					}
				}
				for (var key in MainArray) {
					var _Object = MainArray[key];
					if (_Object[Content][0].value.length === 0) {
						RecreatedArray.push(_Object);
					}
				}
			}
			// $owl.trigger('destroy.owl.carousel');

			if (modal) {
				window.ResponsiveModalJSON = RecreatedArray;
				self.RenderModal(window.ResponsiveModalJSON, id);
			} else {
				window.ResponsiveJSON = RecreatedArray;
				self.RenderCarousel(window.ResponsiveJSON, id);
			}
		},
		init: function init(data, id) {
			var self = this;
			self.GetAjaxData(data, id);
			self.ModalEvents();
			self.SortingFunctionality(id);
			self.SortingModal(id);
		}
	};

	if ($('#comparefinancialresults').length > 0) {
		ResponsiveTable.init(window.jsonFinancialResultForCompare, $('#comparefinancialresults'));
	}
})();

},{}],10:[function(require,module,exports){
'use strict';

(function () {
	// body...
	'use strict';

	var ResponsiveFinancialTable = {
		LastItem: null,
		FirstItem: null,
		RenderCarousel: function RenderCarousel(data, Parent) {
			Parent.find('.owl-carousel').remove();
			Parent.find('.states_heading').parent().append('<div class="owl-wrapper"><div class="owl-carousel"></div></div>');
			var self = this,
			    Header = data[0].Header,
			    Values = data[0].Values,
			    StatesHeading = Parent.find('.states_heading'),
			    Carousel = Parent.find('.owl-carousel');

			self.FirstItem = data[0].Header[1];
			self.LastItem = data[0].Header[data[0].Header.length - 1];
			Parent.find('.states_heading').empty();
			for (var key in Header) {
				if (key == 0) {
					StatesHeading.append('<div class="year_heading">' + Header[key] + '</div>');
				} else {
					Carousel.append('<div class="article"><div class="year_heading" data-head="' + Header[key] + '">' + Header[key] + '</div></div>');
				}
			}

			for (var key in Values) {
				var CurrentValue = Values[key];
				for (var item in CurrentValue) {
					if (item == 0) {
						StatesHeading.append('<div class="RB16">' + CurrentValue[item] + '</div>');
					} else {
						$(Parent.find('.article')[item - 1]).append('<div class="R16">' + CurrentValue[item] + '</div>');
					}
				}
			}
			self.InitateCarousel(Parent);
			self.HeightManagement(Parent);
			self.ChangeStateEvents(Parent);
		},
		ChangeStateEvents: function ChangeStateEvents(Parent) {
			var OwlNext = Parent.find('.owl-next'),
			    OwlPrevious = Parent.find('.owl-previous'),
			    self = this;

			$('.owl-prev').addClass('disabled');
			$(document).on('click', '.owl-prev, .owl-next', function () {
				setTimeout(function () {
					var ActiveElements = Parent.find('.owl-item.active .year_heading'),
					    ActiveElementsTexts = [];

					ActiveElements.each(function () {
						ActiveElementsTexts.push($(this).text().trim());
					});
					$('.owl-prev, .owl-next').removeClass('disabled');
					if (self.FirstItem.trim() == ActiveElementsTexts[0]) {
						$('.owl-prev').addClass('disabled');
					} else {
						$('.owl-prev').removeClass('disabled');
					}
					if (self.LastItem.trim() == ActiveElementsTexts[ActiveElementsTexts.length - 1]) {
						$('.owl-next').addClass('disabled');
					} else {
						$('.owl-next').removeClass('disabled');
					}
				}, 400);
			});
		},
		HeightManagement: function HeightManagement(Parent) {
			Parent.find('.states_heading .RB16').each(function (key) {
				var Height = $(this).height(),
				    Item = [];

				$('.article').each(function () {
					var CurrentItem = $(this).find('.R16')[key];
					Item.push(CurrentItem);
				});

				for (var i = 0; i < Item.length; i++) {
					$(Item[i]).height(Height);
				}
			});
		},
		RenderModal: function RenderModal(data, Parent) {
			var Header = data[0].Header,
			    Values = data[0].Values,
			    FinanceModal = $('#modal-financialresults'),
			    ModalTable = FinanceModal.find('.table');

			ModalTable.append('<div class="tableRow"></div>');
			for (var key in Header) {
				ModalTable.find('.tableRow').append('<div class="tableHead"><strong>' + Header[key] + '</strong></div>');
			}

			for (var key in Values) {
				ModalTable.append('<div class="tableRow"></div>');
				var CurrentValue = Values[key];
				for (var item in CurrentValue) {
					ModalTable.find('.tableRow:last-child').append('<div class="tableCell">' + CurrentValue[item] + '</div>');
				}
			}
		},
		InitateCarousel: function InitateCarousel(Parent) {
			Parent.find('.owl-carousel').owlCarousel({
				loop: false,
				merge: true,
				margin: 1,
				nav: true,
				onDragged: function onDragged() {
					var ActiveElements = Parent.find('.owl-item.active .year_heading'),
					    ActiveElementsTexts = [];

					ActiveElements.each(function () {
						ActiveElementsTexts.push($(this).text().trim());
					});
					$('.owl-prev, .owl-next').removeClass('disabled');
					if (self.FirstItem.trim() == ActiveElementsTexts[0]) {
						$('.owl-prev').addClass('disabled');
					} else {
						$('.owl-prev').removeClass('disabled');
					}
					if (self.LastItem.trim() == ActiveElementsTexts[ActiveElementsTexts.length - 1]) {
						$('.owl-next').addClass('disabled');
					} else {
						$('.owl-next').removeClass('disabled');
					}
				},
				navText: ["<img src='/dist/img/lessthan.png'/>", "<img src='/dist/img/greaterthan.png'/>"],
				slideBy: 1,
				responsive: {
					0: {
						items: 3
					},
					678: {
						items: 3
					},
					320: {
						items: 2
					},
					480: {
						items: 2
					},
					1000: {
						items: 5
					}
				}
			});
		},
		ModalEvents: function ModalEvents() {
			$(document).on('click', 'a[data-toggle="modal-financialresults"]', function (e) {
				e.preventDefault();
				$('#modal-financialresults').show();
			});
			$(document).on('click', '#modal-financialresults .table_close', function (e) {
				e.preventDefault();
				$(this).parents('.ID-responsive-table-modal').hide();
			});
			$(document).on('click', '.ID-responsive-table-modal', function (e) {
				if ($(e.target).parents('.container').length > 0 || $(e.target).hasClass('.container')) {
					return false;
				} else {
					$(this).hide();
				}
			});
		},
		RenderTable: function RenderTable(data, Parent) {
			Parent.find('.states_heading').parent().remove();
			Parent.append('<div class="table-wrapper"><div class="table"></div></div>');
			var Wrapper = $('#financialresults .table'),
			    Header = data[0].Header,
			    Values = data[0].Values;

			Wrapper.append('<div class="tableRow"></div>');

			for (var key in Header) {
				Wrapper.find('.tableRow:last-child').append('<div class="tableHead">' + Header[key] + '</div>');
			}

			for (var keyItem in Values) {
				var Items = Values[keyItem];
				Wrapper.append('<div class="tableRow"></div>');
				for (var item in Items) {
					Wrapper.find('.tableRow:last-child').append('<div class="tableCell">' + Items[item] + '</div>');
				}
			}
		},
		init: function init(data, Parent) {
			var self = this,
			    windowSize = $(document).width();

			if (windowSize > 736) {
				self.RenderTable(data, Parent);
			} else {
				self.RenderCarousel(data, Parent);
			}
			self.RenderModal(data, Parent);
			self.ModalEvents();
		}

	};

	if ($('#financialresults').length > 0) {
		ResponsiveFinancialTable.init(window.jsonResultFinancial, $('#financialresults'));
	}
})();

},{}],11:[function(require,module,exports){
"use strict";

(function (argument) {
	var MergeAcquistion = {
		CurrentArray: [],
		MonthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
		RenderDesktopVersion: function RenderDesktopVersion(data, Parent) {
			Parent.find('tbody.visible-lg').remove();
			Parent.append('<tbody class="visible-lg"></tbody>');

			var Wrapper = Parent.find('tbody.visible-lg');

			for (var key in data) {
				Wrapper.append('<tr></tr>');
				Wrapper.find('tr:last-child').append('<td align="left" deal="Month" type="date" month="' + data[key].Month + '" class="R16 pad-10">' + this.MonthNames[data[key].Month - 1] + '</td>');
				Wrapper.find('tr:last-child').append('<td align="left" deal="Acquirer" type="text" class="R16 pad-10">' + data[key].Acquirer + '</td>');
				Wrapper.find('tr:last-child').append('<td align="left" deal="Target" type="text" class="R16 pad-10">' + data[key].Target + '</td>');
				Wrapper.find('tr:last-child').append('<td align="left" deal="TargetSector" type="text" class="R16 pad-10">' + data[key].TargetSector + '</td>');
				Wrapper.find('tr:last-child').append('<td align="left" deal="TargetLocation" type="text" class="R16 pad-10">' + data[key].TargetLocation + '</td>');
				Wrapper.find('tr:last-child').append('<td align="right" deal="Detail" type="number" class="R16 pad-10">' + data[key].Detail + '</td>');
				if (data[key].Price) {
					var Price = data[key].Price;
				} else {
					Price = '--';
				}
				Wrapper.find('tr:last-child').append('<td align="right" deal="Price" type="number" class="R16 pad-10">' + Price + '</td>');
			}
		},
		SortingEvent: function SortingEvent(data, Parent) {
			var self = this;
			$(document).on('click', '.sorting-buttons a', function (e) {
				e.preventDefault();
				var Type = $(this).attr('type'),
				    Category = $(this).attr('category'),
				    Index = $(this).parents('th').index(),
				    SortingArray = [],
				    MyArray = self.CurrentArray,
				    Body = Parent.find('tbody.visible-lg'),
				    AppendToEndElements = [],
				    SortedElements = [],
				    SortingType = $(this).parents('.sorting-buttons').attr('deal');

				//Fetching Elements
				Body.find('tr').each(function (key) {
					var Text = "";
					if (Category === 'month') {
						SortingArray.push(parseInt($($(this).find('td')[Index]).attr('month')));
					} else {
						if ($($(this).find('td')[Index]).text().includes('<a href=')) {
							Text = $($(this).find('td')[Index]).find('a').text();
						} else {
							Text = $($(this).find('td')[Index]).text();
						}
						SortingArray.push(Text);
					}
				});
				console.log(SortingArray);
				if (Category === 'month') {
					if (Type === 'ascending') {
						SortingArray.sort(function (a, b) {
							return a - b;
						});
					} else {
						SortingArray.sort(function (a, b) {
							return b - a;
						});
					}
				} else {
					if (Type === 'ascending') {
						SortingArray.sort();
					} else {
						SortingArray.sort().reverse();
					}
				}
				console.log(SortingArray);

				var CurrentItem = self.CurrentArray;
				for (var i in SortingArray) {
					for (var j in CurrentItem) {
						if (SortingArray[i] == CurrentItem[j][SortingType]) {
							SortedElements.push(CurrentItem[j]);
						}
					}
				}
				if (AppendToEndElements.length > 0) {
					SortedElements.push(AppendToEndElements);
				}
				// var UniqueArray = [];
				// for(var k = 0; k < SortedElements.length; k++) {
				// 	if(!SortedElements.contains(SortedElements[k])) {
				// 		UniqueArray.push(SortedElements[k]);
				// 	}
				// }

				self.CurrentArray = SortedElements;
				self.RenderDesktopVersion(self.CurrentArray, $('.merge-acquistion'));
			});
		},
		FilterEvent: function FilterEvent(data, Parent) {
			var InputValues = Parent.find('th').find('input'),
			    self = this;

			InputValues.on('keyup', function () {
				var textFieldValue = $(this).val(),
				    DealType = $(this).parents('th').find('.sorting-buttons').attr('deal'),
				    Index = $(this).parents('th').index(),
				    Body = Parent.find('tbody.visible-lg'),
				    regExp = new RegExp(textFieldValue, "i"),
				    ItemArray = [],
				    FilteredArray = [],
				    Obj = {},
				    StartField = Parent.find('.range-field')[0].value,
				    EndField = Parent.find('.range-field')[1].value;

				Parent.find('th').each(function (key) {
					var DealType = $(this).find('.sorting-buttons').attr('deal');
					if (DealType != 'Price') {
						if ($(this).find('input').val().length > 0) {
							Obj[DealType] = $(this).find('input').val();
						}
					} else {
						var Start, End;
						if ($(this).find('input.start').val()) {
							Start = parseFloat($(this).find('input.start').val());
						} else {
							Start = 0;
						}
						if ($(this).find('input.end').val()) {
							End = parseFloat($(this).find('input.end').val());
						} else {
							End = 0;
						}
						Obj[DealType] = {
							Start: Start,
							End: End
						};
						// Obj[DealType]['End'] =
					}
				});

				// Body.find('tr').each(function(key) {
				// 	ItemArray.push($($(this).find('td')[Index]).text());
				// });

				//for(var i in ItemArray) {
				// if(regExp.test(ItemArray[i])) {
				// 	for(var j = 0; j < window.jsonMergeAcquistion.length; j++) {
				// 		if(ItemArray[i] == window.jsonMergeAcquistion[j][DealType]) {
				// 			FilteredArray.push(window.jsonMergeAcquistion[j]);
				// 		}
				// 	}
				// }
				//}
				if (Object.keys(Obj).length > 0) {
					for (var i in window.jsonMergeAcquistion) {
						var count = 0;
						for (var j in Obj) {
							var text = "";
							if (j == 'Price') {
								var Price = parseFloat(window.jsonMergeAcquistion[i][j]);
								// if(StartField.length > 0 && EndField.length > 0) {
								// 	if((Price > parseFloat(StartField)) && (Price < parseFloat(EndField))) {
								// 		count++;
								// 	}
								// } else if(StartField.length > 0 && EndField.length == 0) {
								// 	if((Price > parseFloat(StartField))) {
								// 		count++;
								// 	}
								// } else {
								// 	if((Price < parseFloat(EndField))) {
								// 		count++;
								// 	}
								// }
								if (Obj[j]['End'] != 0) {
									if (Price > Obj[j]['Start'] && Price < Obj[j]['End']) {
										count++;
									}
								} else {
									if (Price > Obj[j]['Start']) {
										count++;
									}
								}
							} else if (j == 'Month') {
								var MonthValue = window.jsonMergeAcquistion[i][j] - 1;
								if (self.MonthNames[MonthValue].toLowerCase().includes(Obj[j].toLowerCase())) {
									count++;
								}
							} else {
								if (window.jsonMergeAcquistion[i][j].includes('<a href=')) {
									text = $(window.jsonMergeAcquistion[i][j]).text();
								} else {
									text = window.jsonMergeAcquistion[i][j];
								}
								if (text.toLowerCase().includes(Obj[j].toLowerCase())) {
									count++;
								}
							}
						}

						if (count === Object.keys(Obj).length) {
							FilteredArray.push(window.jsonMergeAcquistion[i]);
						}
					}
				} else {
					FilteredArray = window.jsonMergeAcquistion;
				}
				self.RenderDesktopVersion(FilteredArray, $('.merge-acquistion'));
			});
		},
		YearChange: function YearChange() {
			$(document).on('change', '#idYearSelect', function () {
				var Href = $(this).attr('data-href'),
				    value = $(this).find('.selectivity-single-selected-item').attr('data-item-id'),
				    newUrl = window.location.href.split('?')[0].concat("?year=" + value);

				window.location = newUrl;
			});
		},
		init: function init(data, Parent) {
			this.CurrentArray = data;
			this.RenderDesktopVersion(data, Parent);
			this.SortingEvent(data, Parent);
			this.FilterEvent(data, Parent);
			this.YearChange();
			//this.RenderMobileVersion(data, Parent);
		}
	};

	if ($('.merge-acquistion').length > 0) {
		MergeAcquistion.init(window.jsonMergeAcquistion, $('.merge-acquistion'));
	}
})();

},{}],12:[function(require,module,exports){
'use strict';

(function () {
	// body...
	'use strict';

	var ResponsiveFinancialTable = {
		RenderTable: function RenderTable(data, Parent) {
			var Tables = $('#quarterlyresults, #modal-quarterlyresults'),
			    QuaterlyDataHeader = data[0].QuaterlyDataHeader,
			    QuaterlyData = data[0].QuaterlyData,
			    QuaterlyResultHeader = data[0].QuaterlyResultHeader,
			    QuaterlyResult = data[0].QuaterlyResultData[0];

			$('#quarterlyresults').find('.states_heading').parent().remove();
			$('#quarterlyresults').append('<div class="table-wrapper"><div class="table"></div></div>');
			var Wrapper = $('#quarterlyresults .table, #modal-quarterlyresults .table');

			Wrapper.append('<div class="tableRow"></div>');
			for (var key in QuaterlyDataHeader) {
				Wrapper.find('.tableRow:last-child').append('<div class="tableHead">' + QuaterlyDataHeader[key] + '</div>');
			}

			for (var key in QuaterlyData) {
				Wrapper.append('<div class="tableRow"></div>');
				var Content = QuaterlyData[key];
				for (var item in Content) {
					Wrapper.find('.tableRow:last-child').append('<div class="tableCell">' + Content[item] + '</div>');
				}
			}

			Wrapper.append('<div class="tableRow"></div>');
			for (var key in QuaterlyResultHeader) {
				Wrapper.find('.tableRow:last-child').append('<div class="tableHead">' + QuaterlyResultHeader[key] + '</div>');
			}

			Wrapper.append('<div class="tableRow"></div>');
			for (var key in QuaterlyResult) {
				Wrapper.find('.tableRow:last-child').append('<div class="tableCell">' + QuaterlyResult[key] + '</div>');
			}
		},
		ModalEvents: function ModalEvents() {
			$(document).on('click', 'a[data-toggle="modal-quarterlyresults"]', function (e) {
				e.preventDefault();
				$('#modal-quarterlyresults').show();
			});
			$(document).on('click', '#modal-quarterlyresults .table_close', function (e) {
				e.preventDefault();
				$(this).parents('.ID-responsive-table-modal').hide();
			});
			$(document).on('click', '.ID-responsive-table-modal', function (e) {
				if ($(e.target).parents('.container').length > 0 || $(e.target).hasClass('.container')) {
					return false;
				} else {
					$(this).hide();
				}
			});
		},
		init: function init(data, Parent) {
			var self = this;
			self.RenderTable(data, Parent);
			self.ModalEvents();
		}

	};

	if ($('#quarterlyresults').length > 0) {
		ResponsiveFinancialTable.init(window.jsonResultQuarterly, $('#quarterlyresults'));
	}
})();

},{}],13:[function(require,module,exports){
'use strict';

(function () {
	// body...
	'use strict';

	var ResponsiveTable = {
		GetAjaxData: function GetAjaxData(data, id) {
			var self = this;
			if (data) {
				window.ResponsiveJSON = data;
				window.ResponsiveModalJSON = data;
				self.RenderCarousel(data, id);
				self.RenderModal(data, id);
				//}
			}
		},
		RenderModal: function RenderModal(data, id) {
			var ModalId = $(id).attr('data-modal'),
			    Parent = $('#' + ModalId),
			    HeaderData = data[0],
			    Header = "",
			    category = "";

			Parent.find('.table').empty();
			for (var key in HeaderData) {
				if (key !== "ID") {
					Header += "<div class='tableHead'><strong>" + key + "</strong><a href='#' class='sort' category='" + category + "' type='ascending'></a><a href='#' class='sort' category='" + category + "' type='descending'></a></div>";
				}
			}
			Parent.find('.table').append('<div class="tableRow">' + Header + '</div>');
			for (var key in data) {
				var Item = data[key],
				    Template = "";
				for (var val in Item) {
					var content = "";
					if (val !== "ID") {
						if (Array.isArray(Item[val])) {
							content = Item[val][0].value;
						} else {
							content = Item[val];
						}
						Template += "<div class='tableCell'>" + content + "</div>";
					}
				}
				Parent.find('.table').append('<div class="tableRow">' + Template + '</div>');
			}
		},
		RenderCarousel: function RenderCarousel(data, Parent) {

			Parent.find('.owl-carousel').remove();
			Parent.find('.states_heading').find('.RB16').remove();
			Parent.find('.states_heading').after('<div class="owl-wrapper"><div class="owl-carousel"></div></div>');
			var CreateList = window.jsonMappingData;

			for (var key in CreateList) {
				Parent.find('.owl-carousel').append('<div class="article" data-head="' + CreateList[key].Key + '"><div class="year_heading"><span>' + CreateList[key].Value + '</span><a href="#" class="sort" type="ascending"><svg class="sorting-arrows__arrow sorting-arrows__arrow--up"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#sort-down-arrow"></use></svg></a><a href="#" class="sort" type="descending"><svg class="sorting-arrows__arrow sorting-arrows__arrow--down"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#sort-down-arrow"></use></svg></a></div></div>');
			}
			var Items = Parent.find('.owl-carousel').find('.article');

			for (var i = 0; i < data.length; i++) {
				var Item = data[i],
				    index = i;
				Parent.find('.states_heading').append('<div class="RB16"><a href="' + data[i].CompanyPageUrl + '">' + data[i].Company + '</a></div>');
				for (var key in Item) {
					if (Array.isArray(Item[key])) {
						Parent.find('.article[data-head="' + key + '"]').append('<div  class="R16 TableRow' + index + '">' + Item[key][0].value + '</div>');
					}
				}
			}
			this.InitiateCarousel(Parent);
			this.HeightManagement(Parent);
		},
		HeightManagement: function HeightManagement(Parent) {
			var HeadingItems = Parent.find('.year_heading'),
			    MaxHeadingHeight = 0;

			Parent.find('.states_heading .RB16').each(function (key) {
				var Height = $(this).height(),
				    Item = [];

				$('.article').each(function () {
					var CurrentItem = $(this).find('.R16')[key];
					Item.push(CurrentItem);
				});

				for (var i = 0; i < Item.length; i++) {
					$(Item[i]).height(Height);
				}
			});
			// HeadingItems.height(0);
			HeadingItems.each(function () {
				var thisHeight = $(this).height();
				if (thisHeight > MaxHeadingHeight) {
					MaxHeadingHeight = thisHeight;
				}
			});
			$(HeadingItems).find('span').height(MaxHeadingHeight);
		},
		InitiateCarousel: function InitiateCarousel(Parent) {

			Parent.find('.owl-carousel').owlCarousel({
				loop: true,
				margin: 10,
				merge: true,
				nav: true,
				navText: ["<img src='/dist/img/lessthan.png'/>", "<img src='/dist/img/greaterthan.png'/>"],
				slideBy: 3,
				responsive: {
					0: {
						items: 3
					},
					678: {
						items: 3
					},
					320: {
						items: 2
					},
					480: {
						items: 2
					},
					1000: {
						items: 3
					}
				}
			});
		},
		ModalEvents: function ModalEvents() {
			$(document).on('click', 'a[data-toggle="modal-annualresults"]', function (e) {
				e.preventDefault();
				$('#modal-annualresults').show();
			});
			$(document).on('click', '#modal-annualresults .table_close', function (e) {
				e.preventDefault();
				$(this).parents('.ID-responsive-table-modal').hide();
			});
			$(document).on('click', '.ID-responsive-table-modal', function (e) {
				if ($(e.target).parents('.container').length > 0 || $(e.target).hasClass('.container')) {
					return false;
				} else {
					$(this).hide();
				}
			});
		},
		SortingModal: function SortingModal(id) {
			var self = this;

			$(document).on('click', '#modal-table .sort', function (e) {
				e.preventDefault();
				var MainData = window.ResponsiveJSON,
				    Index = $(this).parents('.tableHead').index(),
				    Items = [],
				    type = $(this).attr('type'),
				    Category = $(this).attr('category'),
				    ModalData = window.ResponsiveModalJSON,
				    UpdatedJson = [],
				    HeadingText = $(this).parents('.tableHead').find('strong').text();

				$('#modal-table .tableRow').each(function () {
					if ($(this).find('.tableCell').length > 0) {
						var Text = $($(this).find('.tableCell')[Index]).text();
						if (HeadingText == 'Company') {
							Items.push(Text);
						} else {
							Items.push(parseFloat(Text));
						}
					}
				});

				if (HeadingText == 'Company') {
					if (type == "descending") {
						Items.sort().reverse();
					} else {
						Items.sort();
					}

					for (var key in Items) {
						for (var json in ModalData) {
							if (Items[key] == ModalData[json].Company) {
								UpdatedJson.push(ModalData[json]);
							}
						}
					}
				} else {
					if (type == "descending") {
						Items.sort(function (a, b) {
							return b - a;
						});
					} else {
						Items.sort(function (a, b) {
							return a - b;
						});
					}

					for (var key in Items) {
						for (var json in ModalData) {
							if (Items[key] == ModalData[json][HeadingText][0].value) {
								UpdatedJson.push(ModalData[json]);
							}
						}
					}
				}
				window.ResponsiveModalJSON = UpdatedJson;

				self.RenderModal(window.ResponsiveModalJSON, id);
			});
		},
		SortingFunctionality: function SortingFunctionality(id) {
			//Sorting Functionality
			var self = this;
			$(document).on('click', '.year_heading .sort', function (e) {
				e.preventDefault();
				var Parent = $(this).parents('.article'),
				    Values = Parent.find('.R16'),
				    Content = Parent.attr('data-head'),
				    type = $(this).attr('type'),
				    category = $(this).attr('category'),
				    Items = [],
				    CarouselControl = $(this).parents('.ID-Responsive-Table').find('.owl-controls').find('.owl-dots'),
				    ControlIndex = CarouselControl.find('.active').index(),
				    CarouselStyles = $('#annualresults .owl-stage').attr('style'),
				    OwlItems = $('#annualresults .owl-stage').find('.owl-item'),
				    ClonedItems = [],
				    ActiveItems = [];

				OwlItems.each(function () {
					if ($(this).hasClass('cloned')) {
						ClonedItems.push($(this).index());
					}
					if ($(this).hasClass('active')) {
						ActiveItems.push($(this).index());
					}
				});
				$('.year_heading .sort').removeClass('active');
				$(this).addClass('active');

				if (category == 'companies') {
					var CompanyNames = $(this).parents('.states_heading').find('.RB16');

					CompanyNames.each(function () {
						Items.push($(this).text());
					});
					if (type == "descending") {
						Items.sort().reverse();
					} else {
						Items.sort();
					}
				} else {
					Values.each(function () {
						if ($(this).length > 0) {
							Items.push(parseFloat($(this).text()));
						}
					});
					if (type == "descending") {
						Items.sort(function (a, b) {
							return b - a;
						});
					} else {
						Items.sort(function (a, b) {
							return a - b;
						});
					}
				}

				self.RecreateObject(Content, Items, window.ResponsiveJSON, id, category);

				$('#annualresults .owl-stage').attr('style', CarouselStyles);
				$('#annualresults .owl-stage .owl-item').removeClass('cloned');
				$('#annualresults .owl-stage .owl-item').removeClass('active');
				for (var key in ClonedItems) {
					$($('#annualresults .owl-stage .owl-item')[ClonedItems[key]]).addClass('cloned');
				}

				for (var key in ActiveItems) {
					$($('#annualresults .owl-stage .owl-item')[ActiveItems[key]]).addClass('active');
				}

				$('#annualresults .owl-dot').removeClass('active');
				$($('#annualresults .owl-dot')[ControlIndex]).addClass('active');
				$('#annualresults .article[data-head="' + Content + '"] .sort[type="' + type + '"]').addClass('active');
			});
		},
		RecreateObject: function RecreateObject(Content, SortedItem, MainArray, id, category, modal) {
			var self = this,
			    RecreatedArray = [];
			// id.find('.RB16').remove();
			if (category === 'companies') {
				for (var i = 0; i < SortedItem.length; i++) {
					for (var key in MainArray) {
						var Name = MainArray[key].Company;
						if (Name == SortedItem[i]) {
							RecreatedArray.push(MainArray[key]);
						}
					}
				}
			} else {
				for (var i = 0; i < SortedItem.length; i++) {
					for (var key in MainArray) {
						var _Object = MainArray[key];
						if (_Object[Content][0].value == SortedItem[i]) {
							RecreatedArray.push(_Object);
						}
					}
				}
				for (var key in MainArray) {
					var _Object = MainArray[key];
					if (_Object[Content][0].value.length === 0) {
						RecreatedArray.push(_Object);
					}
				}
			}
			// $owl.trigger('destroy.owl.carousel');

			if (modal) {
				window.ResponsiveModalJSON = RecreatedArray;
				self.RenderModal(window.ResponsiveModalJSON, id);
			} else {
				window.ResponsiveJSON = RecreatedArray;
				self.RenderCarousel(window.ResponsiveJSON, id);
			}
		},
		init: function init(data, id) {
			var self = this;
			self.GetAjaxData(data, id);
			self.ModalEvents();
			self.SortingFunctionality(id);
			self.SortingModal(id);
		}
	};

	if ($('#annualresults').length > 0) {
		ResponsiveTable.init(window.jsonResultAnnual, $('#annualresults'));
	}
})();

},{}],14:[function(require,module,exports){
'use strict';

(function (argument) {
	var LatestCasuality = {
		RenderLinks: function RenderLinks(data, Parent) {
			var latestcasualties = data[0].latestcasualties,
			    Html = "";

			for (var key in latestcasualties) {
				Html += '<li class="article-topics__li"><a href="' + latestcasualties[key].url + '"><strong>' + latestcasualties[key].title + '</strong> - ' + latestcasualties[key].date + ' </a></li>';
			}
			Parent.find('ul').append(Html);
			//<li class="article-topics__li"><a href="#"><strong>MCC Shanghai</strong> - 01.01.2017</a></li>
		},
		init: function init(data, parent) {
			this.RenderLinks(data, parent);
		}
	};

	if ($('.lloyd-related-links').length > 0) {
		LatestCasuality.init(window.jsonLatestCasualties, $('.lloyd-related-links'));
	}
})();

},{}],15:[function(require,module,exports){
'use strict';

(function () {
	var CasualityDetail = {
		RenderTable: function RenderTable(data, Parent) {
			var Data = data[0].casualtyDetail;

			Parent.append('<thead class="table_head">' + '<tr>' + '<th colspan="2" class="pad-20">' + Data.Heading + '</th>' + '</tr>' + '</thead>');
			Parent.append('<tbody></tbody>');
			var Body = Parent.find('tbody');
			for (var key in Data) {
				if (key != 'Heading') {
					if (Array.isArray(Data[key])) {
						if (key == 'Messages') {
							var StrMsg = "",
							    Messages = Data[key];
							for (var i in Messages) {
								StrMsg += "<p><strong>" + Messages[i].date + "</strong>" + Messages[i].message + "</p>";
							}
							Body.append('<tr>' + '<td class="R16">' + key + '</td>' + '<td class="R16">' + StrMsg + '</td>' + '</tr>');
						}
					} else {
						Body.append('<tr>' + '<td class="R16">' + key + '</td>' + '<td class="R16">' + Data[key] + '</td>' + '</tr>');
					}
				}
			}
		},
		init: function init(data, Parent) {
			this.RenderTable(data, Parent);
		}
	};

	$(document).ready(function () {
		if ($('#casualty-detail-table').length > 0) {
			CasualityDetail.init(window.jsonCasualtyDetailData, $('#casualty-detail-table'));
		}
	});
})();

},{}],16:[function(require,module,exports){
'use strict';

(function () {
	var CasualityListing = {
		HeaderLinks: [],
		JumpToArray: [],
		DesktopVersion: function DesktopVersion(data, Parent) {
			//Header
			Parent.append('<thead class="table_head"></thead>');

			var Header = Parent.find('thead.table_head'),
			    HeaderItems = this.HeaderLinks,
			    self = this;
			self.JumpToArray = [];
			Header.append('<tr class="visible-lg"></tr>');

			for (var headItem in HeaderItems) {
				Header.find('tr').append('<th class="pad-10">' + HeaderItems[headItem] + '</th>');
			}
			//Body
			Parent.append('<tbody class="visible-lg"></tbody>');

			var Wrapper = Parent.find('tbody.visible-lg');
			for (var key in data) {
				//Appending Heading
				$('#jumpTo').append('<option value="' + data[key].casualtytitle + '">' + data[key].casualtytitle + '</option>');
				self.JumpToArray.push(data[key].casualtytitle);
				Wrapper.append('<tr data-jump="' + data[key].casualtytitle + '"><td colspan="2" class="graybg RB18 pad-10"> ' + data[key].casualtytitle + '</td><td colspan="1" align="right" class="graybg RB18 pad-10"><a href="#">top</a></td></tr>');

				//Appending Body
				var CasualityData = data[key].casualtyData;
				for (var item in CasualityData) {
					Wrapper.append('<tr><td class="RB16 pad-10"><a href="' + $('#casualtyDetailUrl').val() + '?incidentId=' + CasualityData[item].incidentId + '">' + CasualityData[item].Title + '</a></td><td class="R16 pad-10">' + CasualityData[item]["Date of Incident"] + '</td><td class="R16 pad-10">' + CasualityData[item]["Area"] + '</td></tr>');
				}
			}
		},
		MobileVersion: function MobileVersion(data, Parent) {
			Parent.append('<tbody class="visible-sm"></tbody>');

			var Wrapper = Parent.find('tbody.visible-sm');
			for (var key in data) {
				Wrapper.append('<tr><td class="graybg RB18 pad-full-10">' + data[key].casualtytitle + '</td><td align="right" class="graybg RB18 pad-10"><a href="#">top</a></td></tr>');

				var HeaderItems = this.HeaderLinks;
				var CasualData = data[key].casualtyData;

				for (var key in CasualData) {
					for (var i in HeaderItems) {
						Wrapper.append('<tr>' + '<td class="pad-10 R21_GrayColor">' + HeaderItems[i] + '</td>' + '<td class="pad-10 R21_RedColor">' + CasualData[key][HeaderItems[i]] + '</td>' + '</tr>');
					}
				}
			}
		},
		RenderTable: function RenderTable(data, Parent) {
			Parent.empty();
			this.DesktopVersion(data, Parent);
			this.MobileVersion(data, Parent);
		},
		FindHeaderLinks: function FindHeaderLinks(data) {
			for (var key in data) {
				var CasualityData = data[key].casualtyData;
				for (var item in CasualityData) {
					var List = CasualityData[item];
					for (var list in List) {
						if (list != "incidentId") {
							this.HeaderLinks.push(list);
						}
					}
					break;
				}
				break;
			}
		},
		ChangeReport: function ChangeReport() {
			var self = this;
			$(document).on('change', '#relDate', function () {
				var Value = $(this).find('.selectivity-single-selected-item').attr('data-item-id');
				if (window.jsonCasualtyListing[0][Value] != undefined) {
					self.RenderTable(window.jsonCasualtyListing[0][Value], $('#casualty-listing-table'));
					$('#casualty-listing-table').show();
				} else {
					$('#casualty-listing-table').hide();
				}

				if ($('.jumpToSection #jumpTo')) {
					$('.jumpToSection #jumpTo').remove();
				}
				$('.jumpToSection').append('<select name="jumpTo" id="jumpTo" class="common-field inline"></select>');

				for (var i = 0; i < self.JumpToArray.length; i++) {
					$('#jumpTo').append('<option value="' + self.JumpToArray[i] + '">' + self.JumpToArray[i] + '</option>');
				}
				$('#jumpTo').selectivity({
					showSearchInputInDropdown: false
				});

				$(".selectivity-input .selectivity-single-select").each(function () {
					$(this).append('<span class="selectivity-arrow"><svg class="alert__icon"><use xlink:href="/dist/img/svg-sprite.svg#sort-down-arrow"></use></svg></span>');
				});
			});
			$(document).on('change', '#jumpTo', function () {
				var Value = $(this).find('.selectivity-single-selected-item').attr('data-item-id');
				var Top = $('#casualty-listing-table tr[data-jump=' + Value + ']').offset().top;

				window.scrollTo(0, Top);
			});
		},
		init: function init(data, Parent) {
			var FirstValue = $('#relDate').val(),
			    CurrentObj = data[0][FirstValue];

			this.FindHeaderLinks(CurrentObj);
			this.RenderTable(CurrentObj, Parent);
			this.ChangeReport();
		}
	};

	$(document).ready(function () {
		if ($('#casualty-listing-table').length > 0) {
			CasualityListing.init(window.jsonCasualtyListing, $('#casualty-listing-table'));
		}
	});
})();

},{}],17:[function(require,module,exports){
'use strict';

(function () {
	var marketDataTool = {
		renderShippingData: function renderShippingData(data) {
			if (data[0]['Areas'] !== undefined) {
				$('#areaCode').html(this.loadDropdownData(data[0]['Areas']));
			}
			if (data[0]['MovementTypes'] !== undefined) {
				$('#movementType').html(this.loadDropdownData(data[0]['MovementTypes']));
			}
		},
		loadDropdownData: function loadDropdownData(options) {
			var optionStr = '';
			$.each(options, function (idx, val) {
				if (idx == 0) {
					optionStr += '<option value="' + val.Value + '" selected="selected">' + val.Text + '</option>';
				} else {
					optionStr += '<option value="' + val.Value + '">' + val.Text + '</option>';
				}
			});
			return optionStr;
		},
		renderTable: function renderTable() {
			var self = this;
			$('.submit').click(function () {
				//var searchData = tableObj;
				$.ajax({
					url: '/Download/JsonDataFromFeed/ReadJsonShippingMovements/ ',
					data: { 'feed': $('#ResultTableFeedUrl').val(), 'areaCode': $('#areaCode option').val(), 'movementType': $('#movementType option').val() },
					dataType: 'json',
					type: 'GET',
					success: function success(searchData) {
						self.sendHTTPRequest(searchData);
					},
					error: function error(err) {
						console.log(err);
					}
				});

				$('.shippingData').addClass('hide');
				$('.hideMarketData').removeClass('hide');
			});

			$(document).on('click', '.moveTop', function () {
				$(window).scrollTop(0);
			});

			$('.gotolinks').on('click', 'li a', function () {
				var $this = $(this),
				    redirectLink = $this.attr('data-link');
				if (window.matchMedia("(max-width: 640px)").matches) {
					$(window).scrollTop($('#marketDataTable tr[data-mname=' + redirectLink + ']').offset().top - 40);
				} else {
					$(window).scrollTop($('#marketDataTable tr[data-name=' + redirectLink + ']').offset().top);
				}
			});
		},
		sendHTTPRequest: function sendHTTPRequest(searchData) {
			var self = this,
			    loadHead = true,
			    tableStr = '<thead class="table_head">';
			tableStr += '<tr><th colspan="7" class="pad-full-10">' + searchData[0].areaname + '</th></tr>';
			$.each(searchData[0], function (key, val) {
				if (typeof val === 'object' && loadHead) {
					loadHead = false;
					tableStr += '<tr class="visible-lg">';
					$.each(val[0], function (k, v) {
						tableStr += '<td class="pad-10">' + k + '</td>';
					});
					tableStr += '</tr>';
				}
			});
			tableStr += '</thead>';

			tableStr += self.loadDesktopView(searchData[0]);
			tableStr += self.loadMobileView(searchData[0]);

			$('#marketDataTable').html(tableStr);

			var marketLinks = '<ul>',
			    linkIdx = 0;
			$.each(searchData[0], function (key, val) {
				if (typeof val === 'object') {
					linkIdx++;
					marketLinks += '<li class="article-topics__li"><a href="javascript: void(0);" data-link=focusData_' + linkIdx + '>' + key + '</a></li>';
				}
			});
			marketLinks += '</ul>';

			$('.gotolinks').html(marketLinks);
		},

		loadDesktopView: function loadDesktopView(tableData) {
			var desktopStr = '<tbody class="visible-lg">',
			    dataIdx = 0;
			$.each(tableData, function (key, val) {
				if (typeof val === 'object') {
					dataIdx++;
					desktopStr += '<tr data-name="focusData_' + dataIdx + '">';
					desktopStr += '<td colspan="6" class="graybg RB18 pad-10">' + key + '</td>';
					desktopStr += '<td colspan="1" align="right" class="graybg RB18 pad-10 moveTop"><a href="javascript: void(0);">top</a></td>';
					desktopStr += '</tr>';

					$.each(val, function (i, v) {
						desktopStr += '<tr>';
						desktopStr += '<td class="R16 pad-10">' + v["Move Date"] + '</td>';
						desktopStr += '<td class="R16 pad-10">' + v["Vessel Name"] + '</td>';
						desktopStr += '<td class="R16 pad-10">' + v["Flag"] + '</td>';
						desktopStr += '<td class="R16 pad-10">' + v["Gross"] + '</td>';
						desktopStr += '<td class="R16 pad-10">' + v["Origin"] + '</td>';
						desktopStr += '<td class="R16 pad-10">' + v["Destination"] + '</td>';
						desktopStr += '<td class="R16 pad-10">' + v["Vessel Type"] + '</td>';
						desktopStr += '</tr>';
					});
				}
			});
			desktopStr += '</tbody>';
			return desktopStr;
		},
		loadMobileView: function loadMobileView(tableData) {
			var mobileStr = '<tbody class="visible-sm">',
			    dataIdx = 0;
			$.each(tableData, function (key, val) {
				if (typeof val === 'object') {
					dataIdx++;
					mobileStr += '<tr data-mname="focusData_' + dataIdx + '">';
					mobileStr += '<td colspan="2" class="graybg RB18 pad-full-10">' + key + '</td>';
					mobileStr += '</tr>';

					$.each(val, function (i, v) {
						$.each(v, function (idx, vl) {
							mobileStr += '<tr>';
							mobileStr += '<td class="pad-10 R21_GrayColor">' + idx + '</td>';
							mobileStr += '<td class="pad-10 R21_RedColor">' + vl + '</td>';
							mobileStr += '</tr>';
						});
					});
				}
			});
			mobileStr += '</tbody>';
			return mobileStr;
		},
		init: function init(data) {
			//this.renderShippingData(data);
			this.renderTable();
		}
	};

	$(document).ready(function () {
		if ($('#market-data-tool').length > 0) {
			marketDataTool.init(window.shippingMovements);
		}
	});
})();

},{}],18:[function(require,module,exports){
'use strict';

(function () {
	var marketData = {
		renderTable: function renderTable(data) {
			var tableStr = '';
			tableStr += this.loadDesktopView(data);
			tableStr += this.loadMobileView(data);

			$('#marketDataTable').html(tableStr);
		},
		loadDesktopView: function loadDesktopView(tableData) {
			var headObj = tableData[0],
			    indx = 0,
			    desktopStr = '<thead class="table_head">';
			desktopStr += '<tr class="visible-lg">';
			$.each(headObj, function (key, val) {
				desktopStr += '<td class="R16 pad-10">' + key + '</td>';
			});
			desktopStr += '</thead>';

			desktopStr += '<tbody class="visible-lg">';
			$.each(tableData, function (idx, val) {
				desktopStr += '<tr>';
				$.each(val, function (k, v) {
					var cls = v.split(' ')[1].indexOf('-') !== -1 ? 'fall' : 'rise';
					if (indx >= 1) {
						desktopStr += '<td class="R16 pad-10">' + v.split(' ')[0] + '<span class="' + cls + '">' + v.split(' ')[1] + '</span></td>';
					} else {
						desktopStr += '<td class="R16 pad-10">' + v + '</td>';
					}
					indx++;
				});
				indx = 0;
				desktopStr += '</tr>';
			});

			desktopStr += '</tbody>';
			return desktopStr;
		},
		loadMobileView: function loadMobileView(tableData) {
			var mobileStr = '<tbody class="visible-sm">',
			    indx = 0;
			$.each(tableData, function (idx, val) {
				$.each(val, function (k, v) {
					indx++;
					var cls = v.split(' ')[1].indexOf('-') !== -1 ? 'fall' : 'rise';
					if (indx === 1) {
						mobileStr += '<tr>';
						mobileStr += '<td class="pad-10 R21_GrayColor">' + k + '</td>';
						mobileStr += '<td class="pad-10 R21_GrayColor">' + v + '</td>';
						mobileStr += '</tr>';
					} else {
						mobileStr += '<tr>';
						mobileStr += '<td class="pad-10 R21_GrayColor">' + k + '</td>';
						mobileStr += '<td class="pad-10 R21_GrayColor">' + v.split(' ')[0] + '<span class="' + cls + '">' + v.split(' ')[1] + '</td>';
						mobileStr += '</tr>';
					}
				});
				indx = 0;
			});
			mobileStr += '</tbody>';
			return mobileStr;
		},
		init: function init(data) {
			this.renderTable(data);
		}
	};

	$(document).ready(function () {
		if ($('#market-data').length > 0) {
			marketData.init(window.jsonBalticIndices);
		}
	});
})();

},{}],19:[function(require,module,exports){
'use strict';

(function () {
	var tankerFixtures = {
		renderDateData: function renderDateData(data) {
			if (data[0]['SelectDate'] !== undefined) {
				$('#selectDay').html(this.loadDropdownData(data[0]['SelectDate']));
			}
		},
		loadDropdownData: function loadDropdownData(options) {
			var optionStr = '';
			$.each(options, function (idx, val) {
				if (idx == 0) {
					optionStr += '<option value="' + val.Value + '" selected="selected">' + val.Text + '</option>';
				} else {
					optionStr += '<option value="' + val.Value + '">' + val.Text + '</option>';
				}
			});
			return optionStr;
		},
		renderTable: function renderTable(tableData) {
			var self = this;
			$(document).on('change', '#selectDay', function () {
				var searchData = tableData;
				/*$.ajax({
    	url: '/Download/JsonDataFromFeed/ReadJsonShippingMovements/ ',
    	data: {'feed': $('#ResultTableFeedUrl').val(), 'areaCode': $('#areaCode option').val(), 'movementType': $('#movementType option').val()},
    	dataType: 'json',
    	type: 'GET',
    	success: function (searchData) {*/
				self.sendHTTPRequest(searchData);
				/*},
    error: function (err) {
    	console.log(err)  
    }
    });*/
			});
		},
		sendHTTPRequest: function sendHTTPRequest(searchData) {
			var self = this,
			    loadHead = true,
			    tableStr = '';

			tableStr += self.loadDesktopView(searchData);
			tableStr += self.loadMobileView(searchData);

			$('#tankerFixtures').html(tableStr);
		},
		loadDesktopView: function loadDesktopView(tableData) {
			var tableStr = '';
			for (var i = 0; i < tableData.length; i++) {
				var theadFlag = true,
				    tbodyFlag = true,
				    tbodyFlagend = false,
				    idx = 0;
				tableStr += '<table class="table descView"><thead class="table_head">';
				for (var prop in tableData[i]) {
					tableStr += '<tr>';
					tableStr += '<th colspan="8" class="pad-full-10">' + prop + '</th>';
					tableStr += '</tr>';
					for (var j = 0; j < tableData[i][prop].length; j++) {
						idx++;
						if (tableData[i][prop].length == idx - 1) tbodyFlagend = true;
						var eachObj = tableData[i][prop];

						if (theadFlag) {
							theadFlag = false;
							tableStr += '<tr class="visible-lg">';
							for (var p in eachObj[j]) {
								tableStr += '<th class="pad-10">' + p + '</th>';
							}
							tableStr += '</thead>';
						}
						if (tbodyFlag) {
							tbodyFlag = false;
							tableStr += '<tbody class="visible-lg">';
						}
						tableStr += '<tr>';
						for (var p in eachObj[j]) {
							tableStr += '<td class="R16 pad-10">' + eachObj[j][p] + '</td>';
						}
						tableStr += '</tr>';
						if (tbodyFlagend) {
							tbodyFlagend = false;
							tableStr += '</tbody>';
						}
					}
				}
				tableStr += '</table>';
			}
			return tableStr;
		},
		loadMobileView: function loadMobileView(tableData) {
			var mobileStr = '',
			    dataIdx = 0;
			$.each(tableData, function (index, value) {
				mobileStr += '<table class="table mobView">';
				$.each(value, function (key, val) {
					mobileStr += '<thead class="table_head">';
					mobileStr += '<tr>';
					mobileStr += '<th colspan="8" class="pad-full-10">' + key + '</th>';
					mobileStr += '</tr>';
					mobileStr += '</thead>';

					mobileStr += '<tbody class="visible-sm">';
					$.each(val, function (i, v) {
						for (var prop in v) {
							mobileStr += '<tr>';
							mobileStr += '<td class="pad-10 R21_GrayColor">' + prop + '</td>';
							mobileStr += '<td class="pad-10 R21_GrayColorVal">' + v[prop] + '</td>';
							mobileStr += '</tr>';
						}
					});
					mobileStr += '</tbody>';
				});
				mobileStr += '</table>';
			});
			return mobileStr;
		},
		init: function init(dateObj, tableDataObj) {
			this.renderDateData(dateObj);
			this.renderTable(tableDataObj);
		}
	};

	$(document).ready(function () {
		if ($('#tanker-fixtures').length > 0) {
			tankerFixtures.init(window.dateOptions, window.tableObj);
		}
	});
})();

},{}],20:[function(require,module,exports){
'use strict';

var _controllersAnalyticsController = require('../controllers/analytics-controller');

function setClsforFlw(t) {
    for (var i = 0; i < t.length; i++) {
        var tableFlwrow = $(t[i]).find('.followrow.disabled:eq(0)');
        tableFlwrow.addClass('frow');
    }
}

function createJSONData(alltables, UserPreferences) {
    for (var i = 0; i < alltables.length; i++) {
        var currenttabtrs = $(alltables[i]).find('tbody tr'),
            pubPanPosition = $(alltables[i]).closest('.publicationPan').attr('data-row'),
            tableId = $(alltables[i]).attr('id'),
            publicationName = $(alltables[i]).find('h2').attr('data-publication'),
            subscribeStatus = $(alltables[i]).find('.subscribed').html(),
            channelId = $(alltables[i]).find('h2').attr('data-item-id'),
            channelStatus = $(alltables[i]).find('h2').attr('data-item-status');
        var alltdata = [];
        for (var j = 0; j < currenttabtrs.length; j++) {
            var eachrowAttr = $(currenttabtrs[j]).find('input[type=hidden]').attr('data-row-topic'),
                topicId = $(currenttabtrs[j]).find('input[type=hidden]').attr('data-row-item-id'),
                secondtd = $(currenttabtrs[j]).find('td.wd-25 span').html(),
                datarowNo = $(currenttabtrs[j]).attr('data-row');

            var followStatus = secondtd == $('#followingButtonText').val() ? true : false;
            var subscripStatus = subscribeStatus.toUpperCase() == 'SUBSCRIBED' ? true : false;

            alltdata.push({ 'TopicCode': eachrowAttr, 'TopicOrder': datarowNo, 'IsFollowing': followStatus, 'TopicId': topicId });
        }
        UserPreferences.PreferredChannels.push({ "ChannelCode": publicationName, "ChannelOrder": pubPanPosition, "IsFollowing": channelStatus, "ChannelId": channelId, Topics: alltdata });
    }
    sendHttpRequest(UserPreferences);
}

function sendHttpRequest(UserPreferences, setFlag, redirectUrl) {
    $.ajax({
        url: '/Account/api/PersonalizeUserPreferencesApi/Update/',
        data: { 'UserPreferences': JSON.stringify(UserPreferences) },
        dataType: 'json',
        type: 'POST',
        success: function success(data) {
            if (data && data.success) {
                $('.alert-success p').html(data.reason);
                $('.alert-success').show();
                if ($('.alert-success').length > 0) {
                    $(window).scrollTop($('.informa-ribbon').offset().top + $('.informa-ribbon').height());
                }
                if (setFlag == 'register' && redirectUrl == 'href') {
                    window.location.href = $('.registrationBtn').attr('href');
                } else if (setFlag == 'register' && redirectUrl == 'name') {
                    window.location.href = $('.registrationBtn').attr('name');
                }
            } else {
                if (setFlag == 'register') {
                    $('.alert-error.register-error p').html(data.reason);
                    $('.alert-error.register-error').show();
                } else {
                    $('.alert-error.myview-error p').html(data.reason);
                    $('.alert-error.myview-error').show();
                }
            }
        },
        error: function error(err) {
            if (err && !err.success) {
                if (setFlag == 'register') {
                    $('.alert-error.register-error p').html(data.reason);
                    $('.alert-error.register-error').show();
                } else {
                    $('.alert-error.myview-error p').html(data.reason);
                    $('.alert-error.myview-error').show();
                }
            }
        }
    });
}

function setDataRow(allpublications) {
    for (var k = 0; k < allpublications.length; k++) {
        var tbody = $(allpublications[k]).find('tbody'),
            newtrs = tbody.find('tr');
        newtrs.removeAttr('data-row');
        for (var v = 0; v < newtrs.length; v++) {
            $(newtrs[v]).attr('data-row', v + 1);
        }
    }
}

function showModal() {
    $('.modal-overlay').addClass('in');
    $('.modal-view').show();
}

function sendRegisterData(alltrs, UserPreferences, redirectUrl) {
    for (var i = 0; i < alltrs.length; i++) {
        var eachrowAttr = $(alltrs[i]).find('input[type=hidden]').attr('data-row-topic'),
            channelId = $(alltrs[i]).find('input[type=hidden]').attr('data-row-item-id'),
            secondtd = $(alltrs[i]).find('td.wd-25 span').html(),
            channelOrder = $(alltrs[i]).attr('data-row'),
            followStatus = secondtd == $('#followingButtonText').val() ? true : false;

        UserPreferences.PreferredChannels.push({ "ChannelCode": eachrowAttr, "ChannelOrder": channelOrder, "IsFollowing": followStatus, "ChannelId": channelId, "Topics": [] });
    }
    sendHttpRequest(UserPreferences, 'register', redirectUrl);
}

function sort_table(tbody, col, asc, sortstatus) {
    var rows = [];
    if (tbody[0] && tbody[0].rows) {
        var allrows = tbody[0].rows;
    } else {
        return;
    }
    if (sortstatus === 'followingBtn') {
        for (var j = 0; j < allrows.length; j++) {
            if (allrows[j].className == 'followrow disabled' || allrows[j].className == 'followrow disabled frow') {
                rows.push(allrows[j]);
            }
        }
    } else if (sortstatus === 'followingrow') {
        for (var j = 0; j < allrows.length; j++) {
            if (allrows[j].className == 'followingrow') {
                rows.push(allrows[j]);
            }
        }
    } else if (sortstatus === 'followrow') {
        for (var j = 0; j < allrows.length; j++) {
            if (allrows[j].className == 'followrow disabled' || allrows[j].className == 'followrow disabled frow') {
                rows.push(allrows[j]);
            }
        }
    }

    var rlen = rows.length,
        arr = new Array(),
        i,
        j,
        cells,
        clen;
    for (i = 0; i < rlen; i++) {
        cells = rows[i].cells;
        clen = cells.length;
        arr[i] = new Array();
        for (j = 0; j < clen; j++) {
            arr[i][j] = cells[j].innerHTML;
        }
    }
    // sort the array by the specified column number (col) and order (asc)
    arr.sort(function (a, b) {
        return a[col] == b[col] ? 0 : a[col] > b[col] ? asc : -1 * asc;
    });
    // replace existing rows with new rows created from the sorted array
    for (i = 0; i < rlen; i++) {
        //rows[i].innerHTML = "<td class='wd-55'>" + arr[i].join("</td><td class='wd-25'>") + "</td>";
        rows[i].innerHTML = "<td class='wd-55'>" + arr[i][0] + "</td><td class='wd-25'>" + arr[i][1] + "</td><td class='wd-15'>" + arr[i][2] + "</td>";
    }
}

$(function () {
    var clickedUrl = '';
    $('a').click(function (e) {
        if ($('#validatePriority') && $('#validatePriority').val() == "true") {
            if (!$(this).hasClass("validationChk")) {
                e.preventDefault();
                showModal();
            }
        }
        if ($('#validateMyViewPriority') && $('#validateMyViewPriority').val() == "true") {
            if (!$(this).hasClass("validationChk")) {
                e.preventDefault();
                showModal();
                if (!$(this).hasClass('myviewLink')) {
                    clickedUrl = $(this).attr('href');
                } else {
                    clickedUrl = $(this).attr('href') + '#' + $(this).attr('name');
                }
            }
        }
    });

    $('form').submit(function () {
        if ($('#validatePriority') && $('#validatePriority').val() == "true") {
            showModal();
            return false;
        }
        if ($('#validateMyViewPriority') && $('#validateMyViewPriority').val() == "true") {
            showModal();
            return false;
        }
    });

    $('#allPublicationsPan').on('click', '.followAllBtn', function () {
        var $this = $(this),
            curpublicPan = $this.closest('.publicationPan'),
            tbody = curpublicPan.find('tbody'),
            div = $this.closest('div'),
            $lgfollow = curpublicPan.find('.followBtn'),
            table = $('.table');
        $this.addClass('hideBtn');
        $('#validatePreference').val(1);
        div.find('.unfollowAllBtn').removeClass('hideBtn');
        curpublicPan.find('.firstrow .lableStatus').val('followinglbl');
        curpublicPan.find('.accordionStatus .lableStatus').val('followinglbl');
        $lgfollow.addClass('followingBtn').removeClass('followBtn').html($('#followingButtonText').val());
        $('#validatePriority').val(true);
        $('#validateMyViewPriority').val(true);
        for (var i = 0; i < tbody.find('.followingBtn').length; i++) {
            $(tbody.find('.followrow')[i]).attr('draggable', true);
        }

        curpublicPan.find('.unfollowAllBtn').removeClass('hideBtn');
        for (var i = 0; i < $lgfollow.length; i++) {
            $($lgfollow[i], curpublicPan).closest('tr').removeAttr('class').addClass('followingrow');
        }
        setClsforFlw(table);
        sort_table(tbody, 0, 1, 'followingrow');
    });

    $('#allPublicationsPan').on('click', '.unfollowAllBtn', function () {
        var $this = $(this),
            curpublicPan = $this.closest('.publicationPan'),
            tbody = curpublicPan.find('tbody'),
            div = $this.closest('div'),
            $lgfollowing = curpublicPan.find('.followingBtn');
        $this.addClass('hideBtn');
        $this.closest('.smfollowingBtn').find('.followAllBtn').addClass('fr');
        $('#validatePreference').val(1);
        div.find('.followAllBtn').removeClass('hideBtn');
        curpublicPan.find('.firstrow .lableStatus').val('followlbl');
        curpublicPan.find('.accordionStatus .lableStatus').val('followlbl');
        $lgfollowing.addClass('followBtn').removeClass('followingBtn').html($('#followButtonText').val());
        $('#validatePriority').val(false);
        $('#validateMyViewPriority').val(true);

        curpublicPan.find('tbody .frow').removeClass('frow');
        for (var i = 0; i < $lgfollowing.length; i++) {
            $($lgfollowing[i], curpublicPan).closest('tr').removeAttr('class').addClass('followrow disabled');
        }
        sort_table(tbody, 0, 1, 'followrow');
    });

    $('#allPublicationsPan .donesubscribe').on('click', '.followrow .followBtn', function (e) {
        var $this = $(this),
            currenttr = $this.closest('tr'),
            currentTopic = $.trim(currenttr.find('.wd-55').html().split('<input')[0]),
            currentChannel = currenttr.closest('.table').find('thead h2').html(),
            eventDetails;
        if ($('.registrationBtn') && $('.registrationBtn').length) {
            eventDetails = { "event_name": "channel_follow", "page_name": "Registration", "ga_eventCategory": "Channel Follow", "ga_eventAction": analytics_data["publication"], "ga_eventLabel": currentTopic, "follow_publication": analytics_data["publication"], "follow_channel": currentTopic };
        } else {
            eventDetails = { "event_name": "topic_follow", "page_name": "My view settings", "ga_eventCategory": "Topic Follow", "ga_eventAction": analytics_data["publication"] + ':' + currentChannel, "ga_eventLabel": currentTopic, "follow_publication": analytics_data["publication"], "follow_topic": currentTopic, "follow_channel": currentChannel };
        }
        (0, _controllersAnalyticsController.analyticsEvent)(eventDetails);

        eventDetails = {};
    });

    $('#allPublicationsPan .donesubscribe').on('click', '.followingrow .followingBtn', function (e) {
        var $this = $(this),
            currenttr = $this.closest('tr'),
            currentTopic = $.trim(currenttr.find('.wd-55').html().split('<input')[0]),
            currentChannel = currenttr.closest('.table').find('thead h2').html(),
            eventDetails;
        if ($('.registrationBtn') && $('.registrationBtn').length) {
            eventDetails = { "event_name": "channel_unfollow", "page_name": "Registration", "ga_eventCategory": "Channel Unfollow", "ga_eventAction": analytics_data["publication"], "ga_eventLabel": currentTopic, "follow_publication": analytics_data["publication"], "follow_channel": currentTopic };
        } else {
            eventDetails = { "event_name": "topic_unfollow", "page_name": "My view settings", "ga_eventCategory": "Topic Unfollow", "ga_eventAction": analytics_data["publication"] + ':' + currentChannel, "ga_eventLabel": currentTopic, "follow_publication": analytics_data["publication"], "follow_topic": currentTopic, "follow_channel": currentChannel };
        }
        (0, _controllersAnalyticsController.analyticsEvent)(eventDetails);

        eventDetails = {};
    });

    $('#allPublicationsPan .donesubscribe').on('click', '.followrow .followBtn', function (e) {
        var $this = $(this),
            followrow = $this.closest('.followrow'),
            table = $this.closest('.table'),
            followAllBtn = table.find('.followAllBtn'),
            unfollowAllBtn = table.find('.unfollowAllBtn'),
            trs = $this.closest('tbody').find('tr'),
            trsfollowing = $this.closest('tbody').find('tr.followingrow');;
        followrow.attr('draggable', true);
        $('#validatePreference').val(1);
        followrow.addClass('followingrow').removeClass('followrow disabled frow');
        $this.addClass('followingBtn').removeClass('followBtn').html($('#followingButtonText').val());
        setClsforFlw(table);
        table.find('.firstrow .lableStatus').val('followinglbl');
        table.find('.accordionStatus .lableStatus').val('followinglbl');
        $('#validateMyViewPriority').val(true);

        if (trs.hasClass('followingrow')) {
            $('#validatePriority').val(true);
            //unfollowAllBtn.addClass('hideBtn');
        }

        if ($('.followrow.disabled.frow', table).length) {
            followrow.appendTo(followrow.clone().insertBefore(table.find('.followrow.disabled.frow')));
        } else {
            followrow.clone().appendTo($this.closest('tbody'));
        }
        followrow.remove();
        if (trs.length === trsfollowing.length + 1) {
            followAllBtn.addClass('hideBtn');
            unfollowAllBtn.removeClass('hideBtn');
        } else {
            followAllBtn.removeClass('hideBtn');
            unfollowAllBtn.removeClass('hideBtn');
        }
    });

    $('#allPublicationsPan .donesubscribe').on('click', '.followingrow .followingBtn', function (e) {
        var $this = $(this),
            table = $this.closest('table'),
            followAllBtn = $this.closest('table').find('.followAllBtn'),
            unfollowAllBtn = $this.closest('table').find('.unfollowAllBtn'),
            followingrow = $this.closest('.followingrow'),
            tbody = $this.closest('tbody'),
            trs = $this.closest('tbody').find('tr'),
            disabledtrs = $this.closest('tbody').find('.followrow.disabled'),
            trsfollow = $this.closest('tbody').find('tr.followrow');
        followingrow.addClass('followrow disabled').removeClass('followingrow');
        $this.addClass('followBtn').removeClass('followingBtn').html($('#followButtonText').val());
        followingrow.clone().appendTo($this.closest('tbody'));
        followingrow.remove();
        $('#validatePreference').val(1);
        sort_table(tbody, 0, 1, 'followingBtn');
        $('#validateMyViewPriority').val(true);

        if (trs.length === disabledtrs.length + 1) {
            table.find('.firstrow .lableStatus').val('followlbl');
            table.find('.accordionStatus .lableStatus').val('followlbl');
        }
        if (trs.length === trsfollow.length + 1) {
            unfollowAllBtn.addClass('hideBtn');
            followAllBtn.removeClass('hideBtn');

            $('#validatePriority').val(false);
        } else {
            followAllBtn.removeClass('hideBtn');
            unfollowAllBtn.removeClass('hideBtn');
        }
    });

    $('.publicationPan').on('click', '.accordionImg .mobileMode', function () {
        var $this = $(this),
            allPublications = $('#allPublicationsPan'),
            pPan = $this.closest('.publicationPan'),
            thead = pPan.find('thead'),
            tbody = pPan.find('tbody'),
            trs = tbody.find('tr'),
            disabledtrs = tbody.find('tr.disabled'),
            followlbl = thead.find('.followlbl'),
            followinglbl = thead.find('.followinglbl'),
            accStatusflwLbl = thead.find('.accordionStatus.flwLbl'),
            accStatusflwBtn = thead.find('.accordionStatus.flwBtn'),
            allpubpans = allPublications.find('.publicationPan'),
            pickTxt = thead.find('.pickTxt'),
            setFlag = true;

        if ($this.hasClass('expanded')) {
            setFlag = false;
            tbody.addClass('tbodyhidden');
            //pPan.find('.smfollowingBtn').hide(); 
            accStatusflwLbl.removeClass('hideRow');
            accStatusflwBtn.addClass('hideRow');
            thead.find('.mtp').addClass('hideBtn');

            for (var i = 0; i < pickTxt.length; i++) {
                $(pickTxt[i]).closest('.accordionStatus').addClass('hideRow');
            }
            if (trs.length === disabledtrs.length) {
                followlbl.removeClass('hideBtn');
            } else {
                followinglbl.removeClass('hideBtn');
            }
            var position = $this.closest('.publicationPan').position();
            $(window).scrollTop(position.top - 40);
        } else {
            allPublications.find('tbody').addClass('tbodyhidden');
            for (var i = 0; i < allpubpans.length; i++) {
                var eachPickTxt = $(allpubpans[i]).find('thead .pickTxt');
                for (var j = 0; j < eachPickTxt.length; j++) {
                    $(eachPickTxt[j]).closest('.accordionStatus').addClass('hideRow');;
                }
            }
            thead.find('tr').removeClass('hidden');
            tbody.removeClass('tbodyhidden');
            pPan.find('.smfollowingBtn').show();
            for (var i = 0; i < pickTxt.length; i++) {
                $(pickTxt[i]).closest('.accordionStatus').removeClass('hideRow');
            }
            if (setFlag) {
                for (var i = 0; i < allpubpans.length; i++) {
                    $(allpubpans[i]).find('.accordionStatus.flwLbl').removeClass('hideRow');
                    $(allpubpans[i]).find('.accordionStatus.flwBtn').addClass('hideRow');
                }
            }
            accStatusflwLbl.addClass('hideRow');
            accStatusflwBtn.removeClass('hideRow');

            var position = $this.closest('.publicationPan').position();
            $(window).scrollTop(position.top - 40);

            for (var i = 0; i < allpubpans.length; i++) {
                var labelVal = $(allpubpans[i]).find('.firstrow .lableStatus').val();
                $('.' + labelVal, allpubpans[i]).removeClass('hideBtn');
            }
            thead.find('.mtp').addClass('hideBtn');
        }
    });

    $('.publicationPan').on('click', '.accordionImg .desktopMode', function () {
        var $this = $(this),
            allPublications = $('#allPublicationsPan'),
            pPan = $this.closest('.publicationPan'),
            accCont = pPan.find('.accCont'),
            thead = pPan.find('thead'),
            tbody = pPan.find('tbody'),
            trs = tbody.find('tr'),
            disabledtrs = tbody.find('tr.disabled'),
            flwlbl = thead.find('.flwLbl'),
            flwBtn = thead.find('.flwBtn'),
            followlbl = thead.find('.followlbl'),
            followinglbl = thead.find('.followinglbl'),
            allpubpans = allPublications.find('.publicationPan');

        if ($this.hasClass('expanded')) {
            $this.removeClass('expanded');
            tbody.addClass('tbodyhidden');
            thead.find('.mtp').addClass('hideBtn');
            accCont.addClass('tbodyhidden');
            if (trs.length === disabledtrs.length) {
                followlbl.removeClass('hideBtn');
                thead.find('.firstrow .lableStatus').val('followlbl');
            } else {
                followinglbl.removeClass('hideBtn');
                thead.find('.firstrow .lableStatus').val('followinglbl');
            }
            var position = $this.closest('.publicationPan').position();
            $(window).scrollTop(position.top);
        } else {
            allPublications.find('tbody').addClass('tbodyhidden');
            allPublications.find('.publicationPan .accordionImg span').removeClass('expanded');
            allPublications.find('.publicationPan thead tr').not(':nth-child(1)').addClass('hidden');
            allPublications.find('.publicationPan thead tr.showinview').removeClass('hidden');
            thead.find('tr').removeClass('hidden');
            $this.addClass('expanded');
            accCont.removeClass('tbodyhidden');
            tbody.removeClass('tbodyhidden');
            flwBtn.addClass('hideRow');
            flwlbl.removeClass('hideRow');

            for (var i = 0; i < allpubpans.length; i++) {
                var labelVal = $(allpubpans[i]).find('.firstrow .lableStatus').val();
                $('.' + labelVal, allpubpans[i]).removeClass('hideBtn');
            }
            thead.find('.mtp').addClass('hideBtn');

            var position = $this.closest('.publicationPan').position();
            $(window).scrollTop(position.top);
        }
    });

    var tables = $('.publicationPan table');
    setClsforFlw(tables);

    $('.saveview').click(function (e) {
        if ($('.modal-overlay').hasClass('in')) {
            window.location.href = clickedUrl;
        } else {
            var alltables = $('.table'),
                allpublicationsEles = $('.publicationPan'),
                isChannelLevel = $('#isChannelBasedRegistration').val(),
                UserPreferences = { "IsNewUser": false, "IsChannelLevel": isChannelLevel },
                allpublications = $('.publicationPan', '#allPublicationsPan');
            UserPreferences.PreferredChannels = [];
            $('#validateMyViewPriority').val(false);
            e.preventDefault();
            setDataRow(allpublications);
            allpublicationsEles.removeAttr('data-row');
            for (var i = 0; i < allpublicationsEles.length; i++) {
                var j = i + 1;
                $(allpublicationsEles[i]).attr('data-row', j);
            }
            createJSONData(alltables, UserPreferences);

            $('#validatePreference').val(0);
        }
    });

    $('.registrationBtn').click(function (e) {
        var table = $('.table', '.publicationPan'),
            alltrs = table.find('tbody tr'),
            isChannelLevel = $('#isChannelBasedRegistration').val(),
            UserPreferences = { "IsNewUser": true, "IsChannelLevel": isChannelLevel },
            allpublications = $('.publicationPan', '#allPublicationsPan');
        UserPreferences.PreferredChannels = [];

        e.preventDefault();
        if ($('#validatePriority').val() == "true" && $('#enableSavePreferencesCheck').val() === "false") {
            setDataRow(allpublications);
            sendRegisterData(alltrs, UserPreferences, 'name');
            return false;
        }
        if ($('#validatePriority').val() == "false") {
            if ($('#enableSavePreferencesCheck').val() === "true" && table.find('.followingrow').length == 0) {
                $('.alert-error.register-not-selected').show();
                return false;
            }
            setDataRow(allpublications);

            if ($('#isChannelBasedRegistration').val() == "true") {
                sendRegisterData(alltrs, UserPreferences, 'href');
            } else {
                createJSONData(table, UserPreferences);
            }
        } else {
            setDataRow(allpublications);
            sendRegisterData(alltrs, UserPreferences, 'href');
        }
    });

    $('.gotoview').click(function (e) {
        if ($('#validatePriority') && $('#validatePriority').val() == "true") {
            showModal();
        } else {
            if (+$('#validatePreference').val()) {
                e.preventDefault();
                showModal();
            }
        }
    });

    $('.close-modal, .cancel-modal').click(function () {
        $('.modal-overlay').removeClass('in');
        $('.modal-view').hide();
    });

    if ($('.publicationPan') && $('.publicationPan').length) {
        $('.publicationPan.donesubscribe').dragswap({
            element: '.table tbody tr',
            dropAnimation: true
        });

        $('#allPublicationsPan').dragswap({
            element: '.publicationPan.donesubscribe',
            dropAnimation: true
        });
    }

    $(document).on('click', '.editView', function () {
        var eventDetails = { "event_name": "myview_edit_my_view", "page_name": analytics_data["page_name"], "ga_eventCategory": "My View Page Link", "ga_eventAction": "Link Click", "ga_eventLabel": "EDIT MY VIEW" };
        (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, eventDetails));
        eventDetails = {};
    });

    $('.personalisationPan').on('click', '.loadmore', function () {
        var id = $(this).closest('.eachstoryMpan').find('.eachstory').attr('id'),
            getIdx = 0;
        for (var i = 0; i < loadPreferanceId["Sections"].length; i++) {
            if (loadPreferanceId["Sections"][i]["ChannelId"] == id) {
                getIdx = i;
                break;
            }
        }
        var eventDetails = { "event_name": "myview_load_more", "page_name": analytics_data["page_name"], "ga_eventCategory": "My View Page Publications", "ga_eventAction": analytics_data["publication"], "ga_eventLabel": loadPreferanceId["Sections"][getIdx]["ChannelName"], "publication_click": analytics_data["publication"] };

        (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, eventDetails));
        eventDetails = {};
    });
});

},{"../controllers/analytics-controller":25}],21:[function(require,module,exports){
'use strict';

window.paginationdefaults = {
	totalCategories: 30,
	categoryLimit: 10,
	currentPage: 1,
	paginationEle: 'table'
};

window.setPagination = function (source) {
	$.extend(window.paginationdefaults, source);
};

function paginationCur(fv, tv) {
	if (window.paginationdefaults.paginationEle === 'table') {
		$('tbody.hidden-xs tr', '.page-account__table').hide();
		$('tbody.hidden-lg tr', '.page-account__table').hide();
		for (var i = fv; i < tv; i++) {
			$('tbody.hidden-xs tr', '.page-account__table').eq(i).show();
			$('tbody.hidden-lg tr', '.page-account__table').eq(i).show();
		}
	} else {
		$(window.paginationdefaults.paginationEle).hide();
		for (var i = fv; i < tv; i++) {
			$(window.paginationdefaults.paginationEle).eq(i).show();
		}
	}
}

window.loadPaginationNums = function () {
	var showPageLinks = Math.ceil(window.paginationdefaults.totalCategories / window.paginationdefaults.categoryLimit),
	    linkStr = '';
	for (var i = 1; i <= showPageLinks; i++) {
		linkStr += '<a href="javascript:void(0);">' + i + '</a>';
	}
	if (showPageLinks > 1) {
		$('.pagination span').html(linkStr);
	} else {
		$('.pagination').hide();
	}

	$('.pagination span a:eq(0)').click();
	$('.pagination a:eq(0)').removeAttr('href');
};

$(function () {
	$('.pagination').on('click', 'a', function () {
		var $this = $(this),
		    $val = $this.html();
		if ($val.toLowerCase().indexOf('prev') >= 0) {
			var idx = +$('.pagination span a.active').html() - 1,
			    toVal = idx * window.paginationdefaults.categoryLimit,
			    fromVal = toVal - window.paginationdefaults.categoryLimit;

			if ($('.pagination span a:first').hasClass('active')) return;
			paginationCur(fromVal, toVal);

			var curidx = $('.pagination span a.active').index(),
			    pagesLen = $('.pagination li > span a').length - 1;
			$('.pagination span a').eq(curidx).removeClass('active');
			$('.pagination span a').eq(curidx).prev('a').addClass('active');
			$('.pagination a:last').attr('href', 'javascript:void(0);');
			if (curidx == 0) {
				$('.pagination a:eq(0)').removeAttr('href');
			}
		} else if ($val.toLowerCase().indexOf('next') >= 0) {
			var idx = +$('.pagination span a.active').html() + 1,
			    toVal = idx * window.paginationdefaults.categoryLimit,
			    fromVal = toVal - window.paginationdefaults.categoryLimit;

			if ($('.pagination span a:last').hasClass('active')) return;
			paginationCur(fromVal, toVal);

			var curidx = $('.pagination span a.active').index(),
			    pagesLen = $('.pagination li > span a').length - 1;
			$('.pagination span a').eq(curidx).removeClass('active');
			$('.pagination span a').eq(curidx).next('a').addClass('active');
			$('.pagination a:first').attr('href', 'javascript:void(0);');
			if (curidx == pagesLen) {
				$('.pagination a:last').removeAttr('href');
			}
		} else {
			if (!$this.hasClass('active')) {
				$('.pagination span a').removeClass('active').attr('href', 'javascript:void(0);');
				$this.addClass('active').removeAttr('href');
				toVal = window.paginationdefaults.categoryLimit * $val;
				fromVal = toVal - window.paginationdefaults.categoryLimit;
				paginationCur(fromVal, toVal);
				$('.pagination a:last').attr('href', 'javascript:void(0);');
				$('.pagination a:first').attr('href', 'javascript:void(0);');
				if ($('.pagination span a.active').next('a').length == 0) {
					$('.pagination a:last').removeAttr('href');
				}
				if ($('.pagination span a.active').prev('a').length == 0) {
					$('.pagination a:first').removeAttr('href');
				}
			}
		}
	});

	$('.sortable-table__header').on('click', '.sortable-table__col', function () {
		var $this = $(this),
		    table = $this.closest('.sortable-table'),
		    tbodytrs = table.find('tbody tr');
		setTimeout(function () {
			tbodytrs.removeAttr('style');
			if (!$('.pagination span a:eq(0)').hasClass('active')) {
				$('.pagination span a:eq(0)').click();
			} else {
				paginationCur(0, window.paginationdefaults.categoryLimit);
			}
		}, 1);
	});
});

},{}],22:[function(require,module,exports){
'use strict';

function loadLayoutOneData(data, idx) {
	var editMyView = loadPreferanceId.EditMyViewButtonLableText ? '<a class="editView mobview" href="' + loadPreferanceId.MyViewSettingsPageLink + '">' + loadPreferanceId.EditMyViewButtonLableText + '</a>' : '';

	var loadData = loadPreferanceId["Sections"][idx]["ChannelName"] ? '<div class="latestSubject clearfix" id="' + loadPreferanceId["Sections"][idx].ChannelId + '"><span class="sub">' + data.loadMore.latestFromText + ' ' + loadPreferanceId["Sections"][idx]["ChannelName"] + '</span>' + editMyView + '</div>' : '',
	    loadmoreLink = data.loadMore && data.loadMore.displayLoadMore ? data.loadMore.loadMoreLinkUrl : '#';
	loadData += '<div class="eachstoryMpan">';
	loadData += loadPreferanceId["Sections"][idx].ChannelId ? '<div class="eachstory layout1">' : '';
	loadData += createLayoutInner1(data);
	loadData += '</div>';
	loadData += data.loadMore && data.loadMore.displayLoadMore ? '<div class="loadmore"><span href="' + loadmoreLink + '">' + data.loadMore.loadMoreLinkText + ' ' + loadPreferanceId["Sections"][idx]["ChannelName"] + '</span></div>' : '';
	loadData += '</div>';

	//loadData += '<div class="googleAdd"><img src="/dist/img/google-add.gif"></div>';

	return loadData;
}

function createLayoutInner1(data) {
	var isArticleBookmarked = data.articles[0].isArticleBookmarked ? data.articles[0].bookmarkedText : data.articles[0].bookmarkText,
	    bookmarkTxt = data.articles[0].bookmarkText || data.articles[0].bookmarkedText ? '<span class="action-flag__label js-bookmark-label">' + isArticleBookmarked + '</span>' : '',
	    linkableUrl0 = data.articles[0].linkableUrl ? data.articles[0].linkableUrl : '#',
	    linkableUrl1 = data.articles[1].linkableUrl ? data.articles[1].linkableUrl : '#',
	    linkableUrl2 = data.articles[2].linkableUrl ? data.articles[2].linkableUrl : '#',
	    linkableUrl3 = data.articles[3].linkableUrl ? data.articles[3].linkableUrl : '#',
	    linkableUrl4 = data.articles[4].linkableUrl ? data.articles[4].linkableUrl : '#',
	    linkableUrl5 = data.articles[5].linkableUrl ? data.articles[5].linkableUrl : '#',
	    linkableUrl6 = data.articles[6].linkableUrl ? data.articles[6].linkableUrl : '#',
	    linkableUrl7 = data.articles[7].linkableUrl ? data.articles[7].linkableUrl : '#',
	    linkableUrl8 = data.articles[8].linkableUrl ? data.articles[8].linkableUrl : '#',
	    bookmarkInfo0 = data.articles[0].isArticleBookmarked ? data.articles[0].bookmarkedText : data.articles[0].bookmarkText,
	    bookmarkInfo1 = data.articles[1].isArticleBookmarked ? data.articles[1].bookmarkedText : data.articles[1].bookmarkText,
	    bookmarkInfo2 = data.articles[2].isArticleBookmarked ? data.articles[2].bookmarkedText : data.articles[2].bookmarkText,
	    bookmarkInfo6 = data.articles[6].isArticleBookmarked ? data.articles[6].bookmarkedText : data.articles[6].bookmarkText,
	    bookmarkInfo7 = data.articles[7].isArticleBookmarked ? data.articles[7].bookmarkedText : data.articles[7].bookmarkText,
	    bookmarkInfo8 = data.articles[8].isArticleBookmarked ? data.articles[8].bookmarkedText : data.articles[8].bookmarkText,
	    fbookmarkIcon0 = data.articles[0].isArticleBookmarked ? 'is-visible' : '',
	    sbookmarkIcon0 = data.articles[0].isArticleBookmarked ? '' : 'is-visible',
	    fbookmarkIcon1 = data.articles[1].isArticleBookmarked ? 'is-visible' : '',
	    sbookmarkIcon1 = data.articles[1].isArticleBookmarked ? '' : 'is-visible',
	    fbookmarkIcon2 = data.articles[2].isArticleBookmarked ? 'is-visible' : '',
	    sbookmarkIcon2 = data.articles[2].isArticleBookmarked ? '' : 'is-visible',
	    fbookmarkIcon6 = data.articles[6].isArticleBookmarked ? 'is-visible' : '',
	    sbookmarkIcon6 = data.articles[6].isArticleBookmarked ? '' : 'is-visible',
	    fbookmarkIcon7 = data.articles[7].isArticleBookmarked ? 'is-visible' : '',
	    sbookmarkIcon7 = data.articles[7].isArticleBookmarked ? '' : 'is-visible',
	    fbookmarkIcon8 = data.articles[8].isArticleBookmarked ? 'is-visible' : '',
	    sbookmarkIcon8 = data.articles[8].isArticleBookmarked ? '' : 'is-visible';

	var articleData = '';
	articleData = '<section class="article-preview topic-featured-article">';
	articleData += data.articles[0].listableImage ? '<img class="topic-featured-article__image" src="' + data.articles[0].listableImage + '">' : '';
	articleData += '<div class="article-metadata">';
	articleData += '<div class="action-flag article-preview__bookmarker pop-out__trigger js-bookmark-article" data-pop-out-type="sign-in" data-pop-out-align="right" data-bookmark-id="' + data.articles[0].id + '" data-analytics="{"bookmark": "' + bookmarkInfo0 + '", "bookmark_title": "' + data.articles[0].listableTitle + '", "bookmark_publication": "Commodities"}" data-is-bookmarked="' + data.articles[0].isArticleBookmarked + '"><span class="action-flag__label js-bookmark-label" data-label-bookmark="' + data.articles[0].bookmarkText + '" data-label-bookmarked="' + data.articles[0].bookmarkedText + '">' + bookmarkInfo0 + '</span><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark article-bookmark__bookmarked ' + fbookmarkIcon0 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmarked"></use></svg><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark ' + sbookmarkIcon0 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmark"></use></svg></div>';
	articleData += '<ul>';
	articleData += data.articles[0].listableDate ? '<li><time class="article-metadata__date">' + data.articles[0].listableDate + '</time></li>' : '';
	articleData += data.articles[0].linkableText ? '<li><h6>' + data.articles[0].linkableText + '</h6></li>' : '';
	articleData += data.articles[0].listableType ? '<li><span class="js-toggle-tooltip" data-tooltip-text="This article includes data."><svg class="article-metadata__media-type"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#chart"></use></svg></span></li>' : '';
	articleData += '</ul>';
	articleData += '</div>';
	articleData += '<div class="topic-featured-article__inner-wrapper">';
	articleData += data.articles[0].listableTitle ? '<h3 class="topic-featured-article__headline"><a href="' + linkableUrl0 + '" class="click-utag" data-info=\'{"event_name":"article_click_through","page_name":"' + analytics_data["page_name"] + '","click_through_destination":"' + data.articles[0].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","ga_eventCategory":"My View Page Articles","ga_eventAction":"' + analytics_data["publication"] + '","ga_eventLabel":"' + data.articles[0].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","publication_click":"' + analytics_data["publication"] + '"}\'>' + data.articles[0].listableTitle + '</a></h3>' : '';
	articleData += data.articles[0].listableAuthorByLine ? '<span class="article-preview__byline">' + data.articles[0].listableAuthorByLine + '</span>' : '';
	articleData += '<div class="article-summary">' + data.articles[0].listableSummary ? data.articles[0].listableSummary : '' + '</div>';
	articleData += '</div>';
	articleData += '<div class="article-preview__tags bar-separated-link-list">';
	if (data.articles[0].listableTopics) {
		for (var i = 0; i < data.articles[0].listableTopics.length; i++) {
			var getLink8 = data.articles[0].listableTopics[i].linkableUrl ? data.articles[0].listableTopics[i].linkableUrl : '#';
			articleData += '<a href="' + getLink8 + '">' + data.articles[0].listableTopics[i].linkableText + '</a>';
		}
	}
	articleData += '</div>';
	articleData += '</section>';

	articleData += '<div class="latest-news__articles">';
	articleData += '<section class="article-preview article-preview--small mobview">';
	articleData += '<div class="article-metadata">';
	articleData += '<div class="action-flag article-preview__bookmarker pop-out__trigger js-bookmark-article" data-pop-out-type="sign-in" data-pop-out-align="right" data-bookmark-id="' + data.articles[1].id + '" data-analytics="{"bookmark": "' + bookmarkInfo1 + '", "bookmark_title": "' + data.articles[1].listableTitle + '", "bookmark_publication": "Commodities"}" data-is-bookmarked="' + data.articles[1].isArticleBookmarked + '"><span class="action-flag__label js-bookmark-label" data-label-bookmark="' + data.articles[1].bookmarkText + '" data-label-bookmarked="' + data.articles[1].bookmarkedText + '">' + bookmarkInfo1 + '</span><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark article-bookmark__bookmarked ' + fbookmarkIcon1 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmarked"></use></svg><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark ' + sbookmarkIcon1 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmark"></use></svg></div>';
	articleData += '<ul>';
	articleData += data.articles[1].listableDate ? '<li><time class="article-metadata__date">' + data.articles[1].listableDate + '</time></li>' : '';
	articleData += data.articles[1].linkableText ? '<li><h6>' + data.articles[1].linkableText + '</h6></li>' : '';
	articleData += data.articles[1].listableType ? '<li><span class="js-toggle-tooltip" data-tooltip-text="This article includes data."><svg class="article-metadata__media-type"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#chart"></use></svg></span></li>' : '';
	articleData += '</ul>';
	articleData += '</div>';
	articleData += '<div class="article-preview__inner-wrapper">';
	articleData += data.articles[1].listableTitle ? '<h1 class="article-preview__headline"><a href="' + linkableUrl1 + '" class="click-utag" data-info=\'{"event_name":"article_click_through","page_name":"' + analytics_data["page_name"] + '","click_through_destination":"' + data.articles[1].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","ga_eventCategory":"My View Page Articles","ga_eventAction":"' + analytics_data["publication"] + '","ga_eventLabel":"' + data.articles[1].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","publication_click":"' + analytics_data["publication"] + '"}\'>' + data.articles[1].listableTitle + '</a></h1>' : '';
	articleData += data.articles[1].listableAuthorByLine ? '<span class="article-preview__byline">' + data.articles[1].listableAuthorByLine + '</span>' : '';
	articleData += '<div class="article-summary">';
	articleData += data.articles[1].listableSummary ? data.articles[1].listableSummary : '';
	articleData += '</div>';
	articleData += '</div>';
	articleData += '<div class="article-preview__tags bar-separated-link-list">';
	if (data.articles[1].listableTopics) {
		for (var i = 0; i < data.articles[1].listableTopics.length; i++) {
			var getLink1 = data.articles[1].listableTopics[i].linkableUrl ? data.articles[1].listableTopics[i].linkableUrl : '#';
			articleData += '<a href="' + getLink1 + '">' + data.articles[1].listableTopics[i].linkableText + '</a>';
		}
	}
	articleData += '</div>';
	articleData += '</section>';

	articleData += '<section class="article-preview article-preview--small mobview">';
	articleData += '<div class="article-metadata">';
	articleData += '<div class="action-flag article-preview__bookmarker pop-out__trigger js-bookmark-article" data-pop-out-type="sign-in" data-pop-out-align="right" data-bookmark-id="' + data.articles[2].id + '" data-analytics="{"bookmark": "' + bookmarkInfo2 + '", "bookmark_title": "' + data.articles[2].listableTitle + '", "bookmark_publication": "Commodities"}" data-is-bookmarked="' + data.articles[2].isArticleBookmarked + '"><span class="action-flag__label js-bookmark-label" data-label-bookmark="' + data.articles[2].bookmarkText + '" data-label-bookmarked="' + data.articles[2].bookmarkedText + '">' + bookmarkInfo2 + '</span><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark article-bookmark__bookmarked ' + fbookmarkIcon2 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmarked"></use></svg><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark ' + sbookmarkIcon2 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmark"></use></svg></div>';
	articleData += '<ul>';
	articleData += data.articles[2].listableDate ? '<li><time class="article-metadata__date">' + data.articles[2].listableDate + '</time></li>' : '';
	articleData += data.articles[2].linkableText ? '<li><h6>' + data.articles[2].linkableText + '</h6></li>' : '';
	articleData += data.articles[2].listableType ? '<li><span class="js-toggle-tooltip" data-tooltip-text="This article includes data."><svg class="article-metadata__media-type"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#chart"></use></svg></span></li>' : '';
	articleData += '</ul>';
	articleData += '</div>';
	articleData += '<div class="article-preview__inner-wrapper">';
	articleData += data.articles[2].listableTitle ? '<h1 class="article-preview__headline"><a href="' + linkableUrl2 + '" class="click-utag" data-info=\'{"event_name":"article_click_through","page_name":"' + analytics_data["page_name"] + '","click_through_destination":"' + data.articles[2].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","ga_eventCategory":"My View Page Articles","ga_eventAction":"' + analytics_data["publication"] + '","ga_eventLabel":"' + data.articles[2].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","publication_click":"' + analytics_data["publication"] + '"}\'>' + data.articles[2].listableTitle + '</a></h1>' : '';
	articleData += data.articles[2].listableAuthorByLine ? '<span class="article-preview__byline">' + data.articles[2].listableAuthorByLine + '</span>' : '';
	articleData += '<div class="article-summary">' + data.articles[2].listableSummary ? data.articles[2].listableSummary : '' + '</div>';
	articleData += '</div>';
	articleData += '<div class="article-preview__tags bar-separated-link-list">';
	if (data.articles[2].listableTopics) {
		for (var i = 0; i < data.articles[2].listableTopics.length; i++) {
			var getLink2 = data.articles[2].listableTopics[i].linkableUrl ? data.articles[2].listableTopics[i].linkableUrl : '#';
			articleData += '<a href="' + getLink2 + '">' + data.articles[2].listableTopics[i].linkableText + '</a>';
		}
	}
	articleData += '</div>';
	articleData += '</section>';

	articleData += '<section class="article-preview article-preview--small topics">';
	articleData += data.articles[3].linkableText ? '<h6>&nbsp;</h6>' : '';

	articleData += data.articles[3].listableTitle ? '<h1 class="article-preview_rheadline"><a href="' + linkableUrl3 + '" class="click-utag" data-info=\'{"event_name":"article_click_through","page_name":"' + analytics_data["page_name"] + '","click_through_destination":"' + data.articles[3].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","ga_eventCategory":"My View Page Articles","ga_eventAction":"' + analytics_data["publication"] + '","ga_eventLabel":"' + data.articles[3].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","publication_click":"' + analytics_data["publication"] + '"}\'>' + data.articles[3].listableTitle + '</a></h1>' : '';

	articleData += data.articles[4].listableTitle ? '<h1 class="article-preview_rheadline"><a href="' + linkableUrl4 + '" class="click-utag" data-info=\'{"event_name":"article_click_through","page_name":"' + analytics_data["page_name"] + '","click_through_destination":"' + data.articles[4].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","ga_eventCategory":"My View Page Articles","ga_eventAction":"' + analytics_data["publication"] + '","ga_eventLabel":"' + data.articles[4].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","publication_click":"' + analytics_data["publication"] + '"}\'>' + data.articles[4].listableTitle + '</a></h1>' : '';

	articleData += data.articles[5].listableTitle ? '<h1 class="article-preview_rheadline"><a href="' + linkableUrl5 + '" class="click-utag" data-info=\'{"event_name":"article_click_through","page_name":"' + analytics_data["page_name"] + '","click_through_destination":"' + data.articles[5].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","ga_eventCategory":"My View Page Articles","ga_eventAction":"' + analytics_data["publication"] + '","ga_eventLabel":"' + data.articles[5].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","publication_click":"' + analytics_data["publication"] + '"}\'>' + data.articles[5].listableTitle + '</a></h1>' : '';

	articleData += '</section>';
	articleData += '</div>';

	articleData += '<div class="latest-news__articles">';
	articleData += '<section class="article-preview article-small-preview mobview">';
	articleData += '<div class="article-metadata">';
	articleData += '<div class="action-flag article-preview__bookmarker pop-out__trigger js-bookmark-article" data-pop-out-type="sign-in" data-pop-out-align="right" data-bookmark-id="' + data.articles[6].id + '" data-analytics="{"bookmark": "' + bookmarkInfo6 + '", "bookmark_title": "' + data.articles[6].listableTitle + '", "bookmark_publication": "Commodities"}" data-is-bookmarked="' + data.articles[6].isArticleBookmarked + '"><span class="action-flag__label js-bookmark-label" data-label-bookmark="' + data.articles[6].bookmarkText + '" data-label-bookmarked="' + data.articles[6].bookmarkedText + '">' + bookmarkInfo6 + '</span><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark article-bookmark__bookmarked  ' + fbookmarkIcon6 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmarked"></use></svg><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark ' + sbookmarkIcon6 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmark"></use></svg></div>';
	articleData += '<ul>';
	articleData += data.articles[6].listableDate ? '<li><time class="article-metadata__date">' + data.articles[6].listableDate + '</time></li>' : '';
	articleData += data.articles[6].linkableText ? '<li><h6>' + data.articles[6].linkableText + '</h6></li>' : '';
	articleData += '</ul>';
	articleData += '</div>';
	articleData += '<div class="article-preview__inner-wrapper showarticle">';
	articleData += data.articles[6].listableTitle ? '<h1 class="article-preview__headline"><a href="' + linkableUrl6 + '" class="click-utag" data-info=\'{"event_name":"article_click_through","page_name":"' + analytics_data["page_name"] + '","click_through_destination":"' + data.articles[6].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","ga_eventCategory":"My View Page Articles","ga_eventAction":"' + analytics_data["publication"] + '","ga_eventLabel":"' + data.articles[6].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","publication_click":"' + analytics_data["publication"] + '"}\'>' + data.articles[6].listableTitle + '</a></h1>' : '';
	articleData += '</div>';
	articleData += '<div class="article-preview__tags bar-separated-link-list">';
	if (data.articles[6].listableTopics) {
		for (var i = 0; i < data.articles[6].listableTopics.length; i++) {
			var getLink6 = data.articles[6].listableTopics[i].linkableUrl ? data.articles[6].listableTopics[i].linkableUrl : '#';
			articleData += '<a href="' + getLink6 + '">' + data.articles[6].listableTopics[i].linkableText + '</a>';
		}
	}
	articleData += '</div>';
	articleData += '</section>';

	articleData += '<section class="article-preview article-small-preview mobview">';
	articleData += '<div class="article-metadata">';
	articleData += '<div class="action-flag article-preview__bookmarker pop-out__trigger js-bookmark-article" data-pop-out-type="sign-in" data-pop-out-align="right" data-bookmark-id="' + data.articles[7].id + '" data-analytics="{"bookmark": "' + bookmarkInfo7 + '", "bookmark_title": "' + data.articles[7].listableTitle + '", "bookmark_publication": "Commodities"}" data-is-bookmarked="' + data.articles[7].isArticleBookmarked + '"><span class="action-flag__label js-bookmark-label" data-label-bookmark="' + data.articles[7].bookmarkText + '" data-label-bookmarked="' + data.articles[7].bookmarkedText + '">' + bookmarkInfo7 + '</span><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark article-bookmark__bookmarked ' + fbookmarkIcon7 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmarked"></use></svg><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark ' + sbookmarkIcon7 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmark"></use></svg></div>';
	articleData += '<ul>';
	articleData += data.articles[7].listableDate ? '<li><time class="article-metadata__date">' + data.articles[7].listableDate + '</time></li>' : '';
	articleData += data.articles[7].linkableText ? '<li><h6>' + data.articles[7].linkableText + '</h6></li>' : '';
	articleData += '</ul>';
	articleData += '</div>';
	articleData += '<div class="article-preview__inner-wrapper showarticle">';
	articleData += data.articles[7].listableTitle ? '<h1 class="article-preview__headline"><a href="' + linkableUrl7 + '" class="click-utag" data-info=\'{"event_name":"article_click_through","page_name":"' + analytics_data["page_name"] + '","click_through_destination":"' + data.articles[7].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","ga_eventCategory":"My View Page Articles","ga_eventAction":"' + analytics_data["publication"] + '","ga_eventLabel":"' + data.articles[7].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","publication_click":"' + analytics_data["publication"] + '"}\'>' + data.articles[7].listableTitle + '</a></h1>' : '';
	articleData += '</div>';
	articleData += '<div class="article-preview__tags bar-separated-link-list">';
	if (data.articles[7].listableTopics) {
		for (var i = 0; i < data.articles[7].listableTopics.length; i++) {
			var getLink7 = data.articles[7].listableTopics[i].linkableUrl ? data.articles[7].listableTopics[i].linkableUrl : '#';
			articleData += '<a href="' + getLink7 + '">' + data.articles[7].listableTopics[i].linkableText + '</a>';
		}
	}
	articleData += '</div>';
	articleData += '</section>';

	articleData += '<section class="article-preview article-small-preview mobview">';
	articleData += '<div class="article-metadata">';
	articleData += '<div class="action-flag article-preview__bookmarker pop-out__trigger js-bookmark-article" data-pop-out-type="sign-in" data-pop-out-align="right" data-bookmark-id="' + data.articles[8].id + '" data-analytics="{"bookmark": "' + bookmarkInfo8 + '", "bookmark_title": "' + data.articles[8].listableTitle + '", "bookmark_publication": "Commodities"}" data-is-bookmarked="' + data.articles[8].isArticleBookmarked + '"><span class="action-flag__label js-bookmark-label" data-label-bookmark="' + data.articles[8].bookmarkText + '" data-label-bookmarked="' + data.articles[8].bookmarkedText + '">' + bookmarkInfo8 + '</span><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark article-bookmark__bookmarked ' + fbookmarkIcon8 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmarked"></use></svg><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark ' + sbookmarkIcon8 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmark"></use></svg></div>';
	articleData += '<ul>';
	articleData += data.articles[8].listableDate ? '<li><time class="article-metadata__date">' + data.articles[8].listableDate + '</time></li>' : '';
	articleData += data.articles[8].linkableText ? '<li><h6>' + data.articles[8].linkableText + '</h6></li>' : '';
	articleData += '</ul>';
	articleData += '</div>';
	articleData += '<div class="article-preview__inner-wrapper showarticle">';
	articleData += data.articles[8].listableTitle ? '<h1 class="article-preview__headline"><a href="' + linkableUrl8 + '" class="click-utag" data-info=\'{"event_name":"article_click_through","page_name":"' + analytics_data["page_name"] + '","click_through_destination":"' + data.articles[8].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","ga_eventCategory":"My View Page Articles","ga_eventAction":"' + analytics_data["publication"] + '","ga_eventLabel":"' + data.articles[8].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","publication_click":"' + analytics_data["publication"] + '"}\'>' + data.articles[8].listableTitle + '</a></h1>' : '';
	articleData += data.articles[8].listableAuthorByLine ? '<span class="article-preview__byline">' + data.articles[8].listableAuthorByLine + '</span>' : '';
	articleData += '</div>';
	articleData += '<div class="article-preview__tags bar-separated-link-list">';
	if (data.articles[8].listableTopics) {
		for (var i = 0; i < data.articles[8].listableTopics.length; i++) {
			var getLink8 = data.articles[8].listableTopics[i].linkableUrl ? data.articles[8].listableTopics[i].linkableUrl : '#';
			articleData += '<a href="' + getLink8 + '">' + data.articles[8].listableTopics[i].linkableText + '</a>';
		}
	}
	articleData += '</div>';
	articleData += '</section>';
	articleData += '</div>';

	articleData += '<input type="hidden" class="getPaginationNum" data-pageSize="' + data.loadMore.pageSize + '" data-pageNo="' + data.loadMore.pageNo + '" data-loadurl="' + data.loadMore.loadMoreLinkUrl + '" data-taxonomyIds="' + data.loadMore.taxonomyIds + '" />';

	return articleData;
}

function loadLayoutTwoData(data, idx) {
	var editMyView = loadPreferanceId.EditMyViewButtonLableText ? '<a class="editView mobview" href="' + loadPreferanceId.MyViewSettingsPageLink + '">' + loadPreferanceId.EditMyViewButtonLableText + '</a>' : '';

	var loadData = loadPreferanceId["Sections"][idx]["ChannelName"] ? '<div class="latestSubject clearfix" id="' + loadPreferanceId["Sections"][idx].ChannelId + '"><span class="sub">' + data.loadMore.latestFromText + ' ' + loadPreferanceId["Sections"][idx]["ChannelName"] + '</span>' + editMyView + '</div>' : '',
	    loadmoreLink = data.loadMore && data.loadMore.displayLoadMore && data.loadMore.displayLoadMore.loadMoreLinkUrl ? data.loadMore.displayLoadMore.loadMoreLinkUrl : '#';
	loadData += '<div class="eachstoryMpan">';
	loadData += loadPreferanceId["Sections"][idx].ChannelId ? '<div class="eachstory layout2">' : '';
	loadData += createLayoutInner2(data);
	loadData += '</div>';

	loadData += data.loadMore && data.loadMore.displayLoadMore ? '<div class="loadmore"><span href="' + loadmoreLink + '">' + data.loadMore.loadMoreLinkText + ' ' + loadPreferanceId["Sections"][idx]["ChannelName"] + '</span></div>' : '';

	loadData += '</div>';

	//loadData += '<div class="googleAdd"><img src="/dist/img/google-add.gif"></div>';

	return loadData;
}

function createLayoutInner2(data) {
	var linkableUrl0 = data.articles[0].linkableUrl ? data.articles[0].linkableUrl : '#',
	    linkableUrl1 = data.articles[1].linkableUrl ? data.articles[1].linkableUrl : '#',
	    linkableUrl2 = data.articles[2].linkableUrl ? data.articles[2].linkableUrl : '#',
	    linkableUrl3 = data.articles[3].linkableUrl ? data.articles[3].linkableUrl : '#',
	    linkableUrl4 = data.articles[4].linkableUrl ? data.articles[4].linkableUrl : '#',
	    linkableUrl5 = data.articles[5].linkableUrl ? data.articles[5].linkableUrl : '#',
	    linkableUrl6 = data.articles[6].linkableUrl ? data.articles[6].linkableUrl : '#',
	    linkableUrl7 = data.articles[7].linkableUrl ? data.articles[7].linkableUrl : '#',
	    linkableUrl8 = data.articles[8].linkableUrl ? data.articles[8].linkableUrl : '#',
	    bookmarkInfo0 = data.articles[0].isArticleBookmarked ? data.articles[0].bookmarkedText : data.articles[0].bookmarkText,
	    bookmarkInfo1 = data.articles[1].isArticleBookmarked ? data.articles[1].bookmarkedText : data.articles[1].bookmarkText,
	    bookmarkInfo5 = data.articles[5].isArticleBookmarked ? data.articles[5].bookmarkedText : data.articles[5].bookmarkText,
	    bookmarkInfo6 = data.articles[6].isArticleBookmarked ? data.articles[6].bookmarkedText : data.articles[6].bookmarkText,
	    bookmarkInfo7 = data.articles[7].isArticleBookmarked ? data.articles[7].bookmarkedText : data.articles[7].bookmarkText,
	    bookmarkInfo8 = data.articles[8].isArticleBookmarked ? data.articles[8].bookmarkedText : data.articles[8].bookmarkText,
	    fbookmarkIcon0 = data.articles[0].isArticleBookmarked ? 'is-visible' : '',
	    sbookmarkIcon0 = data.articles[0].isArticleBookmarked ? '' : 'is-visible',
	    fbookmarkIcon1 = data.articles[1].isArticleBookmarked ? 'is-visible' : '',
	    sbookmarkIcon1 = data.articles[1].isArticleBookmarked ? '' : 'is-visible',
	    fbookmarkIcon5 = data.articles[5].isArticleBookmarked ? 'is-visible' : '',
	    sbookmarkIcon5 = data.articles[5].isArticleBookmarked ? '' : 'is-visible',
	    fbookmarkIcon6 = data.articles[6].isArticleBookmarked ? 'is-visible' : '',
	    sbookmarkIcon6 = data.articles[6].isArticleBookmarked ? '' : 'is-visible',
	    fbookmarkIcon7 = data.articles[7].isArticleBookmarked ? 'is-visible' : '',
	    sbookmarkIcon7 = data.articles[7].isArticleBookmarked ? '' : 'is-visible',
	    fbookmarkIcon8 = data.articles[8].isArticleBookmarked ? 'is-visible' : '',
	    sbookmarkIcon8 = data.articles[8].isArticleBookmarked ? '' : 'is-visible';

	var articleData = '<div class="latest-news__articles">';
	articleData += '<section class="article-preview article-preview--small preview2">';
	articleData += data.articles[0].listableImage ? '<img class="topic-featured-article__image2 hidden-lg" src="' + data.articles[0].listableImage + '">' : '';
	articleData += '<div class="article-metadata">';
	articleData += '<div class="action-flag article-preview__bookmarker pop-out__trigger js-bookmark-article" data-pop-out-type="sign-in" data-pop-out-align="right" data-bookmark-id="' + data.articles[0].id + '" data-analytics="{"bookmark": "' + bookmarkInfo0 + '", "bookmark_title": "' + data.articles[0].listableTitle + '", "bookmark_publication": "Commodities"}" data-is-bookmarked="' + data.articles[0].isArticleBookmarked + '"><span class="action-flag__label js-bookmark-label" data-label-bookmark="' + data.articles[0].bookmarkText + '" data-label-bookmarked="' + data.articles[0].bookmarkedText + '">' + bookmarkInfo0 + '</span><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark article-bookmark__bookmarked ' + fbookmarkIcon0 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmarked"></use></svg><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark ' + sbookmarkIcon0 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmark"></use></svg></div>';
	articleData += '<ul>';
	articleData += data.articles[0].listableDate ? '<li><time class="article-metadata__date">' + data.articles[0].listableDate + '</time></li>' : '';
	articleData += data.articles[0].linkableText ? '<li><h6>' + data.articles[0].linkableText + '</h6></li>' : '';
	articleData += data.articles[0].listableType ? '<li><span class="js-toggle-tooltip" data-tooltip-text="This article includes data."><svg class="article-metadata__media-type"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#chart"></use></svg></span></li>' : '';
	articleData += '</ul>';
	articleData += '</div>';
	articleData += data.articles[0].listableImage ? '<img class="topic-featured-article__image2 hidden-xs" src="' + data.articles[0].listableImage + '">' : '';
	articleData += '<div class="article-preview__inner-wrapper">';
	articleData += data.articles[0].listableTitle ? '<h1 class="article-preview__headline"><a href="' + linkableUrl0 + '" class="click-utag" data-info=\'{"event_name":"article_click_through","page_name":"' + analytics_data["page_name"] + '","click_through_destination":"' + data.articles[0].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","ga_eventCategory":"My View Page Articles","ga_eventAction":"' + analytics_data["publication"] + '","ga_eventLabel":"' + data.articles[0].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","publication_click":"' + analytics_data["publication"] + '"}\'>' + data.articles[0].listableTitle + '</a></h1>' : '';
	articleData += data.articles[0].listableAuthorByLine ? '<span class="article-preview__byline">' + data.articles[0].listableAuthorByLine + '</span>' : '';
	articleData += '<div class="article-summary">' + data.articles[0].listableSummary ? data.articles[0].listableSummary : '' + '</div>';
	articleData += '</div>';
	articleData += '<div class="article-preview__tags bar-separated-link-list">';
	if (data.articles[0].listableTopics) {
		for (var i = 0; i < data.articles[0].listableTopics.length; i++) {
			var getLink0 = data.articles[0].listableTopics[i].linkableUrl ? data.articles[0].listableTopics[i].linkableUrl : '#';
			articleData += '<a href="' + getLink0 + '">' + data.articles[0].listableTopics[i].linkableText + '</a>';
		}
	}
	articleData += '</div>';
	articleData += '</section>';

	articleData += '<section class="article-preview article-preview--small mobview artheight">';
	articleData += '<div class="article-metadata">';
	articleData += '<div class="action-flag article-preview__bookmarker pop-out__trigger js-bookmark-article" data-pop-out-type="sign-in" data-pop-out-align="right" data-bookmark-id="' + data.articles[1].id + '" data-analytics="{"bookmark": "' + bookmarkInfo1 + '", "bookmark_title": "' + data.articles[1].listableTitle + '", "bookmark_publication": "Commodities"}" data-is-bookmarked="' + data.articles[1].isArticleBookmarked + '"><span class="action-flag__label js-bookmark-label" data-label-bookmark="' + data.articles[1].bookmarkText + '" data-label-bookmarked="' + data.articles[1].bookmarkedText + '">' + bookmarkInfo1 + '</span><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark article-bookmark__bookmarked ' + fbookmarkIcon1 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmarked"></use></svg><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark ' + sbookmarkIcon1 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmark"></use></svg></div>';
	articleData += '<ul>';
	articleData += data.articles[1].listableDate ? '<li><time class="article-metadata__date">' + data.articles[1].listableDate + '</time></li>' : '';
	articleData += data.articles[1].linkableText ? '<li><h6>' + data.articles[1].linkableText + '</h6></li>' : '';
	articleData += data.articles[1].listableType ? '<li><span class="js-toggle-tooltip" data-tooltip-text="This article includes data."><svg class="article-metadata__media-type"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#chart"></use></svg></span></li>' : '';
	articleData += '</ul>';
	articleData += '</div>';
	articleData += '<div class="article-preview__inner-wrapper">';
	articleData += data.articles[1].listableTitle ? '<h1 class="article-preview__headline"><a href="' + linkableUrl1 + '" class="click-utag" data-info=\'{"event_name":"article_click_through","page_name":"' + analytics_data["page_name"] + '","click_through_destination":"' + data.articles[1].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","ga_eventCategory":"My View Page Articles","ga_eventAction":"' + analytics_data["publication"] + '","ga_eventLabel":"' + data.articles[1].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","publication_click":"' + analytics_data["publication"] + '"}\'>' + data.articles[1].listableTitle + '</a></h1>' : '';
	articleData += data.articles[1].listableAuthorByLine ? '<span class="article-preview__byline">' + data.articles[1].listableAuthorByLine + '</span>' : '';
	articleData += '<div class="article-summary">' + data.articles[1].listableSummary ? data.articles[1].listableSummary : '' + '</div>';
	articleData += '</div>';
	articleData += '<div class="article-preview__tags bar-separated-link-list">';
	if (data.articles[1].listableTopics) {
		for (var i = 0; i < data.articles[1].listableTopics.length; i++) {
			var getLink1 = data.articles[1].listableTopics[i].linkableUrl ? data.articles[1].listableTopics[i].linkableUrl : '#';
			articleData += '<a href="' + getLink1 + '">' + data.articles[1].listableTopics[i].linkableText + '</a>';
		}
	}
	articleData += '</div>';
	articleData += '</section>';

	articleData += '<section class="article-preview article-preview--small artheight topics">';
	articleData += data.articles[2].linkableText ? '<h6>&nbsp;</h6>' : '';

	articleData += data.articles[2].listableTitle ? '<h1 class="article-preview_rheadline"><a href="' + linkableUrl2 + '" class="click-utag" data-info=\'{"event_name":"article_click_through","page_name":"' + analytics_data["page_name"] + '","click_through_destination":"' + data.articles[2].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","ga_eventCategory":"My View Page Articles","ga_eventAction":"' + analytics_data["publication"] + '","ga_eventLabel":"' + data.articles[2].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","publication_click":"' + analytics_data["publication"] + '"}\'>' + data.articles[2].listableTitle + '</a></h1>' : '';

	articleData += data.articles[3].listableTitle ? '<h1 class="article-preview_rheadline"><a href="' + linkableUrl3 + '" class="click-utag" data-info=\'{"event_name":"article_click_through","page_name":"' + analytics_data["page_name"] + '","click_through_destination":"' + data.articles[3].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","ga_eventCategory":"My View Page Articles","ga_eventAction":"' + analytics_data["publication"] + '","ga_eventLabel":"' + data.articles[3].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","publication_click":"' + analytics_data["publication"] + '"}\'>' + data.articles[3].listableTitle + '</a></h1>' : '';

	articleData += data.articles[4].listableTitle ? '<h1 class="article-preview_rheadline"><a href="' + linkableUrl4 + '" class="click-utag" data-info=\'{"event_name":"article_click_through","page_name":"' + analytics_data["page_name"] + '","click_through_destination":"' + data.articles[4].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","ga_eventCategory":"My View Page Articles","ga_eventAction":"' + analytics_data["publication"] + '","ga_eventLabel":"' + data.articles[4].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","publication_click":"' + analytics_data["publication"] + '"}\'>' + data.articles[4].listableTitle + '</a></h1>' : '';
	articleData += '</section>';
	articleData += '</div>';

	articleData += '<div class="latest-news__articles">';
	articleData += '<section class="article-preview article-small-preview mobview">';
	articleData += '<div class="article-metadata">';
	articleData += '<div class="action-flag article-preview__bookmarker pop-out__trigger js-bookmark-article" data-pop-out-type="sign-in" data-pop-out-align="right" data-bookmark-id="' + data.articles[5].id + '" data-analytics="{"bookmark": "' + bookmarkInfo5 + '", "bookmark_title": "' + data.articles[5].listableTitle + '", "bookmark_publication": "Commodities"}" data-is-bookmarked="' + data.articles[5].isArticleBookmarked + '"><span class="action-flag__label js-bookmark-label" data-label-bookmark="' + data.articles[5].bookmarkText + '" data-label-bookmarked="' + data.articles[5].bookmarkedText + '">' + bookmarkInfo5 + '</span><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark article-bookmark__bookmarked ' + fbookmarkIcon5 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmarked"></use></svg><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark ' + sbookmarkIcon5 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmark"></use></svg></div>';
	articleData += '<ul>';
	articleData += data.articles[5].listableDate ? '<li><time class="article-metadata__date">' + data.articles[5].listableDate + '</time></li>' : '';
	articleData += data.articles[5].linkableText ? '<li><h6>' + data.articles[5].linkableText + '</h6></li>' : '';
	articleData += '</ul>';
	articleData += '</div>';
	articleData += '<div class="article-preview__inner-wrapper showarticle">';
	articleData += data.articles[5].listableTitle ? '<h1 class="article-preview__headline"><a href="' + linkableUrl5 + '" class="click-utag" data-info=\'{"event_name":"article_click_through","page_name":"' + analytics_data["page_name"] + '","click_through_destination":"' + data.articles[5].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","ga_eventCategory":"My View Page Articles","ga_eventAction":"' + analytics_data["publication"] + '","ga_eventLabel":"' + data.articles[5].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","publication_click":"' + analytics_data["publication"] + '"}\'>' + data.articles[5].listableTitle + '</a></h1>' : '';
	articleData += data.articles[1].listableAuthorByLine ? '<span class="article-preview__byline">' + data.articles[1].listableAuthorByLine + '</span>' : '';
	articleData += '</div>';
	articleData += '<div class="article-preview__tags bar-separated-link-list">';
	if (data.articles[5].listableTopics) {
		for (var i = 0; i < data.articles[5].listableTopics.length; i++) {
			var getLink5 = data.articles[5].listableTopics[i].linkableUrl ? data.articles[5].listableTopics[i].linkableUrl : '#';
			articleData += '<a href="' + getLink5 + '">' + data.articles[5].listableTopics[i].linkableText + '</a>';
		}
	}
	articleData += '</div>';
	articleData += '</section>';

	articleData += '<section class="article-preview article-preview--small artheight mobview mtop">';
	articleData += '<div class="article-metadata">';
	articleData += '<div class="action-flag article-preview__bookmarker pop-out__trigger js-bookmark-article" data-pop-out-type="sign-in" data-pop-out-align="right" data-bookmark-id="' + data.articles[6].id + '" data-analytics="{"bookmark": "' + bookmarkInfo6 + '", "bookmark_title": "' + data.articles[6].listableTitle + '", "bookmark_publication": "Commodities"}" data-is-bookmarked="' + data.articles[6].isArticleBookmarked + '"><span class="action-flag__label js-bookmark-label" data-label-bookmark="' + data.articles[6].bookmarkText + '" data-label-bookmarked="' + data.articles[6].bookmarkedText + '">' + bookmarkInfo6 + '</span><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark article-bookmark__bookmarked ' + fbookmarkIcon6 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmarked"></use></svg><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark ' + sbookmarkIcon6 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmark"></use></svg></div>';
	articleData += '<ul>';
	articleData += data.articles[6].listableDate ? '<li><time class="article-metadata__date">' + data.articles[6].listableDate + '</time></li>' : '';
	articleData += data.articles[6].linkableText ? '<li><h6>' + data.articles[6].linkableText + '</h6></li>' : '';
	articleData += '</ul>';
	articleData += '</div>';
	articleData += '<div class="article-preview__inner-wrapper">';
	articleData += data.articles[6].listableTitle ? '<h1 class="article-preview__headline"><a href="' + linkableUrl6 + '" class="click-utag" data-info=\'{"event_name":"article_click_through","page_name":"' + analytics_data["page_name"] + '","click_through_destination":"' + data.articles[6].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","ga_eventCategory":"My View Page Articles","ga_eventAction":"' + analytics_data["publication"] + '","ga_eventLabel":"' + data.articles[6].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","publication_click":"' + analytics_data["publication"] + '"}\'>' + data.articles[6].listableTitle + '</a></h1>' : '';
	articleData += data.articles[6].listableAuthorByLine ? '<span class="article-preview__byline">' + data.articles[6].listableAuthorByLine + '</span>' : '';
	articleData += '<div class="article-summary">' + data.articles[6].listableSummary ? data.articles[6].listableSummary : '' + '</div>';
	articleData += '</div>';
	articleData += '<div class="article-preview__tags bar-separated-link-list">';
	if (data.articles[6].listableTopics) {
		for (var i = 0; i < data.articles[6].listableTopics.length; i++) {
			var getLink6 = data.articles[6].listableTopics[i].linkableUrl ? data.articles[6].listableTopics[i].linkableUrl : '#';
			articleData += '<a href="' + getLink6 + '">' + data.articles[6].listableTopics[i].linkableText + '</a>';
		}
	}
	articleData += '</div>';
	articleData += '</section>';

	articleData += '<section class="article-preview article-small-preview sm-article sm-articles mtop">';
	articleData += '<section class="sm-article mobview">';
	articleData += '<div class="article-metadata">';
	articleData += '<div class="action-flag article-preview__bookmarker pop-out__trigger js-bookmark-article" data-pop-out-type="sign-in" data-pop-out-align="right" data-bookmark-id="' + data.articles[7].id + '" data-analytics="{"bookmark": "' + bookmarkInfo7 + '", "bookmark_title": "' + data.articles[7].listableTitle + '", "bookmark_publication": "Commodities"}" data-is-bookmarked="' + data.articles[7].isArticleBookmarked + '"><span class="action-flag__label js-bookmark-label" data-label-bookmark="' + data.articles[7].bookmarkText + '" data-label-bookmarked="' + data.articles[7].bookmarkedText + '">' + bookmarkInfo7 + '</span><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark article-bookmark__bookmarked ' + fbookmarkIcon7 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmarked"></use></svg><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark ' + sbookmarkIcon7 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmark"></use></svg></div>';
	articleData += '<ul>';
	articleData += data.articles[7].listableDate ? '<li><time class="article-metadata__date">' + data.articles[7].listableDate + '</time></li>' : '';
	articleData += data.articles[7].linkableText ? '<li><h6>' + data.articles[7].linkableText + '</h6></li>' : '';
	articleData += '</ul>';
	articleData += '</div>';
	articleData += '<div class="article-preview__inner-wrapper showarticle">';
	articleData += data.articles[7].listableTitle ? '<h1 class="article-preview__headline"><a href="' + linkableUrl7 + '" class="click-utag" data-info=\'{"event_name":"article_click_through","page_name":"' + analytics_data["page_name"] + '","click_through_destination":"' + data.articles[7].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","ga_eventCategory":"My View Page Articles","ga_eventAction":"' + analytics_data["publication"] + '","ga_eventLabel":"' + data.articles[7].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","publication_click":"' + analytics_data["publication"] + '"}\'>' + data.articles[7].listableTitle + '</a></h1>' : '';
	articleData += data.articles[1].listableAuthorByLine ? '<span class="article-preview__byline">' + data.articles[1].listableAuthorByLine + '</span>' : '';
	articleData += '</div>';
	articleData += '<div class="article-preview__tags bar-separated-link-list">';
	if (data.articles[7].listableTopics) {
		for (var i = 0; i < data.articles[7].listableTopics.length; i++) {
			var getLink7 = data.articles[7].listableTopics[i].linkableUrl ? data.articles[7].listableTopics[i].linkableUrl : '#';
			articleData += '<a href="' + getLink7 + '">' + data.articles[7].listableTopics[i].linkableText + '</a>';
		}
	}
	articleData += '</div>';
	articleData += '</section>';

	articleData += '<section class="sm-article mobview">';
	articleData += '<div class="article-metadata">';
	articleData += '<div class="action-flag article-preview__bookmarker pop-out__trigger js-bookmark-article" data-pop-out-type="sign-in" data-pop-out-align="right" data-bookmark-id="' + data.articles[8].id + '" data-analytics="{"bookmark": "' + bookmarkInfo8 + '", "bookmark_title": "' + data.articles[8].listableTitle + '", "bookmark_publication": "Commodities"}" data-is-bookmarked="' + data.articles[8].isArticleBookmarked + '"><span class="action-flag__label js-bookmark-label" data-label-bookmark="' + data.articles[8].bookmarkText + '" data-label-bookmarked="' + data.articles[8].bookmarkedText + '">' + bookmarkInfo8 + '</span><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark article-bookmark__bookmarked ' + fbookmarkIcon8 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmarked"></use></svg><svg class="action-flag__icon action-flag__icon--bookmark article-bookmark ' + sbookmarkIcon8 + '"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/dist/img/svg-sprite.svg#bookmark"></use></svg></div>';
	articleData += '<ul>';
	articleData += data.articles[8].listableDate ? '<li><time class="article-metadata__date">' + data.articles[8].listableDate + '</time></li>' : '';
	articleData += data.articles[8].linkableText ? '<li><h6>' + data.articles[8].linkableText + '</h6></li>' : '';
	articleData += '</ul>';
	articleData += '</div>';
	articleData += '<div class="article-preview__inner-wrapper showarticle">';
	articleData += data.articles[8].listableTitle ? '<h1 class="article-preview__headline"><a href="' + linkableUrl8 + '" class="click-utag" data-info=\'{"event_name":"article_click_through","page_name":"' + analytics_data["page_name"] + '","click_through_destination":"' + data.articles[8].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","ga_eventCategory":"My View Page Articles","ga_eventAction":"' + analytics_data["publication"] + '","ga_eventLabel":"' + data.articles[8].listableTitle.replace(/'/g, "").replace(/"/g, '') + '","publication_click":"' + analytics_data["publication"] + '"}\'>' + data.articles[8].listableTitle + '</a></h1>' : '';
	articleData += data.articles[1].listableAuthorByLine ? '<span class="article-preview__byline">' + data.articles[1].listableAuthorByLine + '</span>' : '';
	articleData += '</div>';
	articleData += '<div class="article-preview__tags bar-separated-link-list">';
	if (data.articles[8].listableTopics) {
		for (var i = 0; i < data.articles[8].listableTopics.length; i++) {
			var getLink8 = data.articles[8].listableTopics[i].linkableUrl ? data.articles[8].listableTopics[i].linkableUrl : '#';
			articleData += '<a href="' + getLink8 + '">' + data.articles[8].listableTopics[i].linkableText + '</a>';
		}
	}
	articleData += '</div>';
	articleData += '</section>';

	articleData += '</section>';
	articleData += '</div>';

	articleData += '<input type="hidden" class="getPaginationNum" data-pageSize="' + data.loadMore.pageSize + '" data-pageNo="' + data.loadMore.pageNo + '" data-loadurl="' + data.loadMore.loadMoreLinkUrl + '" data-taxonomyIds="' + data.loadMore.taxonomyIds + '" />';

	return articleData;
}

$(function () {
	var getLayoutInfo = $('#getLayoutInfo').val(),
	    layout1 = true,
	    loadLayoutData = '',
	    getLiIdx,
	    getArticleIdx;
	if (typeof loadPreferanceId !== "undefined") {
		var loadDynData = loadPreferanceId["Sections"].length < loadPreferanceId.DefaultSectionLoadCount ? loadPreferanceId["Sections"].length : loadPreferanceId.DefaultSectionLoadCount,
		    getArticalIdx = 0,
		    postedId = window.location.href.split('#')[1];

		if (postedId != '' && postedId != undefined) {
			for (var i = 0; i < loadPreferanceId["Sections"].length; i++) {
				if (loadPreferanceId["Sections"][i]["ChannelId"] == postedId) {
					getArticalIdx = i + 1;
					break;
				}
			}
			loadDynData = getArticalIdx;
		}
		getLiIdx = loadDynData;
		getArticleIdx = loadDynData;
		for (var i = 0; i < loadDynData; i++) {
			var setId = loadPreferanceId["Sections"];
			if (setId.length) {
				(function (idx) {
					if (idx < loadDynData) {
						$.ajax({
							url: '/api/articlesearch',
							data: JSON.stringify({ 'TaxonomyIds': setId[idx]["TaxonomyIds"], 'PageNo': 1, 'PageSize': 9 }),
							dataType: 'json',
							contentType: "application/json",
							type: 'POST',
							cache: false,
							async: false,
							beforeSend: function beforeSend() {
								$('.spinnerIcon').removeClass('hidespin');
							},
							success: function success(data) {
								if (data.articles && typeof data.articles === "object" && data.articles.length >= 9) {
									if (layout1) {
										layout1 = false;
										loadLayoutData = loadLayoutOneData(data, idx);
										$('.spinnerIcon').addClass('hidespin');
										$('.personalisationPan').append(loadLayoutData);
										window.findTooltips();
									} else {
										layout1 = true;
										loadLayoutData = loadLayoutTwoData(data, idx);
										$('.spinnerIcon').addClass('hidespin');
										$('.personalisationPan').append(loadLayoutData);
										window.findTooltips();
									}
								}
							},
							error: function error(xhr, errorType, _error) {
								console.log('err ' + _error);
							}
						});
					}
				})(i);
			}
		}
	}
	$('.personalisationPan').on('click', '.loadmore', function () {
		var $this = $(this),
		    eachstoryMpan = $this.closest('.eachstoryMpan'),
		    eachstory = eachstoryMpan.find('.eachstory'),
		    eachstoryId = eachstory.attr('id'),
		    layoutCls = eachstory.attr('class'),
		    loadLayoutData;

		var layout = layoutCls.indexOf('layout1') !== -1 ? 'layout1' : 'layout2';
		var setId = loadPreferanceId["Sections"],
		    sendtaxonomyIdsArr = $this.closest('.eachstoryMpan').find('.getPaginationNum').attr('data-taxonomyIds').split(',');

		$.ajax({
			url: $this.closest('.eachstoryMpan').find('.getPaginationNum').attr('data-loadurl'),
			dataType: 'json',
			type: 'POST',
			data: JSON.stringify({ 'TaxonomyIds': sendtaxonomyIdsArr, 'PageNo': $this.closest('.eachstoryMpan').find('.getPaginationNum').attr('data-pageNo'), 'PageSize': $this.closest('.eachstoryMpan').find('.getPaginationNum').attr('data-pageSize') }),
			contentType: "application/json",
			success: function success(data) {
				if (data.articles && typeof data.articles === "object" && data.articles.length >= 9) {
					$this.closest('.eachstoryMpan').find('.getPaginationNum').attr({ 'data-taxonomyIds': data.loadMore.taxonomyIds, 'data-loadurl': data.loadMore.loadMoreLinkUrl, 'data-pageNo': data.loadMore.pageNo, 'data-pageSize': data.loadMore.pageSize });
					if (layout == 'layout1') {
						loadLayoutData = createLayoutInner1(data);
						$(eachstory).append(loadLayoutData);
						window.findTooltips();
						if (data.loadMore && !data.loadMore.displayLoadMore) {
							$this.closest('.eachstoryMpan').find('.loadmore').css('display', 'none');
						}
					} else {
						loadLayoutData = createLayoutInner2(data);
						$(eachstory).append(loadLayoutData);
						window.findTooltips();
						if (data.loadMore && !data.loadMore.displayLoadMore) {
							$this.closest('.eachstoryMpan').find('.loadmore').css('display', 'none');
						}
					}
				}
			},
			error: function error(xhr, errorType, _error2) {
				console.log('err ' + _error2);
			}
		});
	});

	var eachstoryLength = typeof loadPreferanceId !== 'undefined' && loadPreferanceId.DefaultSectionLoadCount ? loadPreferanceId.DefaultSectionLoadCount : 0;
	$(window).scroll(function () {
		var eachstoryMpan = $('.personalisationPan .eachstoryMpan'),
		    eachstoryMpanLast = eachstoryMpan.last(),
		    layoutCls = eachstoryMpan.find('.eachstory').attr('class'),
		    contentHei = $('.personalisationPan').height(),
		    loadsection,
		    texonomyId;

		if ($(window).scrollTop() > contentHei - 400) {
			var getscrollData;

			if (typeof loadPreferanceId !== "undefined") {
				if (getArticleIdx < loadPreferanceId["Sections"].length) {
					getLiIdx = getArticleIdx;
					loadsection = getArticleIdx;
					texonomyId = loadPreferanceId["Sections"][loadsection]["TaxonomyIds"];
					getArticleIdx++;
				} else {
					return;
				}
			} else {
				return;
			}

			$.ajax({
				url: '/api/articlesearch',
				data: JSON.stringify({ 'TaxonomyIds': texonomyId, 'PageNo': 1, 'PageSize': 9 }),
				type: 'POST',
				contentType: "application/json",
				cache: false,
				async: false,
				dataType: 'json',
				beforeSend: function beforeSend() {
					$('.spinnerIcon').removeClass('hidespin');
				},
				success: function success(data) {
					if (data.articles && typeof data.articles === "object" && data.articles.length >= 9) {
						if ($('.eachstoryMpan', '.personalisationPan').length % 2 == 0) {
							getscrollData = loadLayoutOneData(data, loadsection);
							$('.spinnerIcon').addClass('hidespin');
							$('.personalisationPan').append(getscrollData);
							window.findTooltips();
						} else {
							getscrollData = loadLayoutTwoData(data, loadsection);
							$('.spinnerIcon').addClass('hidespin');
							$('.personalisationPan').append(getscrollData);
							window.findTooltips();
						}
					}
				},
				error: function error(xhr, errorType, _error3) {
					console.log('xhr ' + xhr + ' errorType ' + errorType + ' error ' + _error3);
				}
			});
		}
	});

	$('.main-menu__hoverable a.myviewLink').click(function (e) {
		if ($('#hdnMyViewPage') && $('#hdnMyViewPage').val() == "true") {
			e.preventDefault();
			var $this = $(this),
			    name = $this.attr('name'),
			    getPos = $('#' + name).position(),
			    latestSubject = $('#' + name).closest('.eachstoryMpan').prev('.latestSubject'),
			    subjectHei = latestSubject.height(),
			    allstoriesLen = $('.personalisationPan .eachstoryMpan').length,
			    liIdx = $this.closest('li').index();
			setTimeout(function () {
				if ($('.js-menu-toggle-button, .js-full-menu-toggle').hasClass('is-active')) {
					$('.js-menu-toggle-button, .js-full-menu-toggle').removeClass('is-active');
				}
			}, 5);

			if (typeof loadPreferanceId !== 'undefined' && $('#' + name) && $('#' + name).length) {
				$(window).scrollTop(getPos.top - subjectHei * 3);
			} else {
				if (typeof loadPreferanceId !== "undefined") {
					getLiIdx = getArticleIdx;
					for (var i = getLiIdx; i <= liIdx; i++) {
						var setId = loadPreferanceId["Sections"];
						getArticleIdx++;
						(function (idx) {
							$.ajax({
								url: '/api/articlesearch',
								dataType: 'json',
								contentType: "application/json",
								data: JSON.stringify({ 'TaxonomyIds': loadPreferanceId["Sections"][idx]["TaxonomyIds"], 'PageNo': 1, 'PageSize': 9 }),
								type: 'POST',
								cache: false,
								async: false,
								beforeSend: function beforeSend() {
									$('.spinnerIcon').removeClass('hidespin');
								},
								success: function success(data) {
									if (data.articles && typeof data.articles === "object" && data.articles.length >= 9) {
										if ($('.eachstoryMpan', '.personalisationPan').length % 2 == 0) {
											loadLayoutData = loadLayoutOneData(data, idx);
											$('.personalisationPan').append(loadLayoutData);
											window.findTooltips();
										} else {
											loadLayoutData = loadLayoutTwoData(data, idx);
											$('.personalisationPan').append(loadLayoutData);
											window.findTooltips();
										}
									}
								},
								error: function error(xhr, errorType, _error4) {
									console.log('err ' + _error4);
								},
								complete: function complete(xhr, status) {
									if (status == "success" && $('#' + name).length) {
										setTimeout(function () {
											var getlatestPos = $('#' + name).position();
											if (getlatestPos) {
												$('.spinnerIcon').addClass('hidespin');
												$(window).scrollTop(getlatestPos.top - 120);
											}
										}, 5);
									}
								}
							});
						})(i);
					}
				}
			}
		} else {
			if ($('#validatePreference').val() != 1) {
				e.preventDefault();
				var $this = $(this),
				    href = $this.attr('href'),
				    id = $this.attr('name');
				window.location.href = href + '#' + id;
			}
		}
	});
});

},{}],23:[function(require,module,exports){
/* global analyticsEvent, analytics_data, angular */
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _controllersFormController = require('../controllers/form-controller');

var _controllersFormController2 = _interopRequireDefault(_controllersFormController);

var _jscookie = require('../jscookie');

var _jscookie2 = _interopRequireDefault(_jscookie);

var _controllersAnalyticsController = require('../controllers/analytics-controller');

/* * *
SAVE SEARCH
This component handles saving searches from the Search page, as well as setting alerts
for topics from Home/Topic pages. Dispite the naming differences, the back-end functionality
is the same - topic alerts are actually just saved searches for the topic,
plus an email alert for new articles.
* * */

function getParameterByName(name, url) {
	if (!url) {
		url = window.location.href;
	}
	name = name.replace(/[\[\]]/g, "\\$&");
	var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
	    results = regex.exec(url);
	if (!results) return null;
	if (!results[2]) return '';
	return decodeURIComponent(results[2].replace(/\+/g, " "));
}

$(document).ready(function () {

	// When the Save Search pop-out is toggled, need to update some form fields
	// with the most recent data. Used to use Angular for this, but for site-wide
	// reusability we need to do it in Zepto.
	$('.js-save-search').on('click', function (e) {
		$('.js-save-search-url').val(window.location.pathname + window.location.hash);
		$('.js-save-search-title').val($('#js-search-field').val());
	});

	// Populates topic alert data when a user is logging in and saving simultaneously
	$('.js-update-topic-alert').on('click', function (e) {
		$('.js-save-search-url').val($(this).data('topic-alert-url'));
		// Search/Topic title exists as <input> and <span>, needs two techniques to properly
		// update the values.
		$('.js-save-search-title').val($(this).data('topic-alert-title')).html($(this).data('topic-alert-title'));
	});

	$('.js-set-topic-alert').on('click', function (e) {

		var isSettingAlert = !$(this).data('has-topic-alert');
		var topicLabel = $(this).find('.js-set-topic-label');

		$('.js-save-search-url').val($(this).data('topic-alert-url'));
		$('.js-save-search-title').val($(this).data('topic-alert-title'));

		if (isSettingAlert) {
			$('.form-save-search').find('button[type=submit]').click();
			topicLabel.html(topicLabel.data('label-is-set'));
			$(this).data('has-topic-alert', 'true');
			$(this).find('.js-topic-icon-unset').removeClass('is-active');
			$(this).find('.js-topic-icon-set').addClass('is-active');
		} else {
			window.lightboxController.showLightbox($(this));
		}
	});

	var savedSearch = getParameterByName("ss");
	if (savedSearch != null && savedSearch == "true") {
		$('.js-saved-search-success-alert').addClass('is-active').on('animationend', function (e) {
			$(e.target).removeClass('is-active');
		}).addClass('a-fade-alert');
	}

	var removeTopicAlert = new _controllersFormController2['default']({
		observe: '.form-remove-topic-alert',
		successCallback: function successCallback(form, context, event) {
			$(form).find('.js-set-topic-label').html($(form).find('.js-set-topic-label').data('label-not-set'));
			$(form).find('.js-set-topic-alert').data('has-topic-alert', null);
			$(form).find('.js-topic-icon-unset').addClass('is-active');
			$(form).find('.js-topic-icon-set').removeClass('is-active');

			(0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, $(form).data('analytics')));
		}
	});

	var saveSearchController = new _controllersFormController2['default']({
		observe: '.form-save-search',
		successCallback: function successCallback(form, context, event) {

			// If there's a stashed search, remove it.
			_jscookie2['default'].remove('saveStashedSearch');

			window.controlPopOuts.closePopOut($(form).closest('.pop-out'));
			$('.js-saved-search-success-alert').addClass('is-active').on('animationend', function (e) {
				$(e.target).removeClass('is-active');
			}).addClass('a-fade-alert');

			window.lightboxController.closeLightboxModal();

			if (typeof angular !== 'undefined') {
				angular.element($('.js-saved-search-controller')[0]).controller().searchIsSaved();
			}

			var event_data = {};

			if ($(form).data('is-search') === true) {
				event_data.event_name = "toolbar_use";
				event_data.toolbar_tool = "save_search";
			} else {
				event_data.event_name = "set_alert";
				event_data.alert_topic = $(form).find('.js-save-search-title').val();
			}

			(0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, event_data));
		},
		beforeRequest: function beforeRequest(form) {
			if (!$(form).find('.js-save-search-title').val().trim()) {
				$('.js-form-error-EmptyTitle').show();
			}
		}
	});

	var saveSearchLoginController = new _controllersFormController2['default']({
		observe: '.form-save-search-login',
		successCallback: function successCallback(form, context, event) {
			_jscookie2['default'].set('saveStashedSearch', {
				'Title': $('.js-save-search-title').val(),
				'Url': $('.js-save-search-url').val(),
				'AlertEnabled': $('#AlertEnabled').prop('checked')
			});

			$.ajax({
				type: "POST",
				url: "/api/SavedSearches",
				data: {
					url: $('.js-save-search-url').val(),
					title: $('.js-save-search-title').val(),
					alertEnabled: $('#AlertEnabled').prop('checked')
				}
			});

			var loginAnalytics = {
				event_name: 'login',
				login_state: 'successful',
				userName: '"' + $(form).find('input[name=username]').val() + '"'
			};
			(0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, loginAnalytics));

			var ssParam = getParameterByName("ss");
			var searchVal = window.location.search;
			if (ssParam == null) {
				searchVal = searchVal.length < 1 ? "?ss=true" : searchVal + "&ss=true";
			}

			if (ssParam == window.location.search) window.location.reload(true);else window.location = window.location.pathname + searchVal + window.location.hash;
		}
	});

	var toggleSavedSearchAlertController = new _controllersFormController2['default']({
		observe: '.form-toggle-saved-search-alert',
		successCallback: function successCallback(form, context, e) {
			var alertToggle = $(form).find('.js-saved-search-alert-toggle');
			var val = alertToggle.val();
			var event_data = {
				saved_search_alert_title: $(form).data('analytics-title'),
				saved_search_alert_publication: $(form).data('analytics-publication')
			};

			if (val === "on") {
				event_data.event_name = 'saved_search_alert_off';
				alertToggle.val('off');
			} else {
				event_data.event_name = 'saved_search_alert_on';
				alertToggle.val('on');
			}

			(0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, event_data));
		}
	});

	$('.js-saved-search-alert-toggle').on('click', function (e) {
		$(e.target.form).find('button[type=submit]').click();
	});

	// On page load, check for any stashed searches that need to be saved
	var saveStashedSearch = _jscookie2['default'].getJSON('saveStashedSearch');

	if (saveStashedSearch) {
		// Set `Save Search` values from stashed search data
		$('.js-save-search-title').val(saveStashedSearch['Title']);
		$('.js-save-search-url').val(saveStashedSearch['Url']);
		$('#AlertEnabled').prop('checked', saveStashedSearch['AlertEnabled']);

		// Save the stashed search if Search (Angular) page
		if (typeof angular !== 'undefined') {
			$('.form-save-search').find('button[type=submit]').click();
		} else {
			$('.js-set-topic-alert').each(function (index, item) {
				if ($(item).data('topic-alert-url') === saveStashedSearch['Url']) {
					$(item).click();
					// If there's a stashed search, remove it.
					_jscookie2['default'].remove('saveStashedSearch');
				}
			});
		}
	}

	var removeSavedSearch = new _controllersFormController2['default']({
		observe: '.form-remove-saved-search',
		successCallback: function successCallback(form, context, evt) {
			$(evt.target).closest('tr').remove();

			window.controlPopOuts.closePopOut($(form).closest('.pop-out'));
			$('.js-saved-search-success-alert').addClass('is-active').on('animationend', function (e) {
				console.log("save search component:6");
				$(e.target).removeClass('is-active');
			}).addClass('a-fade-alert');

			window.lightboxController.closeLightboxModal();

			var event_data = {
				event_name: 'saved_search_alert_removal',
				saved_search_alert_title: $(form).data('analytics-title'),
				saved_search_alert_publication: $(form).data('analytics-publication')
			};

			(0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, event_data));
		}
	});
});

},{"../controllers/analytics-controller":25,"../controllers/form-controller":27,"../jscookie":35}],24:[function(require,module,exports){
'use strict';

var INFORMA = window.INFORMA || {};
INFORMA.videoMini = (function (window, $, namespace) {
    'use strict';
    //variables
    var _videoMiniImgWrapper = $('.video-mini-container .video-img'),
        _videoMiniPlayBtnWrapper = $('.video-mini-container .play-icon'),
        _videoMiniPlayerModal = $('#videoMiniModal'),
        _videoMiniModalClose = $('.video-mini-close'),
        video,

    // methods
    init,
        _playVideoMiniImgWrapper,
        _playVideoMiniBtnWrapper,
        _videoMiniShowPlayIcon;

    _playVideoMiniBtnWrapper = function () {
        _videoMiniPlayBtnWrapper.click(function () {
            var videoImg = $(this).parent().find('img');
            if (videoImg.attr('data-videotype') == "youtube") {
                video = '<iframe width="100%" src="' + videoImg.attr('data-videourl') + '" frameborder="0" allowfullscreen></iframe>';
            } else if (videoImg.attr('data-videotype') == "vimeo") {
                video = '<iframe width="100%" src="' + videoImg.attr('data-videourl') + '" frameborder="0" allowfullscreen></iframe>';
            } else if (videoImg.attr('data-videotype') == "wistia") {
                video = '<iframe width="100%" src="' + videoImg.attr('data-videourl') + '" frameborder="0" allowfullscreen></iframe>';
            }
            _videoMiniPlayerModal.find('.modal-body .video-mini-player').html(video);
            _videoMiniPlayerModal.modal('show');
            // $(this).parents('.video-mini-container').find('.play-icon').hide();
            //  imgContainer.find(_videoMiniPlayBtnWrapper).hide();
        });
    };

    _playVideoMiniImgWrapper = function () {
        _videoMiniImgWrapper.click(function () {
            if ($(this).attr('data-videotype') == "youtube") {
                video = '<iframe width="100%" height="' + $(this).attr('height') + '" src="' + $(this).attr('data-videourl') + '" frameborder="0" allowfullscreen></iframe>';
            } else if ($(this).attr('data-videotype') == "vimeo") {
                video = '<iframe width="100%" height="' + $(this).attr('height') + '" src="' + $(this).attr('data-videourl') + '" frameborder="0" allowfullscreen></iframe>';
            } else if ($(this).attr('data-videotype') == "wistia") {
                video = '<iframe width="100%" height="' + $(this).attr('height') + '" src="' + $(this).attr('data-videourl') + '" frameborder="0" allowfullscreen></iframe>';
            }
            _videoMiniPlayerModal.find('.modal-body .video-mini-player').html(video);
            _videoMiniPlayerModal.modal('show');
            // _videoMiniPlayBtnWrapper.hide();
        });
    };
    _videoMiniShowPlayIcon = function () {
        _videoMiniModalClose.click(function () {
            _videoMiniPlayBtnWrapper.show();
            $(this).parents('.video-mini-modal').find('iframe').remove();
        });
    };

    init = function () {
        _playVideoMiniImgWrapper();
        _playVideoMiniBtnWrapper();
        _videoMiniShowPlayIcon();
    };

    return {
        init: init
    };
})(undefined, Zepto, 'INFORMA');
Zepto(INFORMA.videoMini.init());

},{}],25:[function(require,module,exports){
// * * *
//  ANALYTICS CONTROLLER
//  For ease-of-use, better DRY, better prevention of JS errors when ads are blocked
// * * *

'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function analyticsEvent(dataObj) {
    if (typeof utag !== 'undefined') {
        utag.link(dataObj);
    }
};

exports.analyticsEvent = analyticsEvent;

},{}],26:[function(require,module,exports){
/* globals analytics_data */
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _analyticsController = require('./analytics-controller');

function bookmarkController() {

    // * * *
    //  Article bookmarking logic goes here
    // * * *
    this.toggle = function (e) {

        var bookmark = {
            elm: $(e)
        };

        // ID of the article we're bookmarking or un-bookmarking
        bookmark.id = bookmark.elm.closest('.js-bookmark-article').data('bookmark-id');

        // Stash the bookmark label data now, swap label text later
        bookmark.label = {
            elm: bookmark.elm.find('.js-bookmark-label')
        };
        bookmark.label.bookmark = bookmark.label.elm.data('label-bookmark');
        bookmark.label.bookmarked = bookmark.label.elm.data('label-bookmarked');

        // Are we bookmarking an article, or un-bookmarking?
        // Used later to know what API endpoint to hit, and what DOM changes are required
        bookmark.isBookmarking = bookmark.elm.data('is-bookmarked') ? false : true;

        var apiEndpoint = bookmark.isBookmarking ? '/Account/api/SavedDocumentApi/SaveItem/' : '/Account/api/SavedDocumentApi/RemoveItem/';

        if (bookmark.id) {
            $.ajax({
                url: apiEndpoint,
                type: 'POST',
                data: {
                    DocumentID: bookmark.id
                },
                context: this,
                success: function success(response) {
                    if (response.success) {

                        if (bookmark.isBookmarking) {
                            (0, _analyticsController.analyticsEvent)($.extend(analytics_data, $(bookmark.elm).data('analytics')));
                        }

                        this.flipIcon(bookmark);
                        return true;
                    } else {}
                },
                error: function error(response) {
                    return false;
                }
            });
        }
    };

    this.flipIcon = function (bookmark) {

        if (!bookmark.elm.hasClass('js-angular-bookmark')) {
            $(bookmark.elm).find('.article-bookmark').removeClass('is-visible');
        }

        if (bookmark.isBookmarking) {
            if (!bookmark.elm.hasClass('js-angular-bookmark')) {
                $(bookmark.elm).find('.article-bookmark__bookmarked').addClass('is-visible');
                bookmark.elm.data('is-bookmarked', true);
            }
            bookmark.label.elm.html(bookmark.label.bookmarked);
        } else {
            if (!bookmark.elm.hasClass('js-angular-bookmark')) {
                $(bookmark.elm).find('.article-bookmark').not('.article-bookmark__bookmarked').addClass('is-visible');
                bookmark.elm.data('is-bookmarked', null);
            }
            bookmark.label.elm.html(bookmark.label.bookmark);
        }
    };
}

exports['default'] = bookmarkController;
module.exports = exports['default'];

},{"./analytics-controller":25}],27:[function(require,module,exports){
/*

opts.observe — Form element(s) to observe
opts.beforeRequest — Function to execute before making Ajax request
opts.successCallback — If Ajax request is successful, callback
opts.failureCallback — If Ajax request fails / returns false, callback

*/

'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});
function formController(opts) {

	var showSuccessMessage = function showSuccessMessage(form) {
		$(form).find('.js-form-success').show();
	};

	var showError = function showError(form, error) {
		if ($(form).find(error)) {
			$(form).find(error).show();
		}
	};

	var hideErrors = function hideErrors(form) {
		$(form).find('.js-form-error').hide();
	};

	(function init() {

		var form = opts.observe;

		if (!form) return false;

		var formSubmit = $(form).find('button[type=submit]');

		$(formSubmit).on('click', function (event) {

			// Some forms will require user confirmation before action is taken
			// Default to true (confirmed), set to false later if confirmation is
			// required and user cancels action
			var actionConfirmed = true;

			var currentForm;
			if (event.target.form) {
				currentForm = event.target.form;
			} else {
				currentForm = $(event.target).closest('form');
			}

			if ($(currentForm).data('force-confirm')) {
				actionConfirmed = window.confirm($(currentForm).data('force-confirm'));
			}

			if (actionConfirmed) {

				event.preventDefault(); // Prevent form submitting

				hideErrors(currentForm); // Reset any visible errors

				if (opts.beforeRequest) {
					opts.beforeRequest(currentForm);
				}

				// Prevent user from re-submitting form, unless explicitly allowed
				if (!$(currentForm).data('prevent-disabling')) {
					$(formSubmit).attr('disabled', 'disabled');
				}

				var inputData = {};
				var IsValid = true; //Skip Validation if the form is not Update Contact Informatin Form
				if ($(currentForm).hasClass('form-update-account-contact')) {
					IsValid = ValidateContactInforForm();
				}
				if (IsValid) {
					$(currentForm).find('input, select, textarea').each(function () {

						var value = '';
						var field = $(this);

						if (field.data('checkbox-type') === 'boolean') {
							value = this.checked;

							if (field.data('checkbox-boolean-type') === 'reverse') {
								value = !value;
							}
						} else if (field.data('checkbox-type') === 'value') {
							value = this.checked ? field.val() : undefined;
						} else {
							value = field.val();
						}

						if (value !== undefined) {
							if (inputData[field.attr('name')] === undefined) {
								inputData[field.attr('name')] = value;
							} else if ($.isArray(inputData[field.attr('name')])) {
								inputData[field.attr('name')].push(value);
							} else {
								inputData[field.attr('name')] = [inputData[field.attr('name')]];
								inputData[field.attr('name')].push(value);
							}
						}
					});
					//// 25/10/2016 Commented captcha code to fix the js console error. Raju/Sonia will provide fix of this.
					// add recaptcha if it exists in the form
					var captchaResponse = grecaptcha == null ? undefined : grecaptcha.getResponse();
					if (captchaResponse !== undefined) inputData['RecaptchaResponse'] = captchaResponse;

					if (!$(currentForm).data('on-submit')) {
						console.warn('No submit link for form');
					}
					try {
						for (var index in inputData) {
							if (inputData[index] == "- Select One -") {
								inputData[index] = "";
							}
						}
					} catch (ex) {
						console.log(ex);
					}

					$.ajax({
						url: $(currentForm).data('on-submit'),
						type: $(currentForm).data('submit-type') || 'POST',
						data: inputData,
						context: this,
						success: function success(response) {
							if (response.success) {

								showSuccessMessage(currentForm);

								// Passes the form response through with the "context"
								// successCallback is ripe for refactoring, improving parameters
								this.response = response;

								if (opts.successCallback) {
									opts.successCallback(currentForm, this, event);
								}

								if ($(form).data('on-success')) {
									window.location.href = $(currentForm).data('on-success');
								}
								if (response.redirectRequired !== undefined && response.redirectRequired) {
									window.location.href = response.redirectUrl;
								}
							} else {
								if (response.reasons && response.reasons.length > 0) {
									for (var reason in response.reasons) {
										showError(form, '.js-form-error-' + response.reasons[reason]);
									}
								} else {
									showError(currentForm, '.js-form-error-general');
								}

								if (opts.failureCallback) {
									opts.failureCallback(currentForm, response);
								}
							}
						},
						error: function error(response) {

							showError(currentForm, '.js-form-error-general');

							if (opts.failureCallback) {
								opts.failureCallback(currentForm, response);
							}
						},
						complete: function complete() {
							setTimeout(function () {
								$(formSubmit).removeAttr('disabled');
							}, 250);

							// reset captcha if available
							grecaptcha.reset();
						}

					});
				} // if actionConfirmed
			}
			return false;
		});
	})();
}
function ValidateContactInforForm() {
	var errorHtml = $('#errorMessage').html();
	var errors = 0;
	var result = false;
	var scrollTo = '';
	$('.required').each(function () {
		if ($(this).val() == '' || $(this).text().indexOf("- Select One -") >= 0) {
			$(this).parent().append(errorHtml);
			errors++;
			if (errors == 1) {
				scrollTo = $(this);
			}
		} else {
			$(this).parent().find('.js-form-error').remove();
		}
	});
	if (errors > 0) {
		window.scrollTo(0, scrollTo.offset().top - 30);
		result = false;
	} else {
		result = true;
	}
	return result;
}

exports['default'] = formController;
module.exports = exports['default'];

},{}],28:[function(require,module,exports){
/* global angular */
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function lightboxModalController() {

    this.closeLightboxModal = function () {
        $('body').removeClass('lightboxed');
        $('.lightbox-modal__backdrop').remove();
        $('.lightbox-modal').hide();
    };

    var closeLightboxModal = this.closeLightboxModal;

    this.showLightbox = function (lightbox) {
        // Freeze the page and add the dark overlay
        $('body').addClass('lightboxed').append('<div class="lightbox-modal__backdrop"></div>');

        // Find the specific modal for this trigger, and the associated form
        var targetModal = $(lightbox).data('lightbox-modal');
        var successForm = $(lightbox).closest('.' + $(lightbox).data('lightbox-modal-success-target'));

        // Show the modal, add an on-click listener for the "success" button
        $('.' + targetModal).show().find('.js-lightbox-modal-submit')
        // .one, not .on, to prevent stacking event listners
        .one('click', function (e) {
            successForm.find('button[type=submit]').click();
            closeLightboxModal();
        });

        return false;
    };

    var showLightbox = this.showLightbox;

    this.buildLightboxes = function () {
        $('.js-lightbox-modal-trigger').on('click', function (e) {

            if (e.target !== this) {
                this.click();
                return;
            }

            showLightbox(e.target);

            // Don't submit any forms for real.
            return false;
        });
    };

    // When the Dismiss button is clicked...
    $('.js-close-lightbox-modal').on('click', function (e) {
        closeLightboxModal();
    });

    this.buildLightboxes();

    this.clearLightboxes = function () {
        $('.js-lightbox-modal-trigger').off();
    };
}

exports['default'] = lightboxModalController;
module.exports = exports['default'];

},{}],29:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});
function popOutController(triggerElm) {
	var _this = this;

	// Toggle pop-out when trigger is clicked
	if (triggerElm) {
		$(triggerElm).off();
		$(triggerElm).on('click', function (event) {
			event.preventDefault();
			_this.togglePopOut($(event.target));
		});
	}

	// Reposition pop-out when browser window resizes
	$(window).on('resize', function (event) {
		_this.updatePopOut();
	});

	// Simulate CSS `rem` (16px)
	// TODO: change this from `rem` to tab padding value for clarity
	var rem = 16;

	// Keep track of the active pop-out element
	// This is an object instead of a var because there might be more "global"
	// state attributes to track in the future.
	var state = {
		activeElm: null,
		customized: {}
	};

	// PUBLIC
	// Get the current pop-out element, if there is one.
	// Lets other JS know what's up with the pop-out.
	this.getPopOutElement = function () {
		return state.activeElm;
	};

	// PUBLIC
	// Closes the pop-out.
	this.closePopOut = function (elm) {
		// Reset all z-indexes so new pop-outs are stacked on top properly
		$('.pop-out').removeClass('is-active').css("z-index", "");
		$('.js-pop-out-trigger').css("z-index", "");
	};

	// PUBLIC
	// Toggles the pop-out
	this.togglePopOut = function (e) {
		// Check if clicked element is the toggle itself
		// Otherwise, climb up DOM tree and find it
		var poParent = e.hasClass('js-pop-out-trigger') ? e : e.closest('.js-pop-out-trigger');

		/*  This is a little hacky, but if a user is trying to bookmark an article
  	but needs to sign in first, we need to capture and pass the article
  	ID as a URL param after a successful sign in attempt. That allows
  	us to automatically bookmark the article on page refresh. */

		if (poParent.data('pop-out-type') === 'sign-in' && poParent.data('bookmark-id')) {
			$('.sign-in__submit').data('pass-article-id', poParent.data('bookmark-id'));
		} else {
			poParent.data('bookmark-id', null);
		}

		// Close all pop-outs
		this.closePopOut();

		if (poParent[0] !== state.activeElm) {
			// Update the controller state and open it
			state.activeElm = poParent[0];
			updatePosition();
		} else {
			state.activeElm = null;
		}
	};

	// PUBLIC
	// Stores pop-out customization details for reference when rendering
	this.customize = function (obj) {
		state.customized[obj.id] = obj;
	};

	// PRIVATE
	// Update the visibility and position of the pop-out box and tab.
	var updatePosition = function updatePosition() {

		var trgr = { // The pop-out trigger
			e: $(state.activeElm)
		};
		// Get trigger height, width, offsetTop, offsetWidth
		trgr.offset = trgr.e.offset();

		trgr.hasStyles = state.customized[trgr.e.data('pop-out-id')];

		// Determine which pop-out template to use
		// TODO: Make this user-configurable
		// Let users assign a name to a template class
		var popOut;
		switch (trgr.e.data('pop-out-type')) {
			// SIGN IN
			// (Global sign-in, bookmarking when not signed in)
			case 'sign-in':
				popOut = $('.js-pop-out__sign-in');
				break;
			// Main Sign In button on top right
			case 'sign-in-header':
				popOut = $('.js-pop-out__sign-in-header');
				break;
			// EMAIL ARTICLE
			case 'email-article':
				popOut = $('.js-pop-out__email-article');
				break;
			// EMAIL ARTICLE
			case 'email-search':
				popOut = $('.js-pop-out__email-search');
				break;
			// EMAIL AUTHOR
			case 'email-author':
				popOut = $('.js-pop-out__email-author');
				break;
			// EMAIL COMPANy
			case 'email-company':
				popOut = $('.js-pop-out__email-company');
				break;
			// EMAIL DEAL
			case 'email-deal':
				popOut = $('.js-pop-out__email-deal');
				break;
			// GLOBAL HEADER REGISTRATION
			case 'register':
				popOut = $('.js-pop-out__register');
				break;
			// GLOBAL HEADER REGISTRATION
			case 'myViewregister':
				popOut = $('.js-pop-out__myViewregister');
				break;
			// SEARCH PAGE - SAVE SEARCH
			case 'save-search':
				popOut = $('.js-pop-out__save-search');
				break;
			default:
				console.warn('Attempting to fire unidentified pop-out.');
				return;
		}

		// Make pop-out visible so we can query for its width
		popOut.addClass('is-active');

		// Check if browser is less than or equal to `small` CSS breakpoint

		var isNarrow = $(window).width() <= 480;
		var isTablet = $(window).width() <= 800;

		// Set separate vertical/horizontal padding on mobile vs. desktop
		var vPad = isNarrow ? 10 : rem;
		var hPad = isNarrow ? 14 : rem;

		// Store output values after calculations, etc.
		var res = {
			offset: {
				box: {},
				tab: {}
			},
			css: {
				box: {},
				tab: {}
			}
		};

		// Box offset top is offsetTop of trigger, plus trigger height,
		// plus padding, minus 1px for border positioning
		res.offset.box.top = Math.floor(trgr.offset.top + trgr.offset.height + (vPad - 1));

		// Check if pop-out will bleed off-screen, causing horizontal scroll bar
		// If it will, force right-align to keep it on-screen
		if (popOut.width() + trgr.offset.left > $(window).width()) {
			trgr.e.data('pop-out-align', 'right');
		}

		// Check for pop-out alignment
		if (trgr.e.data('pop-out-align') === 'right' && !isNarrow) {
			// Pop-out box is flush right with trigger element
			// To flush right, first add trigger offset plus trigger width
			// This positions left edge of pop-out with right edge of trigger
			// Then subtract pop-out width and padding to align both right edges
			// (Flush-left automatically if narrow window)
			res.offset.box.left = isNarrow ? 0 : Math.floor(trgr.offset.left + trgr.offset.width - popOut.offset().width + (hPad - 1));
			// Tab left margin can be ignored, right margin 0 does what we need
			res.offset.tab.left = 'auto';
		} else {
			// Pop-out box is centered with trigger element
			// Box offset left is determined by subtracting the trigger width
			// from the pop-out width, dividing by 2 to find the halfway point,
			// then subtracting that from the trigger left offset.
			// (Flush-left automatically if narrow window)
			res.offset.box.left = isNarrow ? 0 : Math.floor(trgr.offset.left - (popOut.offset().width - trgr.offset.width) / 2);
			// Pop-out tab is aligned with trigger left edge, adjusted for padding
			// Tab width is set to trigger width below, so this centers the tab
			res.offset.tab.left = isNarrow ? Math.floor(trgr.offset.left - hPad) : 0;
		}

		// Blow up z-index to appear above other triggers
		trgr.e.css('z-index', '9999');

		// Box z-index set to 2 lower than trigger element
		// Box should render below trigger, under tab, above everything else
		res.css.box.zIndex = trgr.e.css('z-index') - 2;

		// Tab height equals trigger height plus padding (1rem top and bottom)

		// Check for custom tab styles
		var tS = trgr.hasStyles ? trgr.hasStyles.tabStyles : undefined;

		// If there are custom styles, and browser is desktop-width...
		if (tS && !isNarrow && !isTablet) {

			res.css.tab.height = tS.deskHeight || trgr.offset.height + vPad * 2 + "px";

			tS.deskHeight ? res.offset.box.top += tS.deskHeight - trgr.offset.height - vPad * 2 : null;

			res.css.tab.top = tS.deskHeight ? '-' + (tS.deskHeight - 1) + 'px' : '-' + (trgr.offset.height + vPad * 2 - 1) + 'px';

			// If there are custom styles, and browser is tablet-width...
		} else if (tS && !isNarrow && isTablet) {

				res.css.tab.height = tS.tabletHeight || trgr.offset.height + vPad * 2 + "px";

				tS.tabletHeight ? res.offset.box.top += tS.tabletHeight - trgr.offset.height - vPad * 2 : null;

				res.css.tab.top = tS.tabletHeight ? '-' + (tS.tabletHeight - 1) + 'px' : '-' + (trgr.offset.height + vPad * 2 - 1) + 'px';

				// If there are custom styles, and browser is phone-width...
			} else if (tS && isNarrow) {

					res.css.tab.height = tS.phoneHeight || trgr.offset.height + vPad * 2 + "px";

					tS.phoneHeight ? res.offset.box.top += tS.phoneHeight - trgr.offset.height - vPad * 2 : null;

					res.css.tab.top = tS.phoneHeight ? '-' + (tS.phoneHeight - 1) + 'px' : '-' + (trgr.offset.height + vPad * 2 - 1) + 'px';

					// Default padding/positioning
				} else {

						res.css.tab.height = trgr.offset.height + vPad * 2 + "px";

						// Move the tab upwards, equal to the trigger height plus padding
						// minus 1px to account for border and visually overlapping box
						res.css.tab.top = '-' + (trgr.offset.height + vPad * 2 - 1) + "px";
					}

		// Tab width equals trigger width plus padding (1rem left and right)
		res.css.tab.width = trgr.offset.width + hPad * 2 + "px";

		// Tab z-index is 1 less than trigger; above box, below trigger
		res.css.tab.zIndex = trgr.e.css('z-index') - 1;

		// `transform` to quickly position box, relative to top left corner
		res.css.box.transform = 'translate3d(' + res.offset.box.left + 'px, ' + res.offset.box.top + 'px, 0)';

		// Apply that giant blob of CSS
		popOut.css({
			zIndex: res.css.box.zIndex,
			transform: res.css.box.transform
		}).find('.pop-out__tab').css({ // find this pop-out's child tab
			height: res.css.tab.height,
			width: res.css.tab.width,
			left: res.offset.tab.left,
			right: 0, // This is always 0
			top: res.css.tab.top,
			zIndex: res.css.tab.zIndex
		});
		// Ugly hack for Safari 8, booo
		popOut.css('-webkit-transform', res.css.box.transform);
	};

	// If there is an active pop-out, update its position
	// Mostly useful for when the browser window resizes
	this.updatePopOut = function () {
		if (state.activeElm) {
			updatePosition();
		}
	};
}

exports['default'] = popOutController;
module.exports = exports['default'];

},{}],30:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _analyticsController = require('./analytics-controller');

function loginController(requestVerificationToken) {
	this.addRegisterUserControl = function (triggerElement, successCallback, failureCallback) {
		var _this = this;

		if (triggerElement) {
			$(triggerElement).on('click', function (event) {
				_this.hideErrors(triggerElement);
				$(triggerElement).attr('disabled', 'disabled');

				var inputData = {};
				var url = $(triggerElement).data('register-user-url');

				$(triggerElement).parents('.js-register-user-container').find('input').each(function () {
					var value = '';

					if ($(this).data('checkbox-type') === 'boolean') {
						value = this.checked;

						if ($(this).data('checkbox-boolean-type') === 'reverse') {
							value = !value;
						}
					} else {
						value = $(this).val();
					}

					inputData[$(this).attr('name')] = value;
				});

				$.ajax({
					url: url,
					type: 'POST',
					data: inputData,
					context: _this,
					success: function success(response) {
						if (response.success) {

							var registerAnalytics = {
								event_name: 'register-step-1',
								registration_state: 'successful',
								userName: '"' + inputData.username + '"'
							};

							(0, _analyticsController.analyticsEvent)($.extend(analytics_data, registerAnalytics));

							if (successCallback) {
								successCallback(triggerElement);
							}

							var nextStepUrl = $(triggerElement).data('next-step-url');

							if (nextStepUrl) {
								window.location.href = nextStepUrl;
							}

							this.showSuccessMessage(triggerElement);
						} else {
							$(triggerElement).removeAttr('disabled');

							var specificErrorDisplayed = false;

							if (response.reasons && response.reasons.length > 0) {
								for (var reason in response.reasons) {
									this.showError(triggerElement, '.js-register-user-error-' + response.reasons[reason]);
								}

								specificErrorDisplayed = true;
							}

							if (!specificErrorDisplayed) {
								this.showError(triggerElement, '.js-register-user-error-general');
							}

							var registerAnalytics = {
								event_name: "registration failure",
								registration_errors: response.reasons
							};

							(0, _analyticsController.analyticsEvent)($.extend(analytics_data, registerAnalytics));

							if (failureCallback) {
								failureCallback(triggerElement);
							}
						}
					},
					error: function error(response) {
						$(triggerElement).removeAttr('disabled');

						this.showError(triggerElement, '.js-register-user-error-general');

						if (failureCallback) {
							failureCallback(triggerElement);
						}
					}
				});
			});
		}
	};

	this.showSuccessMessage = function (triggerElement) {
		$(triggerElement).parents('.js-register-user-container').find('.js-register-user-success').show();
	};

	this.showError = function (triggerElement, error) {
		$(triggerElement).parents('.js-register-user-container').find('.js-register-user-error-container').show();
		$(triggerElement).parents('.js-register-user-container').find(error).show();
	};

	this.hideErrors = function (triggerElement) {
		$(triggerElement).parents('.js-register-user-container').find('.js-register-user-error-container').hide();
		$(triggerElement).parents('.js-register-user-container').find('.js-register-user-error').hide();
	};
};

exports['default'] = loginController;
module.exports = exports['default'];

},{"./analytics-controller":25}],31:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _analyticsController = require('./analytics-controller');

function loginController(requestVerificationToken) {
	this.addRequestControl = function (triggerElement, successCallback, failureCallback) {
		var _this = this;

		if (triggerElement) {
			$(triggerElement).on('click', function (event) {
				_this.hideErrors(triggerElement);
				$(triggerElement).attr('disabled', 'disabled');

				var inputData = {};
				var url = $(triggerElement).data('reset-url');

				$(triggerElement).parents('.js-reset-password-container').find('input').each(function () {
					inputData[$(this).attr('name')] = $(this).val();
				});

				$.ajax({
					url: url,
					type: 'POST',
					data: inputData,
					context: _this,
					success: function success(response) {
						if (response.success) {
							this.showSuccessMessage(triggerElement);

							if (successCallback) {
								successCallback(triggerElement);
							}
						} else {
							$(triggerElement).removeAttr('disabled');
							var resetPasswordAnalytics = {
								event_name: "password reset unsuccessful"
							};

							var specificErrorDisplayed = false;

							if ($.inArray('EmailRequirement', response.reasons) !== -1) {
								this.showError(triggerElement, '.js-reset-password-error-email');
								specificErrorDisplayed = true;
							}

							if (!specificErrorDisplayed) {
								this.showError(triggerElement, '.js-reset-password-error-general');
							}

							(0, _analyticsController.analyticsEvent)($.extend(analytics_data, resetPasswordAnalytics));

							if (failureCallback) {
								failureCallback(triggerElement);
							}
						}
					},
					error: function error(response) {
						$(triggerElement).removeAttr('disabled');

						this.showError(triggerElement, '.js-reset-password-error-general');

						if (failureCallback) {
							failureCallback(triggerElement);
						}
					}
				});
			});
		}
	};

	this.addChangeControl = function (triggerElement, successCallback, failureCallback) {
		var _this2 = this;

		if (triggerElement) {
			$(triggerElement).on('click', function (event) {
				_this2.hideErrors(triggerElement);
				$(triggerElement).attr('disabled', 'disabled');

				var inputData = {};
				var url = $(triggerElement).data('reset-url');

				$(triggerElement).parents('.js-reset-password-container').find('input').each(function () {
					inputData[$(this).attr('name')] = $(this).val();
				});

				$.ajax({
					url: url,
					type: 'POST',
					data: inputData,
					context: _this2,
					success: function success(response) {
						if (response.success) {
							this.showSuccessMessage(triggerElement);

							if (successCallback) {
								successCallback(triggerElement);
							}
						} else {
							$(triggerElement).removeAttr('disabled');

							var specificErrorDisplayed = false;

							if ($.inArray('PasswordMismatch', response.reasons) !== -1) {
								this.showError(triggerElement, '.js-reset-password-error-mismatch');
								specificErrorDisplayed = true;
							}
							if ($.inArray('PasswordRequirements', response.reasons) !== -1) {
								this.showError(triggerElement, '.js-reset-password-error-requirements');
								specificErrorDisplayed = true;
							}

							if (!specificErrorDisplayed || $.inArray('MissingToken', response.reasons) !== -1) {
								this.showError(triggerElement, '.js-reset-password-error-general');
							}

							if (failureCallback) {
								failureCallback(triggerElement);
							}
						}
					},
					error: function error(response) {
						$(triggerElement).removeAttr('disabled');

						this.showError(triggerElement, '.js-reset-password-error-general');

						if (failureCallback) {
							failureCallback(triggerElement);
						}
					}
				});
			});
		}
	};

	this.addRetryControl = function (triggerElement, successCallback, failureCallback) {
		var _this3 = this;

		if (triggerElement) {
			$(triggerElement).on('click', function (event) {
				_this3.hideErrors(triggerElement);
				$(triggerElement).attr('disabled', 'disabled');

				var inputData = {};
				var url = $(triggerElement).data('retry-url');

				$(triggerElement).parents('.js-reset-password-container').find('input').each(function () {
					inputData[$(this).attr('name')] = $(this).val();
				});

				$.ajax({
					url: url,
					type: 'POST',
					data: inputData,
					context: _this3,
					success: function success(response) {
						if (response.success) {
							this.showSuccessMessage(triggerElement);

							if (successCallback) {
								successCallback(triggerElement);
							}
						} else {
							$(triggerElement).removeAttr('disabled');

							this.showError(triggerElement, '.js-reset-password-error-general');

							if (failureCallback) {
								failureCallback(triggerElement);
							}
						}
					},
					error: function error(response) {
						$(triggerElement).removeAttr('disabled');

						this.showError(triggerElement, '.js-reset-password-error-general');

						if (failureCallback) {
							failureCallback(triggerElement);
						}
					}
				});
			});
		}
	};

	this.showSuccessMessage = function (triggerElement) {
		$(triggerElement).parents('.js-reset-password-container').find('.js-reset-password-success').show();
		var resetPasswordAnalytics = {
			event_name: "password reset success"
		};

		(0, _analyticsController.analyticsEvent)($.extend(analytics_data, resetPasswordAnalytics));
	};

	this.showError = function (triggerElement, error) {
		$(triggerElement).parents('.js-reset-password-container').find('.js-reset-password-error-container').show();
		$(triggerElement).parents('.js-reset-password-container').find(error).show();
		var resetPasswordAnalytics = {
			event_name: "password reset unsuccessful"
		};

		(0, _analyticsController.analyticsEvent)($.extend(analytics_data, resetPasswordAnalytics));
	};

	this.hideErrors = function (triggerElement) {
		$(triggerElement).parents('.js-reset-password-container').find('.js-reset-password-error-container').hide();
		$(triggerElement).parents('.js-reset-password-container').find('.js-reset-password-error').hide();
	};
};

exports['default'] = loginController;
module.exports = exports['default'];

},{"./analytics-controller":25}],32:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});
function sortableTableController() {

	/*
 Based on SortTable version 2
 7th April 2007
 Stuart Langridge, http://www.kryogenix.org/code/browser/sorttable/
 Licenced as X11: http://www.kryogenix.org/code/browser/licence.html
 */

	var isSortedTable = false;
	var tfo, mtch, sortfn, hasInputs;

	var sorttable = {

		init: function initing() {
			// quit if this function has already been called
			if (isSortedTable) return;
			// flag this function so we don't do the same thing twice
			isSortedTable = true;

			$('.js-sortable-table').each(function (indx, item) {
				sorttable.makeSortable(item);
			});
		},

		sortColumn: function sortColumn(table, col) {

			// build an array to sort. This is a Schwartzian transform thing,
			// i.e., we "decorate" each row with the actual sort key,
			// sort based on the sort keys, and then put the rows back in order
			// which is a lot faster because you only do getInnerText once per row

			var row_array = [];
			var headrow = table.tHead.rows[0].cells;
			var rows = [].slice.call(table.tBodies[0].rows);
			var guesstype = sorttable.guessType(table, col);

			for (var j = 0; j < rows.length; j++) {
				row_array[row_array.length] = [$(rows[j].cells[col]), rows[j]];
			}

			if ($(headrow[col]).data('sortable-type')) {
				row_array.sort(sorttable[$(headrow[col]).data('sortable-type')]);
			} else {
				row_array.sort(guesstype);
			}

			var tb = table.tBodies[0];
			for (var j = 0; j < row_array.length; j++) {
				tb.appendChild(row_array[j][1]);
			}

			row_array = undefined;
		},

		makeSortable: function makeSortable(table) {

			// Sorttable v1 put rows with a class of "sortbottom" at the bottom (as
			// "total" rows, for example). This is B&R, since what you're supposed
			// to do is put them in a tfoot. So, if there are sortbottom rows,
			// for backwards compatibility, move them to tfoot (creating it if needed).
			var sortbottomrows = [];
			for (var i = 0; i < table.rows.length; i++) {
				if ($(table.rows[i]).hasClass('.sortbottom')) {
					sortbottomrows[sortbottomrows.length] = table.rows[i];
				}
			}

			if (sortbottomrows) {
				if (table.tFoot == null) {
					// table doesn't have a tfoot. Create one.
					tfo = document.createElement('tfoot');
					table.appendChild(tfo);
				}
				for (var j = 0; j < sortbottomrows.length; j++) {
					tfo.appendChild(sortbottomrows[j]);
				}
				sortbottomrows = undefined;
			}

			// work through each column and calculate its type
			var headrow = table.tHead.rows[0].cells;
			for (var i = 0; i < headrow.length; i++) {

				// manually override the type with a sorttable_type attribute
				if (!headrow[i].className.match(/\bsorttable_nosort\b/)) {
					// skip this col
					headrow[i].sorttable_sortfunction = sorttable.guessType(table, i);
				}
			};

			$(table).find('.js-sortable-table-sorter').on('click', function (e) {

				// If child element is clicked, redirect the click to the
				// proper element: the parent itself.
				if (e.target !== this) {
					this.click();
					return;
				}

				var colNum = $(e.target).closest('.js-sortable-table-sorter').data('sortable-table-col') - 1;

				if ($(e.target).hasClass('sorttable_sorted')) {
					// This column is sorted top to bottom
					// Re-sort the column to catch any row changes...
					sorttable.sortColumn(table, colNum);
					// ...then reverse the column and update the classes (state).
					sorttable.reverse(table.tBodies[0]);
					$(e.target).removeClass('sorttable_sorted').addClass('sorttable_sorted_reverse');

					return;
				}

				if ($(e.target).hasClass('sorttable_sorted_reverse')) {
					// This column is sorted bottom to top
					// Flip the table back to top-to-bottom (default)...
					sorttable.reverse(table.tBodies[0]);
					// ...then re-sort it to catch any row changes.
					sorttable.sortColumn(table, colNum);
					$(e.target).removeClass('sorttable_sorted_reverse').addClass('sorttable_sorted');

					return;
				}

				// remove sorttable_sorted classes
				var theadrow = e.target.parentNode;
				forEach(theadrow.childNodes, function (cell) {
					if (cell.nodeType == 1) {
						// an element
						$(cell).removeClass('sorttable_sorted_reverse sorttable_sorted');
					}
				});

				if ($('.sorttable_sortfwdind')) {
					$('.sorttable_sortfwdind').remove();
				}

				if ($('.sorttable_sortrevind')) {
					$('.sorttable_sortrevind').remove();
				}

				$(e.target).addClass('sorttable_sorted');

				sorttable.sortColumn(table, colNum);
			});
		},

		guessType: function guessType(table, column) {

			// guess the type of a column based on its first non-blank row
			sortfn = sorttable.sort_alpha;

			for (var i = 0; i < table.tBodies[0].rows.length; i++) {

				var text = $(table.tBodies[0].rows[i].cells[column]).text().trim();
				if (text != '') {
					// If column is numeric or appears to be money, sort numeric
					if (text.match(/^-?[£$¤]?[\d,.]+%?$/)) {
						return sorttable.sort_numeric;
					} else if (Date.parse(text) > 0) {
						// Check for valid date
						// If found, assume column is full of dates, sort by date!
						return sorttable.sort_by_date;
					} else {
						return sorttable.sort_alpha;
					}
				}
			}
			return sortfn;
		},

		reverse: function reverse(tbody) {
			// reverse the rows in a tbody
			var newrows = [];
			for (var i = 0; i < tbody.rows.length; i++) {
				newrows[newrows.length] = tbody.rows[i];
			}
			for (var i = newrows.length - 1; i >= 0; i--) {
				tbody.appendChild(newrows[i]);
			}
			newrows = undefined;
		},

		/* sort functions
  each sort function takes two parameters, a and b
  you are comparing a[0] and b[0] */
		sort_numeric: function sort_numeric(a, b) {
			var aa = parseFloat(a[0].replace(/[^0-9.-]/g, ''));
			if (isNaN(aa)) aa = 0;
			var bb = parseFloat(b[0].replace(/[^0-9.-]/g, ''));
			if (isNaN(bb)) bb = 0;
			return aa - bb;
		},
		sort_alpha: function sort_alpha(a, b) {
			var aClean = a[0].text().trim().toUpperCase();
			var bClean = b[0].text().trim().toUpperCase();
			if (aClean == bClean) return 0;
			if (aClean < bClean) return -1;
			return 1;
		},

		sort_by_date: function sort_by_date(a, b) {
			// http://stackoverflow.com/questions/10123953/sort-javascript-object-array-by-date
			// Turn your strings into dates, and then subtract them
			// to get a value that is either negative, positive, or zero.
			return new Date(b[0].text().trim()) - new Date(a[0].text().trim());
		},

		sort_checkbox: function sort_checkbox(a, b) {
			var aChecked = a[0].find('input[type=checkbox]').prop('checked');
			var bChecked = b[0].find('input[type=checkbox]').prop('checked');
			if (aChecked && !bChecked) return 1;
			if (!aChecked && bChecked) return -1;

			return 0;
		},

		shaker_sort: function shaker_sort(list, comp_func) {
			// A stable sort function to allow multi-level sorting of data
			// see: http://en.wikipedia.org/wiki/Cocktail_sort
			// thanks to Joseph Nahmias
			var b = 0;
			var t = list.length - 1;
			var swap = true;

			while (swap) {
				swap = false;
				for (var i = b; i < t; ++i) {
					if (comp_func(list[i], list[i + 1]) > 0) {
						var q = list[i];list[i] = list[i + 1];list[i + 1] = q;
						swap = true;
					}
				} // for
				t--;

				if (!swap) break;

				for (var i = t; i > b; --i) {
					if (comp_func(list[i], list[i - 1]) < 0) {
						var q = list[i];list[i] = list[i - 1];list[i - 1] = q;
						swap = true;
					}
				} // for
				b++;
			} // while(swap)
		}
	};

	/// HELPER FUNCTIONS

	// Dean's forEach: http://dean.edwards.name/base/forEach.js
	/*
 	forEach, version 1.0
 	Copyright 2006, Dean Edwards
 	License: http://www.opensource.org/licenses/mit-license.php
 */

	// array-like enumeration
	if (!Array.forEach) {
		// mozilla already supports this
		Array.forEach = function (array, block, context) {
			for (var i = 0; i < array.length; i++) {
				block.call(context, array[i], i, array);
			}
		};
	}

	// generic enumeration
	Function.prototype.forEach = function (object, block, context) {
		for (var key in object) {
			if (typeof this.prototype[key] == "undefined") {
				block.call(context, object[key], key, object);
			}
		}
	};

	// character enumeration
	String.forEach = function (string, block, context) {
		Array.forEach(string.split(""), function (chr, index) {
			block.call(context, chr, index, string);
		});
	};

	// globally resolve forEach enumeration
	var forEach = function forEach(object, block, context) {
		if (object) {
			var resolve = Object; // default
			if (object instanceof Function) {
				// functions have a "length" property
				resolve = Function;
			} else if (object.forEach instanceof Function) {
				// the object implements a custom forEach method so use that
				object.forEach(block, context);
				return;
			} else if (typeof object == "string") {
				// the object is a string
				resolve = String;
			} else if (typeof object.length == "number") {
				// the object is array-like
				resolve = Array;
			}
			resolve.forEach(object, block, context);
		}
	};

	sorttable.init();
};

exports['default'] = sortableTableController;
module.exports = exports['default'];

},{}],33:[function(require,module,exports){
/* global tooltipController */

"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = createPopup;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _calculatePopupOffsetsJs = require("../calculatePopupOffsets.js");

var _calculatePopupOffsetsJs2 = _interopRequireDefault(_calculatePopupOffsetsJs);

/**
 * creates a popup and injects it in to the document.
 * @param  {String} title : title of the popup, optional
 * @param  {String} html : content of the popup as html
 * @param  {Number} top  : top position relative to the document
 * @param  {Number} left : left position relative to the document
 * @param  {Number} offset : a vertical or horizonal distance from the top/left the triangle should point
 *                           depending on if the triangle is top/bottom or left/right
 * @param  {String} container : a selector of the container in which to inject the popup
 * @param  {String} triangle : "top", "right", "bottom", or "left"
 * @param  {Boolean} flipToContain: will flip the popup if it goes outside the parent container
 * @param  {Boolean} closeBtn : if the X should be shown.  If not, the popup with not have pointer events
 *                              this is useful for popups on hover that shouldn't fire mouseenter/leave
 * @param  {Boolean} isHidden: Whether or not the popup is visible.
 * @return {Object} {
 *     {Function} hidePopup   : will set isHidden to true
 *     {Function} removePopup : will remove the popup from the DOM),
 *     {Function} setState : pass an object with any keys from above to update the popup.
 * }
 */

function createPopup(initialState) {

    // defaults, and this object will hold the previous state after setState
    var prevState = {
        title: "",
        html: "",
        top: 0,
        left: 0,
        width: "",
        offset: 0,
        container: "body",
        triangle: "bottom",
        closeBtn: true,
        isHidden: false,
        flipToContain: false
    };

    var state = $.extend({}, prevState, initialState);

    function setState(newState) {

        // copy the old state into prevState
        prevState = $.extend({}, state);

        $.extend(state, newState);

        // console.log(state);

        render();
    }

    // initialize popup
    // always start hidden so it can animate in
    var $popup = $("<div class='popup'>").css({
        "opacity": 0,
        "width": state.width,
        "transform": "scale(0.89)",
        "pointer-events": state.closeBtn ? "auto" : "none"
    });
    var $titleDiv = $("<div>").addClass("popup__title");
    var $triangleDiv = $("<div>").addClass("popup__triangle");
    var $content = $("<div>").addClass("popup__content");

    // attach the close button if we're supposed to
    if (state.closeBtn) {
        var $xDiv = $("<div>").addClass("popup__x-icon").html("<svg class='svg-x'> <use xlink:href='build/img/svg-sprite.svg#x'></use> </svg>").on("click", removePopup);
        $popup.append($xDiv);

        window.addEventListener("click", handleClickAway, true);
        window.addEventListener("resize", handleClickAway, true);
    }

    $popup.append($titleDiv);
    $popup.append($triangleDiv);
    $popup.append($content);

    $(state.container).append($popup);

    // if the user clicked outside of the popup, close it
    function handleClickAway(e) {
        var inPopup = $(e.target).closest(".popup").length;
        if (!inPopup) {
            removePopup();
        }
    }

    function hidePopup() {

        window.removeEventListener("click", handleClickAway, true);
        window.removeEventListener("resize", handleClickAway, true);

        // only re-render if we need to
        if (state.isHidden !== true) {
            // will kick of the transition
            setState({
                isHidden: true
            });
        }
    }

    function removePopup() {

        // first close it
        hidePopup();

        // when the transition finishes, remove the popup from the DOM
        $popup.on("transitionend", function () {
            $popup.remove();
        });
    }

    // render the first time
    render();

    function render() {
        var top = state.top;
        var left = state.left;
        var offset = state.offset;
        var triangle = state.triangle;
        var isHidden = state.isHidden;
        var html = state.html;
        var title = state.title;
        var flipToContain = state.flipToContain;

        // update the content before calculating the offsets
        $content.html(html);
        $titleDiv.html(title);

        var offsets = (0, _calculatePopupOffsetsJs2["default"])({
            popup: $popup.get(0),
            triangleSize: $triangleDiv.height(),
            top: top, left: left, offset: offset, triangle: triangle, flipToContain: flipToContain
        });

        // if the popup was hidden, we want to place it where it needs to be
        // the update will fade it in
        // enter - put it in place before transitioning in
        if (prevState.isHidden && !isHidden) {
            $popup.css({
                "top": offsets.popupTop + "px",
                "left": offsets.popupLeft + "px"
            });
        }

        $popup
        // .stop().animate({
        .css({
            opacity: isHidden ? 0 : 1,
            transform: isHidden ? "scale(0.9)" : "scale(1)",
            top: offsets.popupTop + 'px',
            left: offsets.popupLeft + 'px'
        }, 250).removeClass(function (index, css) {
            return (css.match(/\bis-triangle-\S+/g) || []).join(" ");
        }).addClass("is-triangle-" + offsets.triangleSide).toggleClass("popup--hidden", isHidden);

        // adjust the triangle
        $triangleDiv.css({
            "transform": offsets.triangleSide === "top" || offsets.triangleSide === "bottom" ? "translateX(" + offsets.triangleOffset + "px)" // top/bottom
            : "translateY(" + offsets.triangleOffset + "px)" // left/right
        });

        $popup.toggleClass("no-title", !title);
    }

    // external api
    return {
        setState: setState,
        hidePopup: hidePopup,
        removePopup: removePopup
    };
}

module.exports = exports["default"];

},{"../calculatePopupOffsets.js":2}],34:[function(require,module,exports){
/* global angular, analytics_data */

// THIRD-PARTY / VENDOR
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _zeptoMin = require('./zepto.min');

var _zeptoMin2 = _interopRequireDefault(_zeptoMin);

var _svg4everybody = require('./svg4everybody');

var _svg4everybody2 = _interopRequireDefault(_svg4everybody);

var _jscookie = require('./jscookie');

var _jscookie2 = _interopRequireDefault(_jscookie);

var _zeptoDragswap = require('./zepto.dragswap');

var _zeptoDragswap2 = _interopRequireDefault(_zeptoDragswap);

var _DragDropTouch = require('./DragDropTouch');

var _DragDropTouch2 = _interopRequireDefault(_DragDropTouch);

// CAROUSEL
//import highlight from './carousel/highlight.pack';

var _carouselZeptoData = require('./carousel/zepto.data');

var _carouselZeptoData2 = _interopRequireDefault(_carouselZeptoData);

//import app from './carousel/app';

require('./carousel/owl.carousel');

// CONTROLLERS

var _controllersFormController = require('./controllers/form-controller');

var _controllersFormController2 = _interopRequireDefault(_controllersFormController);

var _controllersPopOutController = require('./controllers/pop-out-controller');

var _controllersPopOutController2 = _interopRequireDefault(_controllersPopOutController);

var _controllersBookmarkController = require('./controllers/bookmark-controller');

var _controllersBookmarkController2 = _interopRequireDefault(_controllersBookmarkController);

var _controllersResetPasswordController = require('./controllers/reset-password-controller');

var _controllersResetPasswordController2 = _interopRequireDefault(_controllersResetPasswordController);

var _controllersRegisterController = require('./controllers/register-controller');

var _controllersRegisterController2 = _interopRequireDefault(_controllersRegisterController);

var _controllersSortableTableController = require('./controllers/sortable-table-controller');

var _controllersSortableTableController2 = _interopRequireDefault(_controllersSortableTableController);

var _controllersLightboxModalController = require('./controllers/lightbox-modal-controller');

var _controllersLightboxModalController2 = _interopRequireDefault(_controllersLightboxModalController);

var _controllersAnalyticsController = require('./controllers/analytics-controller');

var _controllersTooltipController = require('./controllers/tooltip-controller');

var _controllersTooltipController2 = _interopRequireDefault(_controllersTooltipController);

// COMPONENTS

require('./components/article-sidebar-component');

require('./components/save-search-component');

require('./components/myview-settings');

require('./components/pagination');

require('./components/personalisation');

require('./components/id-comparechart');

require('./components/id-responsive-table');

require('./components/id-financial-responsive-table');

require('./components/id-quarterly-responsive-table');

require('./components/id-comparefinancialresults');

require('./components/latest-casuality');

require('./components/id-merge-acquistion');

require('./components/AMCharts-merges-acquisition');

require('./components/dynamic-content-recomendation');

require('./components/ll-casuality-listing');

require('./components/ll-casuality-detail');

require('./components/ll-market-data-tool');

require('./components/ll-market-data');

require('./components/ll-tanker-fixtures');

// OTHER CODE

var _newsletterSignup = require('./newsletter-signup');

var _newsletterSignup2 = _interopRequireDefault(_newsletterSignup);

var _searchPageJs = require('./search-page.js');

var _searchPageJs2 = _interopRequireDefault(_searchPageJs);

var _toggleIcons = require('./toggle-icons');

// Global scope to play nicely with Angular

var _selectivityFull = require('./selectivity-full');

var _selectivityFull2 = _interopRequireDefault(_selectivityFull);

var _componentsVideoMini = require('./components/video-mini');

var _componentsVideoMini2 = _interopRequireDefault(_componentsVideoMini);

var _modal = require('./modal');

var _modal2 = _interopRequireDefault(_modal);

// Make sure proper elm gets the click event
// When a user submits a Forgot Password request, this will display the proper
// success message and hide the form to prevent re-sending.

window.toggleIcons = _toggleIcons.toggleIcons;

/* Polyfill for scripts expecting `jQuery`. Also see: CSS selectors support in zepto.min.js */
window.jQuery = $;
var showForgotPassSuccess = function showForgotPassSuccess() {
    $('.pop-out__sign-in-forgot-password-nested').toggleClass('is-hidden');
    $('.pop-out__sign-in-forgot-password').find('.alert-success').toggleClass('is-active');
};

window.findTooltips = function () {
    $('.js-toggle-tooltip').each(function (index, item) {
        var tooltip;
        $(item).data("ttVisible", false);
        $(item).data("ttTouchTriggered", false);

        $(item).on('mouseenter touchstart', function (e) {
            e.preventDefault();
            e.stopPropagation();
            if (e.type === "touchstart") {
                $(item).data("ttTouchTriggered", true);
            }

            // Actual mouse events thrown can be any number of things...
            if ((e.type === "mouseover" || e.type === "mouseenter") && $(item).data("ttTouchTriggered")) {
                // Do nothing
            } else if ($(item).data("ttVisible") && e.type === "touchstart") {
                    $(item).data("ttVisible", false);
                    $(item).data("ttTouchTriggered", false);
                    tooltip.hidePopup();
                } else {
                    $(item).data("ttVisible", true);
                    var offsets = $(item).offset();
                    tooltip = (0, _controllersTooltipController2['default'])({
                        isHidden: false,
                        html: $(item).data('tooltip-text'),
                        top: offsets.top,
                        left: offsets.left + $(this).width() / 2,
                        triangle: 'bottom'
                    });
                }
        });

        $(item).on('mouseleave', function () {
            $(item).data("ttVisible", false);
            tooltip.hidePopup();
            $('.popup').remove();
        });
    });
};

window.findTooltips();

var renderIframeComponents = function renderIframeComponents() {
    $('.iframe-component').each(function (index, elm) {
        var desktopEmbed = $(elm).find('.iframe-component__desktop');
        var mobileEmbed = $(elm).find('.iframe-component__mobile');

        var isEditMode = $(this).hasClass('is-page-editor');

        var showMobile = $(window).width() <= 480 || isEditMode;
        var showDesktop = !showMobile || isEditMode;

        if (showMobile) {
            mobileEmbed.show();
            if (mobileEmbed.html() == '') mobileEmbed.html(decodeHtml(mobileEmbed.data('embed-link')));
        } else {
            desktopEmbed.hide();
        }

        if (showDesktop) {
            desktopEmbed.show();
            if (desktopEmbed.html() == '') desktopEmbed.html(decodeHtml(desktopEmbed.data('embed-link')));
        } else {
            mobileEmbed.hide();
        }

        var desktopMediaId = $(elm).find('.iframe-component__desktop').data("mediaid");

        var url = window.location.href;
        url.replace("#", "");
        if (url.indexOf("?") < 0) {
            url += "?";
        } else {
            url += "&";
        }

        url += "mobilemedia=true&selectedid=" + desktopMediaId;
        $(elm).find('.iframe-component__mobile a').data('mediaid', url).attr('href', null);
    });
};

var renderTableau = function renderTableau() {

    var desktopEmbed = $('.tableau_component__desktop');
    var mobileEmbed = $('.tableau_component__mobile');

    var mobileHiddenValue = $('#IsMobileDashboardAvailable').val();
    var showMobile = $(window).width() <= 480;
    var showDesktop = !showMobile;

    if (showMobile) {
        if (mobileHiddenValue == "True") {
            mobileEmbed.show();
            desktopEmbed.hide();
        } else {
            desktopEmbed.show();
        }
    }

    if (showDesktop) {
        desktopEmbed.show();
        mobileEmbed.hide();
    }
};

var renderAMchart = function renderAMchart() {
    if ($("#amchartDashboard").hasClass("amchart-dashboard")) {

        var amChartType = $('#ChartType').val().toLowerCase();
        var dataProvider = $('#amChartDataProvider').val().toLowerCase();
        var graphType = $('#GraphType').val().toLowerCase();
        var categoryField = $('#CategoryField').val().toLowerCase();
        var valueField = $('#ValueField').val().toLowerCase();

        AmCharts.makeChart("chartdiv", {
            "type": amChartType,
            "dataProvider": chartData,
            "categoryField": categoryField,
            "graphs": [{
                "valueField": valueField,
                "type": graphType
            }],
            "responsive": {
                "enabled": true
            }
        });
    }
};

var decodeHtml = function decodeHtml(html) {
    var txt = document.createElement("textarea");
    txt.innerHTML = html;
    return txt.value;
};

function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}

$(document).ready(function () {

    //AM Charts
    if ($('#amchartData') && $('#amchartData').length) {
        var amchartVal = JSON.parse($('#amchartData').val()),
            createNewObj = {},
            chart;

        if (typeof amchartVal.dataProvider !== 'object') {
            for (var prop in amchartVal) {
                if (prop != 'dataProvider') {
                    createNewObj[prop] = amchartVal[prop];
                } else {
                    createNewObj[prop] = chartDataVal;
                }
            }
            chart = AmCharts.makeChart("chartdiv", createNewObj);
        } else {
            chart = AmCharts.makeChart("chartdiv", amchartVal);
        }
    }
    //messaging web users
    window.dismiss = function () {
        $('.dismiss').on('click', function () {
            _jscookie2['default'].set('dismiss_cookie', 'dismiss_cookie_created', '');
            $('.messaging_webUsers').remove();
            $('.messaging_webUsers_white').remove();

            var dismiss_data = {
                event_name: "message_dismissal",
                ga_eventCategory: "Messaging Frame",
                ga_eventAction: "Dismissal",
                ga_eventLabel: "Dismiss",
                page_name: analytics_data["page_name"]
            };

            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, dismiss_data));
        });
    };
    window.dismiss();

    //Job Listing Pagination
    if ($('#jobTilesCount') && $('#jobTilesCount').length && $('#noofJobsPerPage') && $('#noofJobsPerPage').length) {
        var totalCategories = $("#jobTilesCount").val(),
            categoryLimit = $("#noofJobsPerPage").val();

        window.setPagination({
            totalCategories: parseInt(totalCategories),
            categoryLimit: parseInt(categoryLimit),
            currentPage: 1,
            paginationEle: '.job_list_individual'
        });

        window.loadPaginationNums();
    }

    //Food news Pagination
    if ($('#foodNewsCount') && $('#foodNewsCount').length && $('#noofJobsPerPage') && $('#noofJobsPerPage').length) {
        var totalCategories = $("#foodNewsCount").val(),
            categoryLimit = $("#noofJobsPerPage").val();

        window.setPagination({
            totalCategories: parseInt(totalCategories),
            categoryLimit: parseInt(categoryLimit),
            currentPage: 1
        });

        window.loadPaginationNums();
    }

    window.custom_label = function () {
        $("body").off().on("click", '.label-check', function (e) {
            if ($(this).hasClass("label-check")) {

                var ele = $(this).find('input');
                if (ele.is(':checked')) {
                    ele.prop('checked', false);
                    ele.parent('div').removeClass('wcs-c-on');
                } else {
                    ele.prop('checked', true);
                    ele.parent('div').addClass('wcs-c-on');
                }
            }
        });
    };
    window.custom_label();

    window.personalised_nav = function () {
        //personalise pop up
        var modal = document.getElementById('myModal');

        // Get the button that opens the modal
        var btn = document.getElementById("myBtn");

        // Get the <span> element that closes the modal
        var span = document.getElementsByClassName("personalise_close")[0];

        // When the user clicks the button, open the modal
        $(document).on('click', '#myBtn', function () {
            modal.style.display = "block";
        });

        // When the user clicks on <span> (x), close the modal
        if (span !== undefined) {
            span.onclick = function () {
                modal.style.display = "none";
            };
        }

        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        };
    };
    window.personalised_nav();

    var mediaTable = getParameterByName('mobilemedia');
    if (mediaTable == "true") {
        $("table").each(function () {
            $(this).attr("style", "display:block");
        });
    }

    // Anti Forgery Token
    var requestVerificationToken = $('.main__wrapper').data('request-verification-token');

    var sortTheTables = new _controllersSortableTableController2['default']();

    window.lightboxController = new _controllersLightboxModalController2['default']();

    /* * *
    Traverses the DOM and registers event listeners for any pop-out triggers.
    Bound explicitly to `window` for easier access by Angular.
    * * */
    window.indexPopOuts = function () {

        window.controlPopOuts = new _controllersPopOutController2['default']('.js-pop-out-trigger');

        window.controlPopOuts.customize({
            id: 'header-register',
            tabStyles: {
                deskHeight: 87,
                tabletHeight: 72,
                phoneHeight: '' // Default
            }
        });

        window.controlPopOuts.customize({
            id: 'myView-header-register',
            tabStyles: {
                deskHeight: 87,
                tabletHeight: 72,
                phoneHeight: '' // Default
            }
        });
        window.controlPopOuts.customize({
            id: 'header-register',
            tabStyles: {
                deskHeight: 87,
                tabletHeight: 72,
                phoneHeight: '' // Default
            }
        });

        window.controlPopOuts.customize({
            id: 'header-signin',
            tabStyles: {
                deskHeight: 87,
                tabletHeight: 72,
                phoneHeight: '' // Default
            }
        });
    };

    window.indexPopOuts();

    window.bookmark = new _controllersBookmarkController2['default']();

    /* * *
    Traverses the DOM and registers event listeners for any bookmarkable
    articles. Bound explicitly to `window` for easier access by Angular.
    * * */
    window.indexBookmarks = function () {
        // Toggle bookmark icon
        $(document).on('click', '.js-bookmark-article', function bookmarkArticle(e) {

            e.preventDefault();
            window.bookmark.toggle(this);
        });
    };

    window.indexBookmarks();

    //Data tool Landing page

    window.addWidth = function () {
        //landing page
        if ($(".demoText").is(':visible') && !$(".video-demo").is(':hidden')) {
            $('.demoText').addClass('add-width-100');
        }
        if (!$(".demoText").is(':hidden') && $(".video-demo").is(':visible')) {
            $('.video-demo').addClass('add-width-100');
        }
        if ($(".demoText").is(':visible') && $(".video-demo").is(':visible')) {
            $('.demoText').removeClass('add-width-100');
            $('.video-demo').removeClass('add-width-100');
        }
    };
    window.addWidth();

    /* * *
    If a user tries bookmarking an article while logged out, they'll be
    prompted to sign in first. This checks for any articles that have been
    passed along for post-sign-in bookmarking. Bound explicitly to `window`
    for easier access by Angular.
    * * */
    window.autoBookmark = function () {

        var bookmarkTheArticle = function bookmarkTheArticle(article) {
            $('.js-bookmark-article').each(function (indx, item) {
                if ($(item).data('bookmark-id') === article && !$(item).data('is-bookmarked')) {

                    $(item).click();
                } else {
                    // already bookmarked or not a match
                }
            });
        };

        var urlVars = window.location.href.split("?");
        var varsToParse = urlVars[1] ? urlVars[1].split("&") : null;
        if (varsToParse) {
            for (var i = 0; i < varsToParse.length; i++) {
                var pair = varsToParse[i].split("=");
                if (pair[0] === 'immb') {
                    bookmarkTheArticle(pair[1]);
                }
            }
        }
    };

    window.autoBookmark();

    /* * *
    Toggle global header search box
    (toggles at tablet/smartphone sizes, always visible at desktop size)
    * * */
    $('.js-header-search-trigger').on('click', function toggleMenuItems(e) {
        if ($(window).width() <= 800) {
            $('.header-search__wrapper').toggleClass('is-active').focus();
        } else {
            $(e.target).closest('form').submit();
        }
        e.preventDefault();
        return false;
    });

    var newsletterSignup = new _newsletterSignup2['default']();
    newsletterSignup.checkForUserSignedUp();
    newsletterSignup.addControl('.js-newsletter-signup-submit', null, function (triggerElement) {});

    /* * *
    Handle user sign-in attempts.
    * * */
    var userSignIn = new _controllersFormController2['default']({
        observe: '.js-sign-in-submit',
        successCallback: function successCallback(form, context, event) {

            var loginRegisterMethod = "login_register_component";
            if ($(form).parents('.pop-out__sign-in').length > 0) loginRegisterMethod = "global_login";

            var loginAnalytics = {
                event_name: 'login',
                login_state: 'successful',
                userName: '"' + $(form).find('input[name=username]').val() + '"',
                login_register_method: loginRegisterMethod
            };

            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, loginAnalytics));

            /* * *
            If `pass-article-id` is set, user is probably trying to sign in
            after attempting to bookmark an article. Add the article ID to
            the URL so `autoBookmark()` catches it.
            * * */
            var passArticleId = $(form).find('.sign-in__submit').data('pass-article-id');
            if (passArticleId) {
                var sep = window.location.href.indexOf('?') > -1 ? '&' : '?';

                window.location.href = window.location.href + sep + 'immb=' + passArticleId;

                // If Angular, need location.reload to force page refresh
                if (typeof angular !== 'undefined') {
                    angular.element($('.search-results')[0]).controller().forceRefresh();
                }
            } else {
                window.location.reload(false);
            }
        },
        failureCallback: function failureCallback(form, context, event) {

            var loginAnalytics = {
                event_name: "Login Failure",
                login_state: "unsuccessful",
                userName: '"' + $(form).find('input[name=username]').val() + '"'
            };

            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, loginAnalytics));
        }
    });

    var resetPassword = new _controllersFormController2['default']({
        observe: '.form-reset-password',
        successCallback: function successCallback() {
            $('.form-reset-password').find('.alert-success').show();
            var isPassword = $('.form-reset-password').data("is-password");
            if (isPassword) {
                (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, { event_name: "password reset success" }));
            }
        },
        failureCallback: function failureCallback() {
            var isPassword = $('.form-reset-password').data("is-password");
            if (isPassword) {
                (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, { event_name: "password reset failure" }));
            }
        }

    });

    var newResetPassToken = new _controllersFormController2['default']({
        observe: '.form-new-reset-pass-token',
        successCallback: function successCallback() {
            $('.form-new-reset-pass-token').find('.alert-success').show();
            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, { event_name: "password reset success" }));
        },
        failureCallback: function failureCallback() {
            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, { event_name: "password reset failure" }));
        }
    });

    $('.js-corporate-master-toggle').on('change', function () {
        if ($(this).prop('checked')) {
            $('.js-registration-corporate-wrapper').show();
        } else {
            $('.js-registration-corporate-wrapper').hide();
        }
    });

    var userRegistrationController = new _controllersFormController2['default']({
        observe: '.form-registration',
        successCallback: function successCallback(form, context, event) {

            // Stash registration type so next page can know it without
            // an additional Salesforce call
            _jscookie2['default'].set('registrationType', context.response.registration_type, {});

            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, {
                registration_type: context.response.registration_type
            }));
        },
        failureCallback: function failureCallback(form, response) {

            var errorMsg = $(".page-registration__error").text();
            if (response.reasons && response.reasons.length > 0) {
                errorMsg = "[";
                for (var reason in response.reasons) {
                    errorMsg += response.reasons[reason] + ",";
                }
                errorMsg = errorMsg.substring(0, errorMsg.length - 1);
                errorMsg += "]";
            }
            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, { event_name: "registration failure", registraion_errors: errorMsg }));
        }
    });

    var userRegistrationFinalController = new _controllersFormController2['default']({
        observe: '.form-registration-optins',
        successCallback: function successCallback(form, context, event) {

            var registrationType = _jscookie2['default'].get('registrationType');

            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, {
                registration_type: registrationType
            }));

            _jscookie2['default'].remove('registrationType');
        },
        failureCallback: function failureCallback(form, response) {
            var errorMsg = $(".page-registration__error").text();
            if (response.reasons && response.reasons.length > 0) {
                errorMsg = "[";
                for (var reason in response.reasons) {
                    errorMsg += response.reasons[reason] + ",";
                }
                errorMsg = errorMsg.substring(0, errorMsg.length - 1);
                errorMsg += "]";
            }
            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, { event_name: "registration failure", registraion_errors: errorMsg }));
        }
    });

    var userPreRegistrationController = new _controllersFormController2['default']({
        observe: '.form-pre-registration',
        successCallback: function successCallback(form) {
            var usernameInput = $(form).find('.js-register-username');

            var forwardingURL = $(form).data('forwarding-url');
            var sep = forwardingURL.indexOf('?') < 0 ? '?' : '&';
            var nextStepUrl = $(form).data('forwarding-url') + sep + usernameInput.attr('name') + '=' + encodeURIComponent(usernameInput.val());

            var loginRegisterMethod = "global_registration";
            if ($(form).hasClass("user-calltoaction")) loginRegisterMethod = "login_register_component";

            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, { event_name: "registration", login_register_method: loginRegisterMethod }));

            window.location.href = nextStepUrl;
        }
    });

    $('.click-logout').on('click', function (e) {
        (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, { event_name: "logout" }));
    });

    var emailArticleController = new _controllersFormController2['default']({
        observe: '.form-email-article',
        successCallback: function successCallback(form) {
            $('.js-email-article-form-wrapper').hide();
            $('.js-email-article-recip-success').html($('.js-email-article-recip-addr').val().split(';').join('; '));
            $('.js-email-article-success').show();

            // Reset the Email Article pop-out to its default state when closed
            $('.js-dismiss-email-article').one('click', function () {
                $('.js-email-article-form-wrapper').show();
                $('.js-email-article-success').hide();
            });
        }
    });

    var emailSearchController = new _controllersFormController2['default']({
        observe: '.form-email-search',
        successCallback: function successCallback(form) {

            $('.js-email-search-form-wrapper').hide();
            $('.js-email-search-recip-success').html($('.js-email-search-recip-addr').val());
            $('.js-email-search-success').show();
            $('.js-email-search-form-wrapper input, .js-email-search-form-wrapper textarea').val('');

            // Reset the Email Article pop-out to its default state when closed
            $('.js-dismiss-email-search').one('click', function () {
                $('.js-email-search-form-wrapper').show();
                $('.js-email-search-success').hide();
            });

            var event_data = {
                event_name: "toolbar_use",
                toolbar_tool: "email"
            };

            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, event_data));
        },
        beforeRequest: function beforeRequest() {

            var resultIDs = null;

            $('.js-search-results-id').each(function (indx, item) {
                resultIDs = resultIDs ? resultIDs + ',' + $(item).data('bookmark-id') : $(item).data('bookmark-id');
            });

            $('.js-email-search-results-ids').val(resultIDs);
            $('.js-email-search-query').val($('.search-bar__field').val());
            $('.js-email-search-query-url').val(document.location.href);
        }
    });

    var accountEmailPreferencesController = new _controllersFormController2['default']({
        observe: '.form-email-preferences',
        successCallback: function successCallback(form, context, event) {

            var event_data = {};
            var optingIn = null;
            var optingOut = null;

            if ($('#DoNotSendOffersOptIn').prop('checked')) {
                event_data.event_name = 'email_preferences_opt_out';
            } else {

                event_data.event_name = 'email_preferences_update';

                $('.js-account-email-checkbox').each(function (index, item) {
                    if (this.checked) {
                        optingIn = optingIn ? optingIn + '|' + this.value : this.value;
                    } else {
                        optingOut = optingOut ? optingOut + '|' + this.value : this.value;
                    }
                });

                event_data.email_preferences_optin = optingIn;
                event_data.email_preferences_optout = optingOut;
            }

            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, event_data));
        }
    });

    var accountUpdatePassController = new _controllersFormController2['default']({
        observe: '.form-update-account-pass',
        successCallback: function successCallback(form, context, evt) {
            $(form).find('input, select, textarea').each(function () {
                $(this).val('');
            });
        }
    });

    var accountUpdateContactController = new _controllersFormController2['default']({
        observe: '.form-update-account-contact',
        successCallback: function successCallback(form, context, evt) {
            $(window).scrollTop($(evt.target).closest('form').find('.js-form-error-general').offset().top - 32);
        }
    });

    var savedDocumentsController = new _controllersFormController2['default']({
        observe: '.form-remove-saved-document',
        successCallback: function successCallback(form, context, evt) {
            $(evt.target).closest('tr').remove();
            if ($('.js-sortable-table tbody')[0].rows.length === 0) {
                $('.js-sortable-table').remove();
                $('.js-no-articles').show();
            }

            var event_data = {
                event_name: 'bookmark_removal',
                bookmark_title: $(form).data('analytics-title'),
                bookmark_publication: $(form).data('analytics-publication')
            };

            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, event_data));
        }
    });

    (0, _svg4everybody2['default'])();

    /* * *
    MAIN SITE MENU
    * * */
    (function MenuController() {

        var getHeaderEdge = function getHeaderEdge() {
            return $('.header__wrapper').offset().top + $('.header__wrapper').height();
        };

        var showMenu = function showMenu() {
            $('.main-menu').addClass('is-active');
            $('.menu-toggler').addClass('is-active');
            $('.header__wrapper .menu-toggler').addClass('is-sticky');
            $('body').addClass('is-frozen');
        };

        var hideMenu = function hideMenu() {
            $('.main-menu').removeClass('is-active');
            $('.menu-toggler').removeClass('is-active');
            $('body').removeClass('is-frozen');
            if ($(window).scrollTop() <= getHeaderEdge()) {
                $('.header__wrapper .menu-toggler').removeClass('is-sticky');
            }
        };

        /* Toggle menu visibility */
        $('.js-menu-toggle-button').on('click', function toggleMenu(e) {
            $('.main-menu').hasClass('is-active') ? hideMenu() : showMenu();
            e.preventDefault();
            e.stopPropagation();
        });

        /*  If the menu is closed, let any clicks on the menu element open
        the menu. This includes the border—visible when the menu is closed—
        so it's easier to open. */
        $('.js-full-menu-toggle').on('click', function toggleMenu() {
            $('.main-menu').hasClass('is-active') ? null : showMenu();
        });

        /* Attach / detach sticky menu */
        $(window).on('scroll', function windowScrolled() {
            // Only stick if the header (including toggler) isn't visible
            if ($(window).scrollTop() > getHeaderEdge() || $('.main-menu').hasClass('is-active')) {
                $('.header__wrapper .menu-toggler').addClass('is-sticky');
            } else {
                $('.header__wrapper .menu-toggler').removeClass('is-sticky');
            }
        });

        /* Toggle menu categories */
        $('.js-toggle-menu-section').on('click', function toggleMenuItems(e) {
            e.target !== this ? this.click() : $(e.target).toggleClass('is-active');
        });

        $('.show-demo').click(function () {

            $(this).closest('.js-toggle-demo').toggleClass('collapsed');
            //IPMP-616	
            if ($(this).parent().hasClass('collapsed')) {
                sessionStorage.setItem("mykey", "false");
                $('.sd').show();
                $('.hd').hide();
                $('.toggle-demo').hide();
            } else {
                sessionStorage.setItem("mykey", "true");
                $('.hd').show();
                $('.sd').hide();
                $('.toggle-demo').show();
            }
        });
        var persistedval = sessionStorage.getItem("mykey");
        if (persistedval == 'false') {
            $('.sd').show();
            $('.hd').hide();
            $('.toggle-demo').hide();
            $('.js-toggle-demo').addClass('collapsed');
        } else {
            $('.hd').show();
            $('.sd').hide();
            $('.toggle-demo').show();
        }
    })();

    /* * *
    When a banner is dismissed, the banner ID is stored in the
    `dismissedBanners` cookie as a JSON object. Banners are invisible by default,
    so on page load, this checks if a banner on the page is dismissed or not,
    then makes the banner visible if not dismissed.
    * * */
    var dismissedBanners = _jscookie2['default'].getJSON('dismissedBanners') || {};
    $('.banner').each(function () {
        if ($(this).data('banner-id') in dismissedBanners === false) {
            $(this).addClass('is-visible');
        }
    });

    /* * *
    Generic banner dismiss
    * * */
    $('.js-dismiss-banner').on('click', function dismissBanner(e) {
        var thisBanner = $(e.target).parents('.banner');
        thisBanner.removeClass('is-visible');

        var dismissedBanners = _jscookie2['default'].getJSON('dismissedBanners') || {};
        dismissedBanners[thisBanner.data('banner-id')] = true;

        // if banner has a 'dismiss-all-subdomains' attribute = true, set the domain of the cookie
        // to the top-level domain.
        var domain = document.location.hostname;
        if (thisBanner.data('dismiss-all-subdomains')) {
            var parts = domain.split('.');
            parts.shift();
            domain = parts.join('.');
        }
        _jscookie2['default'].set('dismissedBanners', dismissedBanners, { expires: 3650, domain: domain });
    });

    // For each article table, clone and append "view full table" markup
    $('.article-body-content table').not('.article-table--mobile-link').forEach(function (e) {
        var mediaId = $(e).data("mediaid");
        var tableLink = $('.js-mobile-table-template .article-table').clone();

        var url = window.location.href;
        url.replace("#", "");
        if (url.indexOf("?") < 0) url += "?";else url += "&";

        url += "mobilemedia=true&selectedid=" + mediaId;

        // $(tableLink).find('a').attr("href", url);
        $(tableLink).find('a').data("table-url", url).attr('href', null);
        $(e).after(tableLink);
    });

    // Find duplicate embeds on article page
    // IITS2-312
    $('[class^=ewf-desktop-iframe] ~ [class^=ewf-mobile-iframe]').each(function (index, item) {
        $(item).remove();
    });

    // When DOM loads, render the appropriate iFrame components
    // Also add a listener for winder resize, render appropriate containers
    renderIframeComponents();
    renderTableau();
    renderAMchart();

    $(window).on('resize', function (event) {
        renderIframeComponents();
        renderTableau();
    });

    // Topic links
    var topicAnchors = $('.js-topic-anchor');

    $('.sub-topic-links').forEach(function (e) {
        var linkList = $(e).find('.bar-separated-link-list');

        topicAnchors.forEach(function (tc) {
            var id = tc.id;
            var text = $(tc).data('topic-link-text');
            var utagInfo = '{"event_name"="topic-jump-to-link-click","topic-name"="' + text + '"}';
            linkList.append('<a href="#' + id + '" class="click-utag" data-info=' + text + '>' + text + '</a>');
        });
    });

    // Display the Forgot Password block when "forgot your password" is clicked
    $('.js-show-forgot-password').on('click', function toggleForgotPass() {
        $('.js-reset-password-container').toggleClass('is-active');
    });

    // Global dismiss button for pop-outs
    $('.dismiss-button').on('click', function (e) {
        if (e.target !== this) {
            this.click();
            return;
        }

        $($(e.target).data('target-element')).removeClass('is-active');
        window.controlPopOuts.closePopOut(e.target);
    });

    // Make sure all external links open in a new window/tab
    $("a[href^=http]").each(function () {
        if (this.href.indexOf(location.hostname) == -1) {
            $(this).attr({
                target: "_blank"
            });
        }
    });

    // Adds analytics for article page clicks
    $('.root').find('a').each(function (index, item) {

        $(this).addClass('click-utag');

        var linkString;

        if (this.href.indexOf(location.hostname) == -1) {
            linkString = 'External:' + this.href;
        } else {
            linkString = this.href;
        }

        if ($(this).data('info') == undefined) {
            $(this).data('info', '{ "event_name": "embeded_link_click_through", "click_through_source": "' + $('h1').text + '", "click_through_destination": "' + linkString + '"}');
        }
    });

    $('.general-header__navigation').each(function () {

        $(this).on('scroll', function () {
            var scrollLeft = $(this).scrollLeft();
            var scrollWidth = $(this)[0].scrollWidth;
            var winWidth = $(window).width();

            if (scrollLeft > 32) {
                $('.general-header__navigation-scroller--left').addClass('is-visible');
            } else {
                $('.general-header__navigation-scroller--left').removeClass('is-visible');
            }

            if (scrollLeft + winWidth < scrollWidth - 32) {
                $('.general-header__navigation-scroller--right').addClass('is-visible');
            } else {
                $('.general-header__navigation-scroller--right').removeClass('is-visible');
            }
        });

        var scrollLeft = $(this).scrollLeft();
        var scrollWidth = $(this)[0].scrollWidth;
        var winWidth = $(window).width();

        if (scrollLeft + winWidth < scrollWidth - 32) {
            $('.general-header__navigation-scroller--right').addClass('is-visible');
        } else {
            $('.general-header__navigation-scroller--right').removeClass('is-visible');
        }
    });

    // Smooth, clickable scrolling for General page headers
    var smoothScrollingNav = function smoothScrollingNav() {

        // Cache for less DOM checking
        var Scrollable = $('.general-header__navigation');
        var Container = $('.general-header');

        // Find current scroll distance is from left and right edges
        var scrollDistance = function scrollDistance() {
            return {
                left: Scrollable.scrollLeft(),
                right: Scrollable[0].scrollWidth - (Container.width() + Scrollable.scrollLeft())
            };
        };

        var init = function init() {

            $('.general-header__navigation-scroller--right').on('click', function () {
                if (scrollDistance().right > 0) {
                    // Not on right edge
                    smoothScroll(200, 'right');
                }
            });

            $('.general-header__navigation-scroller--left').on('click', function () {
                if (scrollDistance().left > 0) {
                    smoothScroll(200, 'left');
                }
            });
        };

        var scrollToTimerCache;
        var totalTravel = null;
        var durationStart = null;

        // Quadratic ease-out algorithm
        var easing = function easing(time, distance) {
            return distance * (time * (2 - time));
        };

        var smoothScroll = function smoothScroll(duration, direction) {
            if (duration <= 0) {
                // Reset everything when duration time finishes
                totalTravel = null;
                durationStart = null;
                return;
            }

            // Store duration as durationStart on first loop
            durationStart = !durationStart ? duration : durationStart;

            // Store travel distance (container width) as totalTravel on first loop
            totalTravel = !totalTravel ? Container.width() : totalTravel;

            // Finds percentage of elapsed time since start
            var travelPcent = 1 - duration / durationStart;

            // Finds travel change on this loop, adjusted for ease-out
            var travel = easing(travelPcent, totalTravel / durationStart * 10);

            scrollToTimerCache = setTimeout((function () {
                if (!isNaN(parseInt(travel, 10))) {
                    if (direction === 'right') {
                        Scrollable.scrollLeft(Scrollable.scrollLeft() + travel);
                        smoothScroll(duration - 10, direction);
                    } else if (direction === 'left') {
                        Scrollable.scrollLeft(Scrollable.scrollLeft() - travel);
                        smoothScroll(duration - 10, direction);
                    }
                }
            }).bind(this), 10);
        };

        // Bind event listeners
        init();
    };

    $('.js-register-final').on('click', function (e) {
        var pub_newsletter = '';
        if (window.matchMedia("(max-width: 600px)").matches) {
            for (var i = 0; i < $('.mobile .newsletter_checkbox.wcs-c-on').length; i++) {
                pub_newsletter += $($('.site_div .newsletter_checkbox.wcs-c-on')[i]).prev().html() + ', ';
            }
        } else {
            for (var i = 0; i < $('.site_div .newsletter_checkbox.wcs-c-on').length; i++) {
                pub_newsletter += $($('.site_div .newsletter_checkbox.wcs-c-on')[i]).prev().html() + ', ';
            }
        }
        var eventDetails = {
            event_name: "newsletter-signup",
            page_name: "Newsletter",
            ga_eventCategory: "Newsletter",
            ga_eventLabel: analytics_data["publication"],
            publication_newsletter: pub_newsletter,
            user_news_email: analytics_data["user_email"]
        };
        var chkDetails = {};
        if ($('#newsletters').is(':checked')) {
            chkDetails.newsletter_optin = "true";

            eventDetails.newsletter_signup_state = "success";
            eventDetails.ga_eventAction = "Sign Up Success";

            $.extend(eventDetails, chkDetails);
            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, eventDetails));
        } else {
            chkDetails.newsletter_optin = "false";

            eventDetails.newsletter_signup_state = "unsuccessful";
            eventDetails.ga_eventAction = "Sign Up Failure";

            $.extend(eventDetails, chkDetails);
            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, eventDetails));
        }
    });

    // TODO - Refactor this code, update class name to a `js-` name
    $('.manage-preferences').click(function (e) {
        var preferencesData = {
            event_name: "manage-preferences"
        };
        if ($("#NewsletterOptIn").is(':checked') && $("#DoNotSendOffersOptIn").is(':checked')) {
            preferencesData = {
                newsletter_optin: "true",
                donot_send_offers_optin: "true"
            };
        }
        if (!$("#NewsletterOptIn").is(':checked') && $("#DoNotSendOffersOptIn").is(':checked')) {
            preferencesData = {
                newsletter_optin: "false",
                donot_send_offers_optin: "true"
            };
        }
        if ($("#NewsletterOptIn").is(':checked') && !$("#DoNotSendOffersOptIn").is(':checked')) {
            preferencesData = {
                newsletter_optin: "true",
                donot_send_offers_optin: "false"
            };
        }
        if (!$("#NewsletterOptIn").is(':checked') && !$("#DoNotSendOffersOptIn").is(':checked')) {
            preferencesData = {
                newsletter_optin: "false",
                donot_send_offers_optin: "false"
            };
        }

        (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, preferencesData));
    });

    // Execute!
    smoothScrollingNav();

    // Toggle global Informa bar
    $('.informa-ribbon__title').on('click', function (e) {
        $('.informa-ribbon').toggleClass('show');
    });

    $('.js-toggle-list').on('click', function (e) {
        $(e.target).closest('.js-togglable-list-wrapper').toggleClass('is-active');
    });

    $('.click-utag').click(function (e) {
        (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, $(this).data('info')));
    });

    $('.search-results').on('click', '.click-utag', function (e) {
        (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, $(this).data('info')));
    });

    $('#chkASBilling').click(function (e) {
        if ($(this).is(':checked')) {
            $('#ddlShippingCountry').val($('#ddlBillingCountry').val());
            $('#txtShippingAddress1').val($('#txtBillingAddress1').val());
            $('#txtShippingAddress2').val($('#txtBillingAddress2').val());
            $('#txtShippingCity').val($('#txtBillingCity').val());
            $('#txtShippingState').val($('#txtBillingState').val());
            $('#txtShippingPostalCode').val($('#txtBillingPostalCode').val());
        }
    });

    // Account - Email Preferences toggler
    $('.js-account-email-toggle-all').on('click', function (e) {
        $('.js-update-email-prefs').attr('disabled', null);
    });

    $('.js-account-email-checkbox').on('click', function (e) {
        $('.js-update-email-prefs').attr('disabled', null);
    });

    // Twitter sharing JS
    window.twttr = (function (t, e, r) {
        var n,
            i = t.getElementsByTagName(e)[0],
            w = window.twttr || {};
        return t.getElementById(r) ? w : (n = t.createElement(e), n.id = r, n.src = "https://platform.twitter.com/widgets.js", i.parentNode.insertBefore(n, i), w._e = [], w.ready = function (t) {
            w._e.push(t);
        }, w);
    })(document, "script", "twitter-wjs");

    // Pretty select boxes
    $('select:not(.ng-scope)').selectivity({
        showSearchInputInDropdown: false,
        positionDropdown: function positionDropdown($dropdownEl, $selectEl) {
            $dropdownEl.css("width", $selectEl.width() + "px");
        }
    });

    $(".selectivity-input .selectivity-single-select").each(function () {
        $(this).append('<span class="selectivity-arrow"><svg class="alert__icon"><use xlink:href="/dist/img/svg-sprite.svg#sort-down-arrow"></use></svg></span>');
    });
});

},{"./DragDropTouch":1,"./carousel/owl.carousel":3,"./carousel/zepto.data":4,"./components/AMCharts-merges-acquisition":5,"./components/article-sidebar-component":6,"./components/dynamic-content-recomendation":7,"./components/id-comparechart":8,"./components/id-comparefinancialresults":9,"./components/id-financial-responsive-table":10,"./components/id-merge-acquistion":11,"./components/id-quarterly-responsive-table":12,"./components/id-responsive-table":13,"./components/latest-casuality":14,"./components/ll-casuality-detail":15,"./components/ll-casuality-listing":16,"./components/ll-market-data":18,"./components/ll-market-data-tool":17,"./components/ll-tanker-fixtures":19,"./components/myview-settings":20,"./components/pagination":21,"./components/personalisation":22,"./components/save-search-component":23,"./components/video-mini":24,"./controllers/analytics-controller":25,"./controllers/bookmark-controller":26,"./controllers/form-controller":27,"./controllers/lightbox-modal-controller":28,"./controllers/pop-out-controller":29,"./controllers/register-controller":30,"./controllers/reset-password-controller":31,"./controllers/sortable-table-controller":32,"./controllers/tooltip-controller":33,"./jscookie":35,"./modal":36,"./newsletter-signup":37,"./search-page.js":38,"./selectivity-full":39,"./svg4everybody":40,"./toggle-icons":41,"./zepto.dragswap":42,"./zepto.min":43}],35:[function(require,module,exports){
/*!
 * JavaScript Cookie v2.1.0
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
'use strict';

(function (factory) {
	if (typeof define === 'function' && define.amd) {
		define(factory);
	} else if (typeof exports === 'object') {
		module.exports = factory();
	} else {
		var _OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = _OldCookies;
			return api;
		};
	}
})(function () {
	function extend() {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[i];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function init(converter) {
		function api(key, value, attributes) {
			var result;

			// Write

			if (arguments.length > 1) {
				attributes = extend({
					path: '/'
				}, api.defaults, attributes);

				if (typeof attributes.expires === 'number') {
					var expires = new Date();
					expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
					attributes.expires = expires;
				}

				try {
					result = JSON.stringify(value);
					if (/^[\{\[]/.test(result)) {
						value = result;
					}
				} catch (e) {}

				if (!converter.write) {
					value = encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
				} else {
					value = converter.write(value, key);
				}

				key = encodeURIComponent(String(key));
				key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
				key = key.replace(/[\(\)]/g, escape);

				return document.cookie = [key, '=', value, attributes.expires && '; expires=' + attributes.expires.toUTCString(), // use expires attribute, max-age is not supported by IE
				attributes.path && '; path=' + attributes.path, attributes.domain && '; domain=' + attributes.domain, attributes.secure ? '; secure' : ''].join('');
			}

			// Read

			if (!key) {
				result = {};
			}

			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all. Also prevents odd result when
			// calling "get()"
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var rdecode = /(%[0-9A-Z]{2})+/g;
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var name = parts[0].replace(rdecode, decodeURIComponent);
				var cookie = parts.slice(1).join('=');

				if (cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					cookie = converter.read ? converter.read(cookie, name) : converter(cookie, name) || cookie.replace(rdecode, decodeURIComponent);

					if (this.json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					if (key === name) {
						result = cookie;
						break;
					}

					if (!key) {
						result[name] = cookie;
					}
				} catch (e) {}
			}

			return result;
		}

		api.get = api.set = api;
		api.getJSON = function () {
			return api.apply({
				json: true
			}, [].slice.call(arguments));
		};
		api.defaults = {};

		api.remove = function (key, attributes) {
			api(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
});

},{}],36:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: modal.js v3.3.7
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

'use strict';

+(function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function Modal(element, options) {
    this.options = options;
    this.$body = $(document.body);
    this.$element = $(element);
    this.$dialog = this.$element.find('.modal-dialog');
    this.$backdrop = null;
    this.isShown = null;
    this.originalBodyPad = null;
    this.scrollbarWidth = 0;
    this.ignoreBackdropClick = false;

    if (this.options.remote) {
      this.$element.find('.modal-content').load(this.options.remote, $.proxy(function () {
        this.$element.trigger('loaded.bs.modal');
      }, this));
    }
  };

  Modal.VERSION = '3.3.7';

  Modal.TRANSITION_DURATION = 300;
  Modal.BACKDROP_TRANSITION_DURATION = 150;

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  };

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget);
  };

  Modal.prototype.show = function (_relatedTarget) {
    var that = this;
    var e = $.Event('show.bs.modal', { relatedTarget: _relatedTarget });

    this.$element.trigger(e);

    if (this.isShown || e.isDefaultPrevented()) return;

    this.isShown = true;

    this.checkScrollbar();
    this.setScrollbar();
    this.$body.addClass('modal-open');

    this.escape();
    this.resize();

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this));

    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true;
      });
    });

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade');

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body); // don't move modals dom position
      }

      that.$element.show().scrollTop(0);

      that.adjustDialog();

      if (transition) {
        that.$element[0].offsetWidth; // force reflow
      }

      that.$element.addClass('in');

      that.enforceFocus();

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget });

      transition ? that.$dialog // wait for modal to slide in
      .one('bsTransitionEnd', function () {
        that.$element.trigger('focus').trigger(e);
      }).emulateTransitionEnd(Modal.TRANSITION_DURATION) : that.$element.trigger('focus').trigger(e);
    });
  };

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault();

    e = $.Event('hide.bs.modal');

    this.$element.trigger(e);

    if (!this.isShown || e.isDefaultPrevented()) return;

    this.isShown = false;

    this.escape();
    this.resize();

    $(document).off('focusin.bs.modal');

    this.$element.removeClass('in').off('click.dismiss.bs.modal').off('mouseup.dismiss.bs.modal');

    this.$dialog.off('mousedown.dismiss.bs.modal');

    $.support.transition && this.$element.hasClass('fade') ? this.$element.one('bsTransitionEnd', $.proxy(this.hideModal, this)).emulateTransitionEnd(Modal.TRANSITION_DURATION) : this.hideModal();
  };

  Modal.prototype.enforceFocus = function () {
    $(document).off('focusin.bs.modal') // guard against infinite focus loop
    .on('focusin.bs.modal', $.proxy(function (e) {
      if (document !== e.target && this.$element[0] !== e.target && !this.$element.has(e.target).length) {
        this.$element.trigger('focus');
      }
    }, this));
  };

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide();
      }, this));
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal');
    }
  };

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this));
    } else {
      $(window).off('resize.bs.modal');
    }
  };

  Modal.prototype.hideModal = function () {
    var that = this;
    this.$element.hide();
    this.backdrop(function () {
      that.$body.removeClass('modal-open');
      that.resetAdjustments();
      that.resetScrollbar();
      that.$element.trigger('hidden.bs.modal');
    });
  };

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove();
    this.$backdrop = null;
  };

  Modal.prototype.backdrop = function (callback) {
    var that = this;
    var animate = this.$element.hasClass('fade') ? 'fade' : '';

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate;

      this.$backdrop = $(document.createElement('div')).addClass('modal-backdrop ' + animate).appendTo(this.$body);

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false;
          return;
        }
        if (e.target !== e.currentTarget) return;
        this.options.backdrop == 'static' ? this.$element[0].focus() : this.hide();
      }, this));

      if (doAnimate) this.$backdrop[0].offsetWidth; // force reflow

      this.$backdrop.addClass('in');

      if (!callback) return;

      doAnimate ? this.$backdrop.one('bsTransitionEnd', callback).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callback();
    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in');

      var callbackRemove = function callbackRemove() {
        that.removeBackdrop();
        callback && callback();
      };
      $.support.transition && this.$element.hasClass('fade') ? this.$backdrop.one('bsTransitionEnd', callbackRemove).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callbackRemove();
    } else if (callback) {
      callback();
    }
  };

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function () {
    this.adjustDialog();
  };

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight;

    this.$element.css({
      paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    });
  };

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    });
  };

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth;
    if (!fullWindowWidth) {
      // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect();
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;
    this.scrollbarWidth = this.measureScrollbar();
  };

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt(this.$body.css('padding-right') || 0, 10);
    this.originalBodyPad = document.body.style.paddingRight || '';
    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth);
  };

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad);
  };

  Modal.prototype.measureScrollbar = function () {
    // thx walsh
    var scrollDiv = document.createElement('div');
    scrollDiv.className = 'modal-scrollbar-measure';
    this.$body.append(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    this.$body[0].removeChild(scrollDiv);
    return scrollbarWidth;
  };

  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.modal');
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option);

      if (!data) $this.data('bs.modal', data = new Modal(this, options));
      if (typeof option == 'string') data[option](_relatedTarget);else if (options.show) data.show(_relatedTarget);
    });
  }

  var old = $.fn.modal;

  $.fn.modal = Plugin;
  $.fn.modal.Constructor = Modal;

  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old;
    return this;
  };

  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this = $(this);
    var href = $this.attr('href');
    var $target = $($this.attr('data-target') || href && href.replace(/.*(?=#[^\s]+$)/, '')); // strip for ie7
    var option = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data());

    if ($this.is('a')) e.preventDefault();

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return; // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus');
      });
    });
    Plugin.call($target, option, this);
  });
})($);

},{}],37:[function(require,module,exports){
/* global analytics_data */

'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _controllersAnalyticsController = require('./controllers/analytics-controller');

function newsletterSignupController() {

    this.checkForUserSignedUp = function () {
        $.get('/Account/api/PreferencesApi/IsUserSignedUp', function (response) {
            var res = response;
            if (response) {
                $(".newsletter-signup").hide();
            }
        });
    };

    this.IsValidEmail = function (email) {
        var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(email);
    };
    this.addControl = function (triggerElement, successCallback, failureCallback) {
        var _this = this;

        if (triggerElement) {
            $(triggerElement).on('click', function (event) {

                // Prevent form submit
                event.preventDefault();

                // Hide any errors
                $('.js-newsletter-signup-error').hide();
                $('.newsletter-signup-needs-registration').hide();

                var inputData = $("#newsletterUserName").val();
                var url = $(triggerElement).data('signup-url');

                //$(triggerElement).parents('.newsletter-signup').find('input').each(function() {
                //    inputData = $(this).val();
                //});

                if (inputData !== '' && _this.IsValidEmail(inputData)) {
                    $('.js-newsletter-signup--error-invalidemailformat').hide();
                    url = url + '?userName=' + inputData;

                    $.get(url, function (response) {
                        var newsletterAnalytics;

                        if (response == 'true') {

                            newsletterAnalytics = {
                                event_name: 'newsletter-signup',
                                newsletter_signup_state: 'successful',
                                userName: '"' + inputData + '"'
                            };

                            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, newsletterAnalytics));

                            $(".newsletter-signup-before-submit").hide();
                            $(".newsletter-signup-after-submit").show();
                        } else if (response == 'mustregister') {

                            newsletterAnalytics = {
                                event_name: 'newsletter-signup',
                                newsletter_signup_state: 'unsuccessful',
                                userName: '"' + inputData + '"'
                            };

                            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, newsletterAnalytics));

                            $('.newsletter-signup-needs-registration a').attr('href', $('.newsletter-signup-needs-registration a').attr('href') + $('.newsletter-signup-before-submit input').val());

                            $('.newsletter-signup-before-submit').hide();
                            $('.newsletter-signup-needs-registration').show();
                        } else {
                            newsletterAnalytics = {
                                event_name: 'newsletter-signup',
                                newsletter_signup_state: 'unsuccessful',
                                userName: '"' + inputData + '"'
                            };

                            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, newsletterAnalytics));

                            $('.js-newsletter-signup-error').show();
                        }
                    });
                } else {
                    $('.js-newsletter-signup--error-invalidemailformat').show();
                }
            });
        }
    };
}

exports['default'] = newsletterSignupController;
module.exports = exports['default'];

},{"./controllers/analytics-controller":25}],38:[function(require,module,exports){
'use strict';

var SearchScript = (function () {

	/* Toggle search tips visibility */
	$('.js-toggle-search-tips').on('click', function toggleTips() {
		$('.search-bar__tips').toggleClass('open');
		$('.search-bar').toggleClass('tips-open');
	});
})();

},{}],39:[function(require,module,exports){
(function (global){
/**
 * @license
 * Selectivity.js 2.1.0 <https://arendjr.github.io/selectivity/>
 * Copyright (c) 2014-2016 Arend van Beelen jr.
 *           (c) 2016 Speakap BV
 * Available under MIT license <https://github.com/arendjr/selectivity/blob/master/LICENSE>
 */"use strict";!(function(e){if("object" == typeof exports && "undefined" != typeof module)module.exports = e();else if("function" == typeof define && define.amd)define([],e);else {var f;"undefined" != typeof window?f = window:"undefined" != typeof global?f = global:"undefined" != typeof self && (f = self),f.selectivity = e();}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require == "function" && require;if(!u && a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '" + o + "'");throw (f.code = "MODULE_NOT_FOUND",f);}var l=n[o] = {exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e);},l,l.exports,e,t,n,r);}return n[o].exports;}var i=typeof require == "function" && require;for(var o=0;o < r.length;o++) s(r[o]);return s;})({1:[function(_dereq_,module,exports){_dereq_(5);_dereq_(6);_dereq_(7);_dereq_(9);_dereq_(10);_dereq_(11);_dereq_(12);_dereq_(13);_dereq_(14);_dereq_(15);_dereq_(16);_dereq_(17);_dereq_(18);_dereq_(19);module.exports = _dereq_(8);},{"10":10,"11":11,"12":12,"13":13,"14":14,"15":15,"16":16,"17":17,"18":18,"19":19,"5":5,"6":6,"7":7,"8":8,"9":9}],2:[function(_dereq_,module,exports){'use strict';var $=window.jQuery || window.Zepto; /**
 * Event Delegator Constructor.
 */function EventDelegator(){this._events = [];this.delegateEvents();} /**
 * Methods.
 */$.extend(EventDelegator.prototype,{ /**
     * Attaches all listeners from the events map to the instance's element.
     *
     * Normally, you should not have to call this method yourself as it's called automatically in
     * the constructor.
     */delegateEvents:function delegateEvents(){this.undelegateEvents();$.each(this.events,(function(event,listener){var selector,index=event.indexOf(' ');if(index > -1){selector = event.slice(index + 1);event = event.slice(0,index);}if($.type(listener) === 'string'){listener = this[listener];}listener = listener.bind(this);if(selector){this.$el.on(event,selector,listener);}else {this.$el.on(event,listener);}this._events.push({event:event,selector:selector,listener:listener});}).bind(this));}, /**
     * Detaches all listeners from the events map from the instance's element.
     */undelegateEvents:function undelegateEvents(){this._events.forEach(function(event){if(event.selector){this.$el.off(event.event,event.selector,event.listener);}else {this.$el.off(event.event,event.listener);}},this);this._events = [];}});module.exports = EventDelegator;},{"jquery":"jquery"}],3:[function(_dereq_,module,exports){'use strict'; /**
 * @license
 * lodash 3.3.1 (Custom Build) <https://lodash.com/>
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */ /**
 * Gets the number of milliseconds that have elapsed since the Unix epoch
 *  (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @category Date
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => logs the number of milliseconds it took for the deferred function to be invoked
 */var now=Date.now; /**
 * Creates a function that delays invoking `func` until after `wait` milliseconds
 * have elapsed since the last time it was invoked.
 *
 * See [David Corbacho's article]
 *                        (http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // avoid costly calculations while the window size is in flux
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 */function debounce(func,wait){var args,result,stamp,timeoutId,trailingCall,lastCalled=0;wait = wait < 0?0:+wait || 0;function delayed(){var remaining=wait - (now() - stamp);if(remaining <= 0 || remaining > wait){var isCalled=trailingCall;timeoutId = trailingCall = undefined;if(isCalled){lastCalled = now();result = func.apply(null,args);if(!timeoutId){args = null;}}}else {timeoutId = setTimeout(delayed,remaining);}}function debounced(){args = arguments;stamp = now();trailingCall = true;if(!timeoutId){timeoutId = setTimeout(delayed,wait);}return result;}return debounced;}module.exports = debounce;},{}],4:[function(_dereq_,module,exports){'use strict'; /**
 * @license
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */var htmlEscapes={'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}; /**
 * Used by `escape` to convert characters to HTML entities.
 *
 * @private
 * @param {string} match The matched character to escape.
 * @returns {string} Returns the escaped character.
 */function escapeHtmlChar(match){return htmlEscapes[match];}var reUnescapedHtml=new RegExp('[' + Object.keys(htmlEscapes).join('') + ']','g'); /**
 * Converts the characters `&`, `<`, `>`, `"`, and `'` in `string` to their
 * corresponding HTML entities.
 *
 * @static
 * @memberOf _
 * @category Utilities
 * @param {string} string The string to escape.
 * @returns {string} Returns the escaped string.
 * @example
 *
 * _.escape('Fred, Wilma, & Pebbles');
 * // => 'Fred, Wilma, &amp; Pebbles'
 */function escape(string){return string?String(string).replace(reUnescapedHtml,escapeHtmlChar):'';}module.exports = escape;},{}],5:[function(_dereq_,module,exports){'use strict';var $=window.jQuery || window.Zepto;var debounce=_dereq_(3);var Selectivity=_dereq_(8);_dereq_(13); /**
 * Option listener that implements a convenience query function for performing AJAX requests.
 */Selectivity.OptionListeners.unshift(function(selectivity,options){var ajax=options.ajax;if(ajax && ajax.url){var formatError=ajax.formatError || Selectivity.Locale.ajaxError;var minimumInputLength=ajax.minimumInputLength || 0;var params=ajax.params;var processItem=ajax.processItem || function(item){return item;};var quietMillis=ajax.quietMillis || 0;var resultsCb=ajax.results || function(data){return {results:data,more:false};};var transport=ajax.transport || $.ajax;if(quietMillis){transport = debounce(transport,quietMillis);}options.query = function(queryOptions){var offset=queryOptions.offset;var term=queryOptions.term;if(term.length < minimumInputLength){queryOptions.error(Selectivity.Locale.needMoreCharacters(minimumInputLength - term.length));}else {var url=ajax.url instanceof Function?ajax.url(queryOptions):ajax.url;if(params){url += (url.indexOf('?') > -1?'&':'?') + $.param(params(term,offset));}var _success=ajax.success;var _error=ajax.error;transport($.extend({},ajax,{url:url,success:function success(data,textStatus,jqXHR){if(_success){_success(data,textStatus,jqXHR);}var results=resultsCb(data,offset);results.results = results.results.map(processItem);queryOptions.callback(results);},error:function error(jqXHR,textStatus,errorThrown){if(_error){_error(jqXHR,textStatus,errorThrown);}queryOptions.error(formatError(term,jqXHR,textStatus,errorThrown),{escape:false});}}));}};}});},{"13":13,"3":3,"8":8,"jquery":"jquery"}],6:[function(_dereq_,module,exports){'use strict';var Selectivity=_dereq_(8);var latestQueryNum=0; /**
 * Option listener that will discard any callbacks from the query function if another query has
 * been called afterwards. This prevents responses from remote sources arriving out-of-order.
 */Selectivity.OptionListeners.push(function(selectivity,options){var query=options.query;if(query && !query._async){options.query = function(queryOptions){latestQueryNum++;var queryNum=latestQueryNum;var callback=queryOptions.callback;var error=queryOptions.error;queryOptions.callback = function(){if(queryNum === latestQueryNum){callback.apply(null,arguments);}};queryOptions.error = function(){if(queryNum === latestQueryNum){error.apply(null,arguments);}};query(queryOptions);};options.query._async = true;}});},{"8":8}],7:[function(_dereq_,module,exports){'use strict';var $=window.jQuery || window.Zepto;var SelectivityDropdown=_dereq_(10); /**
 * Methods.
 */$.extend(SelectivityDropdown.prototype,{ /**
     * @inherit
     */removeCloseHandler:function removeCloseHandler(){if(this._$backdrop && !this.parentMenu){this._$backdrop.remove();this._$backdrop = null;}}, /**
     * @inherit
     */setupCloseHandler:function setupCloseHandler(){var $backdrop;if(this.parentMenu){$backdrop = this.parentMenu._$backdrop;}else {$backdrop = $('<div>').addClass('selectivity-backdrop');$('body').append($backdrop);}$backdrop.on('click',this.close.bind(this));this._$backdrop = $backdrop;}});},{"10":10,"jquery":"jquery"}],8:[function(_dereq_,module,exports){'use strict';var $=window.jQuery || window.Zepto;var EventDelegator=_dereq_(2); /**
 * Create a new Selectivity instance or invoke a method on an instance.
 *
 * @param methodName Optional name of a method to call. If omitted, a Selectivity instance is
 *                   created for each element in the set of matched elements. If an element in the
 *                   set already has a Selectivity instance, the result is the same as if the
 *                   setOptions() method is called. If a method name is given, the options
 *                   parameter is ignored and any additional parameters are passed to the given
 *                   method.
 * @param options Options object to pass to the constructor or the setOptions() method. In case
 *                a new instance is being created, the following properties are used:
 *                inputType - The input type to use. Default input types include 'Multiple' and
 *                            'Single', but you can add custom input types to the InputTypes map or
 *                            just specify one here as a function. The default value is 'Single',
 *                            unless multiple is true in which case it is 'Multiple'.
 *                multiple - Boolean determining whether multiple items may be selected
 *                           (default: false). If true, a MultipleSelectivity instance is created,
 *                           otherwise a SingleSelectivity instance is created.
 *
 * @return If the given method returns a value, this method returns the value of that method
 *         executed on the first element in the set of matched elements.
 */function selectivity(methodName,options){ /* jshint validthis: true */var methodArgs=Array.prototype.slice.call(arguments,1);var result;this.each(function(){var instance=this.selectivity;if(instance){if($.type(methodName) !== 'string'){methodArgs = [methodName];methodName = 'setOptions';}if($.type(instance[methodName]) === 'function'){if(result === undefined){result = instance[methodName].apply(instance,methodArgs);}}else {throw new Error('Unknown method: ' + methodName);}}else {if($.type(methodName) === 'string'){if(methodName !== 'destroy'){throw new Error('Cannot call method on element without Selectivity instance');}}else {options = $.extend({},methodName,{element:this}); // this is a one-time hack to facilitate the selectivity-traditional module, because
// the module is not able to hook this early into creation of the instance
var $this=$(this);if($this.is('select') && $this.prop('multiple')){options.multiple = true;}var InputTypes=Selectivity.InputTypes;var InputType=options.inputType || (options.multiple?'Multiple':'Single');if($.type(InputType) !== 'function'){if(InputTypes[InputType]){InputType = InputTypes[InputType];}else {throw new Error('Unknown Selectivity input type: ' + InputType);}}this.selectivity = new InputType(options);}}});return result === undefined?this:result;} /**
 * Selectivity Base Constructor.
 *
 * You will never use this constructor directly. Instead, you use $(selector).selectivity(options)
 * to create an instance of either MultipleSelectivity or SingleSelectivity. This class defines all
 * functionality that is common between both.
 *
 * @param options Options object. Accepts the same options as the setOptions method(), in addition
 *                to the following ones:
 *                data - Initial selection data to set. This should be an array of objects with 'id'
 *                       and 'text' properties. This option is mutually exclusive with 'value'.
 *                element - The DOM element to which to attach the Selectivity instance. This
 *                          property is set automatically by the $.fn.selectivity() function.
 *                value - Initial value to set. This should be an array of IDs. This property is
 *                        mutually exclusive with 'data'.
 */function Selectivity(options){if(!(this instanceof Selectivity)){return selectivity.apply(this,arguments);} /**
     * jQuery container for the element to which this instance is attached.
     */this.$el = $(options.element); /**
     * jQuery container for the search input.
     *
     * May be null as long as there is no visible search input. It is set by initSearchInput().
     */this.$searchInput = null; /**
     * Reference to the currently open dropdown.
     */this.dropdown = null; /**
     * Whether the input is enabled.
     *
     * This is false when the option readOnly is false or the option removeOnly is false.
     */this.enabled = true; /**
     * Boolean whether the browser has touch input.
     */this.hasTouch = typeof window !== 'undefined' && 'ontouchstart' in window; /**
     * Boolean whether the browser has a physical keyboard attached to it.
     *
     * Given that there is no way for JavaScript to reliably detect this yet, we just assume it's
     * the opposite of hasTouch for now.
     */this.hasKeyboard = !this.hasTouch; /**
     * Array of items from which to select. If set, this will be an array of objects with 'id' and
     * 'text' properties.
     *
     * If given, all items are expected to be available locally and all selection operations operate
     * on this local array only. If null, items are not available locally, and a query function
     * should be provided to fetch remote data.
     */this.items = null; /**
     * The function to be used for matching search results.
     */this.matcher = Selectivity.matcher; /**
     * Options passed to the Selectivity instance or set through setOptions().
     */this.options = {}; /**
     * Array of search input listeners.
     *
     * Custom listeners can be specified in the options object.
     */this.searchInputListeners = Selectivity.SearchInputListeners; /**
     * Mapping of templates.
     *
     * Custom templates can be specified in the options object.
     */this.templates = $.extend({},Selectivity.Templates); /**
     * The last used search term.
     */this.term = '';this.setOptions(options);if(options.value){this.value(options.value,{triggerChange:false});}else {this.data(options.data || null,{triggerChange:false});}this.$el.on('mouseover',this._mouseover.bind(this));this.$el.on('mouseleave',this._mouseout.bind(this));this.$el.on('selectivity-close',this._closed.bind(this));EventDelegator.call(this);} /**
 * Methods.
 */$.extend(Selectivity.prototype,EventDelegator.prototype,{ /**
     * Convenience shortcut for this.$el.find(selector).
     */$:function $(selector){return this.$el.find(selector);}, /**
     * Closes the dropdown.
     */close:function close(){if(this.dropdown){this.dropdown.close();}}, /**
     * Sets or gets the selection data.
     *
     * The selection data contains both IDs and text labels. If you only want to set or get the IDs,
     * you should use the value() method.
     *
     * @param newData Optional new data to set. For a MultipleSelectivity instance the data must be
     *                an array of objects with 'id' and 'text' properties, for a SingleSelectivity
     *                instance the data must be a single such object or null to indicate no item is
     *                selected.
     * @param options Optional options object. May contain the following property:
     *                triggerChange - Set to false to suppress the "change" event being triggered.
     *                                Note this will also cause the UI to not update automatically;
     *                                so you may want to call rerenderSelection() manually when
     *                                using this option.
     *
     * @return If newData is omitted, this method returns the current data.
     */data:function data(newData,options){options = options || {};if(newData === undefined){return this._data;}else {newData = this.validateData(newData);this._data = newData;this._value = this.getValueForData(newData);if(options.triggerChange !== false){this.triggerChange();}}}, /**
     * Destroys the Selectivity instance.
     */destroy:function destroy(){this.undelegateEvents();var $el=this.$el;$el.children().remove();$el[0].selectivity = null;$el = null;}, /**
     * Filters the results to be displayed in the dropdown.
     *
     * The default implementation simply returns the results unfiltered, but the MultipleSelectivity
     * class overrides this method to filter out any items that have already been selected.
     *
     * @param results Array of items with 'id' and 'text' properties.
     *
     * @return The filtered array.
     */filterResults:function filterResults(results){return results;}, /**
     * Applies focus to the input.
     */focus:function focus(){if(this.$searchInput){this.$searchInput.focus();}}, /**
     * Returns the correct item for a given ID.
     *
     * @param id The ID to get the item for.
     *
     * @return The corresponding item. Will be an object with 'id' and 'text' properties or null if
     *         the item cannot be found. Note that if no items are defined, this method assumes the
     *         text labels will be equal to the IDs.
     */getItemForId:function getItemForId(id){var items=this.items;if(items){return Selectivity.findNestedById(items,id);}else {return {id:id,text:'' + id};}}, /**
     * Initializes the search input element.
     *
     * Sets the $searchInput property, invokes all search input listeners and attaches the default
     * action of searching when something is typed.
     *
     * @param $input jQuery container for the input element.
     * @param options Optional options object. May contain the following property:
     *                noSearch - If true, no event handlers are setup to initiate searching when
     *                           the user types in the input field. This is useful if you want to
     *                           use the input only to handle keyboard support.
     */initSearchInput:function initSearchInput($input,options){this.$searchInput = $input;this.searchInputListeners.forEach((function(listener){listener(this,$input);}).bind(this));if(!options || !options.noSearch){$input.on('keyup',(function(event){if(!event.isDefaultPrevented()){this.search();}}).bind(this));}}, /**
     * Opens the dropdown.
     *
     * @param options Optional options object. May contain the following property:
     *                search - Boolean whether the dropdown should be initialized by performing a
     *                         search for the empty string (ie. display all results). Default is
     *                         true.
     *                showSearchInput - Boolean whether a search input should be shown in the
     *                                  dropdown. Default is false.
     */open:function open(options){options = options || {};if(!this.dropdown){if(this.triggerEvent('selectivity-opening')){var Dropdown=this.options.dropdown || Selectivity.Dropdown;if(Dropdown){this.dropdown = new Dropdown({items:this.items,position:this.options.positionDropdown,query:this.options.query,selectivity:this,showSearchInput:options.showSearchInput});}if(options.search !== false){this.search('');}}this.$el.children().toggleClass('open',true);}}, /**
     * (Re-)positions the dropdown.
     */positionDropdown:function positionDropdown(){if(this.dropdown){this.dropdown.position();}}, /**
     * Searches for results based on the term given or the term entered in the search input.
     *
     * If an items array has been passed with the options to the Selectivity instance, a local
     * search will be performed among those items. Otherwise, the query function specified in the
     * options will be used to perform the search. If neither is defined, nothing happens.
     *
     * @param term Optional term to search for. If ommitted, the value of the search input element
     *             is used as term.
     */search:function search(term){if(term === undefined){term = this.$searchInput?this.$searchInput.val():'';}this.open({search:false});if(this.dropdown){this.dropdown.search(term);}}, /**
     * Sets one or more options on this Selectivity instance.
     *
     * @param options Options object. May contain one or more of the following properties:
     *                closeOnSelect - Set to false to keep the dropdown open after the user has
     *                                selected an item. This is useful if you want to allow the user
     *                                to quickly select multiple items. The default value is true.
     *                dropdown - Custom dropdown implementation to use for this instance.
     *                initSelection - Function to map values by ID to selection data. This function
     *                                receives two arguments, 'value' and 'callback'. The value is
     *                                the current value of the selection, which is an ID or an array
     *                                of IDs depending on the input type. The callback should be
     *                                invoked with an object or array of objects, respectively,
     *                                containing 'id' and 'text' properties.
     *                items - Array of items from which to select. Should be an array of objects
     *                        with 'id' and 'text' properties. As convenience, you may also pass an
     *                        array of strings, in which case the same string is used for both the
     *                        'id' and 'text' properties. If items are given, all items are expected
     *                        to be available locally and all selection operations operate on this
     *                        local array only. If null, items are not available locally, and a
     *                        query function should be provided to fetch remote data.
     *                matcher - Function to determine whether text matches a given search term. Note
     *                          this function is only used if you have specified an array of items.
     *                          Receives two arguments:
     *                          item - The item that should match the search term.
     *                          term - The search term. Note that for performance reasons, the term
     *                                 has always been already processed using
     *                                 Selectivity.transformText().
     *                          The method should return the item if it matches, and null otherwise.
     *                          If the item has a children array, the matcher is expected to filter
     *                          those itself (be sure to only return the filtered array of children
     *                          in the returned item and not to modify the children of the item
     *                          argument).
     *                placeholder - Placeholder text to display when the element has no focus and
     *                              no selected items.
     *                positionDropdown - Function to position the dropdown. Receives two arguments:
     *                                   $dropdownEl - The element to be positioned.
     *                                   $selectEl - The element of the Selectivity instance, that
     *                                               you can position the dropdown to.
     *                                   The default implementation positions the dropdown element
     *                                   under the Selectivity's element and gives it the same
     *                                   width.
     *                query - Function to use for querying items. Receives a single object as
     *                        argument with the following properties:
     *                        callback - Callback to invoke when the results are available. This
     *                                   callback should be passed a single object as argument with
     *                                   the following properties:
     *                                   more - Boolean that can be set to true to indicate there
     *                                          are more results available. Additional results may
     *                                          be fetched by the user through pagination.
     *                                   results - Array of result items. The format for the result
     *                                             items is the same as for passing local items.
     *                        offset - This property is only used for pagination and indicates how
     *                                 many results should be skipped when returning more results.
     *                        selectivity - The Selectivity instance the query function is used on.
     *                        term - The search term the user is searching for. Unlike with the
     *                               matcher function, the term has not been processed using
     *                               Selectivity.transformText().
     *                readOnly - If true, disables any modification of the input.
     *                removeOnly - If true, disables any modification of the input except removing
     *                             of selected items.
     *                searchInputListeners - Array of search input listeners. By default, the global
     *                                       array Selectivity.SearchInputListeners is used.
     *                showDropdown - Set to false if you don't want to use any dropdown (you can
     *                               still open it programmatically using open()).
     *                templates - Object with instance-specific templates to override the global
     *                            templates assigned to Selectivity.Templates.
     */setOptions:function setOptions(options){options = options || {};Selectivity.OptionListeners.forEach((function(listener){listener(this,options);}).bind(this));$.extend(this.options,options);var allowedTypes=$.extend({closeOnSelect:'boolean',dropdown:'function|null',initSelection:'function|null',matcher:'function|null',placeholder:'string',positionDropdown:'function|null',query:'function|null',readOnly:'boolean',removeOnly:'boolean',searchInputListeners:'array'},options.allowedTypes);$.each(options,(function(key,value){var type=allowedTypes[key];if(type && !type.split('|').some(function(type){return $.type(value) === type;})){throw new Error(key + ' must be of type ' + type);}switch(key){case 'items':this.items = value === null?value:Selectivity.processItems(value);break;case 'matcher':this.matcher = value;break;case 'searchInputListeners':this.searchInputListeners = value;break;case 'templates':$.extend(this.templates,value);break;}}).bind(this));this.enabled = !this.options.readOnly && !this.options.removeOnly;}, /**
     * Returns the result of the given template.
     *
     * @param templateName Name of the template to process.
     * @param options Options to pass to the template.
     *
     * @return String containing HTML.
     */template:function template(templateName,options){var template=this.templates[templateName];if(template){if($.type(template) === 'function'){return template(options);}else if(template.render){return template.render(options);}else {return template.toString();}}else {throw new Error('Unknown template: ' + templateName);}}, /**
     * Triggers the change event.
     *
     * The event object at least contains the following property:
     * value - The new value of the Selectivity instance.
     *
     * @param Optional additional options added to the event object.
     */triggerChange:function triggerChange(options){this.triggerEvent('change',$.extend({value:this._value},options));}, /**
     * Triggers an event on the instance's element.
     *
     * @param Optional event data to be added to the event object.
     *
     * @return Whether the default action of the event may be executed, ie. returns false if
     *         preventDefault() has been called.
     */triggerEvent:function triggerEvent(eventName,data){var event=$.Event(eventName,data || {});this.$el.trigger(event);return !event.isDefaultPrevented();}, /**
     * Shorthand for value().
     */val:function val(newValue){return this.value(newValue);}, /**
     * Validates a single item. Throws an exception if the item is invalid.
     *
     * @param item The item to validate.
     *
     * @return The validated item. May differ from the input item.
     */validateItem:function validateItem(item){if(item && Selectivity.isValidId(item.id) && $.type(item.text) === 'string'){return item;}else {throw new Error('Item should have id (number or string) and text (string) properties');}}, /**
     * Sets or gets the value of the selection.
     *
     * The value of the selection only concerns the IDs of the selection items. If you are
     * interested in the IDs and the text labels, you should use the data() method.
     *
     * Note that if neither the items option nor the initSelection option have been set, Selectivity
     * will have no way to determine what text labels should be used with the given IDs in which
     * case it will assume the text is equal to the ID. This is useful if you're working with tags,
     * or selecting e-mail addresses for instance, but may not always be what you want.
     *
     * @param newValue Optional new value to set. For a MultipleSelectivity instance the value must
     *                 be an array of IDs, for a SingleSelectivity instance the value must be a
     *                 single ID (a string or a number) or null to indicate no item is selected.
     * @param options Optional options object. May contain the following property:
     *                triggerChange - Set to false to suppress the "change" event being triggered.
     *                                Note this will also cause the UI to not update automatically;
     *                                so you may want to call rerenderSelection() manually when
     *                                using this option.
     *
     * @return If newValue is omitted, this method returns the current value.
     */value:function value(newValue,options){options = options || {};if(newValue === undefined){return this._value;}else {newValue = this.validateValue(newValue);this._value = newValue;if(this.options.initSelection){this.options.initSelection(newValue,(function(data){if(this._value === newValue){this._data = this.validateData(data);if(options.triggerChange !== false){this.triggerChange();}}}).bind(this));}else {this._data = this.getDataForValue(newValue);if(options.triggerChange !== false){this.triggerChange();}}}}, /**
     * @private
     */_closed:function _closed(){this.dropdown = null;this.$el.children().toggleClass('open',false);}, /**
     * @private
     */_getItemId:function _getItemId(elementOrEvent){ // returns the item ID related to an element or event target.
// IDs can be either numbers or strings, but attribute values are always strings, so we
// will have to find out whether the item ID ought to be a number or string ourselves.
// $.fn.data() is a bit overzealous for our case, because it returns a number whenever the
// attribute value can be parsed as a number. however, it is possible an item had an ID
// which is a string but which is parseable as number, in which case we verify if the ID
// as number is actually found among the data or results. if it isn't, we assume it was
// supposed to be a string after all...
var $element;if(elementOrEvent.target){$element = $(elementOrEvent.target).closest('[data-item-id]');}else if(elementOrEvent.length){$element = elementOrEvent;}else {$element = $(elementOrEvent);}var id=$element.data('item-id');if($.type(id) === 'string'){return id;}else {if(Selectivity.findById(this._data || [],id)){return id;}else {var dropdown=this.dropdown;while(dropdown) {if(Selectivity.findNestedById(dropdown.results,id)){return id;} // FIXME: reference to submenu doesn't belong in base module
dropdown = dropdown.submenu;}return '' + id;}}}, /**
     * @private
     */_mouseout:function _mouseout(){this.$el.children().toggleClass('hover',false);}, /**
     * @private
     */_mouseover:function _mouseover(){this.$el.children().toggleClass('hover',true);}}); /**
 * Dropdown class to use for displaying dropdowns.
 *
 * The default implementation of a dropdown is defined in the selectivity-dropdown module.
 */Selectivity.Dropdown = null; /**
 * Mapping of input types.
 */Selectivity.InputTypes = {}; /**
 * Array of option listeners.
 *
 * Option listeners are invoked when setOptions() is called. Every listener receives two arguments:
 *
 * selectivity - The Selectivity instance.
 * options - The options that are about to be set. The listener may modify this options object.
 *
 * An example of an option listener is the selectivity-traditional module.
 */Selectivity.OptionListeners = []; /**
 * Array of search input listeners.
 *
 * Search input listeners are invoked when initSearchInput() is called (typically right after the
 * search input is created). Every listener receives two arguments:
 *
 * selectivity - The Selectivity instance.
 * $input - jQuery container with the search input.
 *
 * An example of a search input listener is the selectivity-keyboard module.
 */Selectivity.SearchInputListeners = []; /**
 * Mapping with templates to use for rendering select boxes and dropdowns. See
 * selectivity-templates.js for a useful set of default templates, as well as for documentation of
 * the individual templates.
 */Selectivity.Templates = {}; /**
 * Finds an item in the given array with the specified ID.
 *
 * @param array Array to search in.
 * @param id ID to search for.
 *
 * @return The item in the array with the given ID, or null if the item was not found.
 */Selectivity.findById = function(array,id){var index=Selectivity.findIndexById(array,id);return index > -1?array[index]:null;}; /**
 * Finds the index of an item in the given array with the specified ID.
 *
 * @param array Array to search in.
 * @param id ID to search for.
 *
 * @return The index of the item in the array with the given ID, or -1 if the item was not found.
 */Selectivity.findIndexById = function(array,id){for(var i=0,length=array.length;i < length;i++) {if(array[i].id === id){return i;}}return -1;}; /**
 * Finds an item in the given array with the specified ID. Items in the array may contain 'children'
 * properties which in turn will be searched for the item.
 *
 * @param array Array to search in.
 * @param id ID to search for.
 *
 * @return The item in the array with the given ID, or null if the item was not found.
 */Selectivity.findNestedById = null && function(array,id){for(var i=0,length=array.length;i < length;i++) {var item=array[i];if(item.id === id){return item;}else if(item.children){var result=Selectivity.findNestedById(item.children,id);if(result){return result;}}}return null;}; /**
 * Utility method for inheriting another class.
 *
 * @param SubClass Constructor function of the subclass.
 * @param SuperClass Optional constructor function of the superclass. If omitted, Selectivity is
 *                   used as superclass.
 * @param prototype Object with methods you want to add to the subclass prototype.
 *
 * @return A utility function for calling the methods of the superclass. This function receives two
 *         arguments: The this object on which you want to execute the method and the name of the
 *         method. Any arguments past those are passed to the superclass method.
 */Selectivity.inherits = function(SubClass,SuperClass,prototype){if(arguments.length === 2){prototype = SuperClass;SuperClass = Selectivity;}SubClass.prototype = $.extend(Object.create(SuperClass.prototype),{constructor:SubClass},prototype);return function(self,methodName){SuperClass.prototype[methodName].apply(self,Array.prototype.slice.call(arguments,2));};}; /**
 * Checks whether a value can be used as a valid ID for selection items. Only numbers and strings
 * are accepted to be used as IDs.
 *
 * @param id The value to check whether it is a valid ID.
 *
 * @return true if the value is a valid ID, false otherwise.
 */Selectivity.isValidId = function(id){var type=$.type(id);return type === 'number' || type === 'string';}; /**
 * Decides whether a given item matches a search term. The default implementation simply
 * checks whether the term is contained within the item's text, after transforming them using
 * transformText().
 *
 * @param item The item that should match the search term.
 * @param term The search term. Note that for performance reasons, the term has always been already
 *             processed using transformText().
 *
 * @return true if the text matches the term, false otherwise.
 */Selectivity.matcher = function(item,term){var result=null;if(Selectivity.transformText(item.text).indexOf(term) > -1){result = item;}else if(item.children){var matchingChildren=item.children.map(function(child){return Selectivity.matcher(child,term);}).filter(function(child){return !!child;});if(matchingChildren.length){result = {id:item.id,text:item.text,children:matchingChildren};}}return result;}; /**
 * Helper function for processing items.
 *
 * @param item The item to process, either as object containing 'id' and 'text' properties or just
 *             as ID. The 'id' property of an item is optional if it has a 'children' property
 *             containing an array of items.
 *
 * @return Object containing 'id' and 'text' properties.
 */Selectivity.processItem = function(item){if(Selectivity.isValidId(item)){return {id:item,text:'' + item};}else if(item && (Selectivity.isValidId(item.id) || item.children) && $.type(item.text) === 'string'){if(item.children){item.children = Selectivity.processItems(item.children);}return item;}else {throw new Error('invalid item');}}; /**
 * Helper function for processing an array of items.
 *
 * @param items Array of items to process. See processItem() for details about a single item.
 *
 * @return Array with items.
 */Selectivity.processItems = function(items){if($.type(items) === 'array'){return items.map(Selectivity.processItem);}else {throw new Error('invalid items');}}; /**
 * Quotes a string so it can be used in a CSS attribute selector. It adds double quotes to the
 * string and escapes all occurrences of the quote character inside the string.
 *
 * @param string The string to quote.
 *
 * @return The quoted string.
 */Selectivity.quoteCssAttr = function(string){return '"' + ('' + string).replace(/\\/g,'\\\\').replace(/"/g,'\\"') + '"';}; /**
 * Transforms text in order to find matches. The default implementation casts all strings to
 * lower-case so that any matches found will be case-insensitive.
 *
 * @param string The string to transform.
 *
 * @return The transformed string.
 */Selectivity.transformText = function(string){return string.toLowerCase();};module.exports = $.fn.selectivity = Selectivity;},{"2":2,"jquery":"jquery"}],9:[function(_dereq_,module,exports){'use strict';var DIACRITICS={"Ⓐ":'A',"Ａ":'A',"À":'A',"Á":'A',"Â":'A',"Ầ":'A',"Ấ":'A',"Ẫ":'A',"Ẩ":'A',"Ã":'A',"Ā":'A',"Ă":'A',"Ằ":'A',"Ắ":'A',"Ẵ":'A',"Ẳ":'A',"Ȧ":'A',"Ǡ":'A',"Ä":'A',"Ǟ":'A',"Ả":'A',"Å":'A',"Ǻ":'A',"Ǎ":'A',"Ȁ":'A',"Ȃ":'A',"Ạ":'A',"Ậ":'A',"Ặ":'A',"Ḁ":'A',"Ą":'A',"Ⱥ":'A',"Ɐ":'A',"Ꜳ":'AA',"Æ":'AE',"Ǽ":'AE',"Ǣ":'AE',"Ꜵ":'AO',"Ꜷ":'AU',"Ꜹ":'AV',"Ꜻ":'AV',"Ꜽ":'AY',"Ⓑ":'B',"Ｂ":'B',"Ḃ":'B',"Ḅ":'B',"Ḇ":'B',"Ƀ":'B',"Ƃ":'B',"Ɓ":'B',"Ⓒ":'C',"Ｃ":'C',"Ć":'C',"Ĉ":'C',"Ċ":'C',"Č":'C',"Ç":'C',"Ḉ":'C',"Ƈ":'C',"Ȼ":'C',"Ꜿ":'C',"Ⓓ":'D',"Ｄ":'D',"Ḋ":'D',"Ď":'D',"Ḍ":'D',"Ḑ":'D',"Ḓ":'D',"Ḏ":'D',"Đ":'D',"Ƌ":'D',"Ɗ":'D',"Ɖ":'D',"Ꝺ":'D',"Ǳ":'DZ',"Ǆ":'DZ',"ǲ":'Dz',"ǅ":'Dz',"Ⓔ":'E',"Ｅ":'E',"È":'E',"É":'E',"Ê":'E',"Ề":'E',"Ế":'E',"Ễ":'E',"Ể":'E',"Ẽ":'E',"Ē":'E',"Ḕ":'E',"Ḗ":'E',"Ĕ":'E',"Ė":'E',"Ë":'E',"Ẻ":'E',"Ě":'E',"Ȅ":'E',"Ȇ":'E',"Ẹ":'E',"Ệ":'E',"Ȩ":'E',"Ḝ":'E',"Ę":'E',"Ḙ":'E',"Ḛ":'E',"Ɛ":'E',"Ǝ":'E',"Ⓕ":'F',"Ｆ":'F',"Ḟ":'F',"Ƒ":'F',"Ꝼ":'F',"Ⓖ":'G',"Ｇ":'G',"Ǵ":'G',"Ĝ":'G',"Ḡ":'G',"Ğ":'G',"Ġ":'G',"Ǧ":'G',"Ģ":'G',"Ǥ":'G',"Ɠ":'G',"Ꞡ":'G',"Ᵹ":'G',"Ꝿ":'G',"Ⓗ":'H',"Ｈ":'H',"Ĥ":'H',"Ḣ":'H',"Ḧ":'H',"Ȟ":'H',"Ḥ":'H',"Ḩ":'H',"Ḫ":'H',"Ħ":'H',"Ⱨ":'H',"Ⱶ":'H',"Ɥ":'H',"Ⓘ":'I',"Ｉ":'I',"Ì":'I',"Í":'I',"Î":'I',"Ĩ":'I',"Ī":'I',"Ĭ":'I',"İ":'I',"Ï":'I',"Ḯ":'I',"Ỉ":'I',"Ǐ":'I',"Ȉ":'I',"Ȋ":'I',"Ị":'I',"Į":'I',"Ḭ":'I',"Ɨ":'I',"Ⓙ":'J',"Ｊ":'J',"Ĵ":'J',"Ɉ":'J',"Ⓚ":'K',"Ｋ":'K',"Ḱ":'K',"Ǩ":'K',"Ḳ":'K',"Ķ":'K',"Ḵ":'K',"Ƙ":'K',"Ⱪ":'K',"Ꝁ":'K',"Ꝃ":'K',"Ꝅ":'K',"Ꞣ":'K',"Ⓛ":'L',"Ｌ":'L',"Ŀ":'L',"Ĺ":'L',"Ľ":'L',"Ḷ":'L',"Ḹ":'L',"Ļ":'L',"Ḽ":'L',"Ḻ":'L',"Ł":'L',"Ƚ":'L',"Ɫ":'L',"Ⱡ":'L',"Ꝉ":'L',"Ꝇ":'L',"Ꞁ":'L',"Ǉ":'LJ',"ǈ":'Lj',"Ⓜ":'M',"Ｍ":'M',"Ḿ":'M',"Ṁ":'M',"Ṃ":'M',"Ɱ":'M',"Ɯ":'M',"Ⓝ":'N',"Ｎ":'N',"Ǹ":'N',"Ń":'N',"Ñ":'N',"Ṅ":'N',"Ň":'N',"Ṇ":'N',"Ņ":'N',"Ṋ":'N',"Ṉ":'N',"Ƞ":'N',"Ɲ":'N',"Ꞑ":'N',"Ꞥ":'N',"Ǌ":'NJ',"ǋ":'Nj',"Ⓞ":'O',"Ｏ":'O',"Ò":'O',"Ó":'O',"Ô":'O',"Ồ":'O',"Ố":'O',"Ỗ":'O',"Ổ":'O',"Õ":'O',"Ṍ":'O',"Ȭ":'O',"Ṏ":'O',"Ō":'O',"Ṑ":'O',"Ṓ":'O',"Ŏ":'O',"Ȯ":'O',"Ȱ":'O',"Ö":'O',"Ȫ":'O',"Ỏ":'O',"Ő":'O',"Ǒ":'O',"Ȍ":'O',"Ȏ":'O',"Ơ":'O',"Ờ":'O',"Ớ":'O',"Ỡ":'O',"Ở":'O',"Ợ":'O',"Ọ":'O',"Ộ":'O',"Ǫ":'O',"Ǭ":'O',"Ø":'O',"Ǿ":'O',"Ɔ":'O',"Ɵ":'O',"Ꝋ":'O',"Ꝍ":'O',"Ƣ":'OI',"Ꝏ":'OO',"Ȣ":'OU',"Ⓟ":'P',"Ｐ":'P',"Ṕ":'P',"Ṗ":'P',"Ƥ":'P',"Ᵽ":'P',"Ꝑ":'P',"Ꝓ":'P',"Ꝕ":'P',"Ⓠ":'Q',"Ｑ":'Q',"Ꝗ":'Q',"Ꝙ":'Q',"Ɋ":'Q',"Ⓡ":'R',"Ｒ":'R',"Ŕ":'R',"Ṙ":'R',"Ř":'R',"Ȑ":'R',"Ȓ":'R',"Ṛ":'R',"Ṝ":'R',"Ŗ":'R',"Ṟ":'R',"Ɍ":'R',"Ɽ":'R',"Ꝛ":'R',"Ꞧ":'R',"Ꞃ":'R',"Ⓢ":'S',"Ｓ":'S',"ẞ":'S',"Ś":'S',"Ṥ":'S',"Ŝ":'S',"Ṡ":'S',"Š":'S',"Ṧ":'S',"Ṣ":'S',"Ṩ":'S',"Ș":'S',"Ş":'S',"Ȿ":'S',"Ꞩ":'S',"Ꞅ":'S',"Ⓣ":'T',"Ｔ":'T',"Ṫ":'T',"Ť":'T',"Ṭ":'T',"Ț":'T',"Ţ":'T',"Ṱ":'T',"Ṯ":'T',"Ŧ":'T',"Ƭ":'T',"Ʈ":'T',"Ⱦ":'T',"Ꞇ":'T',"Ꜩ":'TZ',"Ⓤ":'U',"Ｕ":'U',"Ù":'U',"Ú":'U',"Û":'U',"Ũ":'U',"Ṹ":'U',"Ū":'U',"Ṻ":'U',"Ŭ":'U',"Ü":'U',"Ǜ":'U',"Ǘ":'U',"Ǖ":'U',"Ǚ":'U',"Ủ":'U',"Ů":'U',"Ű":'U',"Ǔ":'U',"Ȕ":'U',"Ȗ":'U',"Ư":'U',"Ừ":'U',"Ứ":'U',"Ữ":'U',"Ử":'U',"Ự":'U',"Ụ":'U',"Ṳ":'U',"Ų":'U',"Ṷ":'U',"Ṵ":'U',"Ʉ":'U',"Ⓥ":'V',"Ｖ":'V',"Ṽ":'V',"Ṿ":'V',"Ʋ":'V',"Ꝟ":'V',"Ʌ":'V',"Ꝡ":'VY',"Ⓦ":'W',"Ｗ":'W',"Ẁ":'W',"Ẃ":'W',"Ŵ":'W',"Ẇ":'W',"Ẅ":'W',"Ẉ":'W',"Ⱳ":'W',"Ⓧ":'X',"Ｘ":'X',"Ẋ":'X',"Ẍ":'X',"Ⓨ":'Y',"Ｙ":'Y',"Ỳ":'Y',"Ý":'Y',"Ŷ":'Y',"Ỹ":'Y',"Ȳ":'Y',"Ẏ":'Y',"Ÿ":'Y',"Ỷ":'Y',"Ỵ":'Y',"Ƴ":'Y',"Ɏ":'Y',"Ỿ":'Y',"Ⓩ":'Z',"Ｚ":'Z',"Ź":'Z',"Ẑ":'Z',"Ż":'Z',"Ž":'Z',"Ẓ":'Z',"Ẕ":'Z',"Ƶ":'Z',"Ȥ":'Z',"Ɀ":'Z',"Ⱬ":'Z',"Ꝣ":'Z',"ⓐ":'a',"ａ":'a',"ẚ":'a',"à":'a',"á":'a',"â":'a',"ầ":'a',"ấ":'a',"ẫ":'a',"ẩ":'a',"ã":'a',"ā":'a',"ă":'a',"ằ":'a',"ắ":'a',"ẵ":'a',"ẳ":'a',"ȧ":'a',"ǡ":'a',"ä":'a',"ǟ":'a',"ả":'a',"å":'a',"ǻ":'a',"ǎ":'a',"ȁ":'a',"ȃ":'a',"ạ":'a',"ậ":'a',"ặ":'a',"ḁ":'a',"ą":'a',"ⱥ":'a',"ɐ":'a',"ꜳ":'aa',"æ":'ae',"ǽ":'ae',"ǣ":'ae',"ꜵ":'ao',"ꜷ":'au',"ꜹ":'av',"ꜻ":'av',"ꜽ":'ay',"ⓑ":'b',"ｂ":'b',"ḃ":'b',"ḅ":'b',"ḇ":'b',"ƀ":'b',"ƃ":'b',"ɓ":'b',"ⓒ":'c',"ｃ":'c',"ć":'c',"ĉ":'c',"ċ":'c',"č":'c',"ç":'c',"ḉ":'c',"ƈ":'c',"ȼ":'c',"ꜿ":'c',"ↄ":'c',"ⓓ":'d',"ｄ":'d',"ḋ":'d',"ď":'d',"ḍ":'d',"ḑ":'d',"ḓ":'d',"ḏ":'d',"đ":'d',"ƌ":'d',"ɖ":'d',"ɗ":'d',"ꝺ":'d',"ǳ":'dz',"ǆ":'dz',"ⓔ":'e',"ｅ":'e',"è":'e',"é":'e',"ê":'e',"ề":'e',"ế":'e',"ễ":'e',"ể":'e',"ẽ":'e',"ē":'e',"ḕ":'e',"ḗ":'e',"ĕ":'e',"ė":'e',"ë":'e',"ẻ":'e',"ě":'e',"ȅ":'e',"ȇ":'e',"ẹ":'e',"ệ":'e',"ȩ":'e',"ḝ":'e',"ę":'e',"ḙ":'e',"ḛ":'e',"ɇ":'e',"ɛ":'e',"ǝ":'e',"ⓕ":'f',"ｆ":'f',"ḟ":'f',"ƒ":'f',"ꝼ":'f',"ⓖ":'g',"ｇ":'g',"ǵ":'g',"ĝ":'g',"ḡ":'g',"ğ":'g',"ġ":'g',"ǧ":'g',"ģ":'g',"ǥ":'g',"ɠ":'g',"ꞡ":'g',"ᵹ":'g',"ꝿ":'g',"ⓗ":'h',"ｈ":'h',"ĥ":'h',"ḣ":'h',"ḧ":'h',"ȟ":'h',"ḥ":'h',"ḩ":'h',"ḫ":'h',"ẖ":'h',"ħ":'h',"ⱨ":'h',"ⱶ":'h',"ɥ":'h',"ƕ":'hv',"ⓘ":'i',"ｉ":'i',"ì":'i',"í":'i',"î":'i',"ĩ":'i',"ī":'i',"ĭ":'i',"ï":'i',"ḯ":'i',"ỉ":'i',"ǐ":'i',"ȉ":'i',"ȋ":'i',"ị":'i',"į":'i',"ḭ":'i',"ɨ":'i',"ı":'i',"ⓙ":'j',"ｊ":'j',"ĵ":'j',"ǰ":'j',"ɉ":'j',"ⓚ":'k',"ｋ":'k',"ḱ":'k',"ǩ":'k',"ḳ":'k',"ķ":'k',"ḵ":'k',"ƙ":'k',"ⱪ":'k',"ꝁ":'k',"ꝃ":'k',"ꝅ":'k',"ꞣ":'k',"ⓛ":'l',"ｌ":'l',"ŀ":'l',"ĺ":'l',"ľ":'l',"ḷ":'l',"ḹ":'l',"ļ":'l',"ḽ":'l',"ḻ":'l',"ſ":'l',"ł":'l',"ƚ":'l',"ɫ":'l',"ⱡ":'l',"ꝉ":'l',"ꞁ":'l',"ꝇ":'l',"ǉ":'lj',"ⓜ":'m',"ｍ":'m',"ḿ":'m',"ṁ":'m',"ṃ":'m',"ɱ":'m',"ɯ":'m',"ⓝ":'n',"ｎ":'n',"ǹ":'n',"ń":'n',"ñ":'n',"ṅ":'n',"ň":'n',"ṇ":'n',"ņ":'n',"ṋ":'n',"ṉ":'n',"ƞ":'n',"ɲ":'n',"ŉ":'n',"ꞑ":'n',"ꞥ":'n',"ǌ":'nj',"ⓞ":'o',"ｏ":'o',"ò":'o',"ó":'o',"ô":'o',"ồ":'o',"ố":'o',"ỗ":'o',"ổ":'o',"õ":'o',"ṍ":'o',"ȭ":'o',"ṏ":'o',"ō":'o',"ṑ":'o',"ṓ":'o',"ŏ":'o',"ȯ":'o',"ȱ":'o',"ö":'o',"ȫ":'o',"ỏ":'o',"ő":'o',"ǒ":'o',"ȍ":'o',"ȏ":'o',"ơ":'o',"ờ":'o',"ớ":'o',"ỡ":'o',"ở":'o',"ợ":'o',"ọ":'o',"ộ":'o',"ǫ":'o',"ǭ":'o',"ø":'o',"ǿ":'o',"ɔ":'o',"ꝋ":'o',"ꝍ":'o',"ɵ":'o',"ƣ":'oi',"ȣ":'ou',"ꝏ":'oo',"ⓟ":'p',"ｐ":'p',"ṕ":'p',"ṗ":'p',"ƥ":'p',"ᵽ":'p',"ꝑ":'p',"ꝓ":'p',"ꝕ":'p',"ⓠ":'q',"ｑ":'q',"ɋ":'q',"ꝗ":'q',"ꝙ":'q',"ⓡ":'r',"ｒ":'r',"ŕ":'r',"ṙ":'r',"ř":'r',"ȑ":'r',"ȓ":'r',"ṛ":'r',"ṝ":'r',"ŗ":'r',"ṟ":'r',"ɍ":'r',"ɽ":'r',"ꝛ":'r',"ꞧ":'r',"ꞃ":'r',"ⓢ":'s',"ｓ":'s',"ß":'s',"ś":'s',"ṥ":'s',"ŝ":'s',"ṡ":'s',"š":'s',"ṧ":'s',"ṣ":'s',"ṩ":'s',"ș":'s',"ş":'s',"ȿ":'s',"ꞩ":'s',"ꞅ":'s',"ẛ":'s',"ⓣ":'t',"ｔ":'t',"ṫ":'t',"ẗ":'t',"ť":'t',"ṭ":'t',"ț":'t',"ţ":'t',"ṱ":'t',"ṯ":'t',"ŧ":'t',"ƭ":'t',"ʈ":'t',"ⱦ":'t',"ꞇ":'t',"ꜩ":'tz',"ⓤ":'u',"ｕ":'u',"ù":'u',"ú":'u',"û":'u',"ũ":'u',"ṹ":'u',"ū":'u',"ṻ":'u',"ŭ":'u',"ü":'u',"ǜ":'u',"ǘ":'u',"ǖ":'u',"ǚ":'u',"ủ":'u',"ů":'u',"ű":'u',"ǔ":'u',"ȕ":'u',"ȗ":'u',"ư":'u',"ừ":'u',"ứ":'u',"ữ":'u',"ử":'u',"ự":'u',"ụ":'u',"ṳ":'u',"ų":'u',"ṷ":'u',"ṵ":'u',"ʉ":'u',"ⓥ":'v',"ｖ":'v',"ṽ":'v',"ṿ":'v',"ʋ":'v',"ꝟ":'v',"ʌ":'v',"ꝡ":'vy',"ⓦ":'w',"ｗ":'w',"ẁ":'w',"ẃ":'w',"ŵ":'w',"ẇ":'w',"ẅ":'w',"ẘ":'w',"ẉ":'w',"ⱳ":'w',"ⓧ":'x',"ｘ":'x',"ẋ":'x',"ẍ":'x',"ⓨ":'y',"ｙ":'y',"ỳ":'y',"ý":'y',"ŷ":'y',"ỹ":'y',"ȳ":'y',"ẏ":'y',"ÿ":'y',"ỷ":'y',"ẙ":'y',"ỵ":'y',"ƴ":'y',"ɏ":'y',"ỿ":'y',"ⓩ":'z',"ｚ":'z',"ź":'z',"ẑ":'z',"ż":'z',"ž":'z',"ẓ":'z',"ẕ":'z',"ƶ":'z',"ȥ":'z',"ɀ":'z',"ⱬ":'z',"ꝣ":'z',"Ά":"Α","Έ":"Ε","Ή":"Η","Ί":"Ι","Ϊ":"Ι","Ό":"Ο","Ύ":"Υ","Ϋ":"Υ","Ώ":"Ω","ά":"α","έ":"ε","ή":"η","ί":"ι","ϊ":"ι","ΐ":"ι","ό":"ο","ύ":"υ","ϋ":"υ","ΰ":"υ","ω":"ω","ς":"σ"};var Selectivity=_dereq_(8);var previousTransform=Selectivity.transformText; /**
 * Extended version of the transformText() function that simplifies diacritics to their latin1
 * counterparts.
 *
 * Note that if all query functions fetch their results from a remote server, you may not need this
 * function, because it makes sense to remove diacritics server-side in such cases.
 */Selectivity.transformText = function(string){var result='';for(var i=0,length=string.length;i < length;i++) {var character=string[i];result += DIACRITICS[character] || character;}return previousTransform(result);};},{"8":8}],10:[function(_dereq_,module,exports){'use strict';var $=window.jQuery || window.Zepto;var debounce=_dereq_(3);var EventDelegator=_dereq_(2);var Selectivity=_dereq_(8); /**
 * selectivity Dropdown Constructor.
 *
 * @param options Options object. Should have the following properties:
 *                selectivity - Selectivity instance to show the dropdown for.
 *                showSearchInput - Boolean whether a search input should be shown.
 */function SelectivityDropdown(options){var selectivity=options.selectivity;this.$el = $(selectivity.template('dropdown',{dropdownCssClass:selectivity.options.dropdownCssClass,searchInputPlaceholder:selectivity.options.searchInputPlaceholder,showSearchInput:options.showSearchInput})); /**
     * jQuery container to add the results to.
     */this.$results = this.$('.selectivity-results-container'); /**
     * Boolean indicating whether more results are available than currently displayed in the
     * dropdown.
     */this.hasMore = false; /**
     * The currently highlighted result item.
     */this.highlightedResult = null; /**
     * Boolean whether the load more link is currently highlighted.
     */this.loadMoreHighlighted = false; /**
     * Options passed to the dropdown constructor.
     */this.options = options; /**
     * The results displayed in the dropdown.
     */this.results = []; /**
     * Selectivity instance.
     */this.selectivity = selectivity;this._closed = false;this._closeProxy = this.close.bind(this);if(selectivity.options.closeOnSelect !== false){selectivity.$el.on('selectivity-selecting',this._closeProxy);}this._lastMousePosition = {};this.addToDom();this.position();this.setupCloseHandler();this._suppressMouseWheel();if(options.showSearchInput){selectivity.initSearchInput(this.$('.selectivity-search-input'));selectivity.focus();}EventDelegator.call(this);this.$results.on('scroll touchmove touchend',debounce(this._scrolled.bind(this),50));this.showLoading();setTimeout(this.triggerOpen.bind(this),1);} /**
 * Methods.
 */$.extend(SelectivityDropdown.prototype,EventDelegator.prototype,{ /**
     * Convenience shortcut for this.$el.find(selector).
     */$:function $(selector){return this.$el.find(selector);}, /**
     * Adds the dropdown to the DOM.
     */addToDom:function addToDom(){var $next;var $anchor=this.selectivity.$el;while(($next = $anchor.next('.selectivity-dropdown')).length) {$anchor = $next;} //this.$el.insertAfter($anchor);
$anchor.append(this.$el);}, /**
     * Closes the dropdown.
     */close:function close(){if(!this._closed){this._closed = true;this.$el.remove();this.removeCloseHandler();this.selectivity.$el.off('selectivity-selecting',this._closeProxy);this.triggerClose();}}, /**
     * Events map.
     *
     * Follows the same format as Backbone: http://backbonejs.org/#View-delegateEvents
     */events:{'click .selectivity-load-more':'_loadMoreClicked','click .selectivity-result-item':'_resultClicked','mouseenter .selectivity-load-more':'_loadMoreHovered','mouseenter .selectivity-result-item':'_resultHovered'}, /**
     * Highlights a result item.
     *
     * @param item The item to highlight.
     */highlight:function highlight(item){if(this.loadMoreHighlighted){this.$('.selectivity-load-more').removeClass('highlight');}this.$('.selectivity-result-item').removeClass('highlight').filter('[data-item-id=' + Selectivity.quoteCssAttr(item.id) + ']').addClass('highlight');this.highlightedResult = item;this.loadMoreHighlighted = false;this.selectivity.triggerEvent('selectivity-highlight',{item:item,id:item.id});}, /**
     * Highlights the load more link.
     *
     * @param item The item to highlight.
     */highlightLoadMore:function highlightLoadMore(){this.$('.selectivity-result-item').removeClass('highlight');this.$('.selectivity-load-more').addClass('highlight');this.highlightedResult = null;this.loadMoreHighlighted = true;}, /**
     * Loads a follow-up page with results after a search.
     *
     * This method should only be called after a call to search() when the callback has indicated
     * more results are available.
     */loadMore:function loadMore(){this.options.query({callback:(function(response){if(response && response.results){this._showResults(Selectivity.processItems(response.results),{add:true,hasMore:!!response.more});}else {throw new Error('callback must be passed a response object');}}).bind(this),error:this._showResults.bind(this,[],{add:true}),offset:this.results.length,selectivity:this.selectivity,term:this.term});}, /**
     * Positions the dropdown inside the DOM.
     */position:function position(){var position=this.options.position;if(position){position(this.$el,this.selectivity.$el);}this._scrolled();}, /**
     * Removes the event handler to close the dropdown.
     */removeCloseHandler:function removeCloseHandler(){$('body').off('click',this._closeProxy);}, /**
     * Renders an array of result items.
     *
     * @param items Array of result items.
     *
     * @return HTML-formatted string to display the result items.
     */renderItems:function renderItems(items){var selectivity=this.selectivity;return items.map(function(item){var result=selectivity.template(item.id?'resultItem':'resultLabel',item);if(item.children){result += selectivity.template('resultChildren',{childrenHtml:this.renderItems(item.children)});}return result;},this).join('');}, /**
     * Searches for results based on the term given or the term entered in the search input.
     *
     * If an items array has been passed with the options to the Selectivity instance, a local
     * search will be performed among those items. Otherwise, the query function specified in the
     * options will be used to perform the search. If neither is defined, nothing happens.
     *
     * @param term Term to search for.
     */search:function search(term){var self=this;term = term || '';self.term = term;if(self.options.items){term = Selectivity.transformText(term);var matcher=self.selectivity.matcher;self._showResults(self.options.items.map(function(item){return matcher(item,term);}).filter(function(item){return !!item;}),{term:term});}else if(self.options.query){self.options.query({callback:function callback(response){if(response && response.results){self._showResults(Selectivity.processItems(response.results),{hasMore:!!response.more,term:term});}else {throw new Error('callback must be passed a response object');}},error:self.showError.bind(self),offset:0,selectivity:self.selectivity,term:term});}}, /**
     * Selects the highlighted item.
     */selectHighlight:function selectHighlight(){if(this.highlightedResult){this.selectItem(this.highlightedResult.id);}else if(this.loadMoreHighlighted){this._loadMoreClicked();}}, /**
     * Selects the item with the given ID.
     *
     * @param id ID of the item to select.
     */selectItem:function selectItem(id){var item=Selectivity.findNestedById(this.results,id);if(item && !item.disabled){var options={id:id,item:item};if(this.selectivity.triggerEvent('selectivity-selecting',options)){this.selectivity.triggerEvent('selectivity-selected',options);}}}, /**
     * Sets up an event handler that will close the dropdown when the Selectivity control loses
     * focus.
     */setupCloseHandler:function setupCloseHandler(){$('body').on('click',this._closeProxy);}, /**
     * Shows an error message.
     *
     * @param message Error message to display.
     * @param options Options object. May contain the following property:
     *                escape - Set to false to disable HTML-escaping of the message. Useful if you
     *                         want to set raw HTML as the message, but may open you up to XSS
     *                         attacks if you're not careful with escaping user input.
     */showError:function showError(message,options){options = options || {};this.$results.html(this.selectivity.template('error',{escape:options.escape !== false,message:message}));this.hasMore = false;this.results = [];this.highlightedResult = null;this.loadMoreHighlighted = false;this.position();}, /**
     * Shows a loading indicator in the dropdown.
     */showLoading:function showLoading(){this.$results.html(this.selectivity.template('loading'));this.hasMore = false;this.results = [];this.highlightedResult = null;this.loadMoreHighlighted = false;this.position();}, /**
     * Shows the results from a search query.
     *
     * @param results Array of result items.
     * @param options Options object. May contain the following properties:
     *                add - True if the results should be added to any already shown results.
     *                hasMore - Boolean whether more results can be fetched using the query()
     *                          function.
     *                term - The search term for which the results are displayed.
     */showResults:function showResults(results,options){var resultsHtml=this.renderItems(results);if(options.hasMore){resultsHtml += this.selectivity.template('loadMore');}else {if(!resultsHtml && !options.add){resultsHtml = this.selectivity.template('noResults',{term:options.term});}}if(options.add){this.$('.selectivity-loading').replaceWith(resultsHtml);this.results = this.results.concat(results);}else {this.$results.html(resultsHtml);this.results = results;}this.hasMore = options.hasMore;if(!options.add || this.loadMoreHighlighted){this._highlightFirstItem(results);}this.position();}, /**
     * Triggers the 'selectivity-close' event.
     */triggerClose:function triggerClose(){this.selectivity.$el.trigger('selectivity-close');}, /**
     * Triggers the 'selectivity-open' event.
     */triggerOpen:function triggerOpen(){this.selectivity.$el.trigger('selectivity-open');}, /**
     * @private
     */_highlightFirstItem:function _highlightFirstItem(results){function findFirstItem(results){for(var i=0,length=results.length;i < length;i++) {var result=results[i];if(result.id){return result;}else if(result.children){var item=findFirstItem(result.children);if(item){return item;}}}}var firstItem=findFirstItem(results);if(firstItem){this.highlight(firstItem);}else {this.highlightedResult = null;this.loadMoreHighlighted = false;}}, /**
     * @private
     */_loadMoreClicked:function _loadMoreClicked(){this.$('.selectivity-load-more').replaceWith(this.selectivity.template('loading'));this.loadMore();this.selectivity.focus();return false;}, /**
     * @private
     */_loadMoreHovered:function _loadMoreHovered(event){if(event.screenX === undefined || event.screenX !== this._lastMousePosition.x || event.screenY === undefined || event.screenY !== this._lastMousePosition.y){this.highlightLoadMore();this._recordMousePosition(event);}}, /**
     * @private
     */_recordMousePosition:function _recordMousePosition(event){this._lastMousePosition = {x:event.screenX,y:event.screenY};}, /**
     * @private
     */_resultClicked:function _resultClicked(event){this.selectItem(this.selectivity._getItemId(event));return false;}, /**
     * @private
     */_resultHovered:function _resultHovered(event){if(event.screenX === undefined || event.screenX !== this._lastMousePosition.x || event.screenY === undefined || event.screenY !== this._lastMousePosition.y){var id=this.selectivity._getItemId(event);var item=Selectivity.findNestedById(this.results,id);if(item && !item.disabled){this.highlight(item);}this._recordMousePosition(event);}}, /**
     * @private
     */_scrolled:function _scrolled(){var $loadMore=this.$('.selectivity-load-more');if($loadMore.length){if($loadMore[0].offsetTop - this.$results[0].scrollTop < this.$el.height()){this._loadMoreClicked();}}}, /**
     * @private
     */_showResults:function _showResults(results,options){this.showResults(this.selectivity.filterResults(results),options);}, /**
     * @private
     */_suppressMouseWheel:function _suppressMouseWheel(){var suppressMouseWheelSelector=this.selectivity.options.suppressMouseWheelSelector;if(suppressMouseWheelSelector === null){return;}var selector=suppressMouseWheelSelector || '.selectivity-results-container';this.$el.on('DOMMouseScroll mousewheel',selector,function(event){ // Thanks to Troy Alford:
// http://stackoverflow.com/questions/5802467/prevent-scrolling-of-parent-element
var $el=$(this),scrollTop=this.scrollTop,scrollHeight=this.scrollHeight,height=$el.height(),originalEvent=event.originalEvent,delta=event.type === 'DOMMouseScroll'?originalEvent.detail * -40:originalEvent.wheelDelta,up=delta > 0;function prevent(){event.stopPropagation();event.preventDefault();event.returnValue = false;return false;}if(scrollHeight > height){if(!up && -delta > scrollHeight - height - scrollTop){ // Scrolling down, but this will take us past the bottom.
$el.scrollTop(scrollHeight);return prevent();}else if(up && delta > scrollTop){ // Scrolling up, but this will take us past the top.
$el.scrollTop(0);return prevent();}}});}});module.exports = Selectivity.Dropdown = SelectivityDropdown;},{"2":2,"3":3,"8":8,"jquery":"jquery"}],11:[function(_dereq_,module,exports){'use strict';var $=window.jQuery || window.Zepto;var Selectivity=_dereq_(8);var MultipleSelectivity=_dereq_(14);function isValidEmail(email){var atIndex=email.indexOf('@');var dotIndex=email.lastIndexOf('.');var spaceIndex=email.indexOf(' ');return atIndex > 0 && dotIndex > atIndex + 1 && dotIndex < email.length - 2 && spaceIndex === -1;}function lastWord(token,length){length = length === undefined?token.length:length;for(var i=length - 1;i >= 0;i--) {if(/\s/.test(token[i])){return token.slice(i + 1,length);}}return token.slice(0,length);}function stripEnclosure(token,enclosure){if(token.slice(0,1) === enclosure[0] && token.slice(-1) === enclosure[1]){return token.slice(1,-1).trim();}else {return token.trim();}}function createEmailItem(token){var email=lastWord(token);var name=token.slice(0,-email.length).trim();if(isValidEmail(email)){email = stripEnclosure(stripEnclosure(email,'()'),'<>');name = stripEnclosure(name,'""').trim() || email;return {id:email,text:name};}else {return token.trim()?{id:token,text:token}:null;}}function emailTokenizer(input,selection,createToken){function hasToken(input){if(input){for(var i=0,length=input.length;i < length;i++) {switch(input[i]){case ';':case ',':case '\n':return true;case ' ':case '\t':if(isValidEmail(lastWord(input,i))){return true;}break;case '"':do {i++;}while(i < length && input[i] !== '"');break;default:continue;}}}return false;}function takeToken(input){for(var i=0,length=input.length;i < length;i++) {switch(input[i]){case ';':case ',':case '\n':return {term:input.slice(0,i),input:input.slice(i + 1)};case ' ':case '\t':if(isValidEmail(lastWord(input,i))){return {term:input.slice(0,i),input:input.slice(i + 1)};}break;case '"':do {i++;}while(i < length && input[i] !== '"');break;default:continue;}}return {};}while(hasToken(input)) {var token=takeToken(input);if(token.term){var item=createEmailItem(token.term);if(item && !(item.id && Selectivity.findById(selection,item.id))){createToken(item);}}input = token.input;}return input;} /**
 * Emailselectivity Constructor.
 *
 * @param options Options object. Accepts all options from the MultipleSelectivity Constructor.
 */function Emailselectivity(options){MultipleSelectivity.call(this,options);} /**
 * Methods.
 */var callSuper=Selectivity.inherits(Emailselectivity,MultipleSelectivity,{ /**
     * @inherit
     */initSearchInput:function initSearchInput($input){callSuper(this,'initSearchInput',$input);$input.on('blur',(function(){var term=$input.val();if(isValidEmail(lastWord(term))){this.add(createEmailItem(term));}}).bind(this));}, /**
     * @inherit
     *
     * Note that for the Email input type the option showDropdown is set to false and the tokenizer
     * option is set to a tokenizer specialized for email addresses.
     */setOptions:function setOptions(options){options = $.extend({createTokenItem:createEmailItem,showDropdown:false,tokenizer:emailTokenizer},options);callSuper(this,'setOptions',options);}});module.exports = Selectivity.InputTypes.Email = Emailselectivity;},{"14":14,"8":8,"jquery":"jquery"}],12:[function(_dereq_,module,exports){'use strict';var Selectivity=_dereq_(8);var KEY_BACKSPACE=8;var KEY_DOWN_ARROW=40;var KEY_ENTER=13;var KEY_ESCAPE=27;var KEY_TAB=9;var KEY_UP_ARROW=38; /**
 * Search input listener providing keyboard support for navigating the dropdown.
 */function listener(selectivity,$input){var keydownCanceled=false;var closeSubmenu=null; /**
     * Moves a dropdown's highlight to the next or previous result item.
     *
     * @param delta Either 1 to move to the next item, or -1 to move to the previous item.
     */function moveHighlight(dropdown,delta){function findElementIndex($elements,selector){for(var i=0,length=$elements.length;i < length;i++) {if($elements.eq(i).is(selector)){return i;}}return -1;}function scrollToHighlight(){var $el;if(dropdown.highlightedResult){var quotedId=Selectivity.quoteCssAttr(dropdown.highlightedResult.id);$el = dropdown.$('.selectivity-result-item[data-item-id=' + quotedId + ']');}else if(dropdown.loadMoreHighlighted){$el = dropdown.$('.selectivity-load-more');}else {return; // no highlight to scroll to
}var position=$el.position();if(!position){return;}var top=position.top;var resultsHeight=dropdown.$results.height();var elHeight=$el.outerHeight?$el.outerHeight():$el.height();if(top < 0 || top > resultsHeight - elHeight){top += dropdown.$results.scrollTop();dropdown.$results.scrollTop(delta < 0?top:top - resultsHeight + elHeight);}}if(dropdown.submenu){moveHighlight(dropdown.submenu,delta);return;}var results=dropdown.results;if(results.length){var $results=dropdown.$('.selectivity-result-item');var defaultIndex=delta > 0?0:$results.length - 1;var index=defaultIndex;var highlightedResult=dropdown.highlightedResult;if(highlightedResult){var quotedId=Selectivity.quoteCssAttr(highlightedResult.id);index = findElementIndex($results,'[data-item-id=' + quotedId + ']') + delta;if(delta > 0?index >= $results.length:index < 0){if(dropdown.hasMore){dropdown.highlightLoadMore();scrollToHighlight();return;}else {index = defaultIndex;}}}var result=Selectivity.findNestedById(results,selectivity._getItemId($results[index]));if(result){dropdown.highlight(result,{delay:!!result.submenu});scrollToHighlight();}}}function keyHeld(event){var dropdown=selectivity.dropdown;if(dropdown){if(event.keyCode === KEY_BACKSPACE){if(!$input.val()){if(dropdown.submenu){var submenu=dropdown.submenu;while(submenu.submenu) {submenu = submenu.submenu;}closeSubmenu = submenu;}event.preventDefault();keydownCanceled = true;}}else if(event.keyCode === KEY_DOWN_ARROW){moveHighlight(dropdown,1);}else if(event.keyCode === KEY_UP_ARROW){moveHighlight(dropdown,-1);}else if(event.keyCode === KEY_TAB){setTimeout(function(){selectivity.close({keepFocus:false});},1);}else if(event.keyCode === KEY_ENTER){event.preventDefault(); // don't submit forms on keydown
}}}function keyReleased(event){function open(){if(selectivity.options.showDropdown !== false){selectivity.open();}}var dropdown=selectivity.dropdown;if(keydownCanceled){event.preventDefault();keydownCanceled = false;if(closeSubmenu){closeSubmenu.close();selectivity.focus();closeSubmenu = null;}}else if(event.keyCode === KEY_BACKSPACE){if(!dropdown && selectivity.options.allowClear){selectivity.clear();}}else if(event.keyCode === KEY_ENTER && !event.ctrlKey){if(dropdown){dropdown.selectHighlight();}else if(selectivity.options.showDropdown !== false){open();}event.preventDefault();}else if(event.keyCode === KEY_ESCAPE){selectivity.close();event.preventDefault();}else if(event.keyCode === KEY_DOWN_ARROW || event.keyCode === KEY_UP_ARROW){ // handled in keyHeld() because the response feels faster and it works with repeated
// events if the user holds the key for a longer period
// still, we issue an open() call here in case the dropdown was not yet open...
open();event.preventDefault();}else {open();}}$input.on('keydown',keyHeld).on('keyup',keyReleased);}Selectivity.SearchInputListeners.push(listener);},{"8":8}],13:[function(_dereq_,module,exports){'use strict';var escape=_dereq_(4);var Selectivity=_dereq_(8); /**
 * Localizable elements of the Selectivity Templates.
 *
 * Be aware that these strings are added straight to the HTML output of the templates, so any
 * non-safe strings should be escaped.
 */Selectivity.Locale = {ajaxError:function ajaxError(term){return 'Failed to fetch results for <b>' + escape(term) + '</b>';},loading:'Loading...',loadMore:'Load more...',needMoreCharacters:function needMoreCharacters(numCharacters){return 'Enter ' + numCharacters + ' more characters to search';},noResults:'No results found',noResultsForTerm:function noResultsForTerm(term){return 'No results for <b>' + escape(term) + '</b>';}};},{"4":4,"8":8}],14:[function(_dereq_,module,exports){'use strict';var $=window.jQuery || window.Zepto;var Selectivity=_dereq_(8);var KEY_BACKSPACE=8;var KEY_DELETE=46;var KEY_ENTER=13; /**
 * MultipleSelectivity Constructor.
 *
 * @param options Options object. Accepts all options from the Selectivity Base Constructor in
 *                addition to those accepted by MultipleSelectivity.setOptions().
 */function MultipleSelectivity(options){Selectivity.call(this,options);this.$el.html(this.template('multipleSelectInput',{enabled:this.enabled})).trigger('selectivity-init','multiple');this._highlightedItemId = null;this.initSearchInput(this.$('.selectivity-multiple-input:not(.selectivity-width-detector)'));this.rerenderSelection();if(!options.positionDropdown){ // dropdowns for multiple-value inputs should open below the select box,
// unless there is not enough space below, but there is space enough above, then it should
// open upwards
this.options.positionDropdown = function($el,$selectEl){var position=$selectEl.position(),dropdownHeight=$el.height(),selectHeight=$selectEl.height(),top=$selectEl[0].getBoundingClientRect().top,bottom=top + selectHeight + dropdownHeight,openUpwards=typeof window !== 'undefined' && bottom > $(window).height() && top - dropdownHeight > 0;var width=$selectEl.outerWidth?$selectEl.outerWidth():$selectEl.width();$el.css({left:position.left + 'px',top:position.top + (openUpwards?-dropdownHeight:selectHeight) + 'px'}).width(width);};}} /**
 * Methods.
 */var callSuper=Selectivity.inherits(MultipleSelectivity,{ /**
     * Adds an item to the selection, if it's not selected yet.
     *
     * @param item The item to add. May be an item with 'id' and 'text' properties or just an ID.
     */add:function add(item){var itemIsId=Selectivity.isValidId(item);var id=itemIsId?item:this.validateItem(item) && item.id;if(this._value.indexOf(id) === -1){this._value.push(id);if(itemIsId && this.options.initSelection){this.options.initSelection([id],(function(data){if(this._value.indexOf(id) > -1){item = this.validateItem(data[0]);this._data.push(item);this.triggerChange({added:item});}}).bind(this));}else {if(itemIsId){item = this.getItemForId(id);}this._data.push(item);this.triggerChange({added:item});}}this.$searchInput.val('');}, /**
     * Clears the data and value.
     */clear:function clear(){this.data([]);}, /**
     * Events map.
     *
     * Follows the same format as Backbone: http://backbonejs.org/#View-delegateEvents
     */events:{'change':'rerenderSelection','change .selectivity-multiple-input':function changeSelectivityMultipleInput(){return false;},'click':'_clicked','click .selectivity-multiple-selected-item':'_itemClicked','keydown .selectivity-multiple-input':'_keyHeld','keyup .selectivity-multiple-input':'_keyReleased','paste .selectivity-multiple-input':'_onPaste','selectivity-selected':'_resultSelected'}, /**
     * @inherit
     */filterResults:function filterResults(results){return results.filter(function(item){return !Selectivity.findById(this._data,item.id);},this);}, /**
     * Returns the correct data for a given value.
     *
     * @param value The value to get the data for. Should be an array of IDs.
     *
     * @return The corresponding data. Will be an array of objects with 'id' and 'text' properties.
     *         Note that if no items are defined, this method assumes the text labels will be equal
     *         to the IDs.
     */getDataForValue:function getDataForValue(value){return value.map(this.getItemForId,this).filter(function(item){return !!item;});}, /**
     * Returns the correct value for the given data.
     *
     * @param data The data to get the value for. Should be an array of objects with 'id' and 'text'
     *             properties.
     *
     * @return The corresponding value. Will be an array of IDs.
     */getValueForData:function getValueForData(data){return data.map(function(item){return item.id;});}, /**
     * Removes an item from the selection, if it is selected.
     *
     * @param item The item to remove. May be an item with 'id' and 'text' properties or just an ID.
     */remove:function remove(item){var id=$.type(item) === 'object'?item.id:item;var removedItem;var index=Selectivity.findIndexById(this._data,id);if(index > -1){removedItem = this._data[index];this._data.splice(index,1);}if(this._value[index] !== id){index = this._value.indexOf(id);}if(index > -1){this._value.splice(index,1);}if(removedItem){this.triggerChange({removed:removedItem});}if(id === this._highlightedItemId){this._highlightedItemId = null;}}, /**
     * Re-renders the selection.
     *
     * Normally the UI is automatically updated whenever the selection changes, but you may want to
     * call this method explicitly if you've updated the selection with the triggerChange option set
     * to false.
     */rerenderSelection:function rerenderSelection(event){event = event || {};if(event.added){this._renderSelectedItem(event.added);this._scrollToBottom();}else if(event.removed){var quotedId=Selectivity.quoteCssAttr(event.removed.id);this.$('.selectivity-multiple-selected-item[data-item-id=' + quotedId + ']').remove();}else {this.$('.selectivity-multiple-selected-item').remove();this._data.forEach(this._renderSelectedItem,this);this._updateInputWidth();}if(event.added || event.removed){if(this.dropdown){this.dropdown.showResults(this.filterResults(this.dropdown.results),{hasMore:this.dropdown.hasMore});}if(this.hasKeyboard){this.focus();}}this.positionDropdown();this._updatePlaceholder();}, /**
     * @inherit
     */search:function search(){var term=this.$searchInput.val();if(this.options.tokenizer){term = this.options.tokenizer(term,this._data,this.add.bind(this),this.options);if($.type(term) === 'string' && term !== this.$searchInput.val()){this.$searchInput.val(term);}}if(this.dropdown){callSuper(this,'search');}}, /**
     * @inherit
     *
     * @param options Options object. In addition to the options supported in the base
     *                implementation, this may contain the following properties:
     *                backspaceHighlightsBeforeDelete - If set to true, when the user enters a
     *                                                  backspace while there is no text in the
     *                                                  search field but there are selected items,
     *                                                  the last selected item will be highlighted
     *                                                  and when a second backspace is entered the
     *                                                  item is deleted. If false, the item gets
     *                                                  deleted on the first backspace. The default
     *                                                  value is true on devices that have touch
     *                                                  input and false on devices that don't.
     *                createTokenItem - Function to create a new item from a user's search term.
     *                                  This is used to turn the term into an item when dropdowns
     *                                  are disabled and the user presses Enter. It is also used by
     *                                  the default tokenizer to create items for individual tokens.
     *                                  The function receives a 'token' parameter which is the
     *                                  search term (or part of a search term) to create an item for
     *                                  and must return an item object with 'id' and 'text'
     *                                  properties or null if no token can be created from the term.
     *                                  The default is a function that returns an item where the id
     *                                  and text both match the token for any non-empty string and
     *                                  which returns null otherwise.
     *                tokenizer - Function for tokenizing search terms. Will receive the following
     *                            parameters:
     *                            input - The input string to tokenize.
     *                            selection - The current selection data.
     *                            createToken - Callback to create a token from the search terms.
     *                                          Should be passed an item object with 'id' and 'text'
     *                                          properties.
     *                            options - The options set on the Selectivity instance.
     *                            Any string returned by the tokenizer function is treated as the
     *                            remainder of untokenized input.
     */setOptions:function setOptions(options){options = options || {};var backspaceHighlightsBeforeDelete='backspaceHighlightsBeforeDelete';if(options[backspaceHighlightsBeforeDelete] === undefined){options[backspaceHighlightsBeforeDelete] = this.hasTouch;}options.allowedTypes = options.allowedTypes || {};options.allowedTypes[backspaceHighlightsBeforeDelete] = 'boolean';var wasEnabled=this.enabled;callSuper(this,'setOptions',options);if(wasEnabled !== this.enabled){this.$el.html(this.template('multipleSelectInput',{enabled:this.enabled}));}}, /**
     * Validates data to set. Throws an exception if the data is invalid.
     *
     * @param data The data to validate. Should be an array of objects with 'id' and 'text'
     *             properties.
     *
     * @return The validated data. This may differ from the input data.
     */validateData:function validateData(data){if(data === null){return [];}else if($.type(data) === 'array'){return data.map(this.validateItem,this);}else {throw new Error('Data for MultiSelectivity instance should be array');}}, /**
     * Validates a value to set. Throws an exception if the value is invalid.
     *
     * @param value The value to validate. Should be an array of IDs.
     *
     * @return The validated value. This may differ from the input value.
     */validateValue:function validateValue(value){if(value === null){return [];}else if($.type(value) === 'array'){if(value.every(Selectivity.isValidId)){return value;}else {throw new Error('Value contains invalid IDs');}}else {throw new Error('Value for MultiSelectivity instance should be an array');}}, /**
     * @private
     */_backspacePressed:function _backspacePressed(){if(this.options.backspaceHighlightsBeforeDelete){if(this._highlightedItemId){this._deletePressed();}else if(this._value.length){this._highlightItem(this._value.slice(-1)[0]);}}else if(this._value.length){this.remove(this._value.slice(-1)[0]);}}, /**
     * @private
     */_clicked:function _clicked(){if(this.enabled){this.focus();this._open();return false;}}, /**
     * @private
     */_createToken:function _createToken(){var term=this.$searchInput.val();var createTokenItem=this.options.createTokenItem;if(term && createTokenItem){var item=createTokenItem(term);if(item){this.add(item);}}}, /**
     * @private
     */_deletePressed:function _deletePressed(){if(this._highlightedItemId){this.remove(this._highlightedItemId);}}, /**
     * @private
     */_highlightItem:function _highlightItem(id){this._highlightedItemId = id;this.$('.selectivity-multiple-selected-item').removeClass('highlighted').filter('[data-item-id=' + Selectivity.quoteCssAttr(id) + ']').addClass('highlighted');if(this.hasKeyboard){this.focus();}}, /**
     * @private
     */_itemClicked:function _itemClicked(event){if(this.enabled){this._highlightItem(this._getItemId(event));}}, /**
     * @private
     */_itemRemoveClicked:function _itemRemoveClicked(event){this.remove(this._getItemId(event));this._updateInputWidth();return false;}, /**
     * @private
     */_keyHeld:function _keyHeld(event){this._originalValue = this.$searchInput.val();if(event.keyCode === KEY_ENTER && !event.ctrlKey){event.preventDefault();}}, /**
     * @private
     */_keyReleased:function _keyReleased(event){var inputHadText=!!this._originalValue;if(event.keyCode === KEY_ENTER && !event.ctrlKey){if(this.options.createTokenItem){this._createToken();}}else if(event.keyCode === KEY_BACKSPACE && !inputHadText){this._backspacePressed();}else if(event.keyCode === KEY_DELETE && !inputHadText){this._deletePressed();}this._updateInputWidth();}, /**
     * @private
     */_onPaste:function _onPaste(){setTimeout((function(){this.search();if(this.options.createTokenItem){this._createToken();}}).bind(this),10);}, /**
     * @private
     */_open:function _open(){if(this.options.showDropdown !== false){this.open();}},_renderSelectedItem:function _renderSelectedItem(item){this.$searchInput.before(this.template('multipleSelectedItem',$.extend({highlighted:item.id === this._highlightedItemId,removable:!this.options.readOnly},item)));var quotedId=Selectivity.quoteCssAttr(item.id);this.$('.selectivity-multiple-selected-item[data-item-id=' + quotedId + ']').find('.selectivity-multiple-selected-item-remove').on('click',this._itemRemoveClicked.bind(this));}, /**
     * @private
     */_resultSelected:function _resultSelected(event){if(this._value.indexOf(event.id) === -1){this.add(event.item);}else {this.remove(event.item);}}, /**
     * @private
     */_scrollToBottom:function _scrollToBottom(){var $inputContainer=this.$('.selectivity-multiple-input-container');$inputContainer.scrollTop($inputContainer.height());}, /**
     * @private
     */_updateInputWidth:function _updateInputWidth(){if(this.enabled){var $input=this.$searchInput,$widthDetector=this.$('.selectivity-width-detector');$widthDetector.text($input.val() || !this._data.length && this.options.placeholder || '');$input.width($widthDetector.width() + 20);this.positionDropdown();}}, /**
     * @private
     */_updatePlaceholder:function _updatePlaceholder(){var placeholder=this._data.length?'':this.options.placeholder;if(this.enabled){this.$searchInput.attr('placeholder',placeholder);}else {this.$('.selectivity-placeholder').text(placeholder);}}});module.exports = Selectivity.InputTypes.Multiple = MultipleSelectivity;},{"8":8,"jquery":"jquery"}],15:[function(_dereq_,module,exports){'use strict';var $=window.jQuery || window.Zepto;var Selectivity=_dereq_(8); /**
 * SingleSelectivity Constructor.
 *
 * @param options Options object. Accepts all options from the Selectivity Base Constructor in
 *                addition to those accepted by SingleSelectivity.setOptions().
 */function SingleSelectivity(options){Selectivity.call(this,options);this.$el.html(this.template('singleSelectInput',this.options)).trigger('selectivity-init','single');this.rerenderSelection();if(!options.positionDropdown){ // dropdowns for single-value inputs should open below the select box,
// unless there is not enough space below, in which case the dropdown should be moved up
// just enough so it fits in the window, but never so much that it reaches above the top
this.options.positionDropdown = function($el,$selectEl){var position=$selectEl.position(),dropdownHeight=$el.height(),selectHeight=$selectEl.height(),top=$selectEl[0].getBoundingClientRect().top,bottom=top + selectHeight + dropdownHeight,deltaUp=0;if(typeof window !== 'undefined'){deltaUp = Math.min(Math.max(bottom - $(window).height(),0),top + selectHeight);}var width=$selectEl.outerWidth?$selectEl.outerWidth():$selectEl.width();$el.css({left:position.left + 'px',top:position.top + selectHeight - deltaUp + 'px'}).width(width);};}if(options.showSearchInputInDropdown === false){this.initSearchInput(this.$('.selectivity-single-select-input'),{noSearch:true});}} /**
 * Methods.
 */var callSuper=Selectivity.inherits(SingleSelectivity,{ /**
     * Events map.
     *
     * Follows the same format as Backbone: http://backbonejs.org/#View-delegateEvents
     */events:{'change':'rerenderSelection','click':'_clicked','focus .selectivity-single-select-input':'_focused','selectivity-selected':'_resultSelected'}, /**
     * Clears the data and value.
     */clear:function clear(){this.data(null);}, /**
     * @inherit
     *
     * @param options Optional options object. May contain the following property:
     *                keepFocus - If false, the focus won't remain on the input.
     */close:function close(options){this._closing = true;callSuper(this,'close');if(!options || options.keepFocus !== false){this.$searchInput.focus();}this._closing = false;}, /**
     * Returns the correct data for a given value.
     *
     * @param value The value to get the data for. Should be an ID.
     *
     * @return The corresponding data. Will be an object with 'id' and 'text' properties. Note that
     *         if no items are defined, this method assumes the text label will be equal to the ID.
     */getDataForValue:function getDataForValue(value){return this.getItemForId(value);}, /**
     * Returns the correct value for the given data.
     *
     * @param data The data to get the value for. Should be an object with 'id' and 'text'
     *             properties or null.
     *
     * @return The corresponding value. Will be an ID or null.
     */getValueForData:function getValueForData(data){return data?data.id:null;}, /**
     * @inherit
     */open:function open(options){this._opening = true;var showSearchInput=this.options.showSearchInputInDropdown !== false;callSuper(this,'open',$.extend({showSearchInput:showSearchInput},options));if(!showSearchInput){this.focus();}this._opening = false;}, /**
     * Re-renders the selection.
     *
     * Normally the UI is automatically updated whenever the selection changes, but you may want to
     * call this method explicitly if you've updated the selection with the triggerChange option set
     * to false.
     */rerenderSelection:function rerenderSelection(){var $container=this.$('.selectivity-single-result-container');if(this._data){$container.html(this.template('singleSelectedItem',$.extend({removable:this.options.allowClear && !this.options.readOnly},this._data)));$container.find('.selectivity-single-selected-item-remove').on('click',this._itemRemoveClicked.bind(this));}else {$container.html(this.template('singleSelectPlaceholder',{placeholder:this.options.placeholder}));}}, /**
     * @inherit
     *
     * @param options Options object. In addition to the options supported in the base
     *                implementation, this may contain the following properties:
     *                allowClear - Boolean whether the selected item may be removed.
     *                showSearchInputInDropdown - Set to false to remove the search input used in
     *                                            dropdowns. The default is true.
     */setOptions:function setOptions(options){options = options || {};options.allowedTypes = $.extend(options.allowedTypes || {},{allowClear:'boolean',showSearchInputInDropdown:'boolean'});callSuper(this,'setOptions',options);}, /**
     * Validates data to set. Throws an exception if the data is invalid.
     *
     * @param data The data to validate. Should be an object with 'id' and 'text' properties or null
     *             to indicate no item is selected.
     *
     * @return The validated data. This may differ from the input data.
     */validateData:function validateData(data){return data === null?data:this.validateItem(data);}, /**
     * Validates a value to set. Throws an exception if the value is invalid.
     *
     * @param value The value to validate. Should be null or a valid ID.
     *
     * @return The validated value. This may differ from the input value.
     */validateValue:function validateValue(value){if(value === null || Selectivity.isValidId(value)){return value;}else {throw new Error('Value for SingleSelectivity instance should be a valid ID or null');}}, /**
     * @private
     */_clicked:function _clicked(){if(this.enabled){if(this.dropdown){this.close();}else if(this.options.showDropdown !== false){this.open();}return false;}}, /**
     * @private
     */_focused:function _focused(){if(this.enabled && !this._closing && !this._opening && this.options.showDropdown !== false){this.open();}}, /**
     * @private
     */_itemRemoveClicked:function _itemRemoveClicked(){this.data(null);return false;}, /**
     * @private
     */_resultSelected:function _resultSelected(event){this.data(event.item);this.close();}});module.exports = Selectivity.InputTypes.Single = SingleSelectivity;},{"8":8,"jquery":"jquery"}],16:[function(_dereq_,module,exports){'use strict';var Selectivity=_dereq_(8);var SelectivityDropdown=_dereq_(10); /**
 * Extended dropdown that supports submenus.
 */function SelectivitySubmenu(options){ /**
     * Optional parent dropdown menu from which this dropdown was opened.
     */this.parentMenu = options.parentMenu;SelectivityDropdown.call(this,options);this._closeSubmenuTimeout = 0;this._openSubmenuTimeout = 0;}var callSuper=Selectivity.inherits(SelectivitySubmenu,SelectivityDropdown,{ /**
     * @inherit
     */close:function close(){if(this.submenu){this.submenu.close();}callSuper(this,'close');if(this.parentMenu){this.parentMenu.submenu = null;this.parentMenu = null;}clearTimeout(this._closeSubmenuTimeout);clearTimeout(this._openSubmenuTimeout);}, /**
     * @inherit
     *
     * @param options Optional options object. May contain the following property:
     *                delay - If true, indicates any submenu should not be opened until after some
     *                        delay.
     */highlight:function highlight(item,options){if(options && options.delay){callSuper(this,'highlight',item);clearTimeout(this._openSubmenuTimeout);this._openSubmenuTimeout = setTimeout(this._doHighlight.bind(this,item),300);}else if(this.submenu){if(this.highlightedResult && this.highlightedResult.id === item.id){this._doHighlight(item);}else {clearTimeout(this._closeSubmenuTimeout);this._closeSubmenuTimeout = setTimeout(this._closeSubmenuAndHighlight.bind(this,item),100);}}else {if(this.parentMenu && this.parentMenu._closeSubmenuTimeout){clearTimeout(this.parentMenu._closeSubmenuTimeout);this.parentMenu._closeSubmenuTimeout = 0;}this._doHighlight(item);}}, /**
     * @inherit
     */search:function search(term){if(this.submenu){this.submenu.search(term);}else {callSuper(this,'search',term);}}, /**
     * @inherit
     */selectHighlight:function selectHighlight(){if(this.submenu){this.submenu.selectHighlight();}else {callSuper(this,'selectHighlight');}}, /**
     * @inherit
     */selectItem:function selectItem(id){var item=Selectivity.findNestedById(this.results,id);if(item && !item.disabled && !item.submenu){var options={id:id,item:item};if(this.selectivity.triggerEvent('selectivity-selecting',options)){this.selectivity.triggerEvent('selectivity-selected',options);}}}, /**
     * @inherit
     */showResults:function showResults(results,options){if(this.submenu){this.submenu.showResults(results,options);}else {callSuper(this,'showResults',results,options);}}, /**
     * @inherit
     */triggerClose:function triggerClose(){if(this.parentMenu){this.selectivity.$el.trigger('selectivity-close-submenu');}else {callSuper(this,'triggerClose');}}, /**
     * @inherit
     */triggerOpen:function triggerOpen(){if(this.parentMenu){this.selectivity.$el.trigger('selectivity-open-submenu');}else {callSuper(this,'triggerOpen');}}, /**
     * @private
     */_closeSubmenuAndHighlight:function _closeSubmenuAndHighlight(item){if(this.submenu){this.submenu.close();}this._doHighlight(item);}, /**
     * @private
     */_doHighlight:function _doHighlight(item){callSuper(this,'highlight',item);if(item.submenu && !this.submenu){var selectivity=this.selectivity;var Dropdown=selectivity.options.dropdown || Selectivity.Dropdown;if(Dropdown){var quotedId=Selectivity.quoteCssAttr(item.id);var $item=this.$('.selectivity-result-item[data-item-id=' + quotedId + ']');var $dropdownEl=this.$el;this.submenu = new Dropdown({items:item.submenu.items || null,parentMenu:this,position:item.submenu.positionDropdown || function($el){var dropdownPosition=$dropdownEl.position();var width=$dropdownEl.width();$el.css({left:dropdownPosition.left + width + 'px',top:$item.position().top + dropdownPosition.top + 'px'}).width(width);},query:item.submenu.query || null,selectivity:selectivity,showSearchInput:item.submenu.showSearchInput});this.submenu.search('');}}}});Selectivity.Dropdown = SelectivitySubmenu;Selectivity.findNestedById = function(array,id){for(var i=0,length=array.length;i < length;i++) {var item=array[i],result;if(item.id === id){result = item;}else if(item.children){result = Selectivity.findNestedById(item.children,id);}else if(item.submenu && item.submenu.items){result = Selectivity.findNestedById(item.submenu.items,id);}if(result){return result;}}return null;};module.exports = SelectivitySubmenu;},{"10":10,"8":8}],17:[function(_dereq_,module,exports){'use strict';var escape=_dereq_(4);var Selectivity=_dereq_(8);_dereq_(13); /**
 * Default set of templates to use with Selectivity.js.
 *
 * Note that every template can be defined as either a string, a function returning a string (like
 * Handlebars templates, for instance) or as an object containing a render function (like Hogan.js
 * templates, for instance).
 */Selectivity.Templates = { /**
     * Renders the dropdown.
     *
     * The template is expected to have at least one element with the class
     * 'selectivity-results-container', which is where all results will be added to.
     *
     * @param options Options object containing the following properties:
     *                dropdownCssClass - Optional CSS class to add to the top-level element.
     *                searchInputPlaceholder - Optional placeholder text to display in the search
     *                                         input in the dropdown.
     *                showSearchInput - Boolean whether a search input should be shown. If true,
     *                                  an input element with the 'selectivity-search-input' is
     *                                  expected.
     */dropdown:function dropdown(options){var extraClass=options.dropdownCssClass?' ' + options.dropdownCssClass:'',searchInput='';if(options.showSearchInput){extraClass += ' has-search-input';var placeholder=options.searchInputPlaceholder;searchInput = '<div class="selectivity-search-input-container">' + '<input type="text" class="selectivity-search-input"' + (placeholder?' placeholder="' + escape(placeholder) + '"':'') + '>' + '</div>';}return '<div class="selectivity-dropdown' + extraClass + '">' + searchInput + '<div class="selectivity-results-container"></div>' + '</div>';}, /**
     * Renders an error message in the dropdown.
     *
     * @param options Options object containing the following properties:
     *                escape - Boolean whether the message should be HTML-escaped.
     *                message - The message to display.
     */error:function error(options){return '<div class="selectivity-error">' + (options.escape?escape(options.message):options.message) + '</div>';}, /**
     * Renders a loading indicator in the dropdown.
     *
     * This template is expected to have an element with a 'selectivity-loading' class which may be
     * replaced with actual results.
     */loading:function loading(){return '<div class="selectivity-loading">' + Selectivity.Locale.loading + '</div>';}, /**
     * Load more indicator.
     *
     * This template is expected to have an element with a 'selectivity-load-more' class which, when
     * clicked, will load more results.
     */loadMore:function loadMore(){return '<div class="selectivity-load-more">' + Selectivity.Locale.loadMore + '</div>';}, /**
     * Renders multi-selection input boxes.
     *
     * The template is expected to have at least have elements with the following classes:
     * 'selectivity-multiple-input-container' - The element containing all the selected items and
     *                                          the input for selecting additional items.
     * 'selectivity-multiple-input' - The actual input element that allows the user to type to
     *                                search for more items. When selected items are added, they are
     *                                inserted right before this element.
     * 'selectivity-width-detector' - This element is optional, but important to make sure the
     *                                '.selectivity-multiple-input' element will fit in the
     *                                container. The width detector also has the
     *                                'select2-multiple-input' class on purpose to be able to detect
     *                                the width of text entered in the input element.
     *
     * @param options Options object containing the following property:
     *                enabled - Boolean whether the input is enabled.
     */multipleSelectInput:function multipleSelectInput(options){return '<div class="selectivity-multiple-input-container">' + (options.enabled?'<input type="text" autocomplete="off" autocorrect="off" ' + 'autocapitalize="off" ' + 'class="selectivity-multiple-input">' + '<span class="selectivity-multiple-input ' + 'selectivity-width-detector"></span>':'<div class="selectivity-multiple-input ' + 'selectivity-placeholder"></div>') + '<div class="selectivity-clearfix"></div>' + '</div>';}, /**
     * Renders a selected item in multi-selection input boxes.
     *
     * The template is expected to have a top-level element with the class
     * 'selectivity-multiple-selected-item'. This element is also required to have a 'data-item-id'
     * attribute with the ID set to that passed through the options object.
     *
     * An element with the class 'selectivity-multiple-selected-item-remove' should be present
     * which, when clicked, will cause the element to be removed.
     *
     * @param options Options object containing the following properties:
     *                highlighted - Boolean whether this item is currently highlighted.
     *                id - Identifier for the item.
     *                removable - Boolean whether a remove icon should be displayed.
     *                text - Text label which the user sees.
     */multipleSelectedItem:function multipleSelectedItem(options){var extraClass=options.highlighted?' highlighted':'';return '<span class="selectivity-multiple-selected-item' + extraClass + '" ' + 'data-item-id="' + escape(options.id) + '">' + (options.removable?'<a class="selectivity-multiple-selected-item-remove">' + '<i class="fa fa-remove"></i>' + '</a>':'') + escape(options.text) + '</span>';}, /**
     * Renders a message there are no results for the given query.
     *
     * @param options Options object containing the following property:
     *                term - Search term the user is searching for.
     */noResults:function noResults(options){var Locale=Selectivity.Locale;return '<div class="selectivity-error">' + (options.term?Locale.noResultsForTerm(options.term):Locale.noResults) + '</div>';}, /**
     * Renders a container for item children.
     *
     * The template is expected to have an element with the class 'selectivity-result-children'.
     *
     * @param options Options object containing the following property:
     *                childrenHtml - Rendered HTML for the children.
     */resultChildren:function resultChildren(options){return '<div class="selectivity-result-children">' + options.childrenHtml + '</div>';}, /**
     * Render a result item in the dropdown.
     *
     * The template is expected to have a top-level element with the class
     * 'selectivity-result-item'. This element is also required to have a 'data-item-id' attribute
     * with the ID set to that passed through the options object.
     *
     * @param options Options object containing the following properties:
     *                id - Identifier for the item.
     *                text - Text label which the user sees.
     *                disabled - Truthy if the item should be disabled.
     *                submenu - Truthy if the result item has a menu with subresults.
     */resultItem:function resultItem(options){return '<div class="selectivity-result-item' + (options.disabled?' disabled':'') + '"' + ' data-item-id="' + escape(options.id) + '">' + escape(options.text) + (options.submenu?'<i class="selectivity-submenu-icon fa fa-chevron-right"></i>':'') + '</div>';}, /**
     * Render a result label in the dropdown.
     *
     * The template is expected to have a top-level element with the class
     * 'selectivity-result-label'.
     *
     * @param options Options object containing the following properties:
     *                text - Text label.
     */resultLabel:function resultLabel(options){return '<div class="selectivity-result-label">' + escape(options.text) + '</div>';}, /**
     * Renders single-select input boxes.
     *
     * The template is expected to have at least one element with the class
     * 'selectivity-single-result-container' which is the element containing the selected item or
     * the placeholder.
     */singleSelectInput:'<div class="selectivity-single-select">' + '<input type="text" class="selectivity-single-select-input">' + '<div class="selectivity-single-result-container"></div>' + '<i class="fa fa-sort-desc selectivity-caret"></i>' + '</div>', /**
     * Renders the placeholder for single-select input boxes.
     *
     * The template is expected to have a top-level element with the class
     * 'selectivity-placeholder'.
     *
     * @param options Options object containing the following property:
     *                placeholder - The placeholder text.
     */singleSelectPlaceholder:function singleSelectPlaceholder(options){return '<div class="selectivity-placeholder">' + escape(options.placeholder) + '</div>';}, /**
     * Renders the selected item in single-select input boxes.
     *
     * The template is expected to have a top-level element with the class
     * 'selectivity-single-selected-item'. This element is also required to have a 'data-item-id'
     * attribute with the ID set to that passed through the options object.
     *
     * @param options Options object containing the following properties:
     *                id - Identifier for the item.
     *                removable - Boolean whether a remove icon should be displayed.
     *                text - Text label which the user sees.
     */singleSelectedItem:function singleSelectedItem(options){return '<span class="selectivity-single-selected-item" ' + 'data-item-id="' + escape(options.id) + '">' + (options.removable?'<a class="selectivity-single-selected-item-remove">' + '<i class="fa fa-remove"></i>' + '</a>':'') + escape(options.text) + '</span>';}, /**
     * Renders select-box inside single-select input that was initialized on
     * traditional <select> element.
     *
     * @param options Options object containing the following properties:
     *                name - Name of the <select> element.
     *                mode - Mode in which select exists, single or multiple.
     */selectCompliance:function selectCompliance(options){var mode=options.mode;var name=options.name;if(mode === 'multiple' && name.slice(-2) !== '[]'){name += '[]';}return '<select name="' + name + '"' + (mode === 'multiple'?' multiple':'') + '></select>';}, /**
     * Renders the selected item in compliance <select> element as <option>.
     *
     * @param options Options object containing the following properties
     *                id - Identifier for the item.
     *                text - Text label which the user sees.
     */selectOptionCompliance:function selectOptionCompliance(options){return '<option value="' + escape(options.id) + '" selected>' + escape(options.text) + '</option>';}};},{"13":13,"4":4,"8":8}],18:[function(_dereq_,module,exports){'use strict';var $=window.jQuery || window.Zepto;var Selectivity=_dereq_(8);function defaultTokenizer(input,selection,createToken,options){var createTokenItem=options.createTokenItem || function(token){return token?{id:token,text:token}:null;};var separators=options.tokenSeparators;function hasToken(input){return input?separators.some(function(separator){return input.indexOf(separator) > -1;}):false;}function takeToken(input){for(var i=0,length=input.length;i < length;i++) {if(separators.indexOf(input[i]) > -1){return {term:input.slice(0,i),input:input.slice(i + 1)};}}return {};}while(hasToken(input)) {var token=takeToken(input);if(token.term){var item=createTokenItem(token.term);if(item && !Selectivity.findById(selection,item.id)){createToken(item);}}input = token.input;}return input;} /**
 * Option listener that provides a default tokenizer which is used when the tokenSeparators option
 * is specified.
 *
 * @param options Options object. In addition to the options supported in the multi-input
 *                implementation, this may contain the following property:
 *                tokenSeparators - Array of string separators which are used to separate the search
 *                                  string into tokens. If specified and the tokenizer property is
 *                                  not set, the tokenizer property will be set to a function which
 *                                  splits the search term into tokens separated by any of the given
 *                                  separators. The tokens will be converted into selectable items
 *                                  using the 'createTokenItem' function. The default tokenizer also
 *                                  filters out already selected items.
 */Selectivity.OptionListeners.push(function(selectivity,options){if(options.tokenSeparators){options.allowedTypes = $.extend({tokenSeparators:'array'},options.allowedTypes);options.tokenizer = options.tokenizer || defaultTokenizer;}});},{"8":8,"jquery":"jquery"}],19:[function(_dereq_,module,exports){'use strict';var $=window.jQuery || window.Zepto;var Selectivity=_dereq_(8);function replaceSelectElement($el,options){var data=options.multiple?[]:null;var mapOptions=function mapOptions(){var $this=$(this);if($this.is('option')){var text=$this.text();var id=$this.attr('value') || text;if($this.prop('selected')){var item={id:id,text:text};if(options.multiple){data.push(item);}else {data = item;}}return {id:id,text:$this.attr('label') || text};}else {return {text:$this.attr('label'),children:$this.children('option,optgroup').map(mapOptions).get()};}};options.allowClear = 'allowClear' in options?options.allowClear:!$el.prop('required');var items=$el.children('option,optgroup').map(mapOptions).get();options.items = options.query?null:items;options.placeholder = options.placeholder || $el.data('placeholder') || '';options.data = data;var classes=($el.attr('class') || 'selectivity-input').split(' ');if(classes.indexOf('selectivity-input') === -1){classes.push('selectivity-input');}var $div=$('<div>').attr({'id':$el.attr('id'),'class':classes.join(' '),'style':$el.attr('style'),'data-name':$el.attr('name')});$el.replaceWith($div);return $div;}function bindTraditionalSelectEvents(selectivity){var $el=selectivity.$el;$el.on('selectivity-init',function(event,mode){$el.append(selectivity.template('selectCompliance',{mode:mode,name:$el.attr('data-name')})).removeAttr('data-name');}).on('selectivity-init change',function(){var data=selectivity._data;var $select=$el.find('select');if(data instanceof Array){$select.empty();data.forEach(function(item){$select.append(selectivity.template('selectOptionCompliance',item));});}else {if(data){$select.html(selectivity.template('selectOptionCompliance',data));}else {$select.empty();}}});} /**
 * Option listener providing support for converting traditional <select> boxes into Selectivity
 * instances.
 */Selectivity.OptionListeners.push(function(selectivity,options){var $el=selectivity.$el;if($el.is('select')){if($el.attr('autofocus')){setTimeout(function(){selectivity.focus();},1);}selectivity.$el = replaceSelectElement($el,options);selectivity.$el[0].selectivity = selectivity;bindTraditionalSelectEvents(selectivity);}});},{"8":8,"jquery":"jquery"}]},{},[1])(1);});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],40:[function(require,module,exports){
"use strict";

!(function (root, factory) {
    "function" == typeof define && define.amd ? // AMD. Register as an anonymous module unless amdModuleId is set
    define([], function () {
        return root.svg4everybody = factory();
    }) : "object" == typeof exports ? module.exports = factory() : root.svg4everybody = factory();
})(undefined, function () {
    /*! svg4everybody v2.0.3 | github.com/jonathantneal/svg4everybody */
    function embed(svg, target) {
        // if the target exists
        if (target) {
            // create a document fragment to hold the contents of the target
            var fragment = document.createDocumentFragment(),
                viewBox = !svg.getAttribute("viewBox") && target.getAttribute("viewBox");
            // conditionally set the viewBox on the svg
            viewBox && svg.setAttribute("viewBox", viewBox);
            // copy the contents of the clone into the fragment
            for ( // clone the target
            var clone = target.cloneNode(!0); clone.childNodes.length;) {
                fragment.appendChild(clone.firstChild);
            }
            // append the fragment into the svg
            svg.appendChild(fragment);
        }
    }
    function loadreadystatechange(xhr) {
        // listen to changes in the request
        xhr.onreadystatechange = function () {
            // if the request is ready
            if (4 === xhr.readyState) {
                // get the cached html document
                var cachedDocument = xhr._cachedDocument;
                // ensure the cached html document based on the xhr response
                cachedDocument || (cachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument(""), cachedDocument.body.innerHTML = xhr.responseText, xhr._cachedTarget = {}), // clear the xhr embeds list and embed each item
                xhr._embeds.splice(0).map(function (item) {
                    // get the cached target
                    var target = xhr._cachedTarget[item.id];
                    // ensure the cached target
                    target || (target = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id)),
                    // embed the target into the svg
                    embed(item.svg, target);
                });
            }
        }, // test the ready state change immediately
        xhr.onreadystatechange();
    }
    function svg4everybody(rawopts) {
        function oninterval() {
            // while the index exists in the live <use> collection
            for ( // get the cached <use> index
            var index = 0; index < uses.length;) {
                // get the current <use>
                var use = uses[index],
                    svg = use.parentNode;
                if (svg && /svg/i.test(svg.nodeName)) {
                    var src = use.getAttribute("xlink:href");
                    if (polyfill && (!opts.validate || opts.validate(src, svg, use))) {
                        // remove the <use> element
                        svg.removeChild(use);
                        // parse the src and get the url and id
                        var srcSplit = src.split("#"),
                            url = srcSplit.shift(),
                            id = srcSplit.join("#");
                        // if the link is external
                        if (url.length) {
                            // get the cached xhr request
                            var xhr = requests[url];
                            // ensure the xhr request exists
                            xhr || (xhr = requests[url] = new XMLHttpRequest(), xhr.open("GET", url), xhr.send(), xhr._embeds = []), // add the svg and id as an item to the xhr embeds list
                            xhr._embeds.push({
                                svg: svg,
                                id: id
                            }), // prepare the xhr ready state change event
                            loadreadystatechange(xhr);
                        } else {
                            // embed the local id into the svg
                            embed(svg, document.getElementById(id));
                        }
                    }
                } else {
                    // increase the index when the previous value was not "valid"
                    ++index;
                }
            }
            // continue the interval
            requestAnimationFrame(oninterval, 67);
        }
        var polyfill,
            opts = Object(rawopts),
            newerIEUA = /\bTrident\/[567]\b|\bMSIE (?:9|10)\.0\b/,
            webkitUA = /\bAppleWebKit\/(\d+)\b/,
            olderEdgeUA = /\bEdge\/12\.(\d+)\b/;
        polyfill = "polyfill" in opts ? opts.polyfill : newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537;
        // create xhr requests object
        var requests = {},
            requestAnimationFrame = window.requestAnimationFrame || setTimeout,
            uses = document.getElementsByTagName("use");
        // conditionally start the interval if the polyfill is active
        polyfill && oninterval();
    }
    return svg4everybody;
});

},{}],41:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
var toggleIcons = function toggleIcons(container) {

    if (!container) console.warn('toggleIcons missing container element');

    $(container).find('.toggleable-icon').each(function (indx, item) {
        $(item).hasClass('is-visible') ? $(item).removeClass('is-visible') : $(item).addClass('is-visible');
    });
};

exports.toggleIcons = toggleIcons;

},{}],42:[function(require,module,exports){
/*!
 * Zepto HTML5 Drag and Drop Sortable
 * Author: James Doyle(@james2doyle) http://ohdoylerules.com
 * Repository: https://github.com/james2doyle/zepto-dragswap
 * Licensed under the MIT license
 */
'use strict';

var _controllersAnalyticsController = require('./controllers/analytics-controller');

;(function ($) {
    $.fn.dragswap = function (options) {
        var dragSrcEl;
        function getPrefix() {
            var el = document.createElement('p'),
                getPre,
                transforms = {
                'webkitAnimation': '-webkit-animation',
                'OAnimation': '-o-animation',
                'msAnimation': '-ms-animation',
                'MozAnimation': '-moz-animation',
                'animation': 'animation'
            };
            document.body.insertBefore(el, null);
            for (var t in transforms) {
                if (el.style[t] !== undefined) {
                    el.style[t] = "translate3d(1px,1px,1px)";
                    getPre = window.getComputedStyle(el).getPropertyValue(transforms[t]);
                    // return the successful prefix
                    return t;
                }
            }
            document.body.removeChild(el);
        }
        this.defaultOptions = {
            element: 'li',
            overClass: 'over',
            moveClass: 'moving',
            dropClass: 'drop',
            dropAnimation: false,
            exclude: '.disabled',
            prefix: getPrefix(),
            dropComplete: function dropComplete() {
                return;
            }
        };

        function excludePattern(elem) {
            return elem.is(settings.excludePatt);
        }

        function onAnimEnd(elem) {
            var $elem = $(elem);
            $elem.addClass(settings.dropClass);
            // add an event for when the animation has finished
            $elem.on(settings.prefix + 'End', function () {
                // remove the class now that the animation is done
                $elem.removeClass(settings.dropClass);
            }, false);
        }

        function handleDragStart(e) {
            if (!excludePattern($(this))) {
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
            $(this).addClass(settings.moveClass);
            // get the dragging element
            dragSrcEl = this;
            // it is moving
            //console.log(e);
            if (e.originalEvent.dataTransfer) {
                var dt = e.originalEvent.dataTransfer;
                dt.effectAllowed = 'move';
                dt.setData('text', this.innerHTML);
            } else if (e.dataTransfer) {
                var dt = e.dataTransfer;
                dt.effectAllowed = 'move';
                dt.setData('text', this.innerHTML);
            }
        }

        function handleDragEnter(e) {
            // this / e.target is the current hover target.
            $(this).addClass(settings.overClass);
        }

        function handleDragLeave(e) {
            $(this).removeClass(settings.overClass); // this / e.target is previous target element.
        }

        function handleDragOver(e) {
            if (e.preventDefault) {
                e.preventDefault(); // Necessary. Allows us to drop.
            }
            if (e.originalEvent.dataTransfer) {
                e.originalEvent.dataTransfer.dropEffect = 'move'; // See the section on the DataTransfer object.
            } else if (e.dataTransfer) {
                    e.dataTransfer.dropEffect = 'move'; // See the section on the DataTransfer object.
                }
            return false;
        }

        function handleDrop(e) {
            // this / e.target is current target element.
            if (e.stopPropagation) {
                e.stopPropagation(); // Stops some browsers from redirecting.
            }
            if (!excludePattern($(this))) {
                console.log('prevent drop');
                return false;
            }

            // Don't do anything if dropping the same column we're draggi.
            if (dragSrcEl != this) {
                // Set the source column's HTML to the HTML of the column dropped on.
                var oldEl = {
                    html: this.innerHTML,
                    id: this.id
                };
                var newEl = {
                    html: dragSrcEl.innerHTML,
                    id: dragSrcEl.id
                };
                // swap all the data
                var that = this;
                // swap all the data
                this.innerHTML = newEl.html;
                this.id = newEl.id;
                $(dragSrcEl).hide();
                dragSrcEl.innerHTML = oldEl.html;
                dragSrcEl.id = oldEl.id;
                if ($(this).index() > $(dragSrcEl).index()) {
                    $(dragSrcEl).insertBefore(that);
                } else {
                    $(dragSrcEl).insertAfter(that);
                }
                $(dragSrcEl).show();
                if (settings.dropAnimation) {
                    onAnimEnd(this);
                    onAnimEnd(dragSrcEl);
                }
                $(this).siblings().removeAttr('draggable');
                $(this).siblings().filter(settings.excludePatt).attr('draggable', true);
                console.log('dropped');
                $('#validatePreference').val(1);
                $('#validateMyViewPriority').val(true);

                var channelTxt = $.trim($(this).find('td:nth-child(1)').html().split('<input')[0]);
                var eventDetails = {
                    event_name: "topic_position_change",
                    "page_name": analytics_data["page_name"],
                    "ga_eventCategory": "My View Settings Link",
                    "ga_eventAction": channelTxt
                };
                (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, eventDetails));
                eventDetails = {};

                settings.dropComplete();
            }
            return false;
        }

        var settings = $.extend({}, this.defaultOptions, options);
        if (settings.exclude) {
            if (typeof settings.exclude != 'string') {
                var excludePatt = '';
                for (var i = 0; i < settings.exclude.length; i++) {
                    excludePatt += ':not(' + settings.exclude[i] + ')';
                }
                settings.excludePatt = excludePatt;
            } else {
                settings.excludePatt = ':not(' + settings.exclude + ')';
            }
        }

        var method = String(options);
        var items = [];
        // check for the methods
        if (/^(toArray|toJSON)$/.test(method)) {
            if (method == 'toArray') {
                $(this).find(settings.element).each(function (index, elem) {
                    items.push(this.id);
                });
                return items;
            } else if (method == 'toJSON') {
                $(this).find(settings.element).each(function (index, elem) {
                    items[index] = {
                        id: this.id
                    };
                });
                return JSON.stringify(items);
            }
            return;
        }

        return this.each(function (index, item) {
            var $this = $(this);
            // select all but the disabled things
            var $elem = $this.find(settings.element);

            var target = this;
            var config = { childList: true };
            var observer = new MutationObserver(function (mutations) {
                console.log(mutations);
                for (var i = 0; i < mutations.length; i++) {
                    if (mutations[i].addedNodes.length != 0) {
                        for (var j = 0; j < mutations[i].addedNodes.length; j++) {
                            $(mutations[i].addedNodes[j]).siblings().removeAttr('draggable');
                            $(mutations[i].addedNodes[j]).siblings().filter(settings.excludePatt).attr('draggable', true);
                        }
                    }
                }
            });

            observer.observe(target, config);

            function handleDragEnd(e) {
                $this.removeClass(settings.moveClass);
                // this/e.target is the source node.
                //console.log('handleDragEnd');
                $elem = $this.find(settings.element);
                $elem.each(function (index, item) {
                    // console.log(item);
                    $(item).removeClass(settings.overClass);
                    $(item).removeClass(settings.moveClass);
                });
            }
            // set the items to draggable
            $elem.filter(settings.excludePatt).attr('draggable', true);

            $this.off('dragstart');
            $this.off('dragenter');
            $this.off('dragover');
            $this.off('dragleave');
            $this.off('drop');
            $this.off('dragend');

            $this.on('dragstart', settings.element, handleDragStart);
            $this.on('dragenter', settings.element, handleDragEnter);
            $this.on('dragover', settings.element, handleDragOver);
            $this.on('dragleave', settings.element, handleDragLeave);
            $this.on('drop', settings.element, handleDrop);
            $this.on('dragend', settings.element, handleDragEnd);
        });
    };
})(Zepto);

},{"./controllers/analytics-controller":25}],43:[function(require,module,exports){
/* Zepto v1.1.6 - zepto event ajax form ie - zeptojs.com/license */
"use strict";

var Zepto = (function () {
  function L(t) {
    return null == t ? String(t) : j[S.call(t)] || "object";
  }function Z(t) {
    return "function" == L(t);
  }function _(t) {
    return null != t && t == t.window;
  }function $(t) {
    return null != t && t.nodeType == t.DOCUMENT_NODE;
  }function D(t) {
    return "object" == L(t);
  }function M(t) {
    return D(t) && !_(t) && Object.getPrototypeOf(t) == Object.prototype;
  }function R(t) {
    return "number" == typeof t.length;
  }function k(t) {
    return s.call(t, function (t) {
      return null != t;
    });
  }function z(t) {
    return t.length > 0 ? n.fn.concat.apply([], t) : t;
  }function F(t) {
    return t.replace(/::/g, "/").replace(/([A-Z]+)([A-Z][a-z])/g, "$1_$2").replace(/([a-z\d])([A-Z])/g, "$1_$2").replace(/_/g, "-").toLowerCase();
  }function q(t) {
    return t in f ? f[t] : f[t] = new RegExp("(^|\\s)" + t + "(\\s|$)");
  }function H(t, e) {
    return "number" != typeof e || c[F(t)] ? e : e + "px";
  }function I(t) {
    var e, n;return u[t] || (e = a.createElement(t), a.body.appendChild(e), n = getComputedStyle(e, "").getPropertyValue("display"), e.parentNode.removeChild(e), "none" == n && (n = "block"), u[t] = n), u[t];
  }function V(t) {
    return "children" in t ? o.call(t.children) : n.map(t.childNodes, function (t) {
      return 1 == t.nodeType ? t : void 0;
    });
  }function B(n, i, r) {
    for (e in i) r && (M(i[e]) || A(i[e])) ? (M(i[e]) && !M(n[e]) && (n[e] = {}), A(i[e]) && !A(n[e]) && (n[e] = []), B(n[e], i[e], r)) : i[e] !== t && (n[e] = i[e]);
  }function U(t, e) {
    return null == e ? n(t) : n(t).filter(e);
  }function J(t, e, n, i) {
    return Z(e) ? e.call(t, n, i) : e;
  }function X(t, e, n) {
    null == n ? t.removeAttribute(e) : t.setAttribute(e, n);
  }function W(e, n) {
    var i = e.className || "",
        r = i && i.baseVal !== t;return n === t ? r ? i.baseVal : i : void (r ? i.baseVal = n : e.className = n);
  }function Y(t) {
    try {
      return t ? "true" == t || ("false" == t ? !1 : "null" == t ? null : +t + "" == t ? +t : /^[\[\{]/.test(t) ? n.parseJSON(t) : t) : t;
    } catch (e) {
      return t;
    }
  }function G(t, e) {
    e(t);for (var n = 0, i = t.childNodes.length; i > n; n++) G(t.childNodes[n], e);
  }var t,
      e,
      n,
      i,
      C,
      N,
      r = [],
      o = r.slice,
      s = r.filter,
      a = window.document,
      u = {},
      f = {},
      c = { "column-count": 1, columns: 1, "font-weight": 1, "line-height": 1, opacity: 1, "z-index": 1, zoom: 1 },
      l = /^\s*<(\w+|!)[^>]*>/,
      h = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
      p = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
      d = /^(?:body|html)$/i,
      m = /([A-Z])/g,
      g = ["val", "css", "html", "text", "data", "width", "height", "offset"],
      v = ["after", "prepend", "before", "append"],
      y = a.createElement("table"),
      x = a.createElement("tr"),
      b = { tr: a.createElement("tbody"), tbody: y, thead: y, tfoot: y, td: x, th: x, "*": a.createElement("div") },
      w = /complete|loaded|interactive/,
      E = /^[\w-]*$/,
      j = {},
      S = j.toString,
      T = {},
      O = a.createElement("div"),
      P = { tabindex: "tabIndex", readonly: "readOnly", "for": "htmlFor", "class": "className", maxlength: "maxLength", cellspacing: "cellSpacing", cellpadding: "cellPadding", rowspan: "rowSpan", colspan: "colSpan", usemap: "useMap", frameborder: "frameBorder", contenteditable: "contentEditable" },
      A = Array.isArray || function (t) {
    return t instanceof Array;
  };return T.matches = function (t, e) {
    if (!e || !t || 1 !== t.nodeType) return !1;var n = t.webkitMatchesSelector || t.mozMatchesSelector || t.oMatchesSelector || t.matchesSelector;if (n) return n.call(t, e);var i,
        r = t.parentNode,
        o = !r;return o && (r = O).appendChild(t), i = ~T.qsa(r, e).indexOf(t), o && O.removeChild(t), i;
  }, C = function (t) {
    return t.replace(/-+(.)?/g, function (t, e) {
      return e ? e.toUpperCase() : "";
    });
  }, N = function (t) {
    return s.call(t, function (e, n) {
      return t.indexOf(e) == n;
    });
  }, T.fragment = function (e, i, r) {
    var s, u, f;return h.test(e) && (s = n(a.createElement(RegExp.$1))), s || (e.replace && (e = e.replace(p, "<$1></$2>")), i === t && (i = l.test(e) && RegExp.$1), i in b || (i = "*"), f = b[i], f.innerHTML = "" + e, s = n.each(o.call(f.childNodes), function () {
      f.removeChild(this);
    })), M(r) && (u = n(s), n.each(r, function (t, e) {
      g.indexOf(t) > -1 ? u[t](e) : u.attr(t, e);
    })), s;
  }, T.Z = function (t, e) {
    return t = t || [], t.__proto__ = n.fn, t.selector = e || "", t;
  }, T.isZ = function (t) {
    return t instanceof T.Z;
  }, T.init = function (e, i) {
    var r;if (!e) return T.Z();if ("string" == typeof e) if ((e = e.trim(), "<" == e[0] && l.test(e))) r = T.fragment(e, RegExp.$1, i), e = null;else {
      if (i !== t) return n(i).find(e);r = T.qsa(a, e);
    } else {
      if (Z(e)) return n(a).ready(e);if (T.isZ(e)) return e;if (A(e)) r = k(e);else if (D(e)) r = [e], e = null;else if (l.test(e)) r = T.fragment(e.trim(), RegExp.$1, i), e = null;else {
        if (i !== t) return n(i).find(e);r = T.qsa(a, e);
      }
    }return T.Z(r, e);
  }, n = function (t, e) {
    return T.init(t, e);
  }, n.extend = function (t) {
    var e,
        n = o.call(arguments, 1);return "boolean" == typeof t && (e = t, t = n.shift()), n.forEach(function (n) {
      B(t, n, e);
    }), t;
  }, T.qsa = function (t, e) {
    var n,
        i = "#" == e[0],
        r = !i && "." == e[0],
        s = i || r ? e.slice(1) : e,
        a = E.test(s);return $(t) && a && i ? (n = t.getElementById(s)) ? [n] : [] : 1 !== t.nodeType && 9 !== t.nodeType ? [] : o.call(a && !i ? r ? t.getElementsByClassName(s) : t.getElementsByTagName(e) : t.querySelectorAll(e));
  }, n.contains = a.documentElement.contains ? function (t, e) {
    return t !== e && t.contains(e);
  } : function (t, e) {
    for (; e && (e = e.parentNode);) if (e === t) return !0;return !1;
  }, n.type = L, n.isFunction = Z, n.isWindow = _, n.isArray = A, n.isPlainObject = M, n.isEmptyObject = function (t) {
    var e;for (e in t) return !1;return !0;
  }, n.inArray = function (t, e, n) {
    return r.indexOf.call(e, t, n);
  }, n.camelCase = C, n.trim = function (t) {
    return null == t ? "" : String.prototype.trim.call(t);
  }, n.uuid = 0, n.support = {}, n.expr = {}, n.map = function (t, e) {
    var n,
        r,
        o,
        i = [];if (R(t)) for (r = 0; r < t.length; r++) n = e(t[r], r), null != n && i.push(n);else for (o in t) n = e(t[o], o), null != n && i.push(n);return z(i);
  }, n.each = function (t, e) {
    var n, i;if (R(t)) {
      for (n = 0; n < t.length; n++) if (e.call(t[n], n, t[n]) === !1) return t;
    } else for (i in t) if (e.call(t[i], i, t[i]) === !1) return t;return t;
  }, n.grep = function (t, e) {
    return s.call(t, e);
  }, window.JSON && (n.parseJSON = JSON.parse), n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (t, e) {
    j["[object " + e + "]"] = e.toLowerCase();
  }), n.fn = { forEach: r.forEach, reduce: r.reduce, push: r.push, sort: r.sort, indexOf: r.indexOf, concat: r.concat, map: function map(t) {
      return n(n.map(this, function (e, n) {
        return t.call(e, n, e);
      }));
    }, slice: function slice() {
      return n(o.apply(this, arguments));
    }, ready: function ready(t) {
      return w.test(a.readyState) && a.body ? t(n) : a.addEventListener("DOMContentLoaded", function () {
        t(n);
      }, !1), this;
    }, get: function get(e) {
      return e === t ? o.call(this) : this[e >= 0 ? e : e + this.length];
    }, toArray: function toArray() {
      return this.get();
    }, size: function size() {
      return this.length;
    }, remove: function remove() {
      return this.each(function () {
        null != this.parentNode && this.parentNode.removeChild(this);
      });
    }, each: function each(t) {
      return r.every.call(this, function (e, n) {
        return t.call(e, n, e) !== !1;
      }), this;
    }, filter: function filter(t) {
      return Z(t) ? this.not(this.not(t)) : n(s.call(this, function (e) {
        return T.matches(e, t);
      }));
    }, add: function add(t, e) {
      return n(N(this.concat(n(t, e))));
    }, is: function is(t) {
      return this.length > 0 && T.matches(this[0], t);
    }, not: function not(e) {
      var i = [];if (Z(e) && e.call !== t) this.each(function (t) {
        e.call(this, t) || i.push(this);
      });else {
        var r = "string" == typeof e ? this.filter(e) : R(e) && Z(e.item) ? o.call(e) : n(e);this.forEach(function (t) {
          r.indexOf(t) < 0 && i.push(t);
        });
      }return n(i);
    }, has: function has(t) {
      return this.filter(function () {
        return D(t) ? n.contains(this, t) : n(this).find(t).size();
      });
    }, eq: function eq(t) {
      return -1 === t ? this.slice(t) : this.slice(t, +t + 1);
    }, first: function first() {
      var t = this[0];return t && !D(t) ? t : n(t);
    }, last: function last() {
      var t = this[this.length - 1];return t && !D(t) ? t : n(t);
    }, find: function find(t) {
      var e,
          i = this;return e = t ? "object" == typeof t ? n(t).filter(function () {
        var t = this;return r.some.call(i, function (e) {
          return n.contains(e, t);
        });
      }) : 1 == this.length ? n(T.qsa(this[0], t)) : this.map(function () {
        return T.qsa(this, t);
      }) : n();
    }, closest: function closest(t, e) {
      var i = this[0],
          r = !1;for ("object" == typeof t && (r = n(t)); i && !(r ? r.indexOf(i) >= 0 : T.matches(i, t));) i = i !== e && !$(i) && i.parentNode;return n(i);
    }, parents: function parents(t) {
      for (var e = [], i = this; i.length > 0;) i = n.map(i, function (t) {
        return (t = t.parentNode) && !$(t) && e.indexOf(t) < 0 ? (e.push(t), t) : void 0;
      });return U(e, t);
    }, parent: function parent(t) {
      return U(N(this.pluck("parentNode")), t);
    }, children: function children(t) {
      return U(this.map(function () {
        return V(this);
      }), t);
    }, contents: function contents() {
      return this.map(function () {
        return o.call(this.childNodes);
      });
    }, siblings: function siblings(t) {
      return U(this.map(function (t, e) {
        return s.call(V(e.parentNode), function (t) {
          return t !== e;
        });
      }), t);
    }, empty: function empty() {
      return this.each(function () {
        this.innerHTML = "";
      });
    }, pluck: function pluck(t) {
      return n.map(this, function (e) {
        return e[t];
      });
    }, show: function show() {
      return this.each(function () {
        "none" == this.style.display && (this.style.display = ""), "none" == getComputedStyle(this, "").getPropertyValue("display") && (this.style.display = I(this.nodeName));
      });
    }, replaceWith: function replaceWith(t) {
      return this.before(t).remove();
    }, wrap: function wrap(t) {
      var e = Z(t);if (this[0] && !e) var i = n(t).get(0),
          r = i.parentNode || this.length > 1;return this.each(function (o) {
        n(this).wrapAll(e ? t.call(this, o) : r ? i.cloneNode(!0) : i);
      });
    }, wrapAll: function wrapAll(t) {
      if (this[0]) {
        n(this[0]).before(t = n(t));for (var e; (e = t.children()).length;) t = e.first();n(t).append(this);
      }return this;
    }, wrapInner: function wrapInner(t) {
      var e = Z(t);return this.each(function (i) {
        var r = n(this),
            o = r.contents(),
            s = e ? t.call(this, i) : t;o.length ? o.wrapAll(s) : r.append(s);
      });
    }, unwrap: function unwrap() {
      return this.parent().each(function () {
        n(this).replaceWith(n(this).children());
      }), this;
    }, clone: function clone() {
      return this.map(function () {
        return this.cloneNode(!0);
      });
    }, hide: function hide() {
      return this.css("display", "none");
    }, toggle: function toggle(e) {
      return this.each(function () {
        var i = n(this);(e === t ? "none" == i.css("display") : e) ? i.show() : i.hide();
      });
    }, prev: function prev(t) {
      return n(this.pluck("previousElementSibling")).filter(t || "*");
    }, next: function next(t) {
      return n(this.pluck("nextElementSibling")).filter(t || "*");
    }, html: function html(t) {
      return 0 in arguments ? this.each(function (e) {
        var i = this.innerHTML;n(this).empty().append(J(this, t, e, i));
      }) : 0 in this ? this[0].innerHTML : null;
    }, text: function text(t) {
      return 0 in arguments ? this.each(function (e) {
        var n = J(this, t, e, this.textContent);this.textContent = null == n ? "" : "" + n;
      }) : 0 in this ? this[0].textContent : null;
    }, attr: function attr(n, i) {
      var r;return "string" != typeof n || 1 in arguments ? this.each(function (t) {
        if (1 === this.nodeType) if (D(n)) for (e in n) X(this, e, n[e]);else X(this, n, J(this, i, t, this.getAttribute(n)));
      }) : this.length && 1 === this[0].nodeType ? !(r = this[0].getAttribute(n)) && n in this[0] ? this[0][n] : r : t;
    }, removeAttr: function removeAttr(t) {
      return this.each(function () {
        1 === this.nodeType && t.split(" ").forEach(function (t) {
          X(this, t);
        }, this);
      });
    }, prop: function prop(t, e) {
      return t = P[t] || t, 1 in arguments ? this.each(function (n) {
        this[t] = J(this, e, n, this[t]);
      }) : this[0] && this[0][t];
    }, data: function data(e, n) {
      var i = "data-" + e.replace(m, "-$1").toLowerCase(),
          r = 1 in arguments ? this.attr(i, n) : this.attr(i);return null !== r ? Y(r) : t;
    }, val: function val(t) {
      return 0 in arguments ? this.each(function (e) {
        this.value = J(this, t, e, this.value);
      }) : this[0] && (this[0].multiple ? n(this[0]).find("option").filter(function () {
        return this.selected;
      }).pluck("value") : this[0].value);
    }, offset: function offset(t) {
      if (t) return this.each(function (e) {
        var i = n(this),
            r = J(this, t, e, i.offset()),
            o = i.offsetParent().offset(),
            s = { top: r.top - o.top, left: r.left - o.left };"static" == i.css("position") && (s.position = "relative"), i.css(s);
      });if (!this.length) return null;var e = this[0].getBoundingClientRect();return { left: e.left + window.pageXOffset, top: e.top + window.pageYOffset, width: Math.round(e.width), height: Math.round(e.height) };
    }, css: function css(t, i) {
      if (arguments.length < 2) {
        var r,
            o = this[0];if (!o) return;if ((r = getComputedStyle(o, ""), "string" == typeof t)) return o.style[C(t)] || r.getPropertyValue(t);if (A(t)) {
          var s = {};return n.each(t, function (t, e) {
            s[e] = o.style[C(e)] || r.getPropertyValue(e);
          }), s;
        }
      }var a = "";if ("string" == L(t)) i || 0 === i ? a = F(t) + ":" + H(t, i) : this.each(function () {
        this.style.removeProperty(F(t));
      });else for (e in t) t[e] || 0 === t[e] ? a += F(e) + ":" + H(e, t[e]) + ";" : this.each(function () {
        this.style.removeProperty(F(e));
      });return this.each(function () {
        this.style.cssText += ";" + a;
      });
    }, index: function index(t) {
      return t ? this.indexOf(n(t)[0]) : this.parent().children().indexOf(this[0]);
    }, hasClass: function hasClass(t) {
      return t ? r.some.call(this, function (t) {
        return this.test(W(t));
      }, q(t)) : !1;
    }, addClass: function addClass(t) {
      return t ? this.each(function (e) {
        if ("className" in this) {
          i = [];var r = W(this),
              o = J(this, t, e, r);o.split(/\s+/g).forEach(function (t) {
            n(this).hasClass(t) || i.push(t);
          }, this), i.length && W(this, r + (r ? " " : "") + i.join(" "));
        }
      }) : this;
    }, removeClass: function removeClass(e) {
      return this.each(function (n) {
        if ("className" in this) {
          if (e === t) return W(this, "");i = W(this), J(this, e, n, i).split(/\s+/g).forEach(function (t) {
            i = i.replace(q(t), " ");
          }), W(this, i.trim());
        }
      });
    }, toggleClass: function toggleClass(e, i) {
      return e ? this.each(function (r) {
        var o = n(this),
            s = J(this, e, r, W(this));s.split(/\s+/g).forEach(function (e) {
          (i === t ? !o.hasClass(e) : i) ? o.addClass(e) : o.removeClass(e);
        });
      }) : this;
    }, scrollTop: function scrollTop(e) {
      if (this.length) {
        var n = ("scrollTop" in this[0]);return e === t ? n ? this[0].scrollTop : this[0].pageYOffset : this.each(n ? function () {
          this.scrollTop = e;
        } : function () {
          this.scrollTo(this.scrollX, e);
        });
      }
    }, scrollLeft: function scrollLeft(e) {
      if (this.length) {
        var n = ("scrollLeft" in this[0]);return e === t ? n ? this[0].scrollLeft : this[0].pageXOffset : this.each(n ? function () {
          this.scrollLeft = e;
        } : function () {
          this.scrollTo(e, this.scrollY);
        });
      }
    }, position: function position() {
      if (this.length) {
        var t = this[0],
            e = this.offsetParent(),
            i = this.offset(),
            r = d.test(e[0].nodeName) ? { top: 0, left: 0 } : e.offset();return i.top -= parseFloat(n(t).css("margin-top")) || 0, i.left -= parseFloat(n(t).css("margin-left")) || 0, r.top += parseFloat(n(e[0]).css("border-top-width")) || 0, r.left += parseFloat(n(e[0]).css("border-left-width")) || 0, { top: i.top - r.top, left: i.left - r.left };
      }
    }, offsetParent: function offsetParent() {
      return this.map(function () {
        for (var t = this.offsetParent || a.body; t && !d.test(t.nodeName) && "static" == n(t).css("position");) t = t.offsetParent;return t;
      });
    } }, n.fn.detach = n.fn.remove, ["width", "height"].forEach(function (e) {
    var i = e.replace(/./, function (t) {
      return t[0].toUpperCase();
    });n.fn[e] = function (r) {
      var o,
          s = this[0];return r === t ? _(s) ? s["inner" + i] : $(s) ? s.documentElement["scroll" + i] : (o = this.offset()) && o[e] : this.each(function (t) {
        s = n(this), s.css(e, J(this, r, t, s[e]()));
      });
    };
  }), v.forEach(function (t, e) {
    var i = e % 2;n.fn[t] = function () {
      var t,
          o,
          r = n.map(arguments, function (e) {
        return t = L(e), "object" == t || "array" == t || null == e ? e : T.fragment(e);
      }),
          s = this.length > 1;return r.length < 1 ? this : this.each(function (t, u) {
        o = i ? u : u.parentNode, u = 0 == e ? u.nextSibling : 1 == e ? u.firstChild : 2 == e ? u : null;var f = n.contains(a.documentElement, o);r.forEach(function (t) {
          if (s) t = t.cloneNode(!0);else if (!o) return n(t).remove();o.insertBefore(t, u), f && G(t, function (t) {
            null == t.nodeName || "SCRIPT" !== t.nodeName.toUpperCase() || t.type && "text/javascript" !== t.type || t.src || window.eval.call(window, t.innerHTML);
          });
        });
      });
    }, n.fn[i ? t + "To" : "insert" + (e ? "Before" : "After")] = function (e) {
      return n(e)[t](this), this;
    };
  }), T.Z.prototype = n.fn, T.uniq = N, T.deserializeValue = Y, n.zepto = T, n;
})();window.Zepto = Zepto, void 0 === window.$ && (window.$ = Zepto), (function (t) {
  function l(t) {
    return t._zid || (t._zid = e++);
  }function h(t, e, n, i) {
    if ((e = p(e), e.ns)) var r = d(e.ns);return (s[l(t)] || []).filter(function (t) {
      return !(!t || e.e && t.e != e.e || e.ns && !r.test(t.ns) || n && l(t.fn) !== l(n) || i && t.sel != i);
    });
  }function p(t) {
    var e = ("" + t).split(".");return { e: e[0], ns: e.slice(1).sort().join(" ") };
  }function d(t) {
    return new RegExp("(?:^| )" + t.replace(" ", " .* ?") + "(?: |$)");
  }function m(t, e) {
    return t.del && !u && t.e in f || !!e;
  }function g(t) {
    return c[t] || u && f[t] || t;
  }function v(e, i, r, o, a, u, f) {
    var h = l(e),
        d = s[h] || (s[h] = []);i.split(/\s/).forEach(function (i) {
      if ("ready" == i) return t(document).ready(r);var s = p(i);s.fn = r, s.sel = a, s.e in c && (r = function (e) {
        var n = e.relatedTarget;return !n || n !== this && !t.contains(this, n) ? s.fn.apply(this, arguments) : void 0;
      }), s.del = u;var l = u || r;s.proxy = function (t) {
        if ((t = j(t), !t.isImmediatePropagationStopped())) {
          t.data = o;var i = l.apply(e, t._args == n ? [t] : [t].concat(t._args));return i === !1 && (t.preventDefault(), t.stopPropagation()), i;
        }
      }, s.i = d.length, d.push(s), "addEventListener" in e && e.addEventListener(g(s.e), s.proxy, m(s, f));
    });
  }function y(t, e, n, i, r) {
    var o = l(t);(e || "").split(/\s/).forEach(function (e) {
      h(t, e, n, i).forEach(function (e) {
        delete s[o][e.i], "removeEventListener" in t && t.removeEventListener(g(e.e), e.proxy, m(e, r));
      });
    });
  }function j(e, i) {
    return (i || !e.isDefaultPrevented) && (i || (i = e), t.each(E, function (t, n) {
      var r = i[t];e[t] = function () {
        return this[n] = x, r && r.apply(i, arguments);
      }, e[n] = b;
    }), (i.defaultPrevented !== n ? i.defaultPrevented : "returnValue" in i ? i.returnValue === !1 : i.getPreventDefault && i.getPreventDefault()) && (e.isDefaultPrevented = x)), e;
  }function S(t) {
    var e,
        i = { originalEvent: t };for (e in t) w.test(e) || t[e] === n || (i[e] = t[e]);return j(i, t);
  }var n,
      e = 1,
      i = Array.prototype.slice,
      r = t.isFunction,
      o = function o(t) {
    return "string" == typeof t;
  },
      s = {},
      a = {},
      u = ("onfocusin" in window),
      f = { focus: "focusin", blur: "focusout" },
      c = { mouseenter: "mouseover", mouseleave: "mouseout" };a.click = a.mousedown = a.mouseup = a.mousemove = "MouseEvents", t.event = { add: v, remove: y }, t.proxy = function (e, n) {
    var s = 2 in arguments && i.call(arguments, 2);if (r(e)) {
      var a = function a() {
        return e.apply(n, s ? s.concat(i.call(arguments)) : arguments);
      };return a._zid = l(e), a;
    }if (o(n)) return s ? (s.unshift(e[n], e), t.proxy.apply(null, s)) : t.proxy(e[n], e);throw new TypeError("expected function");
  }, t.fn.bind = function (t, e, n) {
    return this.on(t, e, n);
  }, t.fn.unbind = function (t, e) {
    return this.off(t, e);
  }, t.fn.one = function (t, e, n, i) {
    return this.on(t, e, n, i, 1);
  };var x = function x() {
    return !0;
  },
      b = function b() {
    return !1;
  },
      w = /^([A-Z]|returnValue$|layer[XY]$)/,
      E = { preventDefault: "isDefaultPrevented", stopImmediatePropagation: "isImmediatePropagationStopped", stopPropagation: "isPropagationStopped" };t.fn.delegate = function (t, e, n) {
    return this.on(e, t, n);
  }, t.fn.undelegate = function (t, e, n) {
    return this.off(e, t, n);
  }, t.fn.live = function (e, n) {
    return t(document.body).delegate(this.selector, e, n), this;
  }, t.fn.die = function (e, n) {
    return t(document.body).undelegate(this.selector, e, n), this;
  }, t.fn.on = function (e, s, a, u, f) {
    var c,
        l,
        h = this;return e && !o(e) ? (t.each(e, function (t, e) {
      h.on(t, s, a, e, f);
    }), h) : (o(s) || r(u) || u === !1 || (u = a, a = s, s = n), (r(a) || a === !1) && (u = a, a = n), u === !1 && (u = b), h.each(function (n, r) {
      f && (c = function (t) {
        return y(r, t.type, u), u.apply(this, arguments);
      }), s && (l = function (e) {
        var n,
            o = t(e.target).closest(s, r).get(0);return o && o !== r ? (n = t.extend(S(e), { currentTarget: o, liveFired: r }), (c || u).apply(o, [n].concat(i.call(arguments, 1)))) : void 0;
      }), v(r, e, u, a, s, l || c);
    }));
  }, t.fn.off = function (e, i, s) {
    var a = this;return e && !o(e) ? (t.each(e, function (t, e) {
      a.off(t, i, e);
    }), a) : (o(i) || r(s) || s === !1 || (s = i, i = n), s === !1 && (s = b), a.each(function () {
      y(this, e, s, i);
    }));
  }, t.fn.trigger = function (e, n) {
    return e = o(e) || t.isPlainObject(e) ? t.Event(e) : j(e), e._args = n, this.each(function () {
      e.type in f && "function" == typeof this[e.type] ? this[e.type]() : "dispatchEvent" in this ? this.dispatchEvent(e) : t(this).triggerHandler(e, n);
    });
  }, t.fn.triggerHandler = function (e, n) {
    var i, r;return this.each(function (s, a) {
      i = S(o(e) ? t.Event(e) : e), i._args = n, i.target = a, t.each(h(a, e.type || e), function (t, e) {
        return r = e.proxy(i), i.isImmediatePropagationStopped() ? !1 : void 0;
      });
    }), r;
  }, "focusin focusout focus blur load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select keydown keypress keyup error".split(" ").forEach(function (e) {
    t.fn[e] = function (t) {
      return 0 in arguments ? this.bind(e, t) : this.trigger(e);
    };
  }), t.Event = function (t, e) {
    o(t) || (e = t, t = e.type);var n = document.createEvent(a[t] || "Events"),
        i = !0;if (e) for (var r in e) "bubbles" == r ? i = !!e[r] : n[r] = e[r];return n.initEvent(t, i, !0), j(n);
  };
})(Zepto), (function (t) {
  function h(e, n, i) {
    var r = t.Event(n);return t(e).trigger(r, i), !r.isDefaultPrevented();
  }function p(t, e, i, r) {
    return t.global ? h(e || n, i, r) : void 0;
  }function d(e) {
    e.global && 0 === t.active++ && p(e, null, "ajaxStart");
  }function m(e) {
    e.global && ! --t.active && p(e, null, "ajaxStop");
  }function g(t, e) {
    var n = e.context;return e.beforeSend.call(n, t, e) === !1 || p(e, n, "ajaxBeforeSend", [t, e]) === !1 ? !1 : void p(e, n, "ajaxSend", [t, e]);
  }function v(t, e, n, i) {
    var r = n.context,
        o = "success";n.success.call(r, t, o, e), i && i.resolveWith(r, [t, o, e]), p(n, r, "ajaxSuccess", [e, n, t]), x(o, e, n);
  }function y(t, e, n, i, r) {
    var o = i.context;i.error.call(o, n, e, t), r && r.rejectWith(o, [n, e, t]), p(i, o, "ajaxError", [n, i, t || e]), x(e, n, i);
  }function x(t, e, n) {
    var i = n.context;n.complete.call(i, e, t), p(n, i, "ajaxComplete", [e, n]), m(n);
  }function b() {}function w(t) {
    return t && (t = t.split(";", 2)[0]), t && (t == f ? "html" : t == u ? "json" : s.test(t) ? "script" : a.test(t) && "xml") || "text";
  }function E(t, e) {
    return "" == e ? t : (t + "&" + e).replace(/[&?]{1,2}/, "?");
  }function j(e) {
    e.processData && e.data && "string" != t.type(e.data) && (e.data = t.param(e.data, e.traditional)), !e.data || e.type && "GET" != e.type.toUpperCase() || (e.url = E(e.url, e.data), e.data = void 0);
  }function S(e, n, i, r) {
    return t.isFunction(n) && (r = i, i = n, n = void 0), t.isFunction(i) || (r = i, i = void 0), { url: e, data: n, success: i, dataType: r };
  }function C(e, n, i, r) {
    var o,
        s = t.isArray(n),
        a = t.isPlainObject(n);t.each(n, function (n, u) {
      o = t.type(u), r && (n = i ? r : r + "[" + (a || "object" == o || "array" == o ? n : "") + "]"), !r && s ? e.add(u.name, u.value) : "array" == o || !i && "object" == o ? C(e, u, i, n) : e.add(n, u);
    });
  }var i,
      r,
      e = 0,
      n = window.document,
      o = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
      s = /^(?:text|application)\/javascript/i,
      a = /^(?:text|application)\/xml/i,
      u = "application/json",
      f = "text/html",
      c = /^\s*$/,
      l = n.createElement("a");l.href = window.location.href, t.active = 0, t.ajaxJSONP = function (i, r) {
    if (!("type" in i)) return t.ajax(i);var f,
        h,
        o = i.jsonpCallback,
        s = (t.isFunction(o) ? o() : o) || "jsonp" + ++e,
        a = n.createElement("script"),
        u = window[s],
        c = function c(e) {
      t(a).triggerHandler("error", e || "abort");
    },
        l = { abort: c };return r && r.promise(l), t(a).on("load error", function (e, n) {
      clearTimeout(h), t(a).off().remove(), "error" != e.type && f ? v(f[0], l, i, r) : y(null, n || "error", l, i, r), window[s] = u, f && t.isFunction(u) && u(f[0]), u = f = void 0;
    }), g(l, i) === !1 ? (c("abort"), l) : (window[s] = function () {
      f = arguments;
    }, a.src = i.url.replace(/\?(.+)=\?/, "?$1=" + s), n.head.appendChild(a), i.timeout > 0 && (h = setTimeout(function () {
      c("timeout");
    }, i.timeout)), l);
  }, t.ajaxSettings = { type: "GET", beforeSend: b, success: b, error: b, complete: b, context: null, global: !0, xhr: function xhr() {
      return new window.XMLHttpRequest();
    }, accepts: { script: "text/javascript, application/javascript, application/x-javascript", json: u, xml: "application/xml, text/xml", html: f, text: "text/plain" }, crossDomain: !1, timeout: 0, processData: !0, cache: !0 }, t.ajax = function (e) {
    var a,
        o = t.extend({}, e || {}),
        s = t.Deferred && t.Deferred();for (i in t.ajaxSettings) void 0 === o[i] && (o[i] = t.ajaxSettings[i]);d(o), o.crossDomain || (a = n.createElement("a"), a.href = o.url, a.href = a.href, o.crossDomain = l.protocol + "//" + l.host != a.protocol + "//" + a.host), o.url || (o.url = window.location.toString()), j(o);var u = o.dataType,
        f = /\?.+=\?/.test(o.url);if ((f && (u = "jsonp"), o.cache !== !1 && (e && e.cache === !0 || "script" != u && "jsonp" != u) || (o.url = E(o.url, "_=" + Date.now())), "jsonp" == u)) return f || (o.url = E(o.url, o.jsonp ? o.jsonp + "=?" : o.jsonp === !1 ? "" : "callback=?")), t.ajaxJSONP(o, s);var C,
        h = o.accepts[u],
        p = {},
        m = function m(t, e) {
      p[t.toLowerCase()] = [t, e];
    },
        x = /^([\w-]+:)\/\//.test(o.url) ? RegExp.$1 : window.location.protocol,
        S = o.xhr(),
        T = S.setRequestHeader;if ((s && s.promise(S), o.crossDomain || m("X-Requested-With", "XMLHttpRequest"), m("Accept", h || "*/*"), (h = o.mimeType || h) && (h.indexOf(",") > -1 && (h = h.split(",", 2)[0]), S.overrideMimeType && S.overrideMimeType(h)), (o.contentType || o.contentType !== !1 && o.data && "GET" != o.type.toUpperCase()) && m("Content-Type", o.contentType || "application/x-www-form-urlencoded"), o.headers)) for (r in o.headers) m(r, o.headers[r]);if ((S.setRequestHeader = m, S.onreadystatechange = function () {
      if (4 == S.readyState) {
        S.onreadystatechange = b, clearTimeout(C);var e,
            n = !1;if (S.status >= 200 && S.status < 300 || 304 == S.status || 0 == S.status && "file:" == x) {
          u = u || w(o.mimeType || S.getResponseHeader("content-type")), e = S.responseText;try {
            "script" == u ? (1, eval)(e) : "xml" == u ? e = S.responseXML : "json" == u && (e = c.test(e) ? null : t.parseJSON(e));
          } catch (i) {
            n = i;
          }n ? y(n, "parsererror", S, o, s) : v(e, S, o, s);
        } else y(S.statusText || null, S.status ? "error" : "abort", S, o, s);
      }
    }, g(S, o) === !1)) return S.abort(), y(null, "abort", S, o, s), S;if (o.xhrFields) for (r in o.xhrFields) S[r] = o.xhrFields[r];var N = "async" in o ? o.async : !0;S.open(o.type, o.url, N, o.username, o.password);for (r in p) T.apply(S, p[r]);return o.timeout > 0 && (C = setTimeout(function () {
      S.onreadystatechange = b, S.abort(), y(null, "timeout", S, o, s);
    }, o.timeout)), S.send(o.data ? o.data : null), S;
  }, t.get = function () {
    return t.ajax(S.apply(null, arguments));
  }, t.post = function () {
    var e = S.apply(null, arguments);return e.type = "POST", t.ajax(e);
  }, t.getJSON = function () {
    var e = S.apply(null, arguments);return e.dataType = "json", t.ajax(e);
  }, t.fn.load = function (e, n, i) {
    if (!this.length) return this;var a,
        r = this,
        s = e.split(/\s/),
        u = S(e, n, i),
        f = u.success;return s.length > 1 && (u.url = s[0], a = s[1]), u.success = function (e) {
      r.html(a ? t("<div>").html(e.replace(o, "")).find(a) : e), f && f.apply(r, arguments);
    }, t.ajax(u), this;
  };var T = encodeURIComponent;t.param = function (e, n) {
    var i = [];return i.add = function (e, n) {
      t.isFunction(n) && (n = n()), null == n && (n = ""), this.push(T(e) + "=" + T(n));
    }, C(i, e, n), i.join("&").replace(/%20/g, "+");
  };
})(Zepto), (function (t) {
  t.fn.serializeArray = function () {
    var e,
        n,
        i = [],
        r = function r(t) {
      return t.forEach ? t.forEach(r) : void i.push({ name: e, value: t });
    };return this[0] && t.each(this[0].elements, function (i, o) {
      n = o.type, e = o.name, e && "fieldset" != o.nodeName.toLowerCase() && !o.disabled && "submit" != n && "reset" != n && "button" != n && "file" != n && ("radio" != n && "checkbox" != n || o.checked) && r(t(o).val());
    }), i;
  }, t.fn.serialize = function () {
    var t = [];return this.serializeArray().forEach(function (e) {
      t.push(encodeURIComponent(e.name) + "=" + encodeURIComponent(e.value));
    }), t.join("&");
  }, t.fn.submit = function (e) {
    if (0 in arguments) this.bind("submit", e);else if (this.length) {
      var n = t.Event("submit");this.eq(0).trigger(n), n.isDefaultPrevented() || this.get(0).submit();
    }return this;
  };
})(Zepto), (function (t) {
  "__proto__" in {} || t.extend(t.zepto, { Z: function Z(e, n) {
      return e = e || [], t.extend(e, t.fn), e.selector = n || "", e.__Z = !0, e;
    }, isZ: function isZ(e) {
      return "array" === t.type(e) && "__Z" in e;
    } });try {
    getComputedStyle(void 0);
  } catch (e) {
    var n = getComputedStyle;window.getComputedStyle = function (t) {
      try {
        return n(t);
      } catch (e) {
        return null;
      }
    };
  }
})(Zepto);

//     Zepto.js
//     (c) 2010-2016 Thomas Fuchs
//     Zepto.js may be freely distributed under the MIT license.
//
//     https://github.com/madrobby/zepto/blob/master/src/selector.js

!(function (t) {
  function n(n) {
    return n = t(n), !(!n.width() && !n.height()) && "none" !== n.css("display");
  }function e(t, n) {
    t = t.replace(/=#\]/g, '="#"]');var e,
        i,
        r = u.exec(t);if (r && r[2] in s && (e = s[r[2]], i = r[3], t = r[1], i)) {
      var o = Number(i);i = isNaN(o) ? i.replace(/^["']|["']$/g, "") : o;
    }return n(t, e, i);
  }var i = t.zepto,
      r = i.qsa,
      o = i.matches,
      s = t.expr[":"] = { visible: function visible() {
      return n(this) ? this : void 0;
    }, hidden: function hidden() {
      return n(this) ? void 0 : this;
    }, selected: function selected() {
      return this.selected ? this : void 0;
    }, checked: function checked() {
      return this.checked ? this : void 0;
    }, parent: function parent() {
      return this.parentNode;
    }, first: function first(t) {
      return 0 === t ? this : void 0;
    }, last: function last(t, n) {
      return t === n.length - 1 ? this : void 0;
    }, eq: function eq(t, n, e) {
      return t === e ? this : void 0;
    }, contains: function contains(n, e, i) {
      return t(this).text().indexOf(i) > -1 ? this : void 0;
    }, has: function has(t, n, e) {
      return i.qsa(this, e).length ? this : void 0;
    } },
      u = new RegExp("(.*):(\\w+)(?:\\(([^)]+)\\))?$\\s*"),
      c = /^\s*>/,
      h = "Zepto" + +new Date();i.qsa = function (n, o) {
    return e(o, function (e, s, u) {
      try {
        var a;!e && s ? e = "*" : c.test(e) && (a = t(n).addClass(h), e = "." + h + " " + e);var f = r(n, e);
      } catch (d) {
        throw (console.error("error performing selector: %o", o), d);
      } finally {
        a && a.removeClass(h);
      }return s ? i.uniq(t.map(f, function (t, n) {
        return s.call(t, n, f, u);
      })) : f;
    });
  }, i.matches = function (t, n) {
    return e(n, function (n, e, i) {
      return (!n || o(t, n)) && (!e || e.call(t, null, i) === t);
    });
  };
})(Zepto);

},{}]},{},[34])

//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJEOi9Qcm9qZWN0cy9UUzMvd2ViL1dlYnNpdGUvanMvRHJhZ0Ryb3BUb3VjaC5qcyIsIkQ6L1Byb2plY3RzL1RTMy93ZWIvV2Vic2l0ZS9qcy9jYWxjdWxhdGVQb3B1cE9mZnNldHMuanMiLCJEOi9Qcm9qZWN0cy9UUzMvd2ViL1dlYnNpdGUvanMvY2Fyb3VzZWwvb3dsLmNhcm91c2VsLmpzIiwiRDovUHJvamVjdHMvVFMzL3dlYi9XZWJzaXRlL2pzL2Nhcm91c2VsL3plcHRvLmRhdGEuanMiLCJEOi9Qcm9qZWN0cy9UUzMvd2ViL1dlYnNpdGUvanMvY29tcG9uZW50cy9BTUNoYXJ0cy1tZXJnZXMtYWNxdWlzaXRpb24uanMiLCJEOi9Qcm9qZWN0cy9UUzMvd2ViL1dlYnNpdGUvanMvY29tcG9uZW50cy9hcnRpY2xlLXNpZGViYXItY29tcG9uZW50LmpzIiwiRDovUHJvamVjdHMvVFMzL3dlYi9XZWJzaXRlL2pzL2NvbXBvbmVudHMvZHluYW1pYy1jb250ZW50LXJlY29tZW5kYXRpb24uanMiLCJEOi9Qcm9qZWN0cy9UUzMvd2ViL1dlYnNpdGUvanMvY29tcG9uZW50cy9pZC1jb21wYXJlY2hhcnQuanMiLCJEOi9Qcm9qZWN0cy9UUzMvd2ViL1dlYnNpdGUvanMvY29tcG9uZW50cy9pZC1jb21wYXJlZmluYW5jaWFscmVzdWx0cy5qcyIsIkQ6L1Byb2plY3RzL1RTMy93ZWIvV2Vic2l0ZS9qcy9jb21wb25lbnRzL2lkLWZpbmFuY2lhbC1yZXNwb25zaXZlLXRhYmxlLmpzIiwiRDovUHJvamVjdHMvVFMzL3dlYi9XZWJzaXRlL2pzL2NvbXBvbmVudHMvaWQtbWVyZ2UtYWNxdWlzdGlvbi5qcyIsIkQ6L1Byb2plY3RzL1RTMy93ZWIvV2Vic2l0ZS9qcy9jb21wb25lbnRzL2lkLXF1YXJ0ZXJseS1yZXNwb25zaXZlLXRhYmxlLmpzIiwiRDovUHJvamVjdHMvVFMzL3dlYi9XZWJzaXRlL2pzL2NvbXBvbmVudHMvaWQtcmVzcG9uc2l2ZS10YWJsZS5qcyIsIkQ6L1Byb2plY3RzL1RTMy93ZWIvV2Vic2l0ZS9qcy9jb21wb25lbnRzL2xhdGVzdC1jYXN1YWxpdHkuanMiLCJEOi9Qcm9qZWN0cy9UUzMvd2ViL1dlYnNpdGUvanMvY29tcG9uZW50cy9sbC1jYXN1YWxpdHktZGV0YWlsLmpzIiwiRDovUHJvamVjdHMvVFMzL3dlYi9XZWJzaXRlL2pzL2NvbXBvbmVudHMvbGwtY2FzdWFsaXR5LWxpc3RpbmcuanMiLCJEOi9Qcm9qZWN0cy9UUzMvd2ViL1dlYnNpdGUvanMvY29tcG9uZW50cy9sbC1tYXJrZXQtZGF0YS10b29sLmpzIiwiRDovUHJvamVjdHMvVFMzL3dlYi9XZWJzaXRlL2pzL2NvbXBvbmVudHMvbGwtbWFya2V0LWRhdGEuanMiLCJEOi9Qcm9qZWN0cy9UUzMvd2ViL1dlYnNpdGUvanMvY29tcG9uZW50cy9sbC10YW5rZXItZml4dHVyZXMuanMiLCJEOi9Qcm9qZWN0cy9UUzMvd2ViL1dlYnNpdGUvanMvY29tcG9uZW50cy9teXZpZXctc2V0dGluZ3MuanMiLCJEOi9Qcm9qZWN0cy9UUzMvd2ViL1dlYnNpdGUvanMvY29tcG9uZW50cy9wYWdpbmF0aW9uLmpzIiwiRDovUHJvamVjdHMvVFMzL3dlYi9XZWJzaXRlL2pzL2NvbXBvbmVudHMvcGVyc29uYWxpc2F0aW9uLmpzIiwiRDovUHJvamVjdHMvVFMzL3dlYi9XZWJzaXRlL2pzL2NvbXBvbmVudHMvc2F2ZS1zZWFyY2gtY29tcG9uZW50LmpzIiwiRDovUHJvamVjdHMvVFMzL3dlYi9XZWJzaXRlL2pzL2NvbXBvbmVudHMvdmlkZW8tbWluaS5qcyIsIkQ6L1Byb2plY3RzL1RTMy93ZWIvV2Vic2l0ZS9qcy9jb250cm9sbGVycy9hbmFseXRpY3MtY29udHJvbGxlci5qcyIsIkQ6L1Byb2plY3RzL1RTMy93ZWIvV2Vic2l0ZS9qcy9jb250cm9sbGVycy9ib29rbWFyay1jb250cm9sbGVyLmpzIiwiRDovUHJvamVjdHMvVFMzL3dlYi9XZWJzaXRlL2pzL2NvbnRyb2xsZXJzL2Zvcm0tY29udHJvbGxlci5qcyIsIkQ6L1Byb2plY3RzL1RTMy93ZWIvV2Vic2l0ZS9qcy9jb250cm9sbGVycy9saWdodGJveC1tb2RhbC1jb250cm9sbGVyLmpzIiwiRDovUHJvamVjdHMvVFMzL3dlYi9XZWJzaXRlL2pzL2NvbnRyb2xsZXJzL3BvcC1vdXQtY29udHJvbGxlci5qcyIsIkQ6L1Byb2plY3RzL1RTMy93ZWIvV2Vic2l0ZS9qcy9jb250cm9sbGVycy9yZWdpc3Rlci1jb250cm9sbGVyLmpzIiwiRDovUHJvamVjdHMvVFMzL3dlYi9XZWJzaXRlL2pzL2NvbnRyb2xsZXJzL3Jlc2V0LXBhc3N3b3JkLWNvbnRyb2xsZXIuanMiLCJEOi9Qcm9qZWN0cy9UUzMvd2ViL1dlYnNpdGUvanMvY29udHJvbGxlcnMvc29ydGFibGUtdGFibGUtY29udHJvbGxlci5qcyIsIkQ6L1Byb2plY3RzL1RTMy93ZWIvV2Vic2l0ZS9qcy9jb250cm9sbGVycy90b29sdGlwLWNvbnRyb2xsZXIuanMiLCJEOi9Qcm9qZWN0cy9UUzMvd2ViL1dlYnNpdGUvanMvaW5kZXguanMiLCJEOi9Qcm9qZWN0cy9UUzMvd2ViL1dlYnNpdGUvanMvanNjb29raWUuanMiLCJEOi9Qcm9qZWN0cy9UUzMvd2ViL1dlYnNpdGUvanMvbW9kYWwuanMiLCJEOi9Qcm9qZWN0cy9UUzMvd2ViL1dlYnNpdGUvanMvbmV3c2xldHRlci1zaWdudXAuanMiLCJEOi9Qcm9qZWN0cy9UUzMvd2ViL1dlYnNpdGUvanMvc2VhcmNoLXBhZ2UuanMiLCJEOi9Qcm9qZWN0cy9UUzMvd2ViL1dlYnNpdGUvanMvc2VsZWN0aXZpdHktZnVsbC5qcyIsIkQ6L1Byb2plY3RzL1RTMy93ZWIvV2Vic2l0ZS9qcy9zdmc0ZXZlcnlib2R5LmpzIiwiRDovUHJvamVjdHMvVFMzL3dlYi9XZWJzaXRlL2pzL3RvZ2dsZS1pY29ucy5qcyIsIkQ6L1Byb2plY3RzL1RTMy93ZWIvV2Vic2l0ZS9qcy96ZXB0by5kcmFnc3dhcC5qcyIsIkQ6L1Byb2plY3RzL1RTMy93ZWIvV2Vic2l0ZS9qcy96ZXB0by5taW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLElBQUksYUFBYTtJQUFFLGNBQWMsR0FBRyxJQUFJLENBQUM7QUFDekMsQ0FBQyxVQUFVLGVBQWUsRUFBRTtBQUN4QixnQkFBWSxDQUFDOzs7Ozs7Ozs7OztBQVdiLFFBQUksWUFBWSxHQUFHLENBQUMsWUFBWTtBQUM1QixpQkFBUyxZQUFZLEdBQUc7QUFDcEIsZ0JBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDO0FBQzFCLGdCQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztBQUM1QixnQkFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7U0FDbkI7QUFDRCxjQUFNLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFOzs7OztBQUt4RCxlQUFHLEVBQUUsZUFBWTtBQUNiLHVCQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7YUFDM0I7QUFDRCxlQUFHLEVBQUUsYUFBVSxLQUFLLEVBQUU7QUFDbEIsb0JBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO2FBQzVCO0FBQ0Qsc0JBQVUsRUFBRSxJQUFJO0FBQ2hCLHdCQUFZLEVBQUUsSUFBSTtTQUNyQixDQUFDLENBQUM7QUFDSCxjQUFNLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsZUFBZSxFQUFFOzs7Ozs7QUFNM0QsZUFBRyxFQUFFLGVBQVk7QUFDYix1QkFBTyxJQUFJLENBQUMsY0FBYyxDQUFDO2FBQzlCO0FBQ0QsZUFBRyxFQUFFLGFBQVUsS0FBSyxFQUFFO0FBQ2xCLG9CQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQzthQUMvQjtBQUNELHNCQUFVLEVBQUUsSUFBSTtBQUNoQix3QkFBWSxFQUFFLElBQUk7U0FDckIsQ0FBQyxDQUFDO0FBQ0gsY0FBTSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsU0FB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QyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsR0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsSUFBSSxHQUFDLGtCQUFrQixFQUFDLENBQUMsQ0FBQSxDQUFBO0lBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUMsT0FBTyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBQyxVQUFTLENBQUMsRUFBQztBQUFDLFFBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFBO0lBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtHQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQTtFQUFDLElBQUksQ0FBQyxHQUFDLE9BQU8sT0FBTyxJQUFFLFVBQVUsSUFBRSxPQUFPLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0NBQUMsQ0FBQSxDQUFFLEVBQUMsQ0FBQyxFQUFDLENBQUMsVUFBUyxPQUFPLEVBQUMsTUFBTSxFQUFDLE9BQU8sRUFBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0QvZCxjQUFZ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Q0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOzs7O0FBSTVELFFBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEtBQUssTUFBTSxFQUFFO0FBQzVELFNBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0tBQzFDLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRTtBQUNyRCxTQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztLQUMxQzs7O0FBR0QsUUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRTtBQUM5RCxTQUFJLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7S0FDMUI7O0FBRUQsUUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRTtBQUMxQyxTQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7S0FDL0I7O0FBRUQsUUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRTtBQUMzQixTQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7QUFDbEMsU0FBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0FBQzFCLFNBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztLQUMzQjtBQUNELFFBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUU7QUFDM0IsU0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJ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LElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUU7QUFDMUUsV0FBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDdEM7TUFDRCxNQUFNO0FBQ04sVUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDdEM7O0FBRUQsU0FBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7OztBQUdsRCxTQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFO0FBQzNCLFlBQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7QUFDN0QsVUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUNyQixXQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztPQUNqRSxNQUFNO0FBQ04sV0FBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7T0FDbEU7TUFDRDs7QUFFRCxTQUFJLENBQUMsR0FBRyxD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QUFDLElBQUksRUFBRTtBQUN0QixTQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztLQUNwRDs7QUFFRCxRQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtBQUMvQyxTQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztLQUNwRDs7QUFFRCxRQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO0FBQzdDLFNBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0tBQ3BEOzs7QUFHRCxRQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDOzs7QUFHakQsUUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtBQUN2SCxTQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdkMsVUFBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDM0MsVUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUU7QUFDbEUsV0FBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztPQUNyQjtNQUNEO0FBQ0QsU0FBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQSxBQUFDLENBQUM7QUFDOUcsU0FBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztLQUNqRDs7O0FBR0QsUUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtBQUN4QixTQUFJLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3BFLE1BQU07QUFDTixTQUFJLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDakQ7OztBQUdELFFBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtBQUNqRSxTQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDakIsU0FBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDdEM7SUFDRCxDQUFDOzs7Ozs7OztBQVFGLE1BQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLFlBQVk7OztBQUdwQyxRQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxLQUFLLEtBQUssRUFBRTtBQUN4QyxTQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztBQUNyRSxTQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztLQUN0RTs7OztBQUlELFFBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUU7QUFDckIsV0FBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFlBQVk7QUFDOUIsVUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7TUFDckQsQ0FBQSxDQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNsQixNQUFNO0FBQ04sU0FBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7S0FDckQ7O0FBRUQsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFOzs7QUFHeEMsU0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFO0FBQzVCLFVBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO01BQzlFOztBQUVELFNBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUU7QUFDckIsVUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7TUFDakUsTUFBTTtBQUNOLFVBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO01BQ2xFOztBQUVELFNBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUU7QUFDeEQsVUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7TUFDbkc7S0FDRDs7O0FBR0QsUUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDeEMsQ0FBQzs7Ozs7Ozs7QUFRRixNQUFHLENBQUMsU0FBUyxDQUFDLFVB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O0tBQ2xEOztBQUVELFFBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNwQixDQUFDOzs7Ozs7O0FBT0YsTUFBRyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsWUFBWTs7QUFFeEMsUUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLFlBQVksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLGVBQWUsQ0FBQSxBQUFDLEVBQUU7QUFDMUcsU0FBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ3RFLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLFdBQVcsRUFBRTtBQUN0RSxTQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDdEUsTUFBTTtBQUNOLFNBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQ2hFO0lBQ0QsQ0FBQzs7Ozs7Ozs7QUFRRixNQUFHLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxVQUFVLEtBQUssRUFBRTtBQUM1QyxRQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsYUFBYSxJQUFJLEtBQUssSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDOztBQUV0RCxRQUFJLEVBQUUsQ0FB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Q0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUM7OztBQUc5RSxRQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDOUMsUUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQzlDLFFBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDOzs7QUFHNUQsUUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLEVBQUU7QUFDM0IsU0FBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsT0FBTyxHQUFHLE1BQU0sQ0FBQztLQUMzRCxNQUFNLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFO0FBQ2xDLFNBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLE1BQU0sR0FBRyxPQUFPLENBQUM7S0FDM0Q7O0FBRUQsUUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtBQUN0QixTQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEtBQUssT0FBTyxFQUFFO0FBQzVGLFVBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO01BQ3BDLE1BQU0sSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJ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QixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDLENBQUM7O0FBRTlHLGFBQVMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLG1CQUFtQixFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNsRSxRQUFJLFFBQVEsR0FBRyxTQUFTLENBQUMsTUFBTSxLQUFLLEVBQUUsQ0FBQzs7QUFFdkMsV0FBTyxRQUFRLEtBQUssSUFBSSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEQsQ0FBQzs7Ozs7Ozs7OztBQVVGLE1BQUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxFQUFFO0FBQ3BDLFFBQUksSUFBSSxHQUFHLENBQUM7UUFDUixJQUFJLEdBQUcsRUFBRSxDQUFDOztBQUVkLFFBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRTs7QUFFM0IsVUFBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3hDLFVBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFO0FBQ2pFLFdBQUksR0FBRyxDQUFDLENBQUM7T0FDVCxNQUFNLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FB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RCxRQUFJLENBQUMsSUFBSSxDQUFDLFlBQVU7QUFBRSxhQUFPLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQTtLQUFFLENBQUMsQ0FBQTtHQUN0RCxDQUFBOztBQUVELEdBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxHQUFHLFVBQVMsS0FBSyxFQUFFO0FBQ2hDLFFBQUksT0FBTyxLQUFLLElBQUksUUFBUSxFQUFFLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ3hELFdBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFVO0FBQ3pCLFVBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7VUFBRSxLQUFLLEdBQUcsRUFBRSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUMxQyxVQUFJLEtBQUssRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLEVBQUUsVUFBUyxHQUFHLEVBQUM7QUFDN0MsZUFBTyxLQUFLLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQTtPQUMzQyxDQUFDLENBQUE7S0FDSCxDQUFDLENBQUE7R0FDSCxDQUdBOzs7QUFBQSxHQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBUyxVQUFVLEVBQUM7QUFDL0MsUUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQUM3QixLQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLFlBQVc7QUFDNUIsVUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUM3QixVQUFJLFVBQVUsS0FBSyxRQUFRLEVBQUUsUUFBUSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDMUQsY0FBUSxDQUFDLFVBQVUsRUFBRSxDQUFBO0FBQ3JCLGFBQU8sTUFBTSxDQUFDLElB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LFdBQVcsR0FBRyxHQUFHO0tBQ2hGLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxHQUFHO0tBQ2hGLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxHQUFHO0tBQ2hGLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxHQUFHO0tBQ2hGLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxHQUFHO0tBQ2hGLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxHQUFHO0tBQ25GLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWTtLQUN0SCxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVk7S0FDdEgsYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENB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QUcsR0FBRztLQUNoRixZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsR0FBRztLQUNoRixZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsR0FBRztLQUNoRixZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsR0FBRztLQUNoRixZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsR0FBRztLQUNoRixZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsR0FBRztLQUNoRixZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsR0FBRztLQUNoRixZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsR0FBRztLQUNoRixhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVk7S0FDekgsYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZO0tBQ3RILGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWTtLQUN0SCxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVk7S0FDdEgsYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZO0tBQ3RILGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWTtLQUN0SCxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FBRyxZQUFZLEdBQUcsRUFBRTtLQUN6RSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FBRyxFQUFFLEdBQUcsWUFBWTtLQUN6RSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FBRyxZQUFZLEdBQUcsRUFBRTtLQUN6RSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FBRyxFQUFFLEdBQUcsWUFBWTtLQUN6RSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FBRyxZQUFZLEdBQUcsRUFBRTtLQUN6RSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FBRyxFQUFFLEdBQUcsWUFBWTtLQUN6RSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FBRyxZQUFZLEdBQUcsRUFBRTtLQUN6RSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FBRyxFQUFFLEdBQUcsWUFBWTtLQUN6RSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FBRyxZQUFZLEdBQUcsRUFBRTtLQUN6RSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FBRyxFQUFFLEdBQUcsWUFBWTtLQUN6RSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FBRyxZQUFZLEdBQUcsRUFBRTtLQUN6RSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FBRyxFQUFFLEdBQUcsWUFBWSxDQUFDOztBQUUzRSxLQUFJLFdBQVcsR0FBRyxxQ0FBcUMsQ0FBQztBQUN4RCxZQUFXLElBQUksbUVBQW1FLENBQUM7QUFDbkYsWUFBVyxJQUFJLElBQUksQ0FB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Q0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksR0FBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUEsR0FBSSxDQUFDLEFBQUMsQ0FBQyxDQUFDOzs7QUFHdEgsTUFBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUN6RTs7O0FBR0QsTUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDOzs7O0FBSTlCLEtBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7Ozs7O0FBSy9DLE1BQUksRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDOzs7QUFHL0QsTUFBRyxFQUFFLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxRQUFRLEVBQUU7O0FBRWhDLE1BQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFJLElBQUksR0FBRyxDQUFDLEFBQUMsR0FBRyxJQUFJLENBQUM7O0FBRTdFLEtBQUUsQ0FBQyxVQUFVLEdBQ1YsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUksSUFBSSxHQUFHLENBQUMsQUFBQyxHQUNyRSxJQUFJLENBQUM7O0FBRVIsTUFBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxVQUFVLEdBQzVCLEdBQUcsSUFBSSxFQUFFLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQSxBQUFDLEdBQUcsSUFBSSxHQUNoQyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUksSUFBSSxHQUFHLENBQUMsQUFBQyxHQUFHLENBQUMsQ0FBQSxBQUFDLEdBQUcsSUFBSSxDQUFDOzs7R0FHdEQsTUFBTSxJQUFHLEVBQUUsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLEVBQUU7O0FBRXRDLE9BQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFJLElBQUksR0FBRyxDQUFDLEFBQUMsR0FBRyxJQUFJLENBQUM7O0FBRS9FLE1BQUUsQ0FBQyxZQUFZLEdBQ1osR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUksSUFBSSxHQUFHLENBQUMsQUFBQyxHQUN2RSxJQUFJLENBQUM7O0FBRVIsT0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxZQUFZLEdBQzlCLEdBQUcsSUFBSSxFQUFFLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQSxBQUFDLEdBQUcsSUFBSSxHQUNsQyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUksSUFBSSxHQUFHLENBQUMsQUFBQyxHQUFHLENBQUMsQ0FBQSxBQUFDLEdBQUcsSUFBSSxDQUFDOzs7SUFHdEQsTUFBTSxJQUFHLEVBQUUsSUFBSSxRQUFRLEVBQUU7O0FBRXpCLFFBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFJLElBQUksR0FBRyxDQUFDLEFBQUMsR0FBRyxJQUFJLENBQUM7O0FBRTlFLE9BQUUsQ0FBQyxXQUFXLEdBQ1gsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUksSUFBSSxHQUFHLENBQUMsQUFBQyxHQUN0RSxJQUFJLENBQUM7O0FBRVIsUUFBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxXQUFXLEdBQzdCLEdBQUcsSUFBSSxFQUFFLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQSxBQUFDLEdBQUcsSUFBSSxHQUNqQyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUksSUFBSSxHQUFHLENBQUMsQUFBQyxHQUFHLENBQUMsQ0FBQSxBQUFDLEdBQUcsSUFBSSxDQUFDOzs7S0FHdEQsTUFBTTs7QUFFTixTQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUksSUFBSSxHQUFHLENBQUMsQUFBQyxHQUFHLElBQUksQ0FBQzs7OztBQUk1RCxTQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFJLElBQUksR0FBRyxDQUFDLEFBQUMsR0FBRyxDQUFDLENBQUEsQUFBQyxHQUFHLElBQUksQ0FBQztNQUNyRTs7O0FBR0QsS0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFJLElBQUksR0FBRyxDQUFDLEFBQUMsR0FBRyxJQUFJLENBQUM7OztBQUcxRCxLQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDOzs7QUFHL0MsS0FBRyxDQUFDLEdBQUcs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V0FBVyxJQUFFLE9BQU8sSUFBSSxLQUFHLENBQUMsR0FBQyxJQUFJLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQyxDQUFDLENBQUEsQ0FBQyxVQUFVLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLE9BQU8sSUFBRSxVQUFVLElBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLHNCQUFzQixHQUFDLENBQUMsR0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxJQUFJLEdBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxPQUFPLElBQUUsVUFBVSxJQUFFLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQ3h5QixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQzdMLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFB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RS9DLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FDaEUsWUFBWSxDQUFDLEFBRWIsSUFBSSxVQUFVLENBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsSUFBSSxDQUNkLEdBQVEsQ0FBRSxJQUFJLENBQ2QsR0FBUSxDQUFFLElBQUksQ0FDZCxHQUFRLENBQUUsSUFBSSxDQUNkLEdBQVEsQ0FBRSxJQUFJLENBQ2QsR0FBUSxDQUFFLElBQUksQ0FDZCxHQUFRLENBQUUsSUFBSSxDQUNkLEdBQVEsQ0FBRSxJQUFJLENBQ2QsR0FBUSxDQUFFLElBQUksQ0FDZCxHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLElBQUksQ0FDZCxHQUFRLENBQUUsSUFBSSxDQUNkLEdBQVEsQ0FBRSxJQUFJLENBQ2QsR0FBUSxDQUFFLElBQUksQ0FDZCxHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsSUFBSSxDQUNkLEdBQVEsQ0FBRSxJQUFJLENBQ2QsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsSUFBSSxDQUNkLEdBQVEsQ0FBRSxJQUFJLENBQ2QsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLElBQUksQ0FDZCxHQUFRLENBQUUsSUFBSSxDQUNkLEdBQVEsQ0FBRSxJQUFJLENBQ2QsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLElBQUksQ0FDZCxHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxJQUFJLENBQ2QsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxJQUFJLENBQ2QsR0FBUSxDQUFFLElBQUksQ0FDZCxHQUFRLENBQUUsSUFBSSxDQUNkLEdBQVEsQ0FBRSxJQUFJLENBQ2QsR0FBUSxDQUFFLElBQUksQ0FDZCxHQUFRLENBQUUsSUFBSSxDQUNkLEdBQVEsQ0FBRSxJQUFJLENBQ2QsR0FBUSxDQUFFLElBQUksQ0FDZCxHQUFRLENBQUUsSUFBSSxDQUNkLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxJQUFJLENBQ2QsR0FBUSxDQUFFLElBQUksQ0FDZCxHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsSUFBSSxDQUNkLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLElBQUksQ0FDZCxHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLElBQUksQ0FDZCxHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsSUFBSSxDQUNkLEdBQVEsQ0FBRSxJQUFJLENBQ2QsR0FBUSxDQUFFLElBQUksQ0FDZCxHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLElBQUksQ0FDZCxHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxJQUFJLENBQ2QsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEsQ0FBRSxHQUFHLENBQ2IsR0FBUSxDQUFFLEdBQUcsQ0FDYixHQUFRLENBQUUsR0FBRyxDQUNiLEdBQVEs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RyxDQUFDLENBQUUsTUFBTSxDQUFHLEtBQUssQ0FBQyxNQUFNLENBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBRSxDQUFDLEVBQUUsRUFBRSxDQUNwRCxPQUFRLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFDaEIsS0FBSyxHQUFHLENBQUMsQUFDVCxLQUFLLEdBQUcsQ0FBQyxBQUNULEtBQUssSUFBSSxDQUNMLE9BQU8sQ0FBRSxJQUFJLENBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUUsS0FBSyxDQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFFLENBQUMsQUFDbEUsS0FBSyxHQUFHLENBQUMsQUFDVCxLQUFLLElBQUksQ0FDTCxHQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FDbEMsT0FBTyxDQUFFLElBQUksQ0FBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBRSxLQUFLLENBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUNqRSxBQUNELE1BQU0sQUFDVixLQUFLLEdBQUcsQ0FDSixHQUFHLENBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRSxNQUFPLENBQUMsR0FBRyxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRSxBQUNsRCxNQUFNLEFBQ1YsUUFDSSxTQUFTLENBQ1osQ0FDSixBQUNELE9BQU8sRUFBRSxDQUFDLENBQ2IsQUFFRCxNQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUNwQixJQUFJLEtBQUssQ0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQUFDN0IsR0FBSSxLQUFLLENBQUMsSUFBSSxDQUFFLENBQ1osSUFBSSxJQUFJLENBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxBQUN2QyxHQUFJLElBQUksSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBLEFBQUMsQ0FBRSxDQUNoRSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDckIsQ0FDSixBQUNELEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQ3ZCLEFBRUQsT0FBTyxLQUFLLENBQUMsQ0FDaEI7Ozs7R0FPRCxTQUFTLGdCQUFnQixDQUFDLE9BQU8sQ0FBRSxDQUUvQixtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFFLE9BQU8sQ0FBQyxDQUFDLENBQzNDOztHQUtELElBQUksU0FBUyxDQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUUsbUJBQW1CLENBQUU7O09BS3hFLGVBQWUsQ0FBRSx5QkFBUyxNQUFNLENBQUUsQ0FFOUIsU0FBUyxDQUFDLElBQUksQ0FBRSxpQkFBaUIsQ0FBRSxNQUFNLENBQUMsQ0FBQyxBQUUzQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBRSxDQUFBLFVBQVcsQ0FDekIsSUFBSSxJQUFJLENBQUcsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLEFBQ3hCLEdBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFFLENBQzlCLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDbkMsQ0FDSixDQUFBLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDakI7Ozs7O09BUUQsVUFBVSxDQUFFLG9CQUFTLE9BQU8sQ0FBRSxDQUUxQixPQUFPLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUNmLGVBQWUsQ0FBRSxlQUFlLENBQ2hDLFlBQVksQ0FBRSxLQUFLLENBQ25CLFNBQVMsQ0FBRSxjQUFjLENBQzVCLENBQUUsT0FBTyxDQUFDLENBQUMsQUFFWixTQUFTLENBQUMsSUFBSSxDQUFFLFlBQVksQ0FBRSxPQUFPLENBQUMsQ0FBQyxDQUMxQyxDQUVKLENBQUMsQ0FBQyxBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsZ0JBQWdCLENBQUMsQ0FFaEUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQ3pFLFlBQVksQ0FBQyxBQUViLElBQUksV0FBVyxDQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUU3QixJQUFJLGFBQWEsQ0FBRyxDQUFDLENBQUMsQUFDdEIsSUFBSSxjQUFjLENBQUcsRUFBRSxDQUFDLEFBQ3hCLElBQUksU0FBUyxDQUFHLEVBQUUsQ0FBQyxBQUNuQixJQUFJLFVBQVUsQ0FBRyxFQUFFLENBQUMsQUFDcEIsSUFBSSxPQUFPLENBQUcsQ0FBQyxDQUFDLEFBQ2hCLElBQUksWUFBWSxDQUFHLEVBQUUsQ0FBQzs7R0FLdEIsU0FBUyxRQUFRLENBQUMsV0FBVyxDQUFFLE1BQU0sQ0FBRSxDQUVuQyxJQUFJLGVBQWUsQ0FBRyxLQUFLLENBQUMsQUFDNUIsSUFBSSxZQUFZLENBQUcsSUFBSSxDQUFDOzs7O09BT3hCLFNBQVMsYUFBYSxDQUFDLFFBQVEsQ0FBRSxLQUFLLENBQUUsQ0FFcEMsU0FBUyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUUsUUFBUSxDQUFFLENBQzNDLElBQUssSUFBSSxDQUFDLENBQUcsQ0FBQyxDQUFFLE1BQU0sQ0FBRyxTQUFTLENBQUMsTUFBTSxDQUFFLENBQUMsR0FBRyxNQUFNLENBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FDeEQsR0FBSSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBRSxDQUM5QixPQUFPLENBQUMsQ0FBQyxDQUNaLENBQ0osQUFDRCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQ2IsQUFFRCxTQUFTLGlCQUFpQixFQUFHLENBQ3pCLElBQUksR0FBRyxDQUFDLEFBQ1IsR0FBSSxRQUFRLENBQUMsaUJBQWlCLENBQUUsQ0FDNUIsSUFBSSxRQUFRLENBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUMsQUFDdkUsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsd0NBQXdDLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQy9FLEtBQU0sR0FBSSxRQUFRLENBQUMsbUJBQW1CLENBQUUsQ0FDckMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUM5QyxLQUFNLENBQ0gsT0FBTztDQUNWLEFBRUQsSUFBSSxRQUFRLENBQUcsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLEFBQzlCLEdBQUksQ0FBQyxRQUFRLENBQUUsQ0FDWCxPQUFPLENBQ1YsQUFFRCxJQUFJLEdBQUcsQ0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLEFBQ3ZCLElBQUksYUFBYSxDQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsQUFDL0MsSUFBSSxRQUFRLENBQUksR0FBRyxDQUFDLFdBQVcsQ0FBRyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxBQUFDLENBQUMsQUFDcEUsR0FBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxhQUFhLEdBQUcsUUFBUSxDQUFFLENBQzNDLEdBQUcsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDLEFBQ3JDLFFBQVEsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUcsR0FBRyxDQUFHLEdBQUcsR0FBRyxhQUFhLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FDakYsQ0FDSixBQUVELEdBQUksUUFBUSxDQUFDLE9BQU8sQ0FBRSxDQUNsQixhQUFhLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBRSxLQUFLLENBQUMsQ0FBQyxBQUN2QyxPQUFPLENBQ1YsQUFFRCxJQUFJLE9BQU8sQ0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLEFBQy9CLEdBQUksT0FBTyxDQUFDLE1BQU0sQ0FBRSxDQUNoQixJQUFJLFFBQVEsQ0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLENBQUMsQUFDdEQsSUFBSSxZQUFZLENBQUksS0FBSyxHQUFHLENBQUMsQ0FBRyxDQUFDLENBQUcsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEFBQUMsQ0FBQyxBQUN6RCxJQUFJLEtBQUssQ0FBRyxZQUFZLENBQUMsQUFDekIsSUFBSSxpQkFBaUIsQ0FBRyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQUFDbkQsR0FBSSxpQkFBaUIsQ0FBRSxDQUNuQixJQUFJLFFBQVEsQ0FBRyxXQUFXLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDLEFBQzlELEtBQUssR0FBRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUUsZ0JBQWdCLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxBQUM5RSxHQUFJLEtBQUssR0FBRyxDQUFDLENBQUcsS0FBSyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUcsS0FBSyxHQUFHLENBQUMsQ0FBRSxDQUNsRCxHQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUUsQ0FDbEIsUUFBUSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQUFDN0IsaUJBQWlCLEVBQUUsQ0FBQyxBQUNwQixPQUFPLENBQ1YsS0FBTSxDQUNILEtBQUssR0FBRyxZQUFZLENBQUMsQ0FDeEIsQ0FDSixDQUNKLEFBRUQsSUFBSSxNQUFNLENBQUcsV0FBVyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQ1AsV0FBVyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ2pGLEdBQUksTUFBTSxDQUFFLENBQ1IsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUUsQ0FBRSxLQUFLLENBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUUsQ0FBQyxDQUFDLEFBQ3hELGlCQUFpQixFQUFFLENBQUMsQ0FDdkIsQ0FDSixDQUNKLEFBRUQsU0FBUyxPQUFPLENBQUMsS0FBSyxDQUFFLENBRXBCLElBQUksUUFBUSxDQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsQUFDcEMsR0FBSSxRQUFRLENBQUUsQ0FDVixHQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssYUFBYSxDQUFFLENBQ2pDLEdBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUUsQ0FDZixHQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUUsQ0FDbEIsSUFBSSxPQUFPLENBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxBQUMvQixNQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FDcEIsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FDN0IsQUFDRCxZQUFZLEdBQUcsT0FBTyxDQUFDLENBQzFCLEFBRUQsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDLEFBQ3ZCLGVBQWUsR0FBRyxJQUFJLENBQUMsQ0FDMUIsQ0FDSixLQUFNLEdBQUksS0FBSyxDQUFDLE9BQU8sS0FBSyxjQUFjLENBQUUsQ0FDekMsYUFBYSxDQUFDLFFBQVEsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUM5QixLQUFNLEdBQUksS0FBSyxDQUFDLE9BQU8sS0FBSyxZQUFZLENBQUUsQ0FDdkMsYUFBYSxDQUFDLFFBQVEsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQy9CLEtBQU0sR0FBSSxLQUFLLENBQUMsT0FBTyxLQUFLLE9BQU8sQ0FBRSxDQUNsQyxVQUFVLENBQUMsVUFBVyxDQUNsQixXQUFXLENBQUMsS0FBSyxDQUFDLENBQUUsU0FBUyxDQUFFLEtBQUssQ0FBRSxDQUFDLENBQUMsQ0FDM0MsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUNULEtBQU0sR0FBSSxLQUFLLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBRSxDQUNwQyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7Q0FDMUIsQ0FDSixDQUNKLEFBRUQsU0FBUyxXQUFXLENBQUMsS0FBSyxDQUFFLENBRXhCLFNBQVMsSUFBSSxFQUFHLENBQ1osR0FBSSxXQUFXLENBQUMsT0FBTyxDQUFDLFlBQVksS0FBSyxLQUFLLENBQUUsQ0FDNUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLENBQ3RCLENBQ0osQUFFRCxJQUFJLFFBQVEsQ0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLEFBQ3BDLEdBQUksZUFBZSxDQUFFLENBQ2pCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQyxBQUN2QixlQUFlLEdBQUcsS0FBSyxDQUFDLEFBRXhCLEdBQUksWUFBWSxDQUFFLENBQ2QsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDLEFBQ3JCLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxBQUNwQixZQUFZLEdBQUcsSUFBSSxDQUFDLENBQ3ZCLENBQ0osS0FBTSxHQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssYUFBYSxDQUFFLENBQ3hDLEdBQUksQ0FBQyxRQUFRLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUUsQ0FDN0MsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQ3ZCLENBQ0osS0FBTSxHQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssU0FBUyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBRSxDQUN0RCxHQUFJLFFBQVEsQ0FBRSxDQUNWLFFBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUM5QixLQUFNLEdBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEtBQUssS0FBSyxDQUFFLENBQ25ELElBQUksRUFBRSxDQUFDLENBQ1YsQUFFRCxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FDMUIsS0FBTSxHQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssVUFBVSxDQUFFLENBQ3JDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxBQUVwQixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FDMUIsS0FBTSxHQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssY0FBYyxJQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssWUFBWSxDQUFFOzs7QUFJM0UsSUFBSSxFQUFFLENBQUMsQUFFUCxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FDMUIsS0FBTSxDQUNILElBQUksRUFBRSxDQUFDLENBQ1YsQ0FDSixBQUVELE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUUsV0FBVyxDQUFDLENBQUMsQ0FDMUQsQUFFRCxXQUFXLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBRS9DLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQy9DLFlBQVksQ0FBQyxBQUViLElBQUksTUFBTSxDQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUN4QixJQUFJLFdBQVcsQ0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7O0dBUTdCLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FFakIsU0FBUyxDQUFFLG1CQUFTLElBQUksQ0FBRSxDQUFFLE9BQU8saUNBQWlDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFFLENBQy9GLE9BQU8sQ0FBRSxZQUFZLENBQ3JCLFFBQVEsQ0FBRSxjQUFjLENBQ3hCLGtCQUFrQixDQUFFLDRCQUFTLGFBQWEsQ0FBRSxDQUN4QyxPQUFPLFFBQVEsR0FBRyxhQUFhLEdBQUcsNEJBQTRCLENBQUMsQ0FDbEUsQ0FDRCxTQUFTLENBQUUsa0JBQWtCLENBQzdCLGdCQUFnQixDQUFFLDBCQUFTLElBQUksQ0FBRSxDQUFFLE9BQU8sb0JBQW9CLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFFLENBRTVGLENBQUMsQ0FFRCxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQ3JELFlBQVksQ0FBQyxBQUViLElBQUksQ0FBQyxDQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxBQUV0QyxJQUFJLFdBQVcsQ0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFFN0IsSUFBSSxhQUFhLENBQUcsQ0FBQyxDQUFDLEFBQ3RCLElBQUksVUFBVSxDQUFHLEVBQUUsQ0FBQyxBQUNwQixJQUFJLFNBQVMsQ0FBRyxFQUFFLENBQUM7Ozs7O0dBUW5CLFNBQVMsbUJBQW1CLENBQUMsT0FBTyxDQUFFLENBRWxDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFFLE9BQU8sQ0FBQyxDQUFDLEFBRWhDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUUsQ0FBRSxPQUFPLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBRSxDQUFDLENBQUMsQ0FDckUsT0FBTyxDQUFDLGtCQUFrQixDQUFFLFVBQVUsQ0FBQyxDQUFDLEFBRWpELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsQUFFL0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLDhEQUE4RCxDQUFDLENBQUMsQ0FBQyxBQUU3RixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxBQUV6QixHQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFFOzs7QUFJM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxTQUFTLEdBQUcsQ0FBRSxTQUFTLENBQUUsQ0FDckQsSUFBSSxRQUFRLENBQUcsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUMvQixjQUFjLENBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUM3QixZQUFZLENBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUNqQyxHQUFHLENBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixFQUFFLENBQUMsR0FBRyxDQUM5QyxNQUFNLENBQUcsR0FBRyxHQUFHLFlBQVksR0FBRyxjQUFjLENBQzVDLFdBQVcsQ0FBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFDNUQsR0FBRyxHQUFHLGNBQWMsR0FBRyxDQUFDLEFBQUMsQ0FBQyxBQUU3QyxJQUFJLEtBQUssQ0FBRyxTQUFTLENBQUMsVUFBVSxDQUFHLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBRyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsQUFDOUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUNKLElBQUksQ0FBRSxRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FDMUIsR0FBRyxDQUFFLFFBQVEsQ0FBQyxHQUFHLElBQUksV0FBVyxDQUFHLENBQUMsY0FBYyxDQUFHLFlBQVksQ0FBQSxBQUFDLEdBQUcsSUFBSSxDQUM1RSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQ25CLENBQUMsQ0FDTCxDQUNKOztHQUtELElBQUksU0FBUyxDQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUU7Ozs7T0FPdEQsR0FBRyxDQUFFLGFBQVMsSUFBSSxDQUFFLENBRWhCLElBQUksUUFBUSxDQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQUFDM0MsSUFBSSxFQUFFLENBQUksUUFBUSxDQUFHLElBQUksQ0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLEFBQUMsQ0FBQyxBQUVoRSxHQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFFLENBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEFBRXJCLEdBQUksUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFFLENBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUUsQ0FBQSxTQUFTLElBQUksQ0FBRSxDQUM1QyxHQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFFLENBQzlCLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ2xDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEFBRXRCLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBRSxLQUFLLENBQUUsSUFBSSxDQUFFLENBQUMsQ0FBQyxDQUN2QyxDQUNKLENBQUEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNqQixLQUFNLENBQ0gsR0FBSSxRQUFRLENBQUUsQ0FDVixJQUFJLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUNoQyxBQUNELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEFBRXRCLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBRSxLQUFLLENBQUUsSUFBSSxDQUFFLENBQUMsQ0FBQyxDQUN2QyxDQUNKLEFBRUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDN0I7O09BS0QsS0FBSyxDQUFFLGdCQUFXLENBRWQsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUNqQjs7OztPQU9ELE1BQU0sQ0FBRSxDQUNKLFFBQVEsQ0FBRSxtQkFBbUIsQ0FDN0Isb0NBQW9DLENBQUUseUNBQVcsQ0FBRSxPQUFPLEtBQUssQ0FBQyxDQUFFLENBQ2xFLE9BQU8sQ0FBRSxVQUFVLENBQ25CLDJDQUEyQyxDQUFFLGNBQWMsQ0FDM0QscUNBQXFDLENBQUUsVUFBVSxDQUNqRCxtQ0FBbUMsQ0FBRSxjQUFjLENBQ25ELG1DQUFtQyxDQUFFLFVBQVUsQ0FDL0Msc0JBQXNCLENBQUUsaUJBQWlCLENBQzVDOztPQUtELGFBQWEsQ0FBRSx1QkFBUyxPQUFPLENBQUUsQ0FFN0IsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBSSxDQUFFLENBQ2pDLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQ3JELENBQUUsSUFBSSxDQUFDLENBQUMsQ0FDWjs7Ozs7Ozs7T0FXRCxlQUFlLENBQUUseUJBQVMsS0FBSyxDQUFFLENBRTdCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksQ0FBRSxDQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUN2Rjs7Ozs7OztPQVVELGVBQWUsQ0FBRSx5QkFBUyxJQUFJLENBQUUsQ0FFNUIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxDQUFFLENBQUUsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQ3ZEOzs7O09BT0QsTUFBTSxDQUFFLGdCQUFTLElBQUksQ0FBRSxDQUVuQixJQUFJLEVBQUUsQ0FBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLFFBQVEsQ0FBRyxJQUFJLENBQUMsRUFBRSxDQUFHLElBQUksQUFBQyxDQUFDLEFBRXRELElBQUksV0FBVyxDQUFDLEFBQ2hCLElBQUksS0FBSyxDQUFHLFdBQVcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBRSxFQUFFLENBQUMsQ0FBQyxBQUN0RCxHQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBRSxDQUNaLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEFBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUMvQixBQUVELEdBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUUsQ0FDM0IsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQ25DLEFBQ0QsR0FBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUUsQ0FDWixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDaEMsQUFFRCxHQUFJLFdBQVcsQ0FBRSxDQUNiLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBRSxPQUFPLENBQUUsV0FBVyxDQUFFLENBQUMsQ0FBQyxDQUNoRCxBQUVELEdBQUksRUFBRSxLQUFLLElBQUksQ0FBQyxrQkFBa0IsQ0FBRSxDQUNoQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLENBQ2xDLENBQ0o7Ozs7OztPQVNELGlCQUFpQixDQUFFLDJCQUFTLEtBQUssQ0FBRSxDQUUvQixLQUFLLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxBQUVwQixHQUFJLEtBQUssQ0FBQyxLQUFLLENBQUUsQ0FDYixJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEFBRXRDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUMxQixLQUFNLEdBQUksS0FBSyxDQUFDLE9BQU8sQ0FBRSxDQUN0QixJQUFJLFFBQVEsQ0FBRyxXQUFXLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQUFDMUQsSUFBSSxDQUFDLENBQUMsQ0FBQyxtREFBbUQsR0FBRyxRQUFRLEdBQUcsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FDekYsS0FBTSxDQUNILElBQUksQ0FBQyxDQUFDLENBQUMscUNBQXFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxBQUV2RCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUUsSUFBSSxDQUFDLENBQUMsQUFFbkQsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FDNUIsQUFFRCxHQUFJLEtBQUssQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBRSxDQUM5QixHQUFJLElBQUksQ0FBQyxRQUFRLENBQUUsQ0FDZixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUUsQ0FDakUsT0FBTyxDQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUNqQyxDQUFDLENBQUMsQ0FDTixBQUVELEdBQUksSUFBSSxDQUFDLFdBQVcsQ0FBRSxDQUNsQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FDaEIsQ0FDSixBQUVELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEFBRXhCLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQzdCOztPQUtELE1BQU0sQ0FBRSxpQkFBVyxDQUVmLElBQUksSUFBSSxDQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUMsQUFFbkMsR0FBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBRSxDQUN4QixJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBQyxLQUFLLENBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEFBRW5GLEdBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxRQUFRLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUUsQ0FDL0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDL0IsQ0FDSixBQUVELEdBQUksSUFBSSxDQUFDLFFBQVEsQ0FBRSxDQUNmLFNBQVMsQ0FBQyxJQUFJLENBQUUsUUFBUSxDQUFDLENBQUMsQ0FDN0IsQ0FDSjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FzQ0QsVUFBVSxDQUFFLG9CQUFTLE9BQU8sQ0FBRSxDQUUxQixPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQyxBQUV4QixJQUFJLCtCQUErQixDQUFHLGlDQUFpQyxDQUFDLEFBQ3hFLEdBQUksT0FBTyxDQUFDLCtCQUErQixDQUFDLEtBQUssU0FBUyxDQUFFLENBQ3hELE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDNUQsQUFFRCxPQUFPLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxZQUFZLElBQUksRUFBRSxDQUFDLEFBQ2xELE9BQU8sQ0FBQyxZQUFZLENBQUMsK0JBQStCLENBQUMsR0FBRyxTQUFTLENBQUMsQUFFbEUsSUFBSSxVQUFVLENBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxBQUU5QixTQUFTLENBQUMsSUFBSSxDQUFFLFlBQVksQ0FBRSxPQUFPLENBQUMsQ0FBQyxBQUV2QyxHQUFJLFVBQVUsS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFFLENBQzdCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUUsQ0FBRSxPQUFPLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUNsRixDQUNKOzs7Ozs7O09BVUQsWUFBWSxDQUFFLHNCQUFTLElBQUksQ0FBRSxDQUV6QixHQUFJLElBQUksS0FBSyxJQUFJLENBQUUsQ0FDZixPQUFPLEVBQUUsQ0FBQyxDQUNiLEtBQU0sR0FBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLE9BQU8sQ0FBRSxDQUNqQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBRSxJQUFJLENBQUMsQ0FBQyxDQUM1QyxLQUFNLENBQ0gsTUFBTSxJQUFJLEtBQUssQ0FBQyxvREFBb0QsQ0FBQyxDQUFDLENBQ3pFLENBQ0o7Ozs7OztPQVNELGFBQWEsQ0FBRSx1QkFBUyxLQUFLLENBQUUsQ0FFM0IsR0FBSSxLQUFLLEtBQUssSUFBSSxDQUFFLENBQ2hCLE9BQU8sRUFBRSxDQUFDLENBQ2IsS0FBTSxHQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssT0FBTyxDQUFFLENBQ2xDLEdBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUUsQ0FDcEMsT0FBTyxLQUFLLENBQUMsQ0FDaEIsS0FBTSxDQUNILE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxDQUNqRCxDQUNKLEtBQU0sQ0FDSCxNQUFNLElBQUksS0FBSyxDQUFDLHdEQUF3RCxDQUFDLENBQUMsQ0FDN0UsQ0FDSjs7T0FLRCxpQkFBaUIsQ0FBRSw0QkFBVyxDQUUxQixHQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsK0JBQStCLENBQUUsQ0FDOUMsR0FBSSxJQUFJLENBQUMsa0JBQWtCLENBQUUsQ0FDekIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQ3pCLEtBQU0sR0FBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBRSxDQUMzQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNqRCxDQUNKLEtBQU0sR0FBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBRSxDQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUN6QyxDQUNKOztPQUtELFFBQVEsQ0FBRSxtQkFBVyxDQUVqQixHQUFJLElBQUksQ0FBQyxPQUFPLENBQUUsQ0FDZCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQUFFYixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQUFFYixPQUFPLEtBQUssQ0FBQyxDQUNoQixDQUNKOztPQUtELFlBQVksQ0FBRSx1QkFBVyxDQUVyQixJQUFJLElBQUksQ0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDLEFBQ25DLElBQUksZUFBZSxDQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEFBRW5ELEdBQUksSUFBSSxJQUFJLGVBQWUsQ0FBRSxDQUN6QixJQUFJLElBQUksQ0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQUFDakMsR0FBSSxJQUFJLENBQUUsQ0FDTixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQ2xCLENBQ0osQ0FDSjs7T0FLRCxjQUFjLENBQUUseUJBQVcsQ0FFdkIsR0FBSSxJQUFJLENBQUMsa0JBQWtCLENBQUUsQ0FDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUN4QyxDQUNKOztPQUtELGNBQWMsQ0FBRSx3QkFBUyxFQUFFLENBQUUsQ0FFekIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEVBQUUsQ0FBQyxBQUM3QixJQUFJLENBQUMsQ0FBQyxDQUFDLHFDQUFxQyxDQUFDLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUNuRSxNQUFNLENBQUMsZ0JBQWdCLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQUFFM0YsR0FBSSxJQUFJLENBQUMsV0FBVyxDQUFFLENBQ2xCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUNoQixDQUNKOztPQUtELFlBQVksQ0FBRSxzQkFBUyxLQUFLLENBQUUsQ0FFMUIsR0FBSSxJQUFJLENBQUMsT0FBTyxDQUFFLENBQ2QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDL0MsQ0FDSjs7T0FLRCxrQkFBa0IsQ0FBRSw0QkFBUyxLQUFLLENBQUUsQ0FFaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQUFFcEMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQUFFekIsT0FBTyxLQUFLLENBQUMsQ0FDaEI7O09BS0QsUUFBUSxDQUFFLGtCQUFTLEtBQUssQ0FBRSxDQUV0QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUMsQUFFOUMsR0FBSSxLQUFLLENBQUMsT0FBTyxLQUFLLFNBQVMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUUsQ0FDL0MsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQzFCLENBQ0o7O09BS0QsWUFBWSxDQUFFLHNCQUFTLEtBQUssQ0FBRSxDQUUxQixJQUFJLFlBQVksQ0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxBQUV6QyxHQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssU0FBUyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBRSxDQUMvQyxHQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFFLENBQzlCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUN2QixDQUNKLEtBQU0sR0FBSSxLQUFLLENBQUMsT0FBTyxLQUFLLGFBQWEsSUFBSSxDQUFDLFlBQVksQ0FBRSxDQUN6RCxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUM1QixLQUFNLEdBQUksS0FBSyxDQUFDLE9BQU8sS0FBSyxVQUFVLElBQUksQ0FBQyxZQUFZLENBQUUsQ0FDdEQsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQ3pCLEFBRUQsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FDNUI7O09BS0QsUUFBUSxDQUFFLG1CQUFXLENBRWpCLFVBQVUsQ0FBQyxDQUFBLFVBQVcsQ0FDbEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEFBRWQsR0FBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBRSxDQUM5QixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FDdkIsQ0FDSixDQUFBLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFFLEVBQUUsQ0FBQyxDQUFDLENBQ3JCOztPQUtELEtBQUssQ0FBRSxnQkFBVyxDQUVkLEdBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEtBQUssS0FBSyxDQUFFLENBQ3JDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUNmLENBQ0osQ0FFRCxtQkFBbUIsQ0FBRSw2QkFBUyxJQUFJLENBQUUsQ0FFaEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQ3BFLFdBQVcsQ0FBRyxJQUFJLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxrQkFBa0IsQUFBQyxDQUNsRCxTQUFTLENBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FDcEMsQ0FBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFFWCxJQUFJLFFBQVEsQ0FBRyxXQUFXLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxBQUNqRCxJQUFJLENBQUMsQ0FBQyxDQUFDLG1EQUFtRCxHQUFHLFFBQVEsR0FBRyxHQUFHLENBQUMsQ0FDdkUsSUFBSSxDQUFDLDRDQUE0QyxDQUFDLENBQ2xELEVBQUUsQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ3hEOztPQUtELGVBQWUsQ0FBRSx5QkFBUyxLQUFLLENBQUUsQ0FFN0IsR0FBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUUsQ0FDdEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDeEIsS0FBTSxDQUNILElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQzNCLENBQ0o7O09BS0QsZUFBZSxDQUFFLDBCQUFXLENBRXhCLElBQUksZUFBZSxDQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsdUNBQXVDLENBQUMsQ0FBQyxBQUN0RSxlQUFlLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQ3ZEOztPQUtELGlCQUFpQixDQUFFLDRCQUFXLENBRTFCLEdBQUksSUFBSSxDQUFDLE9BQU8sQ0FBRSxDQUNkLElBQUksTUFBTSxDQUFHLElBQUksQ0FBQyxZQUFZLENBQUUsY0FBYyxDQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxBQUN2RixjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFDWixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxJQUM5QyxFQUFFLENBQUMsQ0FBQyxBQUN4QixNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxBQUUxQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUMzQixDQUNKOztPQUtELGtCQUFrQixDQUFFLDZCQUFXLENBRTNCLElBQUksV0FBVyxDQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFHLEVBQUUsQ0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxBQUNwRSxHQUFJLElBQUksQ0FBQyxPQUFPLENBQUUsQ0FDZCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUUsV0FBVyxDQUFDLENBQUMsQ0FDdEQsS0FBTSxDQUNILElBQUksQ0FBQyxDQUFDLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FDeEQsQ0FDSixDQUVKLENBQUMsQ0FBQyxBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEdBQUcsbUJBQW1CLENBQUMsQ0FFdEUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUNqRSxZQUFZLENBQUMsQUFFYixJQUFJLENBQUMsQ0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQUFFdEMsSUFBSSxXQUFXLENBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7OztHQVE3QixTQUFTLGlCQUFpQixDQUFDLE9BQU8sQ0FBRSxDQUVoQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBRSxPQUFPLENBQUMsQ0FBQyxBQUVoQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUN0RCxPQUFPLENBQUMsa0JBQWtCLENBQUUsUUFBUSxDQUFDLENBQUMsQUFFL0MsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQUFFekIsR0FBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBRTs7O0FBSTNCLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxHQUFHLENBQUUsU0FBUyxDQUFFLENBQ3JELElBQUksUUFBUSxDQUFHLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FDL0IsY0FBYyxDQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FDN0IsWUFBWSxDQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FDakMsR0FBRyxDQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEdBQUcsQ0FDOUMsTUFBTSxDQUFHLEdBQUcsR0FBRyxZQUFZLEdBQUcsY0FBYyxDQUM1QyxPQUFPLENBQUcsQ0FBQyxDQUFDLEFBRWhCLEdBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFFLENBQy9CLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBRSxDQUFDLENBQUMsQ0FBRSxHQUFHLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FDcEYsQUFFRCxJQUFJLEtBQUssQ0FBRyxTQUFTLENBQUMsVUFBVSxDQUFHLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBRyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsQUFDOUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUNKLElBQUksQ0FBRSxRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FDMUIsR0FBRyxDQUFFLEFBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxZQUFZLEdBQUcsT0FBTyxHQUFJLElBQUksQ0FDdEQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUNuQixDQUFDLENBQ0wsQUFFRCxHQUFJLE9BQU8sQ0FBQyx5QkFBeUIsS0FBSyxLQUFLLENBQUUsQ0FDN0MsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGtDQUFrQyxDQUFDLENBQUUsQ0FBRSxRQUFRLENBQUUsSUFBSSxDQUFFLENBQUMsQ0FBQyxDQUN4RixDQUNKOztHQUtELElBQUksU0FBUyxDQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUU7Ozs7T0FPcEQsTUFBTSxDQUFFLENBQ0osUUFBUSxDQUFFLG1CQUFtQixDQUM3QixPQUFPLENBQUUsVUFBVSxDQUNuQix3Q0FBd0MsQ0FBRSxVQUFVLENBQ3BELHNCQUFzQixDQUFFLGlCQUFpQixDQUM1Qzs7T0FLRCxLQUFLLENBQUUsZ0JBQVcsQ0FFZCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQ25COzs7OztPQVFELEtBQUssQ0FBRSxlQUFTLE9BQU8sQ0FBRSxDQUVyQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxBQUVyQixTQUFTLENBQUMsSUFBSSxDQUFFLE9BQU8sQ0FBQyxDQUFDLEFBRXpCLEdBQUksQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLFNBQVMsS0FBSyxLQUFLLENBQUUsQ0FDekMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUM3QixBQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQ3pCOzs7Ozs7O09BVUQsZUFBZSxDQUFFLHlCQUFTLEtBQUssQ0FBRSxDQUU3QixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDbkM7Ozs7Ozs7T0FVRCxlQUFlLENBQUUseUJBQVMsSUFBSSxDQUFFLENBRTVCLE9BQVEsSUFBSSxDQUFHLElBQUksQ0FBQyxFQUFFLENBQUcsSUFBSSxDQUFFLENBQ2xDOztPQUtELElBQUksQ0FBRSxjQUFTLE9BQU8sQ0FBRSxDQUVwQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxBQUVyQixJQUFJLGVBQWUsQ0FBSSxJQUFJLENBQUMsT0FBTyxDQUFDLHlCQUF5QixLQUFLLEtBQUssQUFBQyxDQUFDLEFBRXpFLFNBQVMsQ0FBQyxJQUFJLENBQUUsTUFBTSxDQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBRSxlQUFlLENBQUUsZUFBZSxDQUFFLENBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxBQUVqRixHQUFJLENBQUMsZUFBZSxDQUFFLENBQ2xCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUNoQixBQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQ3pCOzs7Ozs7T0FTRCxpQkFBaUIsQ0FBRSw0QkFBVyxDQUUxQixJQUFJLFVBQVUsQ0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLHNDQUFzQyxDQUFDLENBQUMsQUFDaEUsR0FBSSxJQUFJLENBQUMsS0FBSyxDQUFFLENBQ1osVUFBVSxDQUFDLElBQUksQ0FDWCxJQUFJLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FDekMsU0FBUyxDQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQy9ELENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQ2xCLENBQUMsQUFFRixVQUFVLENBQUMsSUFBSSxDQUFDLDBDQUEwQyxDQUFDLENBQ2hELEVBQUUsQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQzlELEtBQU0sQ0FDSCxVQUFVLENBQUMsSUFBSSxDQUNYLElBQUksQ0FBQyxRQUFRLENBQUMseUJBQXlCLENBQUUsQ0FBRSxXQUFXLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUUsQ0FBQyxDQUN0RixDQUFDLENBQ0wsQ0FDSjs7Ozs7Ozs7T0FXRCxVQUFVLENBQUUsb0JBQVMsT0FBTyxDQUFFLENBRTFCLE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDLEFBRXhCLE9BQU8sQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxJQUFJLEVBQUUsQ0FBRSxDQUN4RCxVQUFVLENBQUUsU0FBUyxDQUNyQix5QkFBeUIsQ0FBRSxTQUFTLENBQ3ZDLENBQUMsQ0FBQyxBQUVILFNBQVMsQ0FBQyxJQUFJLENBQUUsWUFBWSxDQUFFLE9BQU8sQ0FBQyxDQUFDLENBQzFDOzs7Ozs7O09BVUQsWUFBWSxDQUFFLHNCQUFTLElBQUksQ0FBRSxDQUV6QixPQUFRLElBQUksS0FBSyxJQUFJLENBQUcsSUFBSSxDQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUUsQ0FDM0Q7Ozs7OztPQVNELGFBQWEsQ0FBRSx1QkFBUyxLQUFLLENBQUUsQ0FFM0IsR0FBSSxLQUFLLEtBQUssSUFBSSxJQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUUsQ0FDaEQsT0FBTyxLQUFLLENBQUMsQ0FDaEIsS0FBTSxDQUNILE1BQU0sSUFBSSxLQUFLLENBQUMsbUVBQW1FLENBQUMsQ0FBQyxDQUN4RixDQUNKOztPQUtELFFBQVEsQ0FBRSxtQkFBVyxDQUVqQixHQUFJLElBQUksQ0FBQyxPQUFPLENBQUUsQ0FDZCxHQUFJLElBQUksQ0FBQyxRQUFRLENBQUUsQ0FDZixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FDaEIsS0FBTSxHQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxLQUFLLEtBQUssQ0FBRSxDQUM1QyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FDZixBQUVELE9BQU8sS0FBSyxDQUFDLENBQ2hCLENBQ0o7O09BS0QsUUFBUSxDQUFFLG1CQUFXLENBRWpCLEdBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUNoRCxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksS0FBSyxLQUFLLENBQUUsQ0FDckMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQ2YsQ0FDSjs7T0FLRCxrQkFBa0IsQ0FBRSw2QkFBVyxDQUUzQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEFBRWhCLE9BQU8sS0FBSyxDQUFDLENBQ2hCOztPQUtELGVBQWUsQ0FBRSx5QkFBUyxLQUFLLENBQUUsQ0FFN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQUFFdEIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQ2hCLENBRUosQ0FBQyxDQUFDLEFBRUgsTUFBTSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxDQUVsRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQ2pFLFlBQVksQ0FBQyxBQUViLElBQUksV0FBVyxDQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUM3QixJQUFJLG1CQUFtQixDQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQzs7R0FLdEMsU0FBUyxrQkFBa0IsQ0FBQyxPQUFPLENBQUU7O09BS2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxBQUVyQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFFLE9BQU8sQ0FBQyxDQUFDLEFBRXhDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxDQUFDLENBQUMsQUFFOUIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLENBQUMsQ0FBQyxDQUNoQyxBQUVELElBQUksU0FBUyxDQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUUsbUJBQW1CLENBQUU7O09BSzFFLEtBQUssQ0FBRSxnQkFBVyxDQUVkLEdBQUksSUFBSSxDQUFDLE9BQU8sQ0FBRSxDQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FDeEIsQUFFRCxTQUFTLENBQUMsSUFBSSxDQUFFLE9BQU8sQ0FBQyxDQUFDLEFBRXpCLEdBQUksSUFBSSxDQUFDLFVBQVUsQ0FBRSxDQUNqQixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsQUFDL0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FDMUIsQUFFRCxZQUFZLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQUFDeEMsWUFBWSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQzFDOzs7Ozs7T0FTRCxTQUFTLENBQUUsbUJBQVMsSUFBSSxDQUFFLE9BQU8sQ0FBRSxDQUUvQixHQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFFLENBQzFCLFNBQVMsQ0FBQyxJQUFJLENBQUUsV0FBVyxDQUFFLElBQUksQ0FBQyxDQUFDLEFBRW5DLFlBQVksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxBQUN2QyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUMsQ0FBRSxHQUFHLENBQUMsQ0FBQyxDQUNsRixLQUFNLEdBQUksSUFBSSxDQUFDLE9BQU8sQ0FBRSxDQUNyQixHQUFJLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUUsQ0FDakUsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUMzQixLQUFNLENBQ0gsWUFBWSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLEFBQ3hDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxVQUFVLENBQ2xDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBQyxDQUFFLEdBQUcsQ0FDdkQsQ0FBQyxDQUNMLENBQ0osS0FBTSxDQUNILEdBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFFLENBQ3pELFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQUFDbkQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsR0FBRyxDQUFDLENBQUMsQ0FDNUMsQUFFRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQzNCLENBQ0o7O09BS0QsTUFBTSxDQUFFLGdCQUFTLElBQUksQ0FBRSxDQUVuQixHQUFJLElBQUksQ0FBQyxPQUFPLENBQUUsQ0FDZCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUM3QixLQUFNLENBQ0gsU0FBUyxDQUFDLElBQUksQ0FBRSxRQUFRLENBQUUsSUFBSSxDQUFDLENBQUMsQ0FDbkMsQ0FDSjs7T0FLRCxlQUFlLENBQUUsMEJBQVcsQ0FFeEIsR0FBSSxJQUFJLENBQUMsT0FBTyxDQUFFLENBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUNsQyxLQUFNLENBQ0gsU0FBUyxDQUFDLElBQUksQ0FBRSxpQkFBaUIsQ0FBQyxDQUFDLENBQ3RDLENBQ0o7O09BS0QsVUFBVSxDQUFFLG9CQUFTLEVBQUUsQ0FBRSxDQUVyQixJQUFJLElBQUksQ0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUUsRUFBRSxDQUFDLENBQUMsQUFDeEQsR0FBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBRSxDQUN6QyxJQUFJLE9BQU8sQ0FBRyxDQUFFLEVBQUUsQ0FBRSxFQUFFLENBQUUsSUFBSSxDQUFFLElBQUksQ0FBRSxDQUFDLEFBQ3JDLEdBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsdUJBQXVCLENBQUUsT0FBTyxDQUFDLENBQUUsQ0FDakUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsc0JBQXNCLENBQUUsT0FBTyxDQUFDLENBQUMsQ0FDbEUsQ0FDSixDQUNKOztPQUtELFdBQVcsQ0FBRSxxQkFBUyxPQUFPLENBQUUsT0FBTyxDQUFFLENBRXBDLEdBQUksSUFBSSxDQUFDLE9BQU8sQ0FBRSxDQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBRSxPQUFPLENBQUMsQ0FBQyxDQUM5QyxLQUFNLENBQ0gsU0FBUyxDQUFDLElBQUksQ0FBRSxhQUFhLENBQUUsT0FBTyxDQUFFLE9BQU8sQ0FBQyxDQUFDLENBQ3BELENBQ0o7O09BS0QsWUFBWSxDQUFFLHVCQUFXLENBRXJCLEdBQUksSUFBSSxDQUFDLFVBQVUsQ0FBRSxDQUNqQixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxDQUM3RCxLQUFNLENBQ0gsU0FBUyxDQUFDLElBQUksQ0FBRSxjQUFjLENBQUMsQ0FBQyxDQUNuQyxDQUNKOztPQUtELFdBQVcsQ0FBRSxzQkFBVyxDQUVwQixHQUFJLElBQUksQ0FBQyxVQUFVLENBQUUsQ0FDakIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FDNUQsS0FBTSxDQUNILFNBQVMsQ0FBQyxJQUFJLENBQUUsYUFBYSxDQUFDLENBQUMsQ0FDbEMsQ0FDSjs7T0FLRCx5QkFBeUIsQ0FBRSxtQ0FBUyxJQUFJLENBQUUsQ0FFdEMsR0FBSSxJQUFJLENBQUMsT0FBTyxDQUFFLENBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUN4QixBQUVELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDM0I7O09BS0QsWUFBWSxDQUFFLHNCQUFTLElBQUksQ0FBRSxDQUV6QixTQUFTLENBQUMsSUFBSSxDQUFFLFdBQVcsQ0FBRSxJQUFJLENBQUMsQ0FBQyxBQUVuQyxHQUFJLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFFLENBQy9CLElBQUksV0FBVyxDQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQUFDbkMsSUFBSSxRQUFRLENBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxBQUNwRSxHQUFJLFFBQVEsQ0FBRSxDQUNWLElBQUksUUFBUSxDQUFHLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEFBQ2pELElBQUksS0FBSyxDQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsd0NBQXdDLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEFBQzlFLElBQUksV0FBVyxDQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQUFFM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLFFBQVEsQ0FBQyxDQUN4QixLQUFLLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUNqQyxVQUFVLENBQUUsSUFBSSxDQUNoQixRQUFRLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsSUFBSSxTQUFTLEdBQUcsQ0FBRSxDQUNyRCxJQUFJLGdCQUFnQixDQUFHLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxBQUM5QyxJQUFJLEtBQUssQ0FBRyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUMsQUFDaEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUNKLElBQUksQ0FBRSxnQkFBZ0IsQ0FBQyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FDMUMsR0FBRyxDQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxHQUFHLElBQUksQ0FDMUQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUNuQixDQUNELEtBQUssQ0FBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQ2pDLFdBQVcsQ0FBRSxXQUFXLENBQ3hCLGVBQWUsQ0FBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FDaEQsQ0FBQyxDQUFDLEFBRUgsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDM0IsQ0FDSixDQUNKLENBRUosQ0FBQyxDQUFDLEFBRUgsV0FBVyxDQUFDLFFBQVEsR0FBRyxrQkFBa0IsQ0FBQyxBQUUxQyxXQUFXLENBQUMsY0FBYyxHQUFHLFNBQVMsS0FBSyxDQUFFLEVBQUUsQ0FBRSxDQUU3QyxJQUFLLElBQUksQ0FBQyxDQUFHLENBQUMsQ0FBRSxNQUFNLENBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBRSxDQUFDLEdBQUcsTUFBTSxDQUFFLENBQUMsRUFBRSxFQUFFLENBQ3BELElBQUksSUFBSSxDQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBRSxNQUFNLENBQUMsQUFDNUIsR0FBSSxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBRSxDQUNoQixNQUFNLEdBQUcsSUFBSSxDQUFDLENBQ2pCLEtBQU0sR0FBSSxJQUFJLENBQUMsUUFBUSxDQUFFLENBQ3RCLE1BQU0sR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUUsRUFBRSxDQUFDLENBQUMsQ0FDMUQsS0FBTSxHQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUUsQ0FDM0MsTUFBTSxHQUFHLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUUsRUFBRSxDQUFDLENBQUMsQ0FDL0QsQUFDRCxHQUFJLE1BQU0sQ0FBRSxDQUNSLE9BQU8sTUFBTSxDQUFDLENBQ2pCLENBQ0osQUFDRCxPQUFPLElBQUksQ0FBQyxDQUNmLENBQUMsQUFFRixNQUFNLENBQUMsT0FBTyxHQUFHLGtCQUFrQixDQUFDLENBRW5DLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FDdkQsWUFBWSxDQUFDLEFBRWIsSUFBSSxNQUFNLENBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBRXhCLElBQUksV0FBVyxDQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUU3QixPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7Ozs7OztHQVNaLFdBQVcsQ0FBQyxTQUFTLEdBQUc7Ozs7Ozs7Ozs7Ozs7T0FnQnBCLFFBQVEsQ0FBRSxrQkFBUyxPQUFPLENBQUUsQ0FDeEIsSUFBSSxVQUFVLENBQUksT0FBTyxDQUFDLGdCQUFnQixDQUFHLEdBQUcsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUcsRUFBRSxBQUFDLENBQzdFLFdBQVcsQ0FBRyxFQUFFLENBQUMsQUFDckIsR0FBSSxPQUFPLENBQUMsZUFBZSxDQUFFLENBQ3pCLFVBQVUsSUFBSSxtQkFBbUIsQ0FBQyxBQUVsQyxJQUFJLFdBQVcsQ0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQUFDakQsV0FBVyxHQUNQLGtEQUFrRCxHQUM5QyxxREFBcUQsSUFDNUMsV0FBVyxDQUFHLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFHLENBQzVDLEVBQUUsQ0FBQSxBQUFDLEdBQUcsR0FBRyxHQUNwQyxRQUFRLEFBQ1gsQ0FBQyxDQUNMLEFBQ0QsT0FDSSxrQ0FBa0MsR0FBRyxVQUFVLEdBQUcsSUFBSSxHQUNsRCxXQUFXLEdBQ1gsbURBQW1ELEdBQ3ZELFFBQVEsQ0FDVixDQUNMOzs7Ozs7T0FTRCxLQUFLLENBQUUsZUFBUyxPQUFPLENBQUUsQ0FDckIsT0FDSSxpQ0FBaUMsSUFDNUIsT0FBTyxDQUFDLE1BQU0sQ0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUEsQUFBQyxHQUNoRSxRQUFRLENBQ1YsQ0FDTDs7Ozs7T0FRRCxPQUFPLENBQUUsa0JBQVcsQ0FDaEIsT0FBTyxtQ0FBbUMsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FDdEY7Ozs7O09BUUQsUUFBUSxDQUFFLG1CQUFXLENBQ2pCLE9BQU8scUNBQXFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQ3pGOzs7Ozs7Ozs7Ozs7Ozs7OztPQW9CRCxtQkFBbUIsQ0FBRSw2QkFBUyxPQUFPLENBQUUsQ0FDbkMsT0FDSSxvREFBb0QsSUFDL0MsT0FBTyxDQUFDLE9BQU8sQ0FBRywwREFBMEQsR0FDbkQsdUJBQXVCLEdBQ3ZCLHFDQUFxQyxHQUM1QywwQ0FBMEMsR0FDN0IscUNBQXFDLENBQ2xELHlDQUF5QyxHQUM3QixpQ0FBaUMsQ0FBQSxBQUFDLEdBQ2pFLDBDQUEwQyxHQUM5QyxRQUFRLENBQ1YsQ0FDTDs7Ozs7Ozs7Ozs7Ozs7O09Ba0JELG9CQUFvQixDQUFFLDhCQUFTLE9BQU8sQ0FBRSxDQUNwQyxJQUFJLFVBQVUsQ0FBSSxPQUFPLENBQUMsV0FBVyxDQUFHLGNBQWMsQ0FBRyxFQUFFLEFBQUMsQ0FBQyxBQUM3RCxPQUNJLGlEQUFpRCxHQUFHLFVBQVUsR0FBRyxJQUFJLEdBQy9ELGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxJQUM3QyxPQUFPLENBQUMsU0FBUyxDQUFHLHVEQUF1RCxHQUNuRCw4QkFBOEIsR0FDbEMsTUFBTSxDQUNOLEVBQUUsQ0FBQSxBQUFDLEdBQ3hCLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQ3hCLFNBQVMsQ0FDWCxDQUNMOzs7OztPQVFELFNBQVMsQ0FBRSxtQkFBUyxPQUFPLENBQUUsQ0FDekIsSUFBSSxNQUFNLENBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxBQUNoQyxPQUNJLGlDQUFpQyxJQUM1QixPQUFPLENBQUMsSUFBSSxDQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQSxBQUFDLEdBQzdFLFFBQVEsQ0FDVixDQUNMOzs7Ozs7O09BVUQsY0FBYyxDQUFFLHdCQUFTLE9BQU8sQ0FBRSxDQUM5QixPQUFPLDJDQUEyQyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLENBQ3hGOzs7Ozs7Ozs7Ozs7T0FlRCxVQUFVLENBQUUsb0JBQVMsT0FBTyxDQUFFLENBQzFCLE9BQ0kscUNBQXFDLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBRyxXQUFXLENBQUcsRUFBRSxDQUFBLEFBQUMsR0FBRyxHQUFHLEdBQy9FLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxHQUM3QyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUNuQixPQUFPLENBQUMsT0FBTyxDQUFHLDhEQUE4RCxDQUM5RCxFQUFFLENBQUEsQUFBQyxHQUMxQixRQUFRLENBQ1YsQ0FDTDs7Ozs7Ozs7T0FXRCxXQUFXLENBQUUscUJBQVMsT0FBTyxDQUFFLENBQzNCLE9BQU8sd0NBQXdDLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FDckY7Ozs7OztPQVNELGlCQUFpQixDQUNiLHlDQUF5QyxHQUNyQyw2REFBNkQsR0FDN0QseURBQXlELEdBQ3pELG1EQUFtRCxHQUN2RCxRQUFRLEFBQ1g7Ozs7Ozs7O09BV0QsdUJBQXVCLENBQUUsaUNBQVMsT0FBTyxDQUFFLENBQ3ZDLE9BQ0ksdUNBQXVDLEdBQ25DLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQy9CLFFBQVEsQ0FDVixDQUNMOzs7Ozs7Ozs7OztPQWNELGtCQUFrQixDQUFFLDRCQUFTLE9BQU8sQ0FBRSxDQUNsQyxPQUNJLGlEQUFpRCxHQUMzQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksSUFDN0MsT0FBTyxDQUFDLFNBQVMsQ0FBRyxxREFBcUQsR0FDakQsOEJBQThCLEdBQ2xDLE1BQU0sQ0FDTixFQUFFLENBQUEsQUFBQyxHQUN4QixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUN4QixTQUFTLENBQ1gsQ0FDTDs7Ozs7OztPQVVELGdCQUFnQixDQUFFLDBCQUFTLE9BQU8sQ0FBRSxDQUNoQyxJQUFJLElBQUksQ0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEFBQ3hCLElBQUksSUFBSSxDQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQUFDeEIsR0FBSSxJQUFJLEtBQUssVUFBVSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUUsQ0FDaEQsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUNoQixBQUNELE9BQ0ksZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLEdBQUcsSUFBSSxJQUFJLEtBQUssVUFBVSxDQUFHLFdBQVcsQ0FBRyxFQUFFLENBQUEsQUFBQyxHQUFHLFlBQVksQ0FDekYsQ0FDTDs7Ozs7O09BU0Qsc0JBQXNCLENBQUUsZ0NBQVMsT0FBTyxDQUFFLENBQ3RDLE9BQ0ksaUJBQWlCLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxhQUFhLEdBQ2xELE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQ3hCLFdBQVcsQ0FDYixDQUNMLENBRUosQ0FBQyxDQUVELENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUM3RCxZQUFZLENBQUMsQUFFYixJQUFJLENBQUMsQ0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQUFFdEMsSUFBSSxXQUFXLENBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBRTdCLFNBQVMsZ0JBQWdCLENBQUMsS0FBSyxDQUFFLFNBQVMsQ0FBRSxXQUFXLENBQUUsT0FBTyxDQUFFLENBRTlELElBQUksZUFBZSxDQUFHLE9BQU8sQ0FBQyxlQUFlLElBQUksU0FBUyxLQUFLLENBQUUsQ0FDN0QsT0FBTyxLQUFLLENBQUcsQ0FBRSxFQUFFLENBQUUsS0FBSyxDQUFFLElBQUksQ0FBRSxLQUFLLENBQUUsQ0FBRyxJQUFJLENBQUMsQ0FDcEQsQ0FBQyxBQUVGLElBQUksVUFBVSxDQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQUFFekMsU0FBUyxRQUFRLENBQUMsS0FBSyxDQUFFLENBQ3JCLE9BQU8sS0FBSyxDQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxTQUFTLENBQUUsQ0FDL0MsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQ3hDLENBQUMsQ0FBRyxLQUFLLENBQUMsQ0FDZCxBQUVELFNBQVMsU0FBUyxDQUFDLEtBQUssQ0FBRSxDQUN0QixJQUFLLElBQUksQ0FBQyxDQUFHLENBQUMsQ0FBRSxNQUFNLENBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBRSxDQUFDLEdBQUcsTUFBTSxDQUFFLENBQUMsRUFBRSxFQUFFLENBQ3BELEdBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBRSxDQUNuQyxPQUFPLENBQUUsSUFBSSxDQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFFLEtBQUssQ0FBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQ2pFLENBQ0osQUFDRCxPQUFPLEVBQUUsQ0FBQyxDQUNiLEFBRUQsTUFBTyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FDcEIsSUFBSSxLQUFLLENBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEFBQzdCLEdBQUksS0FBSyxDQUFDLElBQUksQ0FBRSxDQUNaLElBQUksSUFBSSxDQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQUFDdkMsR0FBSSxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUUsQ0FDbkQsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQ3JCLENBQ0osQUFDRCxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUN2QixBQUVELE9BQU8sS0FBSyxDQUFDLENBQ2hCOzs7Ozs7Ozs7Ozs7O0dBZ0JELFdBQVcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsV0FBVyxDQUFFLE9BQU8sQ0FBRSxDQUU1RCxHQUFJLE9BQU8sQ0FBQyxlQUFlLENBQUUsQ0FDekIsT0FBTyxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUUsZUFBZSxDQUFFLE9BQU8sQ0FBRSxDQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxBQUVwRixPQUFPLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLElBQUksZ0JBQWdCLENBQUMsQ0FDN0QsQ0FDSixDQUFDLENBQUMsQ0FFRixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQ2pFLFlBQVksQ0FBQyxBQUViLElBQUksQ0FBQyxDQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxBQUV0QyxJQUFJLFdBQVcsQ0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFFN0IsU0FBUyxvQkFBb0IsQ0FBQyxHQUFHLENBQUUsT0FBTyxDQUFFLENBRXhDLElBQUksSUFBSSxDQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUcsRUFBRSxDQUFHLElBQUksQUFBQyxDQUFDLEFBRTFDLElBQUksVUFBVSxDQUFHLFNBQWIsVUFBVSxFQUFjLENBQ3hCLElBQUksS0FBSyxDQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxBQUNwQixHQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUUsQ0FDcEIsSUFBSSxJQUFJLENBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEFBQ3hCLElBQUksRUFBRSxDQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLEFBQ3JDLEdBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBRSxDQUN4QixJQUFJLElBQUksQ0FBRyxDQUFFLEVBQUUsQ0FBRSxFQUFFLENBQUUsSUFBSSxDQUFFLElBQUksQ0FBRSxDQUFDLEFBQ2xDLEdBQUksT0FBTyxDQUFDLFFBQVEsQ0FBRSxDQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQ25CLEtBQU0sQ0FDSCxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQ2YsQ0FDSixBQUVELE9BQU8sQ0FDSCxFQUFFLENBQUUsRUFBRSxDQUNOLElBQUksQ0FBRSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FDcEMsQ0FBQyxDQUNMLEtBQU0sQ0FDSCxPQUFPLENBQ0gsSUFBSSxDQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQ3pCLFFBQVEsQ0FBRSxLQUFLLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUNwRSxDQUFDLENBQ0wsQ0FDSixDQUFDLEFBRUYsT0FBTyxDQUFDLFVBQVUsR0FBSSxZQUFZLElBQUksT0FBTyxDQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxBQUFDLENBQUMsQUFFNUYsSUFBSSxLQUFLLENBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxBQUNsRSxPQUFPLENBQUMsS0FBSyxHQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUcsSUFBSSxDQUFHLEtBQUssQUFBQyxDQUFDLEFBRS9DLE9BQU8sQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxBQUUzRSxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxBQUVwQixJQUFJLE9BQU8sQ0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksbUJBQW1CLENBQUEsQ0FBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQUFDcEUsR0FBSSxPQUFPLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUUsQ0FDN0MsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQ3JDLEFBRUQsSUFBSSxJQUFJLENBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUN2QixJQUFJLENBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDcEIsT0FBTyxDQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQzFCLE9BQU8sQ0FBRSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUMxQixXQUFXLENBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FDaEMsQ0FBQyxDQUFDLEFBQ0gsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxBQUN0QixPQUFPLElBQUksQ0FBQyxDQUNmLEFBRUQsU0FBUywyQkFBMkIsQ0FBQyxXQUFXLENBQUUsQ0FFOUMsSUFBSSxHQUFHLENBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxBQUUxQixHQUFHLENBQUMsRUFBRSxDQUFDLGtCQUFrQixDQUFFLFNBQVMsS0FBSyxDQUFFLElBQUksQ0FBRSxDQUM3QyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUUsQ0FDaEQsSUFBSSxDQUFFLElBQUksQ0FDVixJQUFJLENBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FDOUIsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQy9CLENBQUMsQ0FBQyxFQUFFLENBQUMseUJBQXlCLENBQUUsVUFBVyxDQUN4QyxJQUFJLElBQUksQ0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLEFBQzdCLElBQUksT0FBTyxDQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQUFFakMsR0FBSSxJQUFJLFlBQVksS0FBSyxDQUFFLENBQ3ZCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxBQUVoQixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxDQUFFLENBQ3hCLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ3hFLENBQUMsQ0FBQyxDQUNOLEtBQU0sQ0FDSCxHQUFJLElBQUksQ0FBRSxDQUNOLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ3RFLEtBQU0sQ0FDSCxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FDbkIsQ0FDSixDQUNKLENBQUMsQ0FBQyxDQUNOOzs7R0FNRCxXQUFXLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLFdBQVcsQ0FBRSxPQUFPLENBQUUsQ0FFNUQsSUFBSSxHQUFHLENBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxBQUMxQixHQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUUsQ0FDbEIsR0FBSSxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFFLENBQ3ZCLFVBQVUsQ0FBQyxVQUFXLENBQ2xCLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUN2QixDQUFFLENBQUMsQ0FBQyxDQUFDLENBQ1QsQUFFRCxXQUFXLENBQUMsR0FBRyxHQUFHLG9CQUFvQixDQUFDLEdBQUcsQ0FBRSxPQUFPLENBQUMsQ0FBQyxBQUNyRCxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUMsQUFFN0MsMkJBQTJCLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FDNUMsQ0FDSixDQUFDLENBQUMsQ0FFRixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FDdkMsQ0FBQyxDQUFDOzs7Ozs7O0FDOW1KSCxDQUFDLENBQUEsVUFBUyxJQUFJLEVBQUUsT0FBTyxFQUFFO0FBQ3JCLGNBQVUsSUFBSSxPQUFPLE1BQU0sSUFBSSxNQUFNLENBQUMsR0FBRztBQUN6QyxVQUFNLENBQUMsRUFBRSxFQUFFLFlBQVc7QUFDbEIsZUFBTyxJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sRUFBRSxDQUFDO0tBQ3pDLENBQUMsR0FBRyxRQUFRLElBQUksT0FBTyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sR0FBRyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sRUFBRSxDQUFDO0NBQ2pHLENBQUEsWUFBTyxZQUFXOztBQUVmLGFBQVMsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUU7O0FBRXhCLFlBQUksTUFBTSxFQUFFOztBQUVSLGdCQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsc0JBQXNCLEVBQUU7Z0JBQUUsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDOztBQUUzSCxtQkFBTyxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDOztBQUVoRDtBQUNBLGdCQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUk7QUFDekQsd0JBQVEsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQzFDOztBQUVELGVBQUcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDN0I7S0FDSjtBQUNELGFBQVMsb0JBQW9CLENBQUMsR0FBRyxFQUFFOztBQUUvQixXQUFHLENBQUMsa0JBQWtCLEdBQUcsWUFBVzs7QUFFaEMsZ0JBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxVQUFVLEVBQUU7O0FBRXRCLG9CQUFJLGNBQWMsR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDOztBQUV6Qyw4QkFBYyxLQUFLLGNBQWMsR0FBRyxHQUFHLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLEVBQ3hHLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUEsQUFBQztBQUN6RSxtQkFBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVMsSUFBSSxFQUFFOztBQUVyQyx3QkFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7O0FBRXhDLDBCQUFNLEtBQUssTUFBTSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBLEFBQUM7O0FBRXhGLHlCQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztpQkFDM0IsQ0FBQyxDQUFDO2FBQ047U0FDSjtBQUNELFdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0tBQzVCO0FBQ0QsYUFBUyxhQUFhLENBQUMsT0FBTyxFQUFFO0FBQzVCLGlCQUFTLFVBQVUsR0FBRzs7QUFFbEI7QUFDQSxnQkFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFJOztBQUVsQyxvQkFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztvQkFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQztBQUM1QyxvQkFBSSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDbEMsd0JBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDekMsd0JBQUksUUFBUSxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUEsQUFBQyxFQUFFOztBQUU5RCwyQkFBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQzs7QUFFckIsNEJBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOzRCQUFFLEdBQUcsR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFOzRCQUFFLEVBQUUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDOztBQUUvRSw0QkFBSSxHQUFHLENBQUMsTUFBTSxFQUFFOztBQUVaLGdDQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7O0FBRXhCLCtCQUFHLEtBQUssR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLGNBQWMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFDcEYsR0FBRyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUEsQUFBQztBQUNqQiwrQkFBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDYixtQ0FBRyxFQUFFLEdBQUc7QUFDUixrQ0FBRSxFQUFFLEVBQUU7NkJBQ1QsQ0FBQztBQUNGLGdEQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDO3lCQUM3QixNQUFNOztBQUVILGlDQUFLLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzt5QkFDM0M7cUJBQ0o7aUJBQ0osTUFBTTs7QUFFSCxzQkFBRSxLQUFLLENBQUM7aUJBQ1g7YUFDSjs7QUFFRCxpQ0FBcUIsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDekM7QUFDRCxZQUFJLFFBQVE7WUFBRSxJQUFJLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUFFLFNBQVMsR0FBRyx5Q0FBeUM7WUFBRSxRQUFRLEdBQUcsd0JBQXdCO1lBQUUsV0FBVyxHQUFHLHFCQUFxQixDQUFDO0FBQ3RLLGdCQUFRLEdBQUcsVUFBVSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFBLENBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFBLENBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDOztBQUV6TSxZQUFJLFFBQVEsR0FBRyxFQUFFO1lBQUUscUJBQXFCLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixJQUFJLFVBQVU7WUFBRSxJQUFJLEdBQUcsUUFBUSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUVuSSxnQkFBUSxJQUFJLFVBQVUsRUFBRSxDQUFDO0tBQzVCO0FBQ0QsV0FBTyxhQUFhLENBQUM7Q0FDeEIsQ0FBQyxDQUFDOzs7Ozs7OztBQzVGSCxJQUFJLFdBQVcsR0FBRyxTQUFkLFdBQVcsQ0FBWSxTQUFTLEVBQUU7O0FBRWxDLFFBQUcsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDOztBQUVyRSxLQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVMsSUFBSSxFQUFFLElBQUksRUFBRTtBQUM1RCxTQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztLQUN2RyxDQUFDLENBQUM7Q0FFTixDQUFDOztRQUVPLFdBQVcsR0FBWCxXQUFXOzs7Ozs7Ozs7Ozs4Q0NKVyxvQ0FBb0M7O0FBRW5FLENBQUMsQUFBQyxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQ1osS0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEdBQUcsVUFBVSxPQUFPLEVBQUU7QUFDL0IsWUFBSSxTQUFTLENBQUM7QUFDZCxpQkFBUyxTQUFTLEdBQUc7QUFDakIsZ0JBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDO2dCQUNwQyxNQUFNO2dCQUFFLFVBQVUsR0FBRztBQUNqQixpQ0FBaUIsRUFBRSxtQkFBbUI7QUFDdEMsNEJBQVksRUFBRSxjQUFjO0FBQzVCLDZCQUFhLEVBQUUsZUFBZTtBQUM5Qiw4QkFBYyxFQUFFLGdCQUFnQjtBQUNoQywyQkFBVyxFQUFFLFdBQVc7YUFDM0IsQ0FBQztBQUNGLG9CQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDckMsaUJBQUssSUFBSSxDQUFDLElBQUksVUFBVSxFQUFFO0FBQ3RCLG9CQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxFQUFFO0FBQzNCLHNCQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLDBCQUEwQixDQUFDO0FBQ3pDLDBCQUFNLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUVyRSwyQkFBTyxDQUFDLENBQUM7aUJBQ1o7YUFDSjtBQUNELG9CQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNqQztBQUNELFlBQUksQ0FBQyxjQUFjLEdBQUc7QUFDbEIsbUJBQU8sRUFBRSxJQUFJO0FBQ2IscUJBQVMsRUFBRSxNQUFNO0FBQ2pCLHFCQUFTLEVBQUUsUUFBUTtBQUNuQixxQkFBUyxFQUFFLE1BQU07QUFDakIseUJBQWEsRUFBRSxLQUFLO0FBQ3BCLG1CQUFPLEVBQUUsV0FBVztBQUNwQixrQkFBTSxFQUFFLFNBQVMsRUFBRTtBQUNuQix3QkFBWSxFQUFFLHdCQUFZO0FBQ3RCLHVCQUFPO2FBQ1Y7U0FDSixDQUFDOztBQUVGLGlCQUFTLGNBQWMsQ0FBQyxJQUFJLEVBQUU7QUFDMUIsbUJBQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDeEM7O0FBRUQsaUJBQVMsU0FBUyxDQUFDLElBQUksRUFBRTtBQUNyQixnQkFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3BCLGlCQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFbkMsaUJBQUssQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxLQUFLLEVBQUUsWUFBWTs7QUFFMUMscUJBQUssQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3pDLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDYjs7QUFFRCxpQkFBUyxlQUFlLENBQUMsQ0FBQyxFQUFFO0FBQ3hCLGdCQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO0FBQzFCLGlCQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDbkIsaUJBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUNwQix1QkFBTyxLQUFLLENBQUM7YUFDaEI7QUFDRCxhQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFckMscUJBQVMsR0FBRyxJQUFJLENBQUM7OztBQUdqQixnQkFBSSxDQUFDLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRTtBQUNoQyxvQkFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7QUFDdEMsa0JBQUUsQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDO0FBQzFCLGtCQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7YUFFcEMsTUFDSSxJQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUM7QUFDckIsb0JBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxZQUFZLENBQUM7QUFDeEIsa0JBQUUsQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDO0FBQzFCLGtCQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDcEM7U0FDSjs7QUFFRCxpQkFBUyxlQUFlLENBQUMsQ0FBQyxFQUFFOztBQUV4QixhQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN4Qzs7QUFFRCxpQkFBUyxlQUFlLENBQUMsQ0FBQyxFQUFFO0FBQ3hCLGFBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzNDOztBQUVELGlCQUFTLGNBQWMsQ0FBQyxDQUFDLEVBQUU7QUFDdkIsZ0JBQUksQ0FBQyxDQUFDLGNBQWMsRUFBRTtBQUNsQixpQkFBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO2FBQ3RCO0FBQ0YsZ0JBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUU7QUFDN0IsaUJBQUMsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7YUFDcEQsTUFDSSxJQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUM7QUFDbkIscUJBQUMsQ0FBQyxZQUFZLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQztpQkFDdEM7QUFDRCxtQkFBTyxLQUFLLENBQUM7U0FDaEI7O0FBRUQsaUJBQVMsVUFBVSxDQUFDLENBQUMsRUFBRTs7QUFFbkIsZ0JBQUksQ0FBQyxDQUFDLGVBQWUsRUFBRTtBQUNuQixpQkFBQyxDQUFDLGVBQWUsRUFBRSxDQUFDO2FBQ3ZCO0FBQ0QsZ0JBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7QUFDMUIsdUJBQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDNUIsdUJBQU8sS0FBSyxDQUFDO2FBQ2hCOzs7QUFHRCxnQkFBSSxTQUFTLElBQUksSUFBSSxFQUFFOztBQUVuQixvQkFBSSxLQUFLLEdBQUc7QUFDUix3QkFBSSxFQUFFLElBQUksQ0FBQyxTQUFTO0FBQ3BCLHNCQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7aUJBQ2QsQ0FBQztBQUNGLG9CQUFJLEtBQUssR0FBRztBQUNSLHdCQUFJLEVBQUUsU0FBUyxDQUFDLFNBQVM7QUFDekIsc0JBQUUsRUFBRSxTQUFTLENBQUMsRUFBRTtpQkFDbkIsQ0FBQzs7QUFFRixvQkFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDOztBQUU1QixvQkFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ2hCLG9CQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDL0IsaUJBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNSLHlCQUFTLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDakMseUJBQVMsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNwQyxvQkFBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFDO0FBQ3pDLHFCQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNoQyxNQUNHO0FBQ0gscUJBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQy9CO0FBQ0QsaUJBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNSLG9CQUFJLFFBQVEsQ0FBQyxhQUFhLEVBQUU7QUFDeEIsNkJBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQiw2QkFBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2lCQUN4QjtBQUNELGlCQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzNDLGlCQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3hFLHVCQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ25DLGlCQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsaUJBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7QUFFdkMsb0JBQUksVUFBVSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25GLG9CQUFJLFlBQVksR0FBRztBQUNsQiw4QkFBVSxFQUFFLHVCQUF1QjtBQUNuQywrQkFBVyxFQUFFLGNBQWMsQ0FBQyxXQUFXLENBQUM7QUFDeEMsc0NBQWtCLEVBQUMsdUJBQXVCO0FBQzFDLG9DQUFnQixFQUFDLFVBQVU7aUJBQzNCLENBQUM7QUFDRixvRUFBZ0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsWUFBWSxDQUFDLENBQUUsQ0FBQztBQUN6RCw0QkFBWSxHQUFHLEVBQUUsQ0FBQzs7QUFFTix3QkFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO2FBQzNCO0FBQ0QsbUJBQU8sS0FBSyxDQUFDO1NBQ2hCOztBQUVELFlBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDMUQsWUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFO0FBQ2xCLGdCQUFJLE9BQU8sUUFBUSxDQUFDLE9BQU8sSUFBSSxRQUFRLEVBQUU7QUFDckMsb0JBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUNyQixxQkFBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzlDLCtCQUFXLElBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2lCQUN0RDtBQUNELHdCQUFRLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQzthQUN0QyxNQUNJO0FBQ0Qsd0JBQVEsQ0FBQyxXQUFXLEdBQUcsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO2FBQzNEO1NBQ0o7O0FBRUQsWUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdCLFlBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQzs7QUFFZixZQUFJLG9CQUFvQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUNuQyxnQkFBSSxNQUFNLElBQUksU0FBUyxFQUFFO0FBQ3JCLGlCQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxLQUFLLEVBQUUsSUFBSSxFQUFFO0FBQ3ZELHlCQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDdkIsQ0FBQyxDQUFDO0FBQ0gsdUJBQU8sS0FBSyxDQUFDO2FBQ2hCLE1BQU0sSUFBSSxNQUFNLElBQUksUUFBUSxFQUFFO0FBQzNCLGlCQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxLQUFLLEVBQUUsSUFBSSxFQUFFO0FBQ3ZELHlCQUFLLENBQUMsS0FBSyxDQUFDLEdBQUc7QUFDWCwwQkFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO3FCQUNkLENBQUM7aUJBQ0wsQ0FBQyxDQUFDO0FBQ0gsdUJBQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNoQztBQUNELG1CQUFPO1NBQ1Y7O0FBSUQsZUFBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsS0FBSyxFQUFFLElBQUksRUFBRTtBQUNwQyxnQkFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDOztBQUVwQixnQkFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7O0FBRXpDLGdCQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDbEIsZ0JBQUksTUFBTSxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDO0FBQ2pDLGdCQUFJLFFBQVEsR0FBRyxJQUFJLGdCQUFnQixDQUFDLFVBQVUsU0FBUyxFQUFFO0FBQ3JELHVCQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3ZCLHFCQUFJLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBQztBQUNuQyx3QkFBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUM7QUFDckMsNkJBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBQztBQUNqRCw2QkFBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDakUsNkJBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO3lCQUMvRjtxQkFDRjtpQkFDRjthQUVKLENBQUMsQ0FBQzs7QUFFSCxvQkFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7O0FBRWpDLHFCQUFTLGFBQWEsQ0FBQyxDQUFDLEVBQUU7QUFDdEIscUJBQUssQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDOzs7QUFHdEMscUJBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNyQyxxQkFBSyxDQUFDLElBQUksQ0FBQyxVQUFVLEtBQUssRUFBRSxJQUFJLEVBQUU7O0FBRTlCLHFCQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN4QyxxQkFBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7aUJBQzNDLENBQUMsQ0FBQzthQUNOOztBQUVELGlCQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDOztBQUUzRCxpQkFBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN2QixpQkFBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN2QixpQkFBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN0QixpQkFBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN2QixpQkFBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNsQixpQkFBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7QUFFckIsaUJBQUssQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxPQUFPLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDekQsaUJBQUssQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxPQUFPLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDekQsaUJBQUssQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDdkQsaUJBQUssQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxPQUFPLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDekQsaUJBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDL0MsaUJBQUssQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDeEQsQ0FBQyxDQUFDO0tBQ04sQ0FBQztDQUNMLENBQUEsQ0FBRSxLQUFLLENBQUMsQ0FBQzs7Ozs7O0FDM1BWLElBQUksS0FBSyxHQUFDLENBQUEsWUFBVTtBQUFDLFdBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQztBQUFDLFdBQU8sSUFBSSxJQUFFLENBQUMsR0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxRQUFRLENBQUE7R0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUM7QUFBQyxXQUFNLFVBQVUsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUM7QUFBQyxXQUFPLElBQUksSUFBRSxDQUFDLElBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxNQUFNLENBQUE7R0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUM7QUFBQyxXQUFPLElBQUksSUFBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLFFBQVEsSUFBRSxDQUFDLENBQUMsYUFBYSxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTSxRQUFRLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBRSxNQUFNLENBQUMsU0FBUyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTSxRQUFRLElBQUUsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxVQUFTLENBQUMsRUFBQztBQUFDLGFBQU8sSUFBSSxJQUFFLENBQUMsQ0FBQTtLQUFDLENBQUMsQ0FBQTtHQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQztBQUFDLFdBQU8sQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUE7R0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUM7QUFBQyxXQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsRUFBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLEVBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtHQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQztBQUFDLFdBQU8sQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksTUFBTSxDQUFDLFNBQVMsR0FBQyxDQUFDLEdBQUMsU0FBUyxDQUFDLENBQUE7R0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTSxRQUFRLElBQUUsT0FBTyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUMsTUFBTSxJQUFFLENBQUMsS0FBRyxDQUFDLEdBQUMsT0FBTyxDQUFBLEFBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLEFBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUM7QUFBQyxXQUFNLFVBQVUsSUFBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsYUFBTyxDQUFDLElBQUUsQ0FBQyxDQUFDLFFBQVEsR0FBQyxDQUFDLEdBQUMsS0FBSyxDQUFDLENBQUE7S0FBQyxDQUFDLENBQUE7R0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFNBQUksQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxFQUFFLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFBLEFBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUE7R0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxJQUFJLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQTtHQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxJQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFFBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxTQUFTLElBQUUsRUFBRTtRQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxHQUFDLENBQUMsR0FBQyxNQUFLLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQSxBQUFDLENBQUE7R0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUM7QUFBQyxRQUFHO0FBQUMsYUFBTyxDQUFDLEdBQUMsTUFBTSxJQUFFLENBQUMsS0FBRyxPQUFPLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLE1BQU0sSUFBRSxDQUFDLEdBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsSUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQSxBQUFDLEdBQUMsQ0FBQyxDQUFBO0tBQUMsQ0FBQSxPQUFNLENBQUMsRUFBQztBQUFDLGFBQU8sQ0FBQyxDQUFBO0tBQUM7R0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsS0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBO0dBQUMsSUFBSSxDQUFDO01BQUMsQ0FBQztNQUFDLENBQUM7TUFBQyxDQUFDO01BQUMsQ0FBQztNQUFDLENBQUM7TUFBQyxDQUFDLEdBQUMsRUFBRTtNQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSztNQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTTtNQUFDLENBQUMsR0FBQyxNQUFNLENBQUMsUUFBUTtNQUFDLENBQUMsR0FBQyxFQUFFO01BQUMsQ0FBQyxHQUFDLEVBQUU7TUFBQyxDQUFDLEdBQUMsRUFBQyxjQUFjLEVBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsYUFBYSxFQUFDLENBQUMsRUFBQyxhQUFhLEVBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsU0FBUyxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDO01BQUMsQ0FBQyxHQUFDLG9CQUFvQjtNQUFDLENBQUMsR0FBQyw0QkFBNEI7TUFBQyxDQUFDLEdBQUMseUVBQXlFO01BQUMsQ0FBQyxHQUFDLGtCQUFrQjtNQUFDLENBQUMsR0FBQyxVQUFVO01BQUMsQ0FBQyxHQUFDLENBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFDLE1BQU0sRUFBQyxPQUFPLEVBQUMsUUFBUSxFQUFDLFFBQVEsQ0FBQztNQUFDLENBQUMsR0FBQyxDQUFDLE9BQU8sRUFBQyxTQUFTLEVBQUMsUUFBUSxFQUFDLFFBQVEsQ0FBQztNQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztNQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztNQUFDLENBQUMsR0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBQztNQUFDLENBQUMsR0FBQyw2QkFBNkI7TUFBQyxDQUFDLEdBQUMsVUFBVTtNQUFDLENBQUMsR0FBQyxFQUFFO01BQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRO01BQUMsQ0FBQyxHQUFDLEVBQUU7TUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7TUFBQyxDQUFDLEdBQUMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsS0FBSyxFQUFDLFNBQVMsRUFBQyxPQUFPLEVBQUMsV0FBVyxFQUFDLFNBQVMsRUFBQyxXQUFXLEVBQUMsV0FBVyxFQUFDLGFBQWEsRUFBQyxXQUFXLEVBQUMsYUFBYSxFQUFDLE9BQU8sRUFBQyxTQUFTLEVBQUMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLEVBQUMsUUFBUSxFQUFDLFdBQVcsRUFBQyxhQUFhLEVBQUMsZUFBZSxFQUFDLGlCQUFpQixFQUFDO01BQUMsQ0FBQyxHQUFDLEtBQUssQ0FBQyxPQUFPLElBQUUsVUFBUyxDQUFDLEVBQUM7QUFBQyxXQUFPLENBQUMsWUFBWSxLQUFLLENBQUE7R0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxRQUFHLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxJQUFFLENBQUMsS0FBRyxDQUFDLENBQUMsUUFBUSxFQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLHFCQUFxQixJQUFFLENBQUMsQ0FBQyxrQkFBa0IsSUFBRSxDQUFDLENBQUMsZ0JBQWdCLElBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFHLENBQUMsRUFBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVTtRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBRSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQ0FBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQTtHQUFDLEVBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsR0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUMsRUFBRSxDQUFBO0tBQUMsQ0FBQyxDQUFBO0dBQUMsRUFBQyxDQUFDLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxXQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLGFBQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUE7S0FBQyxDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFFBQUksQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxPQUFPLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLFdBQVcsQ0FBQyxDQUFBLEFBQUMsRUFBQyxDQUFDLEtBQUcsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUEsQUFBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEtBQUcsQ0FBQyxHQUFDLEdBQUcsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsU0FBUyxHQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUMsWUFBVTtBQUFDLE9BQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7S0FBQyxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLE9BQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUMsQ0FBQyxDQUFBLEFBQUMsRUFBQyxDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLEdBQUMsQ0FBQyxJQUFFLEVBQUUsRUFBQyxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxDQUFDLElBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQTtHQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFdBQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFHLFFBQVEsSUFBRSxPQUFPLENBQUMsRUFBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUMsR0FBRyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxLQUFJO0FBQUMsVUFBRyxDQUFDLEtBQUcsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxNQUFJO0FBQUMsVUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLENBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxLQUFLLElBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUMsTUFBTSxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLEtBQUk7QUFBQyxZQUFHLENBQUMsS0FBRyxDQUFDLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtPQUFDO0tBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtHQUFDLEVBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFdBQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxRQUFJLENBQUM7UUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxTQUFTLElBQUUsT0FBTyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBLEFBQUMsRUFBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsT0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBO0dBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFFBQUksQ0FBQztRQUFDLENBQUMsR0FBQyxHQUFHLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBRSxHQUFHLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQztRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsSUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxHQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxHQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsUUFBUSxJQUFFLENBQUMsS0FBRyxDQUFDLENBQUMsUUFBUSxHQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtHQUFDLEVBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLFFBQVEsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxXQUFPLENBQUMsS0FBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtHQUFDLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBSyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxVQUFVLENBQUEsQUFBQyxHQUFFLElBQUcsQ0FBQyxLQUFHLENBQUMsRUFBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxhQUFhLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxhQUFhLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxRQUFJLENBQUMsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFBO0dBQUMsRUFBQyxDQUFDLENBQUMsT0FBTyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxXQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxXQUFPLElBQUksSUFBRSxDQUFDLEdBQUMsRUFBRSxHQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtHQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxRQUFJLENBQUM7UUFBQyxDQUFDO1FBQUMsQ0FBQztRQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsS0FBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksSUFBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUksQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxJQUFJLElBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFDLElBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxDQUFBO0tBQUMsTUFBSyxLQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtHQUFDLEVBQUMsTUFBTSxDQUFDLElBQUksS0FBRyxDQUFDLENBQUMsU0FBUyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsK0RBQStELENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLEtBQUMsQ0FBQyxVQUFVLEdBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxHQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsR0FBRyxFQUFDLGFBQVMsQ0FBQyxFQUFDO0FBQUMsYUFBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsZUFBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7T0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFDLEVBQUMsS0FBSyxFQUFDLGlCQUFVO0FBQUMsYUFBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQTtLQUFDLEVBQUMsS0FBSyxFQUFDLGVBQVMsQ0FBQyxFQUFDO0FBQUMsYUFBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUMsWUFBVTtBQUFDLFNBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtPQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUE7S0FBQyxFQUFDLEdBQUcsRUFBQyxhQUFTLENBQUMsRUFBQztBQUFDLGFBQU8sQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0tBQUMsRUFBQyxPQUFPLEVBQUMsbUJBQVU7QUFBQyxhQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtLQUFDLEVBQUMsSUFBSSxFQUFDLGdCQUFVO0FBQUMsYUFBTyxJQUFJLENBQUMsTUFBTSxDQUFBO0tBQUMsRUFBQyxNQUFNLEVBQUMsa0JBQVU7QUFBQyxhQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBVTtBQUFDLFlBQUksSUFBRSxJQUFJLENBQUMsVUFBVSxJQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFBO09BQUMsQ0FBQyxDQUFBO0tBQUMsRUFBQyxJQUFJLEVBQUMsY0FBUyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxlQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQTtPQUFDLENBQUMsRUFBQyxJQUFJLENBQUE7S0FBQyxFQUFDLE1BQU0sRUFBQyxnQkFBUyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxlQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBO09BQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxFQUFDLEdBQUcsRUFBQyxhQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUMsRUFBQyxFQUFFLEVBQUMsWUFBUyxDQUFDLEVBQUM7QUFBQyxhQUFPLElBQUksQ0FBQyxNQUFNLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUMsRUFBQyxHQUFHLEVBQUMsYUFBUyxDQUFDLEVBQUM7QUFBQyxVQUFJLENBQUMsR0FBQyxFQUFFLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLElBQUksS0FBRyxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFNBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7T0FBQyxDQUFDLENBQUMsS0FBSTtBQUFDLFlBQUksQ0FBQyxHQUFDLFFBQVEsSUFBRSxPQUFPLENBQUMsR0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxXQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQUMsQ0FBQyxDQUFBO09BQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxFQUFDLEdBQUcsRUFBQyxhQUFTLENBQUMsRUFBQztBQUFDLGFBQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFVO0FBQUMsZUFBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtPQUFDLENBQUMsQ0FBQTtLQUFDLEVBQUMsRUFBRSxFQUFDLFlBQVMsQ0FBQyxFQUFDO0FBQUMsYUFBTSxDQUFDLENBQUMsS0FBRyxDQUFDLEdBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFDLEVBQUMsS0FBSyxFQUFDLGlCQUFVO0FBQUMsVUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxFQUFDLElBQUksRUFBQyxnQkFBVTtBQUFDLFVBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxFQUFDLElBQUksRUFBQyxjQUFTLENBQUMsRUFBQztBQUFDLFVBQUksQ0FBQztVQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUMsQ0FBQyxHQUFDLFFBQVEsSUFBRSxPQUFPLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVU7QUFBQyxZQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxpQkFBTyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtTQUFDLENBQUMsQ0FBQTtPQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVU7QUFBQyxlQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFBO09BQUMsQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFBO0tBQUMsRUFBQyxPQUFPLEVBQUMsaUJBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFVBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7VUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSSxRQUFRLElBQUUsT0FBTyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsR0FBRSxDQUFDLEdBQUMsQ0FBQyxLQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUMsRUFBQyxPQUFPLEVBQUMsaUJBQVMsQ0FBQyxFQUFDO0FBQUMsV0FBSSxJQUFJLENBQUMsR0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsR0FBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxlQUFNLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxVQUFVLENBQUEsSUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQSxHQUFFLEtBQUssQ0FBQyxDQUFBO09BQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtLQUFDLEVBQUMsTUFBTSxFQUFDLGdCQUFTLENBQUMsRUFBQztBQUFDLGFBQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxFQUFDLFFBQVEsRUFBQyxrQkFBUyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVU7QUFBQyxlQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtPQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtLQUFDLEVBQUMsUUFBUSxFQUFDLG9CQUFVO0FBQUMsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVU7QUFBQyxlQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO09BQUMsQ0FBQyxDQUFBO0tBQUMsRUFBQyxRQUFRLEVBQUMsa0JBQVMsQ0FBQyxFQUFDO0FBQUMsYUFBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxlQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBQyxVQUFTLENBQUMsRUFBQztBQUFDLGlCQUFPLENBQUMsS0FBRyxDQUFDLENBQUE7U0FBQyxDQUFDLENBQUE7T0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxFQUFDLEtBQUssRUFBQyxpQkFBVTtBQUFDLGFBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFVO0FBQUMsWUFBSSxDQUFDLFNBQVMsR0FBQyxFQUFFLENBQUE7T0FBQyxDQUFDLENBQUE7S0FBQyxFQUFDLEtBQUssRUFBQyxlQUFTLENBQUMsRUFBQztBQUFDLGFBQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxlQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtPQUFDLENBQUMsQ0FBQTtLQUFDLEVBQUMsSUFBSSxFQUFDLGdCQUFVO0FBQUMsYUFBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVU7QUFBQyxjQUFNLElBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEtBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUMsRUFBRSxDQUFBLEFBQUMsRUFBQyxNQUFNLElBQUUsZ0JBQWdCLENBQUMsSUFBSSxFQUFDLEVBQUUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxLQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUEsQUFBQyxDQUFBO09BQUMsQ0FBQyxDQUFBO0tBQUMsRUFBQyxXQUFXLEVBQUMscUJBQVMsQ0FBQyxFQUFDO0FBQUMsYUFBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO0tBQUMsRUFBQyxJQUFJLEVBQUMsY0FBUyxDQUFDLEVBQUM7QUFBQyxVQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7VUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsSUFBRSxJQUFJLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxTQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFBO09BQUMsQ0FBQyxDQUFBO0tBQUMsRUFBQyxPQUFPLEVBQUMsaUJBQVMsQ0FBQyxFQUFDO0FBQUMsVUFBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUM7QUFBQyxTQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFJLElBQUksQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQSxDQUFFLE1BQU0sR0FBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7T0FBQyxPQUFPLElBQUksQ0FBQTtLQUFDLEVBQUMsU0FBUyxFQUFDLG1CQUFTLENBQUMsRUFBQztBQUFDLFVBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxZQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7WUFBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtPQUFDLENBQUMsQ0FBQTtLQUFDLEVBQUMsTUFBTSxFQUFDLGtCQUFVO0FBQUMsYUFBTyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVU7QUFBQyxTQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO09BQUMsQ0FBQyxFQUFDLElBQUksQ0FBQTtLQUFDLEVBQUMsS0FBSyxFQUFDLGlCQUFVO0FBQUMsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVU7QUFBQyxlQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtPQUFDLENBQUMsQ0FBQTtLQUFDLEVBQUMsSUFBSSxFQUFDLGdCQUFVO0FBQUMsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBQyxNQUFNLENBQUMsQ0FBQTtLQUFDLEVBQUMsTUFBTSxFQUFDLGdCQUFTLENBQUMsRUFBQztBQUFDLGFBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFVO0FBQUMsWUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxNQUFNLElBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBQyxDQUFDLENBQUEsR0FBRSxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFBO09BQUMsQ0FBQyxDQUFBO0tBQUMsRUFBQyxJQUFJLEVBQUMsY0FBUyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFFLEdBQUcsQ0FBQyxDQUFBO0tBQUMsRUFBQyxJQUFJLEVBQUMsY0FBUyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFFLEdBQUcsQ0FBQyxDQUFBO0tBQUMsRUFBQyxJQUFJLEVBQUMsY0FBUyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsSUFBSSxTQUFTLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtPQUFDLENBQUMsR0FBQyxDQUFDLElBQUksSUFBSSxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUMsSUFBSSxDQUFBO0tBQUMsRUFBQyxJQUFJLEVBQUMsY0FBUyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsSUFBSSxTQUFTLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBQyxJQUFJLElBQUUsQ0FBQyxHQUFDLEVBQUUsR0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFBO09BQUMsQ0FBQyxHQUFDLENBQUMsSUFBSSxJQUFJLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBQyxJQUFJLENBQUE7S0FBQyxFQUFDLElBQUksRUFBQyxjQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxVQUFJLENBQUMsQ0FBQyxPQUFNLFFBQVEsSUFBRSxPQUFPLENBQUMsSUFBRSxDQUFDLElBQUksU0FBUyxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxZQUFHLENBQUMsS0FBRyxJQUFJLENBQUMsUUFBUSxFQUFDLElBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtPQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsTUFBTSxJQUFFLENBQUMsS0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFDLEVBQUUsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxJQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUE7S0FBQyxFQUFDLFVBQVUsRUFBQyxvQkFBUyxDQUFDLEVBQUM7QUFBQyxhQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBVTtBQUFDLFNBQUMsS0FBRyxJQUFJLENBQUMsUUFBUSxJQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsV0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQTtTQUFDLEVBQUMsSUFBSSxDQUFDLENBQUE7T0FBQyxDQUFDLENBQUE7S0FBQyxFQUFDLElBQUksRUFBQyxjQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxFQUFDLENBQUMsSUFBSSxTQUFTLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7T0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFDLEVBQUMsSUFBSSxFQUFDLGNBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFVBQUksQ0FBQyxHQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUU7VUFBQyxDQUFDLEdBQUMsQ0FBQyxJQUFJLFNBQVMsR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBO0tBQUMsRUFBQyxHQUFHLEVBQUMsYUFBUyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsSUFBSSxTQUFTLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtPQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFVO0FBQUMsZUFBTyxJQUFJLENBQUMsUUFBUSxDQUFBO09BQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFBLEFBQUMsQ0FBQTtLQUFDLEVBQUMsTUFBTSxFQUFDLGdCQUFTLENBQUMsRUFBQztBQUFDLFVBQUcsQ0FBQyxFQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUMsTUFBTSxFQUFFO1lBQUMsQ0FBQyxHQUFDLEVBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsUUFBUSxJQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUcsQ0FBQyxDQUFDLFFBQVEsR0FBQyxVQUFVLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7T0FBQyxDQUFDLENBQUMsSUFBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixFQUFFLENBQUMsT0FBTSxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsSUFBSSxHQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsTUFBTSxDQUFDLFdBQVcsRUFBQyxLQUFLLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUMsTUFBTSxFQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFDLENBQUE7S0FBQyxFQUFDLEdBQUcsRUFBQyxhQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxVQUFHLFNBQVMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxFQUFDO0FBQUMsWUFBSSxDQUFDO1lBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxFQUFDLE9BQU8sS0FBRyxDQUFDLEdBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxFQUFDLFFBQVEsSUFBRSxPQUFPLENBQUMsQ0FBQSxFQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUM7QUFBQyxjQUFJLENBQUMsR0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxhQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUE7V0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBO1NBQUM7T0FBQyxJQUFJLENBQUMsR0FBQyxFQUFFLENBQUMsSUFBRyxRQUFRLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFVO0FBQUMsWUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7T0FBQyxDQUFDLENBQUMsS0FBSyxLQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFVO0FBQUMsWUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7T0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVU7QUFBQyxZQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBRSxHQUFHLEdBQUMsQ0FBQyxDQUFBO09BQUMsQ0FBQyxDQUFBO0tBQUMsRUFBQyxLQUFLLEVBQUMsZUFBUyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsR0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxFQUFDLFFBQVEsRUFBQyxrQkFBUyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxlQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7T0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUMsRUFBQyxRQUFRLEVBQUMsa0JBQVMsQ0FBQyxFQUFDO0FBQUMsYUFBTyxDQUFDLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFlBQUcsV0FBVyxJQUFHLElBQUksRUFBQztBQUFDLFdBQUMsR0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztjQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxhQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7V0FBQyxFQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsQ0FBQyxNQUFNLElBQUUsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLEdBQUcsR0FBQyxFQUFFLENBQUEsQUFBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtTQUFDO09BQUMsQ0FBQyxHQUFDLElBQUksQ0FBQTtLQUFDLEVBQUMsV0FBVyxFQUFDLHFCQUFTLENBQUMsRUFBQztBQUFDLGFBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFlBQUcsV0FBVyxJQUFHLElBQUksRUFBQztBQUFDLGNBQUcsQ0FBQyxLQUFHLENBQUMsRUFBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLGFBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsQ0FBQTtXQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO1NBQUM7T0FBQyxDQUFDLENBQUE7S0FBQyxFQUFDLFdBQVcsRUFBQyxxQkFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsYUFBTyxDQUFDLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsV0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsR0FBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FBQyxDQUFDLENBQUE7T0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFBO0tBQUMsRUFBQyxTQUFTLEVBQUMsbUJBQVMsQ0FBQyxFQUFDO0FBQUMsVUFBRyxJQUFJLENBQUMsTUFBTSxFQUFDO0FBQUMsWUFBSSxDQUFDLElBQUMsV0FBVyxJQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLE9BQU8sQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLFlBQVU7QUFBQyxjQUFJLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQTtTQUFDLEdBQUMsWUFBVTtBQUFDLGNBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBQyxDQUFDLENBQUMsQ0FBQTtTQUFDLENBQUMsQ0FBQTtPQUFDO0tBQUMsRUFBQyxVQUFVLEVBQUMsb0JBQVMsQ0FBQyxFQUFDO0FBQUMsVUFBRyxJQUFJLENBQUMsTUFBTSxFQUFDO0FBQUMsWUFBSSxDQUFDLElBQUMsWUFBWSxJQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLE9BQU8sQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLFlBQVU7QUFBQyxjQUFJLENBQUMsVUFBVSxHQUFDLENBQUMsQ0FBQTtTQUFDLEdBQUMsWUFBVTtBQUFDLGNBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtTQUFDLENBQUMsQ0FBQTtPQUFDO0tBQUMsRUFBQyxRQUFRLEVBQUMsb0JBQVU7QUFBQyxVQUFHLElBQUksQ0FBQyxNQUFNLEVBQUM7QUFBQyxZQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBQyxFQUFDLEdBQUcsRUFBQyxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksSUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxJQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksSUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLElBQUUsQ0FBQyxFQUFDLEVBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUE7T0FBQztLQUFDLEVBQUMsWUFBWSxFQUFDLHdCQUFVO0FBQUMsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVU7QUFBQyxhQUFJLElBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxZQUFZLElBQUUsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBRSxRQUFRLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQTtPQUFDLENBQUMsQ0FBQTtLQUFDLEVBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBQyxDQUFDLE9BQU8sRUFBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxRQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBQyxVQUFTLENBQUMsRUFBQztBQUFDLGFBQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO0tBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxVQUFJLENBQUM7VUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxRQUFRLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFBLElBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxTQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7T0FBQyxDQUFDLENBQUE7S0FBQyxDQUFBO0dBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFDLFlBQVU7QUFBQyxVQUFJLENBQUM7VUFBQyxDQUFDO1VBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsZUFBTyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLFFBQVEsSUFBRSxDQUFDLElBQUUsT0FBTyxJQUFFLENBQUMsSUFBRSxJQUFJLElBQUUsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFBO09BQUMsQ0FBQztVQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxHQUFDLElBQUksR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFNBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGVBQWUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsY0FBRyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUcsQ0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxnQkFBSSxJQUFFLENBQUMsQ0FBQyxRQUFRLElBQUUsUUFBUSxLQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLElBQUUsQ0FBQyxDQUFDLElBQUksSUFBRSxpQkFBaUIsS0FBRyxDQUFDLENBQUMsSUFBSSxJQUFFLENBQUMsQ0FBQyxHQUFHLElBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtXQUFDLENBQUMsQ0FBQTtTQUFDLENBQUMsQ0FBQTtPQUFDLENBQUMsQ0FBQTtLQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLElBQUksR0FBQyxRQUFRLElBQUUsQ0FBQyxHQUFDLFFBQVEsR0FBQyxPQUFPLENBQUEsQUFBQyxDQUFDLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLENBQUE7S0FBQyxDQUFBO0dBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLGdCQUFnQixHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUE7Q0FBQyxDQUFBLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFDLEtBQUssRUFBQyxLQUFLLENBQUMsS0FBRyxNQUFNLENBQUMsQ0FBQyxLQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUMsS0FBSyxDQUFBLEFBQUMsRUFBQyxDQUFBLFVBQVMsQ0FBQyxFQUFDO0FBQUMsV0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLENBQUMsSUFBSSxLQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxFQUFFLENBQUEsQUFBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsU0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsRUFBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsRUFBRSxDQUFBLENBQUUsTUFBTSxDQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsYUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxFQUFFLElBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxHQUFHLElBQUUsQ0FBQyxDQUFBLEFBQUMsQ0FBQTtLQUFDLENBQUMsQ0FBQTtHQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQztBQUFDLFFBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQSxDQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFNLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQTtHQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQztBQUFDLFdBQU8sSUFBSSxNQUFNLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFDLE9BQU8sQ0FBQyxHQUFDLFNBQVMsQ0FBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFdBQU8sQ0FBQyxDQUFDLEdBQUcsSUFBRSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUE7R0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxRQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFVBQUcsT0FBTyxJQUFFLENBQUMsRUFBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFHLENBQUMsR0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTSxDQUFDLENBQUMsSUFBRSxDQUFDLEtBQUcsSUFBSSxJQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFDLFNBQVMsQ0FBQyxHQUFDLEtBQUssQ0FBQyxDQUFBO09BQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsYUFBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLDZCQUE2QixFQUFFLENBQUEsRUFBQztBQUFDLFdBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUcsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFDLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFBO1NBQUM7T0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFD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LEdBQUMsRUFBRTtNQUFDLENBQUMsR0FBQyxFQUFFO01BQUMsQ0FBQyxJQUFDLFdBQVcsSUFBRyxNQUFNLENBQUE7TUFBQyxDQUFDLEdBQUMsRUFBQyxLQUFLLEVBQUMsU0FBUyxFQUFDLElBQUksRUFBQyxVQUFVLEVBQUM7TUFBQyxDQUFDLEdBQUMsRUFBQyxVQUFVLEVBQUMsV0FBVyxFQUFDLFVBQVUsRUFBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMsU0FBUyxHQUFDLGFBQWEsRUFBQyxDQUFDLENBQUMsS0FBSyxHQUFDLEVBQUMsR0FBRyxFQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUssR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxRQUFJLENBQUMsR0FBQyxDQUFDLElBQUksU0FBUyxJQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsVUFBSSxDQUFDLEdBQUMsU0FBRixDQUFDLEdBQVc7QUFBQyxlQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBQyxTQUFTLENBQUMsQ0FBQTtPQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUE7S0FBQyxJQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLENBQUMsSUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUEsR0FBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxXQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtHQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtHQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxXQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBO0dBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxTQUFGLENBQUMsR0FBVztBQUFDLFdBQU0sQ0FBQyxDQUFDLENBQUE7R0FBQztNQUFDLENBQUMsR0FBQyxTQUFGLENBQUMsR0FBVztBQUFDLFdBQU0sQ0FBQyxDQUFDLENBQUE7R0FBQztNQUFDLENBQUMsR0FBQyxrQ0FBa0M7TUFBQyxDQUFDLEdBQUMsRUFBQyxjQUFjLEVBQUMsb0JBQW9CLEVBQUMsd0JBQXdCLEVBQUMsK0JBQStCLEVBQUMsZUFBZSxFQUFDLHNCQUFzQixFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFdBQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBO0dBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFdBQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFBO0dBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxXQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQTtHQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDO1FBQUMsQ0FBQztRQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsT0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBLElBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEtBQUcsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQSxLQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsT0FBQyxLQUFHLENBQUMsR0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLGVBQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFDLFNBQVMsQ0FBQyxDQUFBO09BQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQztZQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFFLENBQUMsS0FBRyxDQUFDLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUMsYUFBYSxFQUFDLENBQUMsRUFBQyxTQUFTLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUEsQ0FBRSxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxHQUFFLEtBQUssQ0FBQyxDQUFBO09BQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFBO0tBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQTtHQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFFBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxPQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBLElBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEtBQUcsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLEFBQUMsRUFBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFVO0FBQUMsT0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQTtHQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUssR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFVO0FBQUMsT0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUUsVUFBVSxJQUFFLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsZUFBZSxJQUFHLElBQUksR0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUMsQ0FBQyxDQUFBO0dBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGNBQWMsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxRQUFJLENBQUMsRUFBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLE9BQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUssR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLElBQUUsQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsZUFBTyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsNkJBQTZCLEVBQUUsR0FBQyxDQUFDLENBQUMsR0FBQyxLQUFLLENBQUMsQ0FBQTtPQUFDLENBQUMsQ0FBQTtLQUFDLENBQUMsRUFBQyxDQUFDLENBQUE7R0FBQyxFQUFDLHNMQUFzTCxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxLQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsYUFBTyxDQUFDLElBQUksU0FBUyxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxDQUFBO0dBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsS0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUEsQUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLFFBQVEsQ0FBQztRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsRUFBQyxLQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBQyxTQUFTLElBQUUsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQyxDQUFBO0NBQUMsQ0FBQSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUEsVUFBUyxDQUFDLEVBQUM7QUFBQyxXQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFFBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQyxLQUFLLENBQUMsQ0FBQTtHQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQztBQUFDLEtBQUMsQ0FBQyxNQUFNLElBQUUsQ0FBQyxLQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksRUFBQyxXQUFXLENBQUMsQ0FBQTtHQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQztBQUFDLEtBQUMsQ0FBQyxNQUFNLElBQUUsRUFBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsVUFBVSxDQUFDLENBQUE7R0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsZ0JBQWdCLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLFVBQVUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU87UUFBQyxDQUFDLEdBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxhQUFhLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsV0FBVyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtHQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLGNBQWMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtHQUFDLFNBQVMsQ0FBQyxHQUFFLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsRUFBQyxDQUFDLEtBQUcsQ0FBQyxJQUFFLENBQUMsR0FBQyxNQUFNLEdBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBQyxRQUFRLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBRSxLQUFLLENBQUEsQUFBQyxJQUFFLE1BQU0sQ0FBQTtHQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxXQUFNLEVBQUUsSUFBRSxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUEsQ0FBRSxPQUFPLENBQUMsV0FBVyxFQUFDLEdBQUcsQ0FBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsS0FBQyxDQUFDLFdBQVcsSUFBRSxDQUFDLENBQUMsSUFBSSxJQUFFLFFBQVEsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBRyxDQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBRSxDQUFDLENBQUMsSUFBSSxJQUFFLEtBQUssSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsS0FBSyxDQUFDLENBQUEsQUFBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsS0FBSyxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsS0FBSyxDQUFDLENBQUEsQUFBQyxFQUFDLEVBQUMsR0FBRyxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsUUFBUSxFQUFDLENBQUMsRUFBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDO1FBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsT0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxHQUFHLElBQUUsQ0FBQyxJQUFFLFFBQVEsSUFBRSxDQUFDLElBQUUsT0FBTyxJQUFFLENBQUMsR0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFBLEFBQUMsR0FBQyxHQUFHLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFDLE9BQU8sSUFBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLElBQUUsUUFBUSxJQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxDQUFDLENBQUE7R0FBQyxJQUFJLENBQUM7TUFBQyxDQUFDO01BQUMsQ0FBQyxHQUFDLENBQUM7TUFBQyxDQUFDLEdBQUMsTUFBTSxDQUFDLFFBQVE7TUFBQyxDQUFDLEdBQUMscURBQXFEO01BQUMsQ0FBQyxHQUFDLG9DQUFvQztNQUFDLENBQUMsR0FBQyw2QkFBNkI7TUFBQyxDQUFDLEdBQUMsa0JBQWtCO01BQUMsQ0FBQyxHQUFDLFdBQVc7TUFBQyxDQUFDLEdBQUMsT0FBTztNQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxRQUFHLEVBQUUsTUFBTSxJQUFHLENBQUMsQ0FBQSxBQUFDLEVBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUFDLENBQUM7UUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLGFBQWE7UUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQSxJQUFHLE9BQU8sR0FBRSxFQUFFLENBQUM7UUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFBQyxDQUFDLEdBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUFDLENBQUMsR0FBQyxTQUFGLENBQUMsQ0FBVSxDQUFDLEVBQUM7QUFBQyxPQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBQyxDQUFDLElBQUUsT0FBTyxDQUFDLENBQUE7S0FBQztRQUFDLENBQUMsR0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsQ0FBQyxPQUFPLENBQUMsSUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLGtCQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sSUFBRSxDQUFDLENBQUMsSUFBSSxJQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLElBQUUsT0FBTyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxLQUFLLENBQUMsQ0FBQTtLQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDLENBQUEsSUFBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUMsWUFBVTtBQUFDLE9BQUMsR0FBQyxTQUFTLENBQUE7S0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsT0FBTyxHQUFDLENBQUMsS0FBRyxDQUFDLEdBQUMsVUFBVSxDQUFDLFlBQVU7QUFBQyxPQUFDLENBQUMsU0FBUyxDQUFDLENBQUE7S0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQTtHQUFDLEVBQUMsQ0FBQyxDQUFDLFlBQVksR0FBQyxFQUFDLElBQUksRUFBQyxLQUFLLEVBQUMsVUFBVSxFQUFDLENBQUMsRUFBQyxPQUFPLEVBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsUUFBUSxFQUFDLENBQUMsRUFBQyxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsRUFBQyxHQUFHLEVBQUMsZUFBVTtBQUFDLGFBQU8sSUFBSSxNQUFNLENBQUMsY0FBYyxFQUFBLENBQUE7S0FBQyxFQUFDLE9BQU8sRUFBQyxFQUFDLE1BQU0sRUFBQyxtRUFBbUUsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLEdBQUcsRUFBQywyQkFBMkIsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLElBQUksRUFBQyxZQUFZLEVBQUMsRUFBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsRUFBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFFBQUksQ0FBQztRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBQyxDQUFDLElBQUUsRUFBRSxDQUFDO1FBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRLElBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLEVBQUMsS0FBSyxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFdBQVcsS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLElBQUksSUFBRSxDQUFDLENBQUMsUUFBUSxHQUFDLElBQUksR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBLEFBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxLQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRO1FBQUMsQ0FBQyxHQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxLQUFHLENBQUMsR0FBQyxPQUFPLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUcsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxJQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUcsQ0FBQyxDQUFDLElBQUUsUUFBUSxJQUFFLENBQUMsSUFBRSxPQUFPLElBQUUsQ0FBQyxDQUFBLEFBQUMsS0FBRyxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFDLElBQUksR0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQSxBQUFDLEVBQUMsT0FBTyxJQUFFLENBQUMsQ0FBQSxFQUFDLE9BQU8sQ0FBQyxLQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLElBQUksR0FBQyxDQUFDLENBQUMsS0FBSyxLQUFHLENBQUMsQ0FBQyxHQUFDLEVBQUUsR0FBQyxZQUFZLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQUMsQ0FBQyxHQUFDLEVBQUU7UUFBQyxDQUFDLEdBQUMsU0FBRixDQUFDLENBQVUsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLE9BQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtLQUFDO1FBQUMsQ0FBQyxHQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUMsTUFBTSxDQUFDLEVBQUUsR0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVE7UUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRTtRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsV0FBVyxJQUFFLENBQUMsQ0FBQyxrQkFBa0IsRUFBQyxnQkFBZ0IsQ0FBQyxFQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUMsQ0FBQyxJQUFFLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRLElBQUUsQ0FBQyxDQUFBLEtBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxnQkFBZ0IsSUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsSUFBRSxDQUFDLENBQUMsV0FBVyxLQUFHLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxJQUFJLElBQUUsS0FBSyxJQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUEsSUFBRyxDQUFDLENBQUMsY0FBYyxFQUFDLENBQUMsQ0FBQyxXQUFXLElBQUUsbUNBQW1DLENBQUMsRUFBQyxDQUFDLENBQUMsT0FBTyxDQUFBLEVBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxnQkFBZ0IsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLGtCQUFrQixHQUFDLFlBQVU7QUFBQyxVQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsVUFBVSxFQUFDO0FBQUMsU0FBQyxDQUFDLGtCQUFrQixHQUFDLENBQUMsRUFBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBRSxHQUFHLElBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBQyxHQUFHLElBQUUsR0FBRyxJQUFFLENBQUMsQ0FBQyxNQUFNLElBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxNQUFNLElBQUUsT0FBTyxJQUFFLENBQUMsRUFBQztBQUFDLFdBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUUsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBRztBQUFDLG9CQUFRLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQSxDQUFFLENBQUMsQ0FBQyxHQUFDLEtBQUssSUFBRSxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUMsTUFBTSxJQUFFLENBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUE7V0FBQyxDQUFBLE9BQU0sQ0FBQyxFQUFDO0FBQUMsYUFBQyxHQUFDLENBQUMsQ0FBQTtXQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLGFBQWEsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtTQUFDLE1BQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLElBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUMsT0FBTyxHQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBO09BQUM7S0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUEsRUFBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBQyxDQUFDLENBQUMsSUFBSSxFQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxPQUFPLElBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEdBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxVQUFVLENBQUMsWUFBVTtBQUFDLE9BQUMsQ0FBQyxrQkFBa0IsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsU0FBUyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFBO0dBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxHQUFDLFlBQVU7QUFBQyxXQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQTtHQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxZQUFVO0FBQUMsUUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxHQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0dBQUMsRUFBQyxDQUFDLENBQUMsT0FBTyxHQUFDLFlBQVU7QUFBQyxRQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEdBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxRQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7UUFBQyxDQUFDLEdBQUMsSUFBSTtRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7UUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxPQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxTQUFTLENBQUMsQ0FBQTtLQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUE7R0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDLEdBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxPQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQSxBQUFDLEVBQUMsSUFBSSxJQUFFLENBQUMsS0FBRyxDQUFDLEdBQUMsRUFBRSxDQUFBLEFBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQyxHQUFHLENBQUMsQ0FBQTtHQUFDLENBQUE7Q0FBQyxDQUFBLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQSxVQUFTLENBQUMsRUFBQztBQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxHQUFDLFlBQVU7QUFBQyxRQUFJLENBQUM7UUFBQyxDQUFDO1FBQUMsQ0FBQyxHQUFDLEVBQUU7UUFBQyxDQUFDLEdBQUMsU0FBRixDQUFDLENBQVUsQ0FBQyxFQUFDO0FBQUMsYUFBTyxDQUFDLENBQUMsT0FBTyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQTtLQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLE9BQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsSUFBRSxVQUFVLElBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsSUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUUsUUFBUSxJQUFFLENBQUMsSUFBRSxPQUFPLElBQUUsQ0FBQyxJQUFFLFFBQVEsSUFBRSxDQUFDLElBQUUsTUFBTSxJQUFFLENBQUMsS0FBRyxPQUFPLElBQUUsQ0FBQyxJQUFFLFVBQVUsSUFBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQSxBQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFBO0tBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQTtHQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEdBQUMsWUFBVTtBQUFDLFFBQUksQ0FBQyxHQUFDLEVBQUUsQ0FBQyxPQUFPLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxPQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxHQUFHLEdBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7S0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtHQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxRQUFHLENBQUMsSUFBSSxTQUFTLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFHLElBQUksQ0FBQyxNQUFNLEVBQUM7QUFBQyxVQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxJQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7S0FBQyxPQUFPLElBQUksQ0FBQTtHQUFDLENBQUE7Q0FBQyxDQUFBLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQSxVQUFTLENBQUMsRUFBQztBQUFDLGFBQVcsSUFBRSxFQUFFLElBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLEVBQUMsQ0FBQyxFQUFDLFdBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLGFBQU8sQ0FBQyxHQUFDLENBQUMsSUFBRSxFQUFFLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUMsQ0FBQyxJQUFFLEVBQUUsRUFBQyxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQTtLQUFDLEVBQUMsR0FBRyxFQUFDLGFBQVMsQ0FBQyxFQUFDO0FBQUMsYUFBTSxPQUFPLEtBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBRSxLQUFLLElBQUcsQ0FBQyxDQUFBO0tBQUMsRUFBQyxDQUFDLENBQUMsSUFBRztBQUFDLG9CQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7R0FBQyxDQUFBLE9BQU0sQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDLEdBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLGdCQUFnQixHQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsVUFBRztBQUFDLGVBQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO09BQUMsQ0FBQSxPQUFNLENBQUMsRUFBQztBQUFDLGVBQU8sSUFBSSxDQUFBO09BQUM7S0FBQyxDQUFBO0dBQUM7Q0FBQyxDQUFBLENBQUMsS0FBSyxDQUFDLENBQUM7Ozs7Ozs7O0FBUTkrd0IsQ0FBQyxDQUFBLFVBQVMsQ0FBQyxFQUFDO0FBQUMsV0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLElBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUEsQUFBQyxJQUFFLE1BQU0sS0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLEtBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFBQyxDQUFDO1FBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUEsQUFBQyxFQUFDO0FBQUMsVUFBSSxDQUFDLEdBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUMsRUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFBO0tBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtHQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLO01BQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFHO01BQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPO01BQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUMsRUFBQyxPQUFPLEVBQUMsbUJBQVU7QUFBQyxhQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLEdBQUMsS0FBSyxDQUFDLENBQUE7S0FBQyxFQUFDLE1BQU0sRUFBQyxrQkFBVTtBQUFDLGFBQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLEtBQUssQ0FBQyxHQUFDLElBQUksQ0FBQTtLQUFDLEVBQUMsUUFBUSxFQUFDLG9CQUFVO0FBQUMsYUFBTyxJQUFJLENBQUMsUUFBUSxHQUFDLElBQUksR0FBQyxLQUFLLENBQUMsQ0FBQTtLQUFDLEVBQUMsT0FBTyxFQUFDLG1CQUFVO0FBQUMsYUFBTyxJQUFJLENBQUMsT0FBTyxHQUFDLElBQUksR0FBQyxLQUFLLENBQUMsQ0FBQTtLQUFDLEVBQUMsTUFBTSxFQUFDLGtCQUFVO0FBQUMsYUFBTyxJQUFJLENBQUMsVUFBVSxDQUFBO0tBQUMsRUFBQyxLQUFLLEVBQUMsZUFBUyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsS0FBRyxDQUFDLEdBQUMsSUFBSSxHQUFDLEtBQUssQ0FBQyxDQUFBO0tBQUMsRUFBQyxJQUFJLEVBQUMsY0FBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsYUFBTyxDQUFDLEtBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLEdBQUMsSUFBSSxHQUFDLEtBQUssQ0FBQyxDQUFBO0tBQUMsRUFBQyxFQUFFLEVBQUMsWUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLGFBQU8sQ0FBQyxLQUFHLENBQUMsR0FBQyxJQUFJLEdBQUMsS0FBSyxDQUFDLENBQUE7S0FBQyxFQUFDLFFBQVEsRUFBQyxrQkFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLGFBQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLEdBQUMsS0FBSyxDQUFDLENBQUE7S0FBQyxFQUFDLEdBQUcsRUFBQyxhQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsYUFBTyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUMsSUFBSSxHQUFDLEtBQUssQ0FBQyxDQUFBO0tBQUMsRUFBQztNQUFDLENBQUMsR0FBQyxJQUFJLE1BQU0sQ0FBQyxvQ0FBb0MsQ0FBQztNQUFDLENBQUMsR0FBQyxPQUFPO01BQUMsQ0FBQyxHQUFDLE9BQU8sR0FBRSxDQUFDLElBQUksSUFBSSxFQUFBLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxXQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFVBQUc7QUFBQyxZQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEdBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxHQUFHLEdBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7T0FBQyxDQUFBLE9BQU0sQ0FBQyxFQUFDO0FBQUMsZUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLCtCQUErQixFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQSxDQUFBO09BQUMsU0FBTztBQUFDLFNBQUMsSUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFBO09BQUMsT0FBTyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxlQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7T0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUE7S0FBQyxDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxhQUFNLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxLQUFJLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUEsQUFBQyxDQUFBO0tBQUMsQ0FBQyxDQUFBO0dBQUMsQ0FBQTtDQUFDLENBQUEsQ0FBQyxLQUFLLENBQUMsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJ2YXIgRHJhZ0Ryb3BUb3VjaCwgY2hlY2tUb3VjaFR5cGUgPSB0cnVlO1xyXG4oZnVuY3Rpb24gKERyYWdEcm9wVG91Y2hfMSkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgLyoqXHJcbiAgICAgKiBPYmplY3QgdXNlZCB0byBob2xkIHRoZSBkYXRhIHRoYXQgaXMgYmVpbmcgZHJhZ2dlZCBkdXJpbmcgZHJhZyBhbmQgZHJvcCBvcGVyYXRpb25zLlxyXG4gICAgICpcclxuICAgICAqIEl0IG1heSBob2xkIG9uZSBvciBtb3JlIGRhdGEgaXRlbXMgb2YgZGlmZmVyZW50IHR5cGVzLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dFxyXG4gICAgICogZHJhZyBhbmQgZHJvcCBvcGVyYXRpb25zIGFuZCBkYXRhIHRyYW5zZmVyIG9iamVjdHMsIHNlZVxyXG4gICAgICogPGEgaHJlZj1cImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9EYXRhVHJhbnNmZXJcIj5IVE1MIERyYWcgYW5kIERyb3AgQVBJPC9hPi5cclxuICAgICAqXHJcbiAgICAgKiBUaGlzIG9iamVjdCBpcyBjcmVhdGVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIEBzZWU6RHJhZ0Ryb3BUb3VjaCBzaW5nbGV0b24gYW5kIGlzXHJcbiAgICAgKiBhY2Nlc3NpYmxlIHRocm91Z2ggdGhlIEBzZWU6ZGF0YVRyYW5zZmVyIHByb3BlcnR5IG9mIGFsbCBkcmFnIGV2ZW50cy5cclxuICAgICAqL1xyXG4gICAgdmFyIERhdGFUcmFuc2ZlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gRGF0YVRyYW5zZmVyKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9kcm9wRWZmZWN0ID0gJ21vdmUnO1xyXG4gICAgICAgICAgICB0aGlzLl9lZmZlY3RBbGxvd2VkID0gJ2FsbCc7XHJcbiAgICAgICAgICAgIHRoaXMuX2RhdGEgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERhdGFUcmFuc2Zlci5wcm90b3R5cGUsIFwiZHJvcEVmZmVjdFwiLCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHR5cGUgb2YgZHJhZy1hbmQtZHJvcCBvcGVyYXRpb24gY3VycmVudGx5IHNlbGVjdGVkLlxyXG4gICAgICAgICAgICAgKiBUaGUgdmFsdWUgbXVzdCBiZSAnbm9uZScsICAnY29weScsICAnbGluaycsIG9yICdtb3ZlJy5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Ryb3BFZmZlY3Q7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kcm9wRWZmZWN0ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYXRhVHJhbnNmZXIucHJvdG90eXBlLCBcImVmZmVjdEFsbG93ZWRcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogR2V0cyBvciBzZXRzIHRoZSB0eXBlcyBvZiBvcGVyYXRpb25zIHRoYXQgYXJlIHBvc3NpYmxlLlxyXG4gICAgICAgICAgICAgKiBNdXN0IGJlIG9uZSBvZiAnbm9uZScsICdjb3B5JywgJ2NvcHlMaW5rJywgJ2NvcHlNb3ZlJywgJ2xpbmsnLFxyXG4gICAgICAgICAgICAgKiAnbGlua01vdmUnLCAnbW92ZScsICdhbGwnIG9yICd1bmluaXRpYWxpemVkJy5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VmZmVjdEFsbG93ZWQ7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lZmZlY3RBbGxvd2VkID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYXRhVHJhbnNmZXIucHJvdG90eXBlLCBcInR5cGVzXCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEdldHMgYW4gYXJyYXkgb2Ygc3RyaW5ncyBnaXZpbmcgdGhlIGZvcm1hdHMgdGhhdCB3ZXJlIHNldCBpbiB0aGUgQHNlZTpkcmFnc3RhcnQgZXZlbnQuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl9kYXRhKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVtb3ZlcyB0aGUgZGF0YSBhc3NvY2lhdGVkIHdpdGggYSBnaXZlbiB0eXBlLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogVGhlIHR5cGUgYXJndW1lbnQgaXMgb3B0aW9uYWwuIElmIHRoZSB0eXBlIGlzIGVtcHR5IG9yIG5vdCBzcGVjaWZpZWQsIHRoZSBkYXRhXHJcbiAgICAgICAgICogYXNzb2NpYXRlZCB3aXRoIGFsbCB0eXBlcyBpcyByZW1vdmVkLiBJZiBkYXRhIGZvciB0aGUgc3BlY2lmaWVkIHR5cGUgZG9lcyBub3QgZXhpc3QsXHJcbiAgICAgICAgICogb3IgdGhlIGRhdGEgdHJhbnNmZXIgY29udGFpbnMgbm8gZGF0YSwgdGhpcyBtZXRob2Qgd2lsbCBoYXZlIG5vIGVmZmVjdC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSB0eXBlIFR5cGUgb2YgZGF0YSB0byByZW1vdmUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgRGF0YVRyYW5zZmVyLnByb3RvdHlwZS5jbGVhckRhdGEgPSBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fZGF0YVt0eXBlXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXRyaWV2ZXMgdGhlIGRhdGEgZm9yIGEgZ2l2ZW4gdHlwZSwgb3IgYW4gZW1wdHkgc3RyaW5nIGlmIGRhdGEgZm9yIHRoYXQgdHlwZSBkb2VzXHJcbiAgICAgICAgICogbm90IGV4aXN0IG9yIHRoZSBkYXRhIHRyYW5zZmVyIGNvbnRhaW5zIG5vIGRhdGEuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gdHlwZSBUeXBlIG9mIGRhdGEgdG8gcmV0cmlldmUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgRGF0YVRyYW5zZmVyLnByb3RvdHlwZS5nZXREYXRhID0gZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFbdHlwZV0gfHwgJyc7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTZXQgdGhlIGRhdGEgZm9yIGEgZ2l2ZW4gdHlwZS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEZvciBhIGxpc3Qgb2YgcmVjb21tZW5kZWQgZHJhZyB0eXBlcywgcGxlYXNlIHNlZVxyXG4gICAgICAgICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0d1aWRlL0hUTUwvUmVjb21tZW5kZWRfRHJhZ19UeXBlcy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSB0eXBlIFR5cGUgb2YgZGF0YSB0byBhZGQuXHJcbiAgICAgICAgICogQHBhcmFtIHZhbHVlIERhdGEgdG8gYWRkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIERhdGFUcmFuc2Zlci5wcm90b3R5cGUuc2V0RGF0YSA9IGZ1bmN0aW9uICh0eXBlLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhW3R5cGVdID0gdmFsdWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTZXQgdGhlIGltYWdlIHRvIGJlIHVzZWQgZm9yIGRyYWdnaW5nIGlmIGEgY3VzdG9tIG9uZSBpcyBkZXNpcmVkLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGltZyBBbiBpbWFnZSBlbGVtZW50IHRvIHVzZSBhcyB0aGUgZHJhZyBmZWVkYmFjayBpbWFnZS5cclxuICAgICAgICAgKiBAcGFyYW0gb2Zmc2V0WCBUaGUgaG9yaXpvbnRhbCBvZmZzZXQgd2l0aGluIHRoZSBpbWFnZS5cclxuICAgICAgICAgKiBAcGFyYW0gb2Zmc2V0WSBUaGUgdmVydGljYWwgb2Zmc2V0IHdpdGhpbiB0aGUgaW1hZ2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgRGF0YVRyYW5zZmVyLnByb3RvdHlwZS5zZXREcmFnSW1hZ2UgPSBmdW5jdGlvbiAoaW1nLCBvZmZzZXRYLCBvZmZzZXRZKSB7XHJcbiAgICAgICAgICAgIHZhciBkZHQgPSBEcmFnRHJvcFRvdWNoLl9pbnN0YW5jZTtcclxuICAgICAgICAgICAgZGR0Ll9pbWdDdXN0b20gPSBpbWc7XHJcbiAgICAgICAgICAgIGRkdC5faW1nT2Zmc2V0ID0geyB4OiBvZmZzZXRYLCB5OiBvZmZzZXRZIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gRGF0YVRyYW5zZmVyO1xyXG4gICAgfSkoKTtcclxuICAgIERyYWdEcm9wVG91Y2hfMS5EYXRhVHJhbnNmZXIgPSBEYXRhVHJhbnNmZXI7XHJcbiAgICAvKipcclxuICAgICAqIERlZmluZXMgYSBjbGFzcyB0aGF0IGFkZHMgc3VwcG9ydCBmb3IgdG91Y2gtYmFzZWQgSFRNTDUgZHJhZy9kcm9wIG9wZXJhdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIEBzZWU6RHJhZ0Ryb3BUb3VjaCBjbGFzcyBsaXN0ZW5zIHRvIHRvdWNoIGV2ZW50cyBhbmQgcmFpc2VzIHRoZVxyXG4gICAgICogYXBwcm9wcmlhdGUgSFRNTDUgZHJhZy9kcm9wIGV2ZW50cyBhcyBpZiB0aGUgZXZlbnRzIGhhZCBiZWVuIGNhdXNlZFxyXG4gICAgICogYnkgbW91c2UgYWN0aW9ucy5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgcHVycG9zZSBvZiB0aGlzIGNsYXNzIGlzIHRvIGVuYWJsZSB1c2luZyBleGlzdGluZywgc3RhbmRhcmQgSFRNTDVcclxuICAgICAqIGRyYWcvZHJvcCBjb2RlIG9uIG1vYmlsZSBkZXZpY2VzIHJ1bm5pbmcgSU9TIG9yIEFuZHJvaWQuXHJcbiAgICAgKlxyXG4gICAgICogVG8gdXNlLCBpbmNsdWRlIHRoZSBEcmFnRHJvcFRvdWNoLmpzIGZpbGUgb24gdGhlIHBhZ2UuIFRoZSBjbGFzcyB3aWxsXHJcbiAgICAgKiBhdXRvbWF0aWNhbGx5IHN0YXJ0IG1vbml0b3JpbmcgdG91Y2ggZXZlbnRzIGFuZCB3aWxsIHJhaXNlIHRoZSBIVE1MNVxyXG4gICAgICogZHJhZyBkcm9wIGV2ZW50cyAoZHJhZ3N0YXJ0LCBkcmFnZW50ZXIsIGRyYWdsZWF2ZSwgZHJvcCwgZHJhZ2VuZCkgd2hpY2hcclxuICAgICAqIHNob3VsZCBiZSBoYW5kbGVkIGJ5IHRoZSBhcHBsaWNhdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBGb3IgZGV0YWlscyBhbmQgZXhhbXBsZXMgb24gSFRNTCBkcmFnIGFuZCBkcm9wLCBzZWVcclxuICAgICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0d1aWRlL0hUTUwvRHJhZ19vcGVyYXRpb25zLlxyXG4gICAgICovXHJcbiAgICB2YXIgRHJhZ0Ryb3BUb3VjaCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5pdGlhbGl6ZXMgdGhlIHNpbmdsZSBpbnN0YW5jZSBvZiB0aGUgQHNlZTpEcmFnRHJvcFRvdWNoIGNsYXNzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIERyYWdEcm9wVG91Y2goKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xhc3RDbGljayA9IDA7XHJcbiAgICAgICAgICAgIC8vIGVuZm9yY2Ugc2luZ2xldG9uIHBhdHRlcm5cclxuICAgICAgICAgICAgaWYgKERyYWdEcm9wVG91Y2guX2luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyAnRHJhZ0Ryb3BUb3VjaCBpbnN0YW5jZSBhbHJlYWR5IGNyZWF0ZWQuJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBsaXN0ZW4gdG8gdG91Y2ggZXZlbnRzXHJcbiAgICAgICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGQgPSBkb2N1bWVudCwgdHMgPSB0aGlzLl90b3VjaHN0YXJ0LmJpbmQodGhpcyksIHRtID0gdGhpcy5fdG91Y2htb3ZlLmJpbmQodGhpcyksIHRlID0gdGhpcy5fdG91Y2hlbmQuYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIGQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRzKTtcclxuICAgICAgICAgICAgICAgIGQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdG0pO1xyXG4gICAgICAgICAgICAgICAgZC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRlKTtcclxuICAgICAgICAgICAgICAgIGQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCB0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2V0cyBhIHJlZmVyZW5jZSB0byB0aGUgQHNlZTpEcmFnRHJvcFRvdWNoIHNpbmdsZXRvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBEcmFnRHJvcFRvdWNoLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gRHJhZ0Ryb3BUb3VjaC5faW5zdGFuY2U7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyAqKiBldmVudCBoYW5kbGVyc1xyXG4gICAgICAgIERyYWdEcm9wVG91Y2gucHJvdG90eXBlLl90b3VjaHN0YXJ0ID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3Nob3VsZEhhbmRsZShlKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gcmFpc2UgZG91YmxlLWNsaWNrIGFuZCBwcmV2ZW50IHpvb21pbmdcclxuICAgICAgICAgICAgICAgIGlmIChEYXRlLm5vdygpIC0gdGhpcy5fbGFzdENsaWNrIDwgRHJhZ0Ryb3BUb3VjaC5fREJMQ0xJQ0spIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGlzcGF0Y2hFdmVudChlLCAnZGJsY2xpY2snLCBlLnRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9lLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBjbGVhciBhbGwgdmFyaWFibGVzXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgLy8gZ2V0IG5lYXJlc3QgZHJhZ2dhYmxlIGVsZW1lbnRcclxuICAgICAgICAgICAgICAgIHZhciBzcmMgPSB0aGlzLl9jbG9zZXN0RHJhZ2dhYmxlKGUudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIGlmIChzcmMpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBnaXZlIGNhbGxlciBhIGNoYW5jZSB0byBoYW5kbGUgdGhlIGhvdmVyL21vdmUgZXZlbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9kaXNwYXRjaEV2ZW50KGUsICdtb3VzZW1vdmUnLCBlLnRhcmdldCkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgIXRoaXMuX2Rpc3BhdGNoRXZlbnQoZSwgJ21vdXNlZG93bicsIGUudGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgcmVhZHkgdG8gc3RhcnQgZHJhZ2dpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZHJhZ1NvdXJjZSA9IHNyYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHREb3duID0gdGhpcy5fZ2V0UG9pbnQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RUb3VjaCA9IGU7XHJcblx0XHRcdFx0XHRcdGlmIChlLnRhcmdldC5jbGFzc05hbWUgPT0gJ3B1bGwtbGVmdCcgfHwgZS50YXJnZXQuY2xhc3NOYW1lID09ICd3ZC0xNScgfHwgZS50YXJnZXQuY2xhc3NOYW1lID09ICdhY2NvcmRpb25JbWcnIHx8IGUudGFyZ2V0LmNsYXNzTmFtZSA9PSAnYWNjb3JkaW9uSW1nJyB8fCBlLnRhcmdldC5jbGFzc05hbWUgPT0gJ21vYmlsZU1vZGUnIHx8IGUudGFyZ2V0LmNsYXNzTmFtZSA9PSAnbW9iaWxlTW9kZSBleHBhbmRlZCcgfHwgZS50YXJnZXQuY2xhc3NOYW1lID09ICdtdicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrVG91Y2hUeXBlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0XHRpZihlLnRhcmdldC5jbGFzc05hbWUgPT0gJ2FjY29yZGlvbkltZycgfHwgZS50YXJnZXQuY2xhc3NOYW1lID09ICdtb2JpbGVNb2RlJyB8fCBlLnRhcmdldC5jbGFzc05hbWUgPT0gJ21vYmlsZU1vZGUgZXhwYW5kZWQnKXtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciAkdGhpcyA9ICQodGhpcyksIGFsbFB1YmxpY2F0aW9ucyA9ICQoJyNhbGxQdWJsaWNhdGlvbnNQYW4nKSwgcFBhbiA9ICR0aGlzLmNsb3Nlc3QoJy5wdWJsaWNhdGlvblBhbicpLCB0aGVhZCA9IHBQYW4uZmluZCgndGhlYWQnKSwgdGJvZHkgPSBwUGFuLmZpbmQoJ3Rib2R5JyksIHRycyA9IHRib2R5LmZpbmQoJ3RyJyksIGRpc2FibGVkdHJzID0gdGJvZHkuZmluZCgndHIuZGlzYWJsZWQnKSwgZm9sbG93bGJsID0gdGhlYWQuZmluZCgnLmZvbGxvd2xibCcpLCBmb2xsb3dpbmdsYmwgPSB0aGVhZC5maW5kKCcuZm9sbG93aW5nbGJsJyksIGFjY1N0YXR1c2Zsd0xibCA9IHRoZWFkLmZpbmQoJy5hY2NvcmRpb25TdGF0dXMuZmx3TGJsJyksIGFjY1N0YXR1c2Zsd0J0biA9IHRoZWFkLmZpbmQoJy5hY2NvcmRpb25TdGF0dXMuZmx3QnRuJyksIGFsbHB1YnBhbnMgPSBhbGxQdWJsaWNhdGlvbnMuZmluZCgnLnB1YmxpY2F0aW9uUGFuJyksIHBpY2tUeHQgPSB0aGVhZC5maW5kKCcucGlja1R4dCcpLCBzZXRGbGFnID0gdHJ1ZTtcclxuXHRcdCBcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYoJHRoaXMuaGFzQ2xhc3MoJ2V4cGFuZGVkJykpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHNldEZsYWcgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0Ym9keS5hZGRDbGFzcygndGJvZHloaWRkZW4nKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvL3BQYW4uZmluZCgnLnNtZm9sbG93aW5nQnRuJykuaGlkZSgpOyAgXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YWNjU3RhdHVzZmx3TGJsLnJlbW92ZUNsYXNzKCdoaWRlUm93Jyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YWNjU3RhdHVzZmx3QnRuLmFkZENsYXNzKCdoaWRlUm93Jyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlYWQuZmluZCgnLm10cCcpLmFkZENsYXNzKCdoaWRlQnRuJyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm9yKHZhciBpPTA7IGk8cGlja1R4dC5sZW5ndGg7IGkrKyl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQkKHBpY2tUeHRbaV0pLmNsb3Nlc3QoJy5hY2NvcmRpb25TdGF0dXMnKS5hZGRDbGFzcygnaGlkZVJvdycpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZih0cnMubGVuZ3RoID09PSBkaXNhYmxlZHRycy5sZW5ndGgpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Zm9sbG93bGJsLnJlbW92ZUNsYXNzKCdoaWRlQnRuJyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVsc2V7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRmb2xsb3dpbmdsYmwucmVtb3ZlQ2xhc3MoJ2hpZGVCdG4nKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIHBvc2l0aW9uID0gJHRoaXMuY2xvc2VzdCgnLnB1YmxpY2F0aW9uUGFuJykucG9zaXRpb24oKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQkKHdpbmRvdykuc2Nyb2xsVG9wKHBvc2l0aW9uLnRvcCAtIDQwKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRlbHNle1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGFsbFB1YmxpY2F0aW9ucy5maW5kKCd0Ym9keScpLmFkZENsYXNzKCd0Ym9keWhpZGRlbicpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZvcih2YXIgaT0wOyBpPGFsbHB1YnBhbnMubGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIGVhY2hQaWNrVHh0ID0gJChhbGxwdWJwYW5zW2ldKS5maW5kKCd0aGVhZCAucGlja1R4dCcpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGVhY2hQaWNrVHh0Lmxlbmd0aDsgaisrKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0JChlYWNoUGlja1R4dFtqXSkuY2xvc2VzdCgnLmFjY29yZGlvblN0YXR1cycpLmFkZENsYXNzKCdoaWRlUm93Jyk7O1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVhZC5maW5kKCd0cicpLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0Ym9keS5yZW1vdmVDbGFzcygndGJvZHloaWRkZW4nKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwUGFuLmZpbmQoJy5zbWZvbGxvd2luZ0J0bicpLnNob3coKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmb3IodmFyIGk9MDsgaTxwaWNrVHh0Lmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCQocGlja1R4dFtpXSkuY2xvc2VzdCgnLmFjY29yZGlvblN0YXR1cycpLnJlbW92ZUNsYXNzKCdoaWRlUm93Jyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmKHNldEZsYWcpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGFsbHB1YnBhbnMubGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQkKGFsbHB1YnBhbnNbaV0pLmZpbmQoJy5hY2NvcmRpb25TdGF0dXMuZmx3TGJsJykucmVtb3ZlQ2xhc3MoJ2hpZGVSb3cnKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0JChhbGxwdWJwYW5zW2ldKS5maW5kKCcuYWNjb3JkaW9uU3RhdHVzLmZsd0J0bicpLmFkZENsYXNzKCdoaWRlUm93Jyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGFjY1N0YXR1c2Zsd0xibC5hZGRDbGFzcygnaGlkZVJvdycpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGFjY1N0YXR1c2Zsd0J0bi5yZW1vdmVDbGFzcygnaGlkZVJvdycpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhciBwb3NpdGlvbiA9ICR0aGlzLmNsb3Nlc3QoJy5wdWJsaWNhdGlvblBhbicpLnBvc2l0aW9uKCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0JCh3aW5kb3cpLnNjcm9sbFRvcChwb3NpdGlvbi50b3AgLSA0MCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGFsbHB1YnBhbnMubGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIGxhYmVsVmFsID0gJChhbGxwdWJwYW5zW2ldKS5maW5kKCcuZmlyc3Ryb3cgLmxhYmxlU3RhdHVzJykudmFsKCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQkKCcuJyArIGxhYmVsVmFsLCBhbGxwdWJwYW5zW2ldKS5yZW1vdmVDbGFzcygnaGlkZUJ0bicpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVhZC5maW5kKCcubXRwJykuYWRkQ2xhc3MoJ2hpZGVCdG4nKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0XHRcdFx0XHRcdGVsc2V7XHJcblx0XHRcdFx0XHRcdFx0Y2hlY2tUb3VjaFR5cGUgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHRcdH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNob3cgY29udGV4dCBtZW51IGlmIHRoZSB1c2VyIGhhc24ndCBzdGFydGVkIGRyYWdnaW5nIGFmdGVyIGEgd2hpbGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2RyYWdTb3VyY2UgPT0gc3JjICYmIF90aGlzLl9pbWcgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fZGlzcGF0Y2hFdmVudChlLCAnY29udGV4dG1lbnUnLCBzcmMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9yZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgRHJhZ0Ryb3BUb3VjaC5fQ1RYTUVOVSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBEcmFnRHJvcFRvdWNoLnByb3RvdHlwZS5fdG91Y2htb3ZlID0gZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0aWYoY2hlY2tUb3VjaFR5cGUpe1xyXG5cdFx0XHRcdGlmICh0aGlzLl9zaG91bGRIYW5kbGUoZSkpIHtcclxuXHRcdFx0XHRcdC8vIHNlZSBpZiB0YXJnZXQgd2FudHMgdG8gaGFuZGxlIG1vdmVcclxuXHRcdFx0XHRcdHZhciB0YXJnZXQgPSB0aGlzLl9nZXRUYXJnZXQoZSk7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5fZGlzcGF0Y2hFdmVudChlLCAnbW91c2Vtb3ZlJywgdGFyZ2V0KSkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLl9sYXN0VG91Y2ggPSBlO1xyXG5cdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdC8vIHN0YXJ0IGRyYWdnaW5nXHJcblx0XHRcdFx0XHRpZiAodGhpcy5fZHJhZ1NvdXJjZSAmJiAhdGhpcy5faW1nKSB7XHJcblx0XHRcdFx0XHRcdHZhciBkZWx0YSA9IHRoaXMuX2dldERlbHRhKGUpO1xyXG5cdFx0XHRcdFx0XHRpZiAoZGVsdGEgPiBEcmFnRHJvcFRvdWNoLl9USFJFU0hPTEQpIHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLl9kaXNwYXRjaEV2ZW50KGUsICdkcmFnc3RhcnQnLCB0aGlzLl9kcmFnU291cmNlKTtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLl9jcmVhdGVJbWFnZShlKTtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLl9kaXNwYXRjaEV2ZW50KGUsICdkcmFnZW50ZXInLCB0YXJnZXQpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQvLyBjb250aW51ZSBkcmFnZ2luZ1xyXG5cdFx0XHRcdFx0aWYgKHRoaXMuX2ltZykge1xyXG5cdFx0XHRcdFx0XHR0aGlzLl9sYXN0VG91Y2ggPSBlO1xyXG5cdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7IC8vIHByZXZlbnQgc2Nyb2xsaW5nXHJcblx0XHRcdFx0XHRcdGlmICh0YXJnZXQgIT0gdGhpcy5fbGFzdFRhcmdldCkge1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuX2Rpc3BhdGNoRXZlbnQodGhpcy5fbGFzdFRvdWNoLCAnZHJhZ2xlYXZlJywgdGhpcy5fbGFzdFRhcmdldCk7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5fZGlzcGF0Y2hFdmVudChlLCAnZHJhZ2VudGVyJywgdGFyZ2V0KTtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLl9sYXN0VGFyZ2V0ID0gdGFyZ2V0O1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHRoaXMuX21vdmVJbWFnZShlKTtcclxuXHRcdFx0XHRcdFx0dGhpcy5fZGlzcGF0Y2hFdmVudChlLCAnZHJhZ292ZXInLCB0YXJnZXQpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgRHJhZ0Ryb3BUb3VjaC5wcm90b3R5cGUuX3RvdWNoZW5kID0gZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0aWYoY2hlY2tUb3VjaFR5cGUpe1xyXG5cdFx0XHRcdGlmICh0aGlzLl9zaG91bGRIYW5kbGUoZSkpIHtcclxuXHRcdFx0XHRcdC8vIHNlZSBpZiB0YXJnZXQgd2FudHMgdG8gaGFuZGxlIHVwXHJcblx0XHRcdFx0XHRpZiAodGhpcy5fZGlzcGF0Y2hFdmVudCh0aGlzLl9sYXN0VG91Y2gsICdtb3VzZXVwJywgZS50YXJnZXQpKSB7XHJcblx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Ly8gdXNlciBjbGlja2VkIHRoZSBlbGVtZW50IGJ1dCBkaWRuJ3QgZHJhZywgc28gY2xlYXIgdGhlIHNvdXJjZSBhbmQgc2ltdWxhdGUgYSBjbGlja1xyXG5cdFx0XHRcdFx0aWYgKCF0aGlzLl9pbWcpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5fZHJhZ1NvdXJjZSA9IG51bGw7XHJcblx0XHRcdFx0XHRcdHRoaXMuX2Rpc3BhdGNoRXZlbnQodGhpcy5fbGFzdFRvdWNoLCAnY2xpY2snLCBlLnRhcmdldCk7XHJcblx0XHRcdFx0XHRcdHRoaXMuX2xhc3RDbGljayA9IERhdGUubm93KCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQvLyBmaW5pc2ggZHJhZ2dpbmdcclxuXHRcdFx0XHRcdHRoaXMuX2Rlc3Ryb3lJbWFnZSgpO1xyXG5cdFx0XHRcdFx0aWYgKHRoaXMuX2RyYWdTb3VyY2UpIHtcclxuXHRcdFx0XHRcdFx0aWYgKGUudHlwZS5pbmRleE9mKCdjYW5jZWwnKSA8IDApIHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLl9kaXNwYXRjaEV2ZW50KHRoaXMuX2xhc3RUb3VjaCwgJ2Ryb3AnLCB0aGlzLl9sYXN0VGFyZ2V0KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR0aGlzLl9kaXNwYXRjaEV2ZW50KHRoaXMuX2xhc3RUb3VjaCwgJ2RyYWdlbmQnLCB0aGlzLl9kcmFnU291cmNlKTtcclxuXHRcdFx0XHRcdFx0dGhpcy5fcmVzZXQoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vICoqIHV0aWxpdGllc1xyXG4gICAgICAgIC8vIGlnbm9yZSBldmVudHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZCBvciB0aGF0IGludm9sdmUgbW9yZSB0aGFuIG9uZSB0b3VjaFxyXG4gICAgICAgIERyYWdEcm9wVG91Y2gucHJvdG90eXBlLl9zaG91bGRIYW5kbGUgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZSAmJlxyXG4gICAgICAgICAgICAgICAgIWUuZGVmYXVsdFByZXZlbnRlZCAmJlxyXG4gICAgICAgICAgICAgICAgZS50b3VjaGVzICYmIGUudG91Y2hlcy5sZW5ndGggPCAyO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gY2xlYXIgYWxsIG1lbWJlcnNcclxuICAgICAgICBEcmFnRHJvcFRvdWNoLnByb3RvdHlwZS5fcmVzZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lJbWFnZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9kcmFnU291cmNlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fbGFzdFRvdWNoID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fbGFzdFRhcmdldCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3B0RG93biA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX2RhdGFUcmFuc2ZlciA9IG5ldyBEYXRhVHJhbnNmZXIoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIGdldCBwb2ludCBmb3IgYSB0b3VjaCBldmVudFxyXG4gICAgICAgIERyYWdEcm9wVG91Y2gucHJvdG90eXBlLl9nZXRQb2ludCA9IGZ1bmN0aW9uIChlLCBwYWdlKSB7XHJcbiAgICAgICAgICAgIGlmIChlICYmIGUudG91Y2hlcykge1xyXG4gICAgICAgICAgICAgICAgZSA9IGUudG91Y2hlc1swXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4geyB4OiBwYWdlID8gZS5wYWdlWCA6IGUuY2xpZW50WCwgeTogcGFnZSA/IGUucGFnZVkgOiBlLmNsaWVudFkgfTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIGdldCBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBjdXJyZW50IHRvdWNoIGV2ZW50IGFuZCB0aGUgZmlyc3Qgb25lXHJcbiAgICAgICAgRHJhZ0Ryb3BUb3VjaC5wcm90b3R5cGUuX2dldERlbHRhID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyIHAgPSB0aGlzLl9nZXRQb2ludChlKTtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKHAueCAtIHRoaXMuX3B0RG93bi54KSArIE1hdGguYWJzKHAueSAtIHRoaXMuX3B0RG93bi55KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIGdldCB0aGUgZWxlbWVudCBhdCBhIGdpdmVuIHRvdWNoIGV2ZW50XHJcbiAgICAgICAgRHJhZ0Ryb3BUb3VjaC5wcm90b3R5cGUuX2dldFRhcmdldCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciBwdCA9IHRoaXMuX2dldFBvaW50KGUpLCBlbCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQocHQueCwgcHQueSk7XHJcbiAgICAgICAgICAgIHdoaWxlIChlbCAmJiBnZXRDb21wdXRlZFN0eWxlKGVsKS5wb2ludGVyRXZlbnRzID09ICdub25lJykge1xyXG4gICAgICAgICAgICAgICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBlbDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIGNyZWF0ZSBkcmFnIGltYWdlIGZyb20gc291cmNlIGVsZW1lbnRcclxuICAgICAgICBEcmFnRHJvcFRvdWNoLnByb3RvdHlwZS5fY3JlYXRlSW1hZ2UgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAvLyBqdXN0IGluIGNhc2UuLi5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2ltZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveUltYWdlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY3JlYXRlIGRyYWcgaW1hZ2UgZnJvbSBjdXN0b20gZWxlbWVudCBvciBkcmFnIHNvdXJjZVxyXG4gICAgICAgICAgICB2YXIgc3JjID0gdGhpcy5faW1nQ3VzdG9tIHx8IHRoaXMuX2RyYWdTb3VyY2U7XHJcbiAgICAgICAgICAgIHRoaXMuX2ltZyA9IHNyYy5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvcHlTdHlsZShzcmMsIHRoaXMuX2ltZyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2ltZy5zdHlsZS50b3AgPSB0aGlzLl9pbWcuc3R5bGUubGVmdCA9ICctOTk5OXB4JztcclxuICAgICAgICAgICAgLy8gaWYgY3JlYXRpbmcgZnJvbSBkcmFnIHNvdXJjZSwgYXBwbHkgb2Zmc2V0IGFuZCBvcGFjaXR5XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faW1nQ3VzdG9tKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmMgPSBzcmMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHB0ID0gdGhpcy5fZ2V0UG9pbnQoZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbWdPZmZzZXQgPSB7IHg6IHB0LnggLSByYy5sZWZ0LCB5OiBwdC55IC0gcmMudG9wIH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbWcuc3R5bGUub3BhY2l0eSA9IERyYWdEcm9wVG91Y2guX09QQUNJVFkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBhZGQgaW1hZ2UgdG8gZG9jdW1lbnRcclxuICAgICAgICAgICAgdGhpcy5fbW92ZUltYWdlKGUpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2ltZyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBkaXNwb3NlIG9mIGRyYWcgaW1hZ2UgZWxlbWVudFxyXG4gICAgICAgIERyYWdEcm9wVG91Y2gucHJvdG90eXBlLl9kZXN0cm95SW1hZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbWcgJiYgdGhpcy5faW1nLnBhcmVudEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ltZy5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuX2ltZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5faW1nID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5faW1nQ3VzdG9tID0gbnVsbDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIG1vdmUgdGhlIGRyYWcgaW1hZ2UgZWxlbWVudFxyXG4gICAgICAgIERyYWdEcm9wVG91Y2gucHJvdG90eXBlLl9tb3ZlSW1hZ2UgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHB0ID0gX3RoaXMuX2dldFBvaW50KGUsIHRydWUpLCBzID0gX3RoaXMuX2ltZy5zdHlsZTtcclxuICAgICAgICAgICAgICAgIHMucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgICAgICAgICAgICAgcy5wb2ludGVyRXZlbnRzID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgcy56SW5kZXggPSAnOTk5OTk5JztcclxuICAgICAgICAgICAgICAgIHMubGVmdCA9IE1hdGgucm91bmQocHQueCAtIF90aGlzLl9pbWdPZmZzZXQueCkgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgcy50b3AgPSBNYXRoLnJvdW5kKHB0LnkgLSBfdGhpcy5faW1nT2Zmc2V0LnkpICsgJ3B4JztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBjb3B5IHByb3BlcnRpZXMgZnJvbSBhbiBvYmplY3QgdG8gYW5vdGhlclxyXG4gICAgICAgIERyYWdEcm9wVG91Y2gucHJvdG90eXBlLl9jb3B5UHJvcHMgPSBmdW5jdGlvbiAoZHN0LCBzcmMsIHByb3BzKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBwID0gcHJvcHNbaV07XHJcbiAgICAgICAgICAgICAgICBkc3RbcF0gPSBzcmNbcF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIERyYWdEcm9wVG91Y2gucHJvdG90eXBlLl9jb3B5U3R5bGUgPSBmdW5jdGlvbiAoc3JjLCBkc3QpIHtcclxuICAgICAgICAgICAgLy8gcmVtb3ZlIHBvdGVudGlhbGx5IHRyb3VibGVzb21lIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgRHJhZ0Ryb3BUb3VjaC5fcm12QXR0cy5mb3JFYWNoKGZ1bmN0aW9uIChhdHQpIHtcclxuICAgICAgICAgICAgICAgIGRzdC5yZW1vdmVBdHRyaWJ1dGUoYXR0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIGNvcHkgY2FudmFzIGNvbnRlbnRcclxuICAgICAgICAgICAgaWYgKHNyYyBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY1NyYyA9IHNyYywgY0RzdCA9IGRzdDtcclxuICAgICAgICAgICAgICAgIGNEc3Qud2lkdGggPSBjU3JjLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgY0RzdC5oZWlnaHQgPSBjU3JjLmhlaWdodDtcclxuICAgICAgICAgICAgICAgIGNEc3QuZ2V0Q29udGV4dCgnMmQnKS5kcmF3SW1hZ2UoY1NyYywgMCwgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY29weSBzdHlsZVxyXG4gICAgICAgICAgICB2YXIgY3MgPSBnZXRDb21wdXRlZFN0eWxlKHNyYyk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBjc1tpXTtcclxuICAgICAgICAgICAgICAgIGRzdC5zdHlsZVtrZXldID0gY3Nba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkc3Quc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJztcclxuICAgICAgICAgICAgLy8gYW5kIHJlcGVhdCBmb3IgYWxsIGNoaWxkcmVuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3JjLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb3B5U3R5bGUoc3JjLmNoaWxkcmVuW2ldLCBkc3QuY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBEcmFnRHJvcFRvdWNoLnByb3RvdHlwZS5fZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChlLCB0eXBlLCB0YXJnZXQpIHtcclxuICAgICAgICAgICAgaWYgKGUgJiYgdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50JyksIHQgPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlO1xyXG4gICAgICAgICAgICAgICAgZXZ0LmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGV2dC5idXR0b24gPSAwO1xyXG4gICAgICAgICAgICAgICAgZXZ0LndoaWNoID0gZXZ0LmJ1dHRvbnMgPSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29weVByb3BzKGV2dCwgZSwgRHJhZ0Ryb3BUb3VjaC5fa2JkUHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29weVByb3BzKGV2dCwgdCwgRHJhZ0Ryb3BUb3VjaC5fcHRQcm9wcyk7XHJcbiAgICAgICAgICAgICAgICBldnQuZGF0YVRyYW5zZmVyID0gdGhpcy5fZGF0YVRyYW5zZmVyO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoZXZ0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBldnQuZGVmYXVsdFByZXZlbnRlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBnZXRzIGFuIGVsZW1lbnQncyBjbG9zZXN0IGRyYWdnYWJsZSBhbmNlc3RvclxyXG4gICAgICAgIERyYWdEcm9wVG91Y2gucHJvdG90eXBlLl9jbG9zZXN0RHJhZ2dhYmxlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZm9yICg7IGU7IGUgPSBlLnBhcmVudEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlLmhhc0F0dHJpYnV0ZSgnZHJhZ2dhYmxlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qcHJpdmF0ZSovIERyYWdEcm9wVG91Y2guX2luc3RhbmNlID0gbmV3IERyYWdEcm9wVG91Y2goKTsgLy8gc2luZ2xldG9uXHJcbiAgICAgICAgLy8gY29uc3RhbnRzXHJcbiAgICAgICAgRHJhZ0Ryb3BUb3VjaC5fVEhSRVNIT0xEID0gNTsgLy8gcGl4ZWxzIHRvIG1vdmUgYmVmb3JlIGRyYWcgc3RhcnRzXHJcbiAgICAgICAgRHJhZ0Ryb3BUb3VjaC5fT1BBQ0lUWSA9IDAuNTsgLy8gZHJhZyBpbWFnZSBvcGFjaXR5XHJcbiAgICAgICAgRHJhZ0Ryb3BUb3VjaC5fREJMQ0xJQ0sgPSA1MDA7IC8vIG1heCBtcyBiZXR3ZWVuIGNsaWNrcyBpbiBhIGRvdWJsZSBjbGlja1xyXG4gICAgICAgIERyYWdEcm9wVG91Y2guX0NUWE1FTlUgPSA5MDA7IC8vIG1zIHRvIGhvbGQgYmVmb3JlIHJhaXNpbmcgJ2NvbnRleHRtZW51JyBldmVudFxyXG4gICAgICAgIC8vIGNvcHkgc3R5bGVzL2F0dHJpYnV0ZXMgZnJvbSBkcmFnIHNvdXJjZSB0byBkcmFnIGltYWdlIGVsZW1lbnRcclxuICAgICAgICBEcmFnRHJvcFRvdWNoLl9ybXZBdHRzID0gJ2lkLGNsYXNzLHN0eWxlLGRyYWdnYWJsZScuc3BsaXQoJywnKTtcclxuICAgICAgICAvLyBzeW50aGVzaXplIGFuZCBkaXNwYXRjaCBhbiBldmVudFxyXG4gICAgICAgIC8vIHJldHVybnMgdHJ1ZSBpZiB0aGUgZXZlbnQgaGFzIGJlZW4gaGFuZGxlZCAoZS5wcmV2ZW50RGVmYXVsdCA9PSB0cnVlKVxyXG4gICAgICAgIERyYWdEcm9wVG91Y2guX2tiZFByb3BzID0gJ2FsdEtleSxjdHJsS2V5LG1ldGFLZXksc2hpZnRLZXknLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgRHJhZ0Ryb3BUb3VjaC5fcHRQcm9wcyA9ICdwYWdlWCxwYWdlWSxjbGllbnRYLGNsaWVudFksc2NyZWVuWCxzY3JlZW5ZJy5zcGxpdCgnLCcpO1xyXG4gICAgICAgIHJldHVybiBEcmFnRHJvcFRvdWNoO1xyXG4gICAgfSkoKTtcclxuICAgIERyYWdEcm9wVG91Y2hfMS5EcmFnRHJvcFRvdWNoID0gRHJhZ0Ryb3BUb3VjaDtcclxufSkoRHJhZ0Ryb3BUb3VjaCB8fCAoRHJhZ0Ryb3BUb3VjaCA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURyYWdEcm9wVG91Y2hOb1dpam1vLmpzLm1hcFxyXG4iLCIvKipcclxuICogaWYgdGhpcyBwb3B1cCBpcyBvdXRzaWRlIG9mIGl0J3MgcGFyZW50LCBudWRnZSBpdCBiYWNrIGluXHJcbiAqIEBwYXJhbSAge2VsZW1lbnR9IHBvcHVwOiBET00gZWxtZW5ldCBvZiB0aGUgcG9wdXAgdG8gYmUgcGxhY2VkXHJcbiAqIEBwYXJhbSAge251bWJlcn0gdG9wOiBUaGUgdG9wIGNvb3JkaW5hdGUgb2Ygd2hlcmUgdGhlIHBvcHVwIHNob3VsZCBwb2ludFxyXG4gKiBAcGFyYW0gIHtudW1iZXJ9IGxlZnQ6IFRoZSBsZWZ0IGNvb3JkaW5hdGUgb2Ygd2hlcmUgdGhlIHBvcHVwIHNob3VsZCBwb2ludFxyXG4gKiBAcGFyYW0gIHtudW1iZXJ9IG9mZnNldDogYW4gb2ZmZXQgdG8gYmUgYWRkZWQgdG8gdG9wL2JvdHRvbSBvciBsZWZ0L3JpZ2h0XHJcbiAqIEBwYXJhbSAge3N0cmluZ30gdHJpYW5nbGU6IFwidG9wXCIsIFwicmlnaHRcIiwgXCJib3R0b21cIiwgb3IgXCJsZWZ0XCJcclxuICogQHBhcmFtICB7bnVtYmVyfSB0cmlhbmdsZVNpemU6IHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBwb3NpdGlvblxyXG4gKiBAcGFyYW0gIHtib29sZWFufSBmbGlwVG9Db250YWluOiB3aWxsIGZsaXAgdGhlIHBvcHVwIGlmIGl0IGdvZXMgb3V0c2lkZSB0aGUgcGFyZW50IGNvbnRhaW5lclxyXG4gKiBAcmV0dXJuIHtvYmplY3R9IHtcclxuICogICAgIHJlYWxUb3AgICAgICAgOiB3aXRoIG5vIG9mZnNldCBhZGp1c3RtZW50LCB0aGUgcG9wdXAgc2hvdWxkIGdvIGhlcmUsIGJhc2VkIG9uIHRyaWFuZ2xlU2lkZVxyXG4gKiAgICAgcmVhbExlZnQgICAgICA6IF5eXHJcbiAqICAgICBwb3B1cFRvcCAgICAgIDogd2l0aCBhZGp1c3RtZW50IHdoZW4gdGhlIHBvcHVwIGJ1dHRzIHVwIGFnYWlucyB0aGUgcGFyZW50XHJcbiAqICAgICBwb3B1cExlZnQgICAgIDogXl5cclxuICogICAgIG92ZXJmbG93ICAgICAgOiBcInRvcFwiLCBcInJpZ2h0XCIsIFwiYm90dG9tXCIsIFwibGVmdFwiLiAgUG9zaXRpdmUgbnVtYmVycyBhcmUgb3ZlcmZsb3dzXHJcbiAqICAgICB0cmlhbmdsZU9mZnNldDogQW1vdW50IHRoZSB0cmlhbmdsZSBuZWVkcyB0byBtb3ZlIHRvIGJlIG9uIHRoZSBkb3QsIHJlbGF0aXZlIGZyb20gNTAlXHJcbiAqICAgICB0cmlhbmdsZVNpZGUgIDogV2lsbCBiZSB0aGUgc2FtZSBhcyBwYXNzZWQgaW4gdHJpYW5nbGUsIHVubGVzcyBpdCBmbGlwZWQgdmlhIGZsaXBUb0NvbnRhaW5cclxuICogfVxyXG4gKiB1c2UgcG9wdXBUb3AsIHBvcHVwTGVmdCwgYW5kIHRyaWFuZ2xlT2Zmc2V0IHRvIHBvc2l0aW9uIHRoZSBwb3B1cFxyXG4gKi9cclxuZnVuY3Rpb24gY2FsY3VsYXRlUG9wdXBPZmZzZXRzKHtwb3B1cCwgdG9wLCBsZWZ0LCBvZmZzZXQgPSAwLCB0cmlhbmdsZSA9IFwiYm90dG9tXCIsIHRyaWFuZ2xlU2l6ZSwgZmxpcFRvQ29udGFpbiA9IGZhbHNlfSl7XHJcblxyXG5cclxuICAgIC8vIG1ha2UgYSBjb3B5IG9mIHRoaXNcclxuICAgIGxldCB0cmlhbmdsZVNpZGUgPSB0cmlhbmdsZTtcclxuXHJcbiAgICAvLyBnZXQgdGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhpcyBwb3B1cCBmcm9tIHRoZSBET01cclxuICAgIGNvbnN0IHdpZHRoID0gcG9wdXAub2Zmc2V0V2lkdGg7XHJcbiAgICBjb25zdCBoZWlnaHQgPSBwb3B1cC5vZmZzZXRIZWlnaHQ7XHJcblxyXG4gICAgLy8gZ2V0IHRoZSB3aWR0aC9oZWlnaHQgb2YgdGhlIHBhcmVudCBjb250YWluZXIgZGl2XHJcbiAgICBjb25zdCBwYXJlbnQgPSBwb3B1cC5wYXJlbnROb2RlO1xyXG4gICAgY29uc3QgcGFyZW50V2lkdGggPSBwYXJlbnQuY2xpZW50V2lkdGg7XHJcbiAgICBjb25zdCBwYXJlbnRIZWlnaHQgPSBwYXJlbnQub2Zmc2V0SGVpZ2h0OyAvLyBjbGllbnQgaGVpZ2h0IG9mIGJvZHkgd2lsbCBvbmx5IGJlIHRoZSB2aWV3cG9ydCBoZWlnaHRcclxuXHJcbiAgICAvLyBjb21tb24gY2FsY3VsYXRpb25zXHJcbiAgICBjb25zdCBwb3B1cE9uVG9wID0gdG9wIC0gaGVpZ2h0IC0gdHJpYW5nbGVTaXplICsgb2Zmc2V0O1xyXG4gICAgY29uc3QgcG9wdXBPbkJvdHRvbSA9IHRvcCArIHRyaWFuZ2xlU2l6ZSAtIG9mZnNldDtcclxuICAgIGNvbnN0IHBvcHVwT25MZWZ0ID0gbGVmdCAtIHdpZHRoIC0gdHJpYW5nbGVTaXplICsgb2Zmc2V0O1xyXG4gICAgY29uc3QgcG9wdXBPblJpZ2h0ID0gbGVmdCArIHRyaWFuZ2xlU2l6ZSAtIG9mZnNldDtcclxuXHJcbiAgICAvLyBjYWxjdWxhdGUgd2hlcmUgdGhlIHRvcCBvZiB0aGUgcG9wdXAgc2hvdWxkIGJlIGJhc2VkIG9uIHRvcC9sZWZ0XHJcbiAgICBjb25zdCByZWFsVG9wID0gKHRyaWFuZ2xlU2lkZSA9PT0gXCJib3R0b21cIikgPyBwb3B1cE9uVG9wXHJcbiAgICAgICAgICAgICAgICAgIDogKHRyaWFuZ2xlU2lkZSA9PT0gXCJ0b3BcIikgICAgPyBwb3B1cE9uQm90dG9tXHJcbiAgICAgICAgICAgICAgICAgIDogdG9wIC0gaGVpZ2h0LzI7IC8vICBsZWZ0IG9yIHJpZ2h0XHJcblxyXG4gICAgY29uc3QgcmVhbExlZnQgPSAodHJpYW5nbGVTaWRlID09PSBcInJpZ2h0XCIpID8gcG9wdXBPbkxlZnRcclxuICAgICAgICAgICAgICAgICAgIDogKHRyaWFuZ2xlU2lkZSA9PT0gXCJsZWZ0XCIpICA/IHBvcHVwT25SaWdodFxyXG4gICAgICAgICAgICAgICAgICAgOiBsZWZ0IC0gKHdpZHRoLzIpOyAvLyBjZW50ZXJcclxuXHJcbiAgICAvLyB0aGUgYW1vdW50cyB0aGF0IHRoaXMgcG9wdXAgaXMgb3V0c2lkZSBvZiBpdCdzIHBhcmVudC5cclxuICAgIGNvbnN0IG92ZXJmbG93ID0ge1xyXG4gICAgICAgIHRvcDogLXJlYWxUb3AsXHJcbiAgICAgICAgcmlnaHQ6IC0ocGFyZW50V2lkdGggLSAocmVhbExlZnQgKyB3aWR0aCkpLFxyXG4gICAgICAgIGJvdHRvbTogLShwYXJlbnRIZWlnaHQgLSAocmVhbFRvcCArIGhlaWdodCkpLFxyXG4gICAgICAgIGxlZnQ6IC1yZWFsTGVmdFxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLy8gY2FsY3VsYXRlIHdoZXJlIHRoZSBwb3B1cCBzaG91bGQgZ29cclxuICAgIC8vIHN0YXJ0IHdpdGggcG9wdXBMZWZ0IGFzIHJlYWxMZWZ0IGJlZm9yZSBudWRnaW5nXHJcbiAgICBsZXQgcG9wdXBUb3AgPSByZWFsVG9wO1xyXG4gICAgbGV0IHBvcHVwTGVmdCA9IHJlYWxMZWZ0O1xyXG4gICAgbGV0IHRyaWFuZ2xlT2Zmc2V0ID0gMDtcclxuXHJcblxyXG4gICAgLy8gaWYgdGhlcmUgaXMgYW4gb3ZlcmZsb3cgb24gdGhlIHJpZ2h0LCBhZGp1c3QgdGhlIHBvcHVwIGFuZCB0cmlhbmdsZSBwb3NpdGlvblxyXG4gICAgaWYgKG92ZXJmbG93LnJpZ2h0ID4gMCl7XHJcbiAgICAgICAgaWYgKHRyaWFuZ2xlU2lkZSA9PT0gXCJ0b3BcIiB8fCB0cmlhbmdsZVNpZGUgPT09IFwiYm90dG9tXCIpe1xyXG4gICAgICAgICAgICBwb3B1cExlZnQgPSByZWFsTGVmdCAtIG92ZXJmbG93LnJpZ2h0O1xyXG4gICAgICAgICAgICB0cmlhbmdsZU9mZnNldCA9IG92ZXJmbG93LnJpZ2h0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZm9yIGxlZnQsIGZsaXAgdGhlIHBvcHVwXHJcbiAgICAgICAgaWYgKHRyaWFuZ2xlU2lkZSA9PT0gXCJsZWZ0XCIgJiYgZmxpcFRvQ29udGFpbil7XHJcbiAgICAgICAgICAgIHRyaWFuZ2xlU2lkZSA9IFwicmlnaHRcIjtcclxuICAgICAgICAgICAgcG9wdXBMZWZ0ID0gcG9wdXBPbkxlZnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGlmIHRoZXJlIGlzIGFuIG92ZXJmbG93IG9uIHRoZSBsZWZ0LCBhZGp1c3QgdGhlIHBvcHVwIGFuZCB0cmlhbmdsZSBwb3NpdGlvblxyXG4gICAgaWYgKG92ZXJmbG93LmxlZnQgPiAwKXtcclxuICAgICAgICBpZiAodHJpYW5nbGVTaWRlID09PSBcInRvcFwiIHx8IHRyaWFuZ2xlU2lkZSA9PT0gXCJib3R0b21cIil7XHJcbiAgICAgICAgICAgIHBvcHVwTGVmdCA9IHJlYWxMZWZ0ICsgb3ZlcmZsb3cubGVmdDtcclxuICAgICAgICAgICAgdHJpYW5nbGVPZmZzZXQgPSAtb3ZlcmZsb3cubGVmdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGZvciByaWdodCwgZmxpcCB0aGUgcG9wdXBcclxuICAgICAgICBpZiAodHJpYW5nbGVTaWRlID09PSBcInJpZ2h0XCIgJiYgZmxpcFRvQ29udGFpbil7XHJcbiAgICAgICAgICAgIHRyaWFuZ2xlU2lkZSA9IFwibGVmdFwiO1xyXG4gICAgICAgICAgICBwb3B1cExlZnQgPSBwb3B1cE9uUmlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGlmIHRoZXJlIGlzIGFuIG92ZXJmbG93IG9uIHRoZSBib3R0b21cclxuICAgIGlmIChvdmVyZmxvdy5ib3R0b20gPiAwKXtcclxuICAgICAgICAvLyBmb3IgbGVmdC9yaWdodCwgYnV0dCB0aGUgcG9wdXAgYWdhaW5zdCB0aGUgYm90dG9tXHJcbiAgICAgICAgaWYgKHRyaWFuZ2xlU2lkZSA9PT0gXCJsZWZ0XCIgfHwgdHJpYW5nbGVTaWRlID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICAgICAgcG9wdXBUb3AgPSByZWFsVG9wIC0gb3ZlcmZsb3cuYm90dG9tO1xyXG4gICAgICAgICAgICB0cmlhbmdsZU9mZnNldCA9IG92ZXJmbG93LmJvdHRvbTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZm9yIHRvcCwgZmxpcCB0aGUgcG9wdXBcclxuICAgICAgICBpZiAodHJpYW5nbGVTaWRlID09PSBcInRvcFwiICYmIGZsaXBUb0NvbnRhaW4pe1xyXG4gICAgICAgICAgICB0cmlhbmdsZVNpZGUgPSBcImJvdHRvbVwiO1xyXG4gICAgICAgICAgICBwb3B1cFRvcCA9IHBvcHVwT25Ub3A7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGlmIHRoZXJlIGlzIGFuIG92ZXJmbG93IG9uIHRoZSB0b3BcclxuICAgIGlmIChvdmVyZmxvdy50b3AgPiAwKXtcclxuXHJcbiAgICAgICAgaWYgKHRyaWFuZ2xlU2lkZSA9PT0gXCJsZWZ0XCIgfHwgdHJpYW5nbGVTaWRlID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICAgICAgcG9wdXBUb3AgPSByZWFsVG9wICsgb3ZlcmZsb3cudG9wO1xyXG4gICAgICAgICAgICB0cmlhbmdsZU9mZnNldCA9IC1vdmVyZmxvdy50b3A7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBmb3IgYm90dG9tLCBmbGlwIHRoZSBwb3B1cFxyXG4gICAgICAgIGlmICh0cmlhbmdsZVNpZGUgPT09IFwiYm90dG9tXCIgJiYgZmxpcFRvQ29udGFpbil7XHJcbiAgICAgICAgICAgIHRyaWFuZ2xlU2lkZSA9IFwidG9wXCI7XHJcbiAgICAgICAgICAgIHBvcHVwVG9wID0gcG9wdXBPbkJvdHRvbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmV0dXJuIGFsbCB0aGUgbWVhc3VyZW1lbnRzXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlYWxUb3AsIHJlYWxMZWZ0LCBwb3B1cFRvcCwgcG9wdXBMZWZ0LCBvdmVyZmxvdywgdHJpYW5nbGVPZmZzZXQsIHRyaWFuZ2xlU2lkZVxyXG4gICAgfTtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNhbGN1bGF0ZVBvcHVwT2Zmc2V0cztcclxuIiwiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xyXG4vKipcclxuICogQG5hbWUgT3dsIENhcm91c2VsIC0gY29kZSBuYW1lIFBoZW5peFxyXG4gKiBAYXV0aG9yIEJhcnRvc3ogV29qY2llY2hvd3NraVxyXG4gKiBAcmVsZWFzZSAyMDE0XHJcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVFxyXG4gKiBcclxuICogQHZlcnNpb24gMi4wLjAtYmV0YS4xLjhcclxuICogQHZlcnNpb25Ob3RlcyBOb3QgY29tcGF0aWJpbGUgd2l0aCBPd2wgQ2Fyb3VzZWwgPDIuMC4wXHJcbiAqL1xyXG5cclxuLypcclxuXHJcbnswLDB9XHJcbiApXylcclxuIFwiXCJcclxuXHJcblRvIGRvOlxyXG5cclxuKiBMYXp5IExvYWQgSWNvblxyXG4qIHByZXZlbnQgYW5pbWF0aW9uZW5kIGJ1YmxpbmdcclxuKiBpdGVtc1NjYWxlVXAgXHJcbiogVGVzdCBaZXB0b1xyXG5cclxuQ2FsbGJhY2sgZXZlbnRzIGxpc3Q6XHJcblxyXG5vbkluaXRCZWZvcmVcclxub25Jbml0QWZ0ZXJcclxub25SZXNwb25zaXZlQmVmb3JlXHJcbm9uUmVzcG9uc2l2ZUFmdGVyXHJcbm9uVHJhbnNpdGlvblN0YXJ0XHJcbm9uVHJhbnNpdGlvbkVuZFxyXG5vblRvdWNoU3RhcnRcclxub25Ub3VjaEVuZFxyXG5vbkNoYW5nZVN0YXRlXHJcbm9uTGF6eUxvYWRlZFxyXG5vblZpZGVvUGxheVxyXG5vblZpZGVvU3RvcFxyXG5cclxuQ3VzdG9tIGV2ZW50cyBsaXN0OlxyXG5cclxubmV4dC5vd2xcclxucHJldi5vd2xcclxuZ29Uby5vd2xcclxuanVtcFRvLm93bFxyXG5hZGRJdGVtLm93bFxyXG5yZW1vdmVJdGVtLm93bFxyXG5yZWZyZXNoLm93bFxyXG5wbGF5Lm93bFxyXG5zdG9wLm93bFxyXG5zdG9wVmlkZW8ub3dsXHJcblxyXG4qL1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuOyhmdW5jdGlvbiAoJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XHJcblxyXG5cdHZhciBkZWZhdWx0cyA9IHtcclxuXHRcdGl0ZW1zOiAzLFxyXG5cdFx0bG9vcDogZmFsc2UsXHJcblx0XHRjZW50ZXI6IGZhbHNlLFxyXG5cclxuXHRcdG1vdXNlRHJhZzogdHJ1ZSxcclxuXHRcdHRvdWNoRHJhZzogdHJ1ZSxcclxuXHRcdHB1bGxEcmFnOiB0cnVlLFxyXG5cdFx0ZnJlZURyYWc6IGZhbHNlLFxyXG5cclxuXHRcdG1hcmdpbjogMCxcclxuXHRcdHN0YWdlUGFkZGluZzogMCxcclxuXHJcblx0XHRtZXJnZTogZmFsc2UsXHJcblx0XHRtZXJnZUZpdDogdHJ1ZSxcclxuXHRcdGF1dG9XaWR0aDogZmFsc2UsXHJcblx0XHRhdXRvSGVpZ2h0OiBmYWxzZSxcclxuXHJcblx0XHRzdGFydFBvc2l0aW9uOiAwLFxyXG5cdFx0VVJMaGFzaExpc3RlbmVyOiBmYWxzZSxcclxuXHJcblx0XHRuYXY6IGZhbHNlLFxyXG5cdFx0bmF2UmV3aW5kOiB0cnVlLFxyXG5cdFx0bmF2VGV4dDogWydwcmV2JywgJ25leHQnXSxcclxuXHRcdHNsaWRlQnk6IDEsXHJcblx0XHRkb3RzOiB0cnVlLFxyXG5cdFx0ZG90c0VhY2g6IGZhbHNlLFxyXG5cdFx0ZG90RGF0YTogZmFsc2UsXHJcblxyXG5cdFx0bGF6eUxvYWQ6IGZhbHNlLFxyXG5cdFx0bGF6eUNvbnRlbnQ6IGZhbHNlLFxyXG5cclxuXHRcdGF1dG9wbGF5OiBmYWxzZSxcclxuXHRcdGF1dG9wbGF5VGltZW91dDogNTAwMCxcclxuXHRcdGF1dG9wbGF5SG92ZXJQYXVzZTogZmFsc2UsXHJcblxyXG5cdFx0c21hcnRTcGVlZDogMjUwLFxyXG5cdFx0Zmx1aWRTcGVlZDogZmFsc2UsXHJcblx0XHRhdXRvcGxheVNwZWVkOiBmYWxzZSxcclxuXHRcdG5hdlNwZWVkOiBmYWxzZSxcclxuXHRcdGRvdHNTcGVlZDogZmFsc2UsXHJcblx0XHRkcmFnRW5kU3BlZWQ6IGZhbHNlLFxyXG5cclxuXHRcdHJlc3BvbnNpdmU6IHt9LFxyXG5cdFx0cmVzcG9uc2l2ZVJlZnJlc2hSYXRlOiAyMDAsXHJcblx0XHRyZXNwb25zaXZlQmFzZUVsZW1lbnQ6IHdpbmRvdyxcclxuXHRcdHJlc3BvbnNpdmVDbGFzczogZmFsc2UsXHJcblxyXG5cdFx0dmlkZW86IGZhbHNlLFxyXG5cdFx0dmlkZW9IZWlnaHQ6IGZhbHNlLFxyXG5cdFx0dmlkZW9XaWR0aDogZmFsc2UsXHJcblxyXG5cdFx0YW5pbWF0ZU91dDogZmFsc2UsXHJcblx0XHRhbmltYXRlSW46IGZhbHNlLFxyXG5cclxuXHRcdGZhbGxiYWNrRWFzaW5nOiAnc3dpbmcnLFxyXG5cclxuXHRcdGNhbGxiYWNrczogZmFsc2UsXHJcblx0XHRpbmZvOiBmYWxzZSxcclxuXHJcblx0XHRuZXN0ZWRJdGVtU2VsZWN0b3I6IGZhbHNlLFxyXG5cdFx0aXRlbUVsZW1lbnQ6ICdkaXYnLFxyXG5cdFx0c3RhZ2VFbGVtZW50OiAnZGl2JyxcclxuXHJcblx0XHQvL0NsYXNzZXMgYW5kIE5hbWVzXHJcblx0XHR0aGVtZUNsYXNzOiAnb3dsLXRoZW1lJyxcclxuXHRcdGJhc2VDbGFzczogJ293bC1jYXJvdXNlbCcsXHJcblx0XHRpdGVtQ2xhc3M6ICdvd2wtaXRlbScsXHJcblx0XHRjZW50ZXJDbGFzczogJ2NlbnRlcicsXHJcblx0XHRhY3RpdmVDbGFzczogJ2FjdGl2ZScsXHJcblx0XHRuYXZDb250YWluZXJDbGFzczogJ293bC1uYXYnLFxyXG5cdFx0bmF2Q2xhc3M6IFsnb3dsLXByZXYnLCAnb3dsLW5leHQnXSxcclxuXHRcdGNvbnRyb2xzQ2xhc3M6ICdvd2wtY29udHJvbHMnLFxyXG5cdFx0ZG90Q2xhc3M6ICdvd2wtZG90JyxcclxuXHRcdGRvdHNDbGFzczogJ293bC1kb3RzJyxcclxuXHRcdGF1dG9IZWlnaHRDbGFzczogJ293bC1oZWlnaHQnXHJcblxyXG5cdH07XHJcblxyXG5cdC8vIFJlZmVyZW5jZSB0byBET00gZWxlbWVudHNcclxuXHQvLyBUaG9zZSB3aXRoICQgc2lnbiBhcmUgalF1ZXJ5IG9iamVjdHNcclxuXHJcblx0dmFyIGRvbSA9IHtcclxuXHRcdGVsOiBudWxsLCAvLyBtYWluIGVsZW1lbnRcclxuXHRcdCRlbDogbnVsbCwgLy8galF1ZXJ5IG1haW4gZWxlbWVudFxyXG5cdFx0c3RhZ2U6IG51bGwsIC8vIHN0YWdlXHJcblx0XHQkc3RhZ2U6IG51bGwsIC8vIGpRdWVyeSBzdGFnZVxyXG5cdFx0b1N0YWdlOiBudWxsLCAvLyBvdXRlciBzdGFnZVxyXG5cdFx0JG9TdGFnZTogbnVsbCwgLy8gJCBvdXRlciBzdGFnZVxyXG5cdFx0JGl0ZW1zOiBudWxsLCAvLyBhbGwgaXRlbXMsIGNsb25lcyBhbmQgb3JpZ2luYWxzIGluY2x1ZGVkXHJcblx0XHQkb0l0ZW1zOiBudWxsLCAvLyBvcmlnaW5hbCBpdGVtc1xyXG5cdFx0JGNJdGVtczogbnVsbCwgLy8gY2xvbmVkIGl0ZW1zIG9ubHlcclxuXHRcdCRjYzogbnVsbCxcclxuXHRcdCRuYXZQcmV2OiBudWxsLFxyXG5cdFx0JG5hdk5leHQ6IG51bGwsXHJcblx0XHQkcGFnZTogbnVsbCxcclxuXHRcdCRuYXY6IG51bGwsXHJcblx0XHQkY29udGVudDogbnVsbFxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogVmFyaWFibGVzXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHQvLyBPbmx5IGZvciBkZXZlbG9wbWVudCBwcm9jZXNzXHJcblxyXG5cdC8vIFdpZHRoc1xyXG5cclxuXHR2YXIgd2lkdGggPSB7XHJcblx0XHRlbDogMCxcclxuXHRcdHN0YWdlOiAwLFxyXG5cdFx0aXRlbTogMCxcclxuXHRcdHByZXZXaW5kb3c6IDAsXHJcblx0XHRjbG9uZUxhc3Q6IDBcclxuXHR9O1xyXG5cclxuXHQvLyBOdW1iZXJzXHJcblxyXG5cdHZhciBudW0gPSB7XHJcblx0XHRpdGVtczogMCxcclxuXHRcdG9JdGVtczogMCxcclxuXHRcdGNJdGVtczogMCxcclxuXHRcdGFjdGl2ZTogMCxcclxuXHRcdG1lcmdlZDogW10sXHJcblx0XHRuYXY6IFtdLFxyXG5cdFx0YWxsUGFnZXM6IDBcclxuXHR9O1xyXG5cclxuXHQvLyBQb3NpdGlvbnNcclxuXHJcblx0dmFyIHBvcyA9IHtcclxuXHRcdHN0YXJ0OiAwLFxyXG5cdFx0bWF4OiAwLFxyXG5cdFx0bWF4VmFsdWU6IDAsXHJcblx0XHRwcmV2OiAwLFxyXG5cdFx0Y3VycmVudDogMCxcclxuXHRcdGN1cnJlbnRBYnM6IDAsXHJcblx0XHRjdXJyZW50UGFnZTogMCxcclxuXHRcdHN0YWdlOiAwLFxyXG5cdFx0aXRlbXM6IFtdLFxyXG5cdFx0bHNDdXJyZW50OiAwXHJcblx0fTtcclxuXHJcblx0Ly8gRHJhZy9Ub3VjaGVzXHJcblxyXG5cdHZhciBkcmFnID0ge1xyXG5cdFx0c3RhcnQ6IDAsXHJcblx0XHRzdGFydFg6IDAsXHJcblx0XHRzdGFydFk6IDAsXHJcblx0XHRjdXJyZW50OiAwLFxyXG5cdFx0Y3VycmVudFg6IDAsXHJcblx0XHRjdXJyZW50WTogMCxcclxuXHRcdG9mZnNldFg6IDAsXHJcblx0XHRvZmZzZXRZOiAwLFxyXG5cdFx0ZGlzdGFuY2U6IG51bGwsXHJcblx0XHRzdGFydFRpbWU6IDAsXHJcblx0XHRlbmRUaW1lOiAwLFxyXG5cdFx0dXBkYXRlZFg6IDAsXHJcblx0XHR0YXJnZXRFbDogbnVsbFxyXG5cdH07XHJcblxyXG5cdC8vIFNwZWVkc1xyXG5cclxuXHR2YXIgc3BlZWQgPSB7XHJcblx0XHRvbkRyYWdFbmQ6IDMwMCxcclxuXHRcdG5hdjogMzAwLFxyXG5cdFx0Y3NzMnNwZWVkOiAwXHJcblxyXG5cdH07XHJcblxyXG5cdC8vIFN0YXRlc1xyXG5cclxuXHR2YXIgc3RhdGUgPSB7XHJcblx0XHRpc1RvdWNoOiBmYWxzZSxcclxuXHRcdGlzU2Nyb2xsaW5nOiBmYWxzZSxcclxuXHRcdGlzU3dpcGluZzogZmFsc2UsXHJcblx0XHRkaXJlY3Rpb246IGZhbHNlLFxyXG5cdFx0aW5Nb3Rpb246IGZhbHNlLFxyXG5cdFx0YXV0b3BsYXk6IGZhbHNlLFxyXG5cdFx0bGF6eUNvbnRlbnQ6IGZhbHNlXHJcblx0fTtcclxuXHJcblx0Ly8gRXZlbnQgZnVuY3Rpb25zIHJlZmVyZW5jZXNcclxuXHJcblx0dmFyIGUgPSB7XHJcblx0XHRfb25EcmFnU3RhcnQ6IG51bGwsXHJcblx0XHRfb25EcmFnTW92ZTogbnVsbCxcclxuXHRcdF9vbkRyYWdFbmQ6IG51bGwsXHJcblx0XHRfdHJhbnNpdGlvbkVuZDogbnVsbCxcclxuXHRcdF9yZXNpemVyOiBudWxsLFxyXG5cdFx0X3Jlc3BvbnNpdmVDYWxsOiBudWxsLFxyXG5cdFx0X2dvVG9Mb29wOiBudWxsLFxyXG5cdFx0X2NoZWNrVmlzaWJpbGU6IG51bGwsXHJcblx0XHRfYXV0b3BsYXk6IG51bGwsXHJcblx0XHRfcGF1c2U6IG51bGwsXHJcblx0XHRfcGxheTogbnVsbCxcclxuXHRcdF9zdG9wOiBudWxsXHJcblx0fTtcclxuXHJcblx0ZnVuY3Rpb24gT3dsKGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuXHJcblx0XHQvLyBhZGQgYmFzaWMgT3dsIGluZm9ybWF0aW9uIHRvIGRvbSBlbGVtZW50XHJcblxyXG5cdFx0ZWxlbWVudC5vd2xDYXJvdXNlbCA9IHtcclxuXHRcdFx0J25hbWUnOiAnT3dsIENhcm91c2VsJyxcclxuXHRcdFx0J2F1dGhvcic6ICdCYXJ0b3N6IFdvamNpZWNob3dza2knLFxyXG5cdFx0XHQndmVyc2lvbic6ICcyLjAuMC1iZXRhLjEuOCcsXHJcblx0XHRcdCdyZWxlYXNlZCc6ICcwMy4wNS4yMDE0J1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBBdHRhY2ggdmFyaWFibGVzIHRvIG9iamVjdFxyXG5cdFx0Ly8gT25seSBmb3IgZGV2ZWxvcG1lbnQgcHJvY2Vzc1xyXG5cclxuXHRcdHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XHJcblx0XHR0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcclxuXHRcdHRoaXMuZG9tID0gJC5leHRlbmQoe30sIGRvbSk7XHJcblx0XHR0aGlzLndpZHRoID0gJC5leHRlbmQoe30sIHdpZHRoKTtcclxuXHRcdHRoaXMubnVtID0gJC5leHRlbmQoe30sIG51bSk7XHJcblx0XHR0aGlzLnBvcyA9ICQuZXh0ZW5kKHt9LCBwb3MpO1xyXG5cdFx0dGhpcy5kcmFnID0gJC5leHRlbmQoe30sIGRyYWcpO1xyXG5cdFx0dGhpcy5zcGVlZCA9ICQuZXh0ZW5kKHt9LCBzcGVlZCk7XHJcblx0XHR0aGlzLnN0YXRlID0gJC5leHRlbmQoe30sIHN0YXRlKTtcclxuXHRcdHRoaXMuZSA9ICQuZXh0ZW5kKHt9LCBlKTtcclxuXHJcblx0XHR0aGlzLmRvbS5lbCA9IGVsZW1lbnQ7XHJcblx0XHR0aGlzLmRvbS4kZWwgPSAkKGVsZW1lbnQpO1xyXG5cdFx0dGhpcy5pbml0KCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuICAqIGluaXRcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLmZpcmVDYWxsYmFjaygnb25Jbml0QmVmb3JlJyk7XHJcblxyXG5cdFx0Ly9BZGQgYmFzZSBjbGFzc1xyXG5cdFx0aWYgKCF0aGlzLmRvbS4kZWwuaGFzQ2xhc3ModGhpcy5vcHRpb25zLmJhc2VDbGFzcykpIHtcclxuXHRcdFx0dGhpcy5kb20uJGVsLmFkZENsYXNzKHRoaXMub3B0aW9ucy5iYXNlQ2xhc3MpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vQWRkIHRoZW1lIGNsYXNzXHJcblx0XHRpZiAoIXRoaXMuZG9tLiRlbC5oYXNDbGFzcyh0aGlzLm9wdGlvbnMudGhlbWVDbGFzcykpIHtcclxuXHRcdFx0dGhpcy5kb20uJGVsLmFkZENsYXNzKHRoaXMub3B0aW9ucy50aGVtZUNsYXNzKTtcclxuXHRcdH1cclxuXHJcblx0XHQvL0FkZCB0aGVtZSBjbGFzc1xyXG5cdFx0aWYgKHRoaXMub3B0aW9ucy5ydGwpIHtcclxuXHRcdFx0dGhpcy5kb20uJGVsLmFkZENsYXNzKCdvd2wtcnRsJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2hlY2sgc3VwcG9ydFxyXG5cdFx0dGhpcy5icm93c2VyU3VwcG9ydCgpO1xyXG5cclxuXHRcdC8vIFNvcnQgcmVzcG9uc2l2ZSBpdGVtcyBpbiBhcnJheVxyXG5cdFx0dGhpcy5zb3J0T3B0aW9ucygpO1xyXG5cclxuXHRcdC8vIFVwZGF0ZSBvcHRpb25zLml0ZW1zIG9uIGdpdmVuIHNpemVcclxuXHRcdHRoaXMuc2V0UmVzcG9uc2l2ZU9wdGlvbnMoKTtcclxuXHJcblx0XHRpZiAodGhpcy5vcHRpb25zLmF1dG9XaWR0aCAmJiB0aGlzLnN0YXRlLmltYWdlc0xvYWRlZCAhPT0gdHJ1ZSkge1xyXG5cdFx0XHR2YXIgaW1ncyA9IHRoaXMuZG9tLiRlbC5maW5kKCdpbWcnKTtcclxuXHRcdFx0aWYgKGltZ3MubGVuZ3RoKSB7XHJcblx0XHRcdFx0dGhpcy5wcmVsb2FkQXV0b1dpZHRoSW1hZ2VzKGltZ3MpO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEdldCBhbmQgc3RvcmUgd2luZG93IHdpZHRoXHJcblx0XHQvLyBpT1Mgc2FmYXJpIGxpa2VzIHRvIHRyaWdnZXIgdW5uZWNlc3NhcnkgcmVzaXplIGV2ZW50XHJcblx0XHR0aGlzLndpZHRoLnByZXZXaW5kb3cgPSB0aGlzLndpbmRvd1dpZHRoKCk7XHJcblxyXG5cdFx0Ly8gY3JlYXRlIHN0YWdlIG9iamVjdFxyXG5cdFx0dGhpcy5jcmVhdGVTdGFnZSgpO1xyXG5cclxuXHRcdC8vIEFwcGVuZCBsb2NhbCBjb250ZW50XHJcblx0XHR0aGlzLmZldGNoQ29udGVudCgpO1xyXG5cclxuXHRcdC8vIGF0dGFjaCBnZW5lcmljIGV2ZW50c1xyXG5cdFx0dGhpcy5ldmVudHNDYWxsKCk7XHJcblxyXG5cdFx0Ly8gYXR0YWNoIGN1c3RvbSBjb250cm9sIGV2ZW50c1xyXG5cdFx0dGhpcy5hZGRDdXN0b21FdmVudHMoKTtcclxuXHJcblx0XHQvLyBhdHRhY2ggZ2VuZXJpYyBldmVudHNcclxuXHRcdHRoaXMuaW50ZXJuYWxFdmVudHMoKTtcclxuXHJcblx0XHR0aGlzLmRvbS4kZWwuYWRkQ2xhc3MoJ293bC1sb2FkaW5nJyk7XHJcblx0XHR0aGlzLnJlZnJlc2godHJ1ZSk7XHJcblx0XHR0aGlzLmRvbS4kZWwucmVtb3ZlQ2xhc3MoJ293bC1sb2FkaW5nJykuYWRkQ2xhc3MoJ293bC1sb2FkZWQnKTtcclxuXHRcdHRoaXMuZmlyZUNhbGxiYWNrKCdvbkluaXRBZnRlcicpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogc29ydE9wdGlvbnNcclxuICAqIEBkZXNjIFNvcnQgcmVzcG9uc2l2ZSBzaXplcyBcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUuc29ydE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIHJlc09wdCA9IHRoaXMub3B0aW9ucy5yZXNwb25zaXZlO1xyXG5cdFx0dGhpcy5yZXNwb25zaXZlU29ydGVkID0ge307XHJcblx0XHR2YXIga2V5cyA9IFtdLFxyXG5cdFx0ICAgIGksXHJcblx0XHQgICAgaixcclxuXHRcdCAgICBrO1xyXG5cdFx0Zm9yIChpIGluIHJlc09wdCkge1xyXG5cdFx0XHRrZXlzLnB1c2goaSk7XHJcblx0XHR9XHJcblxyXG5cdFx0a2V5cyA9IGtleXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG5cdFx0XHRyZXR1cm4gYSAtIGI7XHJcblx0XHR9KTtcclxuXHJcblx0XHRmb3IgKGogPSAwOyBqIDwga2V5cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRrID0ga2V5c1tqXTtcclxuXHRcdFx0dGhpcy5yZXNwb25zaXZlU29ydGVkW2tdID0gcmVzT3B0W2tdO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogc2V0UmVzcG9uc2l2ZU9wdGlvbnNcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUuc2V0UmVzcG9uc2l2ZU9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmUgPT09IGZhbHNlKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgd2lkdGggPSB0aGlzLndpbmRvd1dpZHRoKCk7XHJcblx0XHR2YXIgcmVzT3B0ID0gdGhpcy5vcHRpb25zLnJlc3BvbnNpdmU7XHJcblx0XHR2YXIgaSwgaiwgaywgbWluV2lkdGg7XHJcblxyXG5cdFx0Ly8gb3ZlcndyaXRlIG5vbiByZXNwb3NuaXZlIG9wdGlvbnNcclxuXHRcdGZvciAoayBpbiB0aGlzLl9vcHRpb25zKSB7XHJcblx0XHRcdGlmIChrICE9PSAncmVzcG9uc2l2ZScpIHtcclxuXHRcdFx0XHR0aGlzLm9wdGlvbnNba10gPSB0aGlzLl9vcHRpb25zW2tdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZmluZCByZXNwb25zaXZlIHdpZHRoXHJcblx0XHRmb3IgKGkgaW4gdGhpcy5yZXNwb25zaXZlU29ydGVkKSB7XHJcblx0XHRcdGlmIChpIDw9IHdpZHRoKSB7XHJcblx0XHRcdFx0bWluV2lkdGggPSBpO1xyXG5cdFx0XHRcdC8vIHNldCByZXNwb25zaXZlIG9wdGlvbnNcclxuXHRcdFx0XHRmb3IgKGogaW4gdGhpcy5yZXNwb25zaXZlU29ydGVkW21pbldpZHRoXSkge1xyXG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zW2pdID0gdGhpcy5yZXNwb25zaXZlU29ydGVkW21pbldpZHRoXVtqXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHRoaXMubnVtLmJyZWFrcG9pbnQgPSBtaW5XaWR0aDtcclxuXHJcblx0XHQvLyBSZXNwb25zaXZlIENsYXNzXHJcblx0XHRpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmVDbGFzcykge1xyXG5cdFx0XHR0aGlzLmRvbS4kZWwuYXR0cignY2xhc3MnLCBmdW5jdGlvbiAoaSwgYykge1xyXG5cdFx0XHRcdHJldHVybiBjLnJlcGxhY2UoL1xcYiBvd2wtcmVzcG9uc2l2ZS1cXFMrL2csICcnKTtcclxuXHRcdFx0fSkuYWRkQ2xhc3MoJ293bC1yZXNwb25zaXZlLScgKyBtaW5XaWR0aCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBvcHRpb25zTG9naWNcclxuICAqIEBkZXNjIFVwZGF0ZSBvcHRpb24gbG9naWMgaWYgbmVjZXNzZXJ5XHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLm9wdGlvbnNMb2dpYyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdC8vIFRvZ2dsZSBDZW50ZXIgY2xhc3NcclxuXHRcdHRoaXMuZG9tLiRlbC50b2dnbGVDbGFzcygnb3dsLWNlbnRlcicsIHRoaXMub3B0aW9ucy5jZW50ZXIpO1xyXG5cclxuXHRcdC8vIFNjcm9sbCBwZXIgLSAncGFnZScgb3B0aW9uIHdpbGwgc2Nyb2xsIHBlciB2aXNpYmxlIGl0ZW1zIG51bWJlclxyXG5cdFx0Ly8gWW91IGNhbiBzZXQgdGhpcyB0byBhbnkgb3RoZXIgbnVtYmVyIGJlbG93IHZpc2libGUgaXRlbXMuXHJcblx0XHRpZiAodGhpcy5vcHRpb25zLnNsaWRlQnkgJiYgdGhpcy5vcHRpb25zLnNsaWRlQnkgPT09ICdwYWdlJykge1xyXG5cdFx0XHR0aGlzLm9wdGlvbnMuc2xpZGVCeSA9IHRoaXMub3B0aW9ucy5pdGVtcztcclxuXHRcdH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnNsaWRlQnkgPiB0aGlzLm9wdGlvbnMuaXRlbXMpIHtcclxuXHRcdFx0dGhpcy5vcHRpb25zLnNsaWRlQnkgPSB0aGlzLm9wdGlvbnMuaXRlbXM7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gaWYgaXRlbXMgbnVtYmVyIGlzIGxlc3MgdGhhbiBpbiBib2R5XHJcblx0XHRpZiAodGhpcy5vcHRpb25zLmxvb3AgJiYgdGhpcy5udW0ub0l0ZW1zIDwgdGhpcy5vcHRpb25zLml0ZW1zKSB7XHJcblx0XHRcdHRoaXMub3B0aW9ucy5sb29wID0gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMubnVtLm9JdGVtcyA8PSB0aGlzLm9wdGlvbnMuaXRlbXMpIHtcclxuXHRcdFx0dGhpcy5vcHRpb25zLm5hdlJld2luZCA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLm9wdGlvbnMuYXV0b1dpZHRoKSB7XHJcblx0XHRcdHRoaXMub3B0aW9ucy5zdGFnZVBhZGRpbmcgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5vcHRpb25zLmRvdHNFYWNoID0gMTtcclxuXHRcdFx0dGhpcy5vcHRpb25zLm1lcmdlID0gZmFsc2U7XHJcblx0XHR9XHJcblx0XHRpZiAodGhpcy5zdGF0ZS5sYXp5Q29udGVudCkge1xyXG5cdFx0XHR0aGlzLm9wdGlvbnMubG9vcCA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLm9wdGlvbnMubWVyZ2UgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5vcHRpb25zLmRvdHMgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5vcHRpb25zLmZyZWVEcmFnID0gZmFsc2U7XHJcblx0XHRcdHRoaXMub3B0aW9ucy5sYXp5Q29udGVudCA9IHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCh0aGlzLm9wdGlvbnMuYW5pbWF0ZUluIHx8IHRoaXMub3B0aW9ucy5hbmltYXRlT3V0KSAmJiB0aGlzLm9wdGlvbnMuaXRlbXMgPT09IDEgJiYgdGhpcy5zdXBwb3J0M2QpIHtcclxuXHRcdFx0dGhpcy5zdGF0ZS5hbmltYXRlID0gdHJ1ZTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuc3RhdGUuYW5pbWF0ZSA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogY3JlYXRlU3RhZ2VcclxuICAqIEBkZXNjIENyZWF0ZSBzdGFnZSBhbmQgT3V0ZXItc3RhZ2UgZWxlbWVudHNcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUuY3JlYXRlU3RhZ2UgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHR2YXIgb1N0YWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblx0XHR2YXIgc3RhZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMub3B0aW9ucy5zdGFnZUVsZW1lbnQpO1xyXG5cclxuXHRcdG9TdGFnZS5jbGFzc05hbWUgPSAnb3dsLXN0YWdlLW91dGVyJztcclxuXHRcdHN0YWdlLmNsYXNzTmFtZSA9ICdvd2wtc3RhZ2UnO1xyXG5cclxuXHRcdG9TdGFnZS5hcHBlbmRDaGlsZChzdGFnZSk7XHJcblx0XHR0aGlzLmRvbS5lbC5hcHBlbmRDaGlsZChvU3RhZ2UpO1xyXG5cclxuXHRcdHRoaXMuZG9tLm9TdGFnZSA9IG9TdGFnZTtcclxuXHRcdHRoaXMuZG9tLiRvU3RhZ2UgPSAkKG9TdGFnZSk7XHJcblx0XHR0aGlzLmRvbS5zdGFnZSA9IHN0YWdlO1xyXG5cdFx0dGhpcy5kb20uJHN0YWdlID0gJChzdGFnZSk7XHJcblxyXG5cdFx0b1N0YWdlID0gbnVsbDtcclxuXHRcdHN0YWdlID0gbnVsbDtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIGNyZWF0ZUl0ZW1cclxuICAqIEBkZXNjIENyZWF0ZSBpdGVtIGNvbnRhaW5lclxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5jcmVhdGVJdGVtID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyIGl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMub3B0aW9ucy5pdGVtRWxlbWVudCk7XHJcblx0XHRpdGVtLmNsYXNzTmFtZSA9IHRoaXMub3B0aW9ucy5pdGVtQ2xhc3M7XHJcblx0XHRyZXR1cm4gaXRlbTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIGZldGNoQ29udGVudFxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5mZXRjaENvbnRlbnQgPSBmdW5jdGlvbiAoZXh0Q29udGVudCkge1xyXG5cdFx0aWYgKGV4dENvbnRlbnQpIHtcclxuXHRcdFx0dGhpcy5kb20uJGNvbnRlbnQgPSBleHRDb250ZW50IGluc3RhbmNlb2YgalF1ZXJ5ID8gZXh0Q29udGVudCA6ICQoZXh0Q29udGVudCk7XHJcblx0XHR9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5uZXN0ZWRJdGVtU2VsZWN0b3IpIHtcclxuXHRcdFx0dGhpcy5kb20uJGNvbnRlbnQgPSB0aGlzLmRvbS4kZWwuZmluZCgnLicgKyB0aGlzLm9wdGlvbnMubmVzdGVkSXRlbVNlbGVjdG9yKS5ub3QoJy5vd2wtc3RhZ2Utb3V0ZXInKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuZG9tLiRjb250ZW50ID0gdGhpcy5kb20uJGVsLmNoaWxkcmVuKCkubm90KCcub3dsLXN0YWdlLW91dGVyJyk7XHJcblx0XHR9XHJcblx0XHQvLyBjb250ZW50IGxlbmd0aFxyXG5cdFx0dGhpcy5udW0ub0l0ZW1zID0gdGhpcy5kb20uJGNvbnRlbnQubGVuZ3RoO1xyXG5cclxuXHRcdC8vIGluaXQgU3RydWN0dXJlXHJcblx0XHRpZiAodGhpcy5udW0ub0l0ZW1zICE9PSAwKSB7XHJcblx0XHRcdHRoaXMuaW5pdFN0cnVjdHVyZSgpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogaW5pdFN0cnVjdHVyZVxyXG4gICogQHBhcmFtIFtyZWZyZXNoXSAtIGlmIHJlZnJlc2ggYW5kIG5vdCBsYXp5Q29udGVudCB0aGVuIGRvbnQgY3JlYXRlIG5vcm1hbCBzdHJ1Y3R1cmVcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUuaW5pdFN0cnVjdHVyZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHQvLyBsYXp5Q29udGVudCBuZWVkcyBhdCBsZWFzdCAzKml0ZW1zXHJcblxyXG5cdFx0aWYgKHRoaXMub3B0aW9ucy5sYXp5Q29udGVudCAmJiB0aGlzLm51bS5vSXRlbXMgPj0gdGhpcy5vcHRpb25zLml0ZW1zICogMykge1xyXG5cdFx0XHR0aGlzLnN0YXRlLmxhenlDb250ZW50ID0gdHJ1ZTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuc3RhdGUubGF6eUNvbnRlbnQgPSBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5zdGF0ZS5sYXp5Q29udGVudCkge1xyXG5cclxuXHRcdFx0Ly8gc3RhcnQgcG9zaXRpb25cclxuXHRcdFx0dGhpcy5wb3MuY3VycmVudEFicyA9IHRoaXMub3B0aW9ucy5pdGVtcztcclxuXHJcblx0XHRcdC8vcmVtb3ZlIGxhenkgY29udGVudCBmcm9tIERPTVxyXG5cdFx0XHR0aGlzLmRvbS4kY29udGVudC5yZW1vdmUoKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIGNyZWF0ZSBub3JtYWwgc3RydWN0dXJlXHJcblx0XHRcdHRoaXMuY3JlYXRlTm9ybWFsU3RydWN0dXJlKCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBjcmVhdGVOb3JtYWxTdHJ1Y3R1cmVcclxuICAqIEBkZXNjIENyZWF0ZSBub3JtYWwgc3RydWN0dXJlIGZvciBzbWFsbC9taWQgd2VpZ2h0IGNvbnRlbnRcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUuY3JlYXRlTm9ybWFsU3RydWN0dXJlID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm51bS5vSXRlbXM7IGkrKykge1xyXG5cdFx0XHQvLyBmaWxsICdvd2wtaXRlbScgd2l0aCBjb250ZW50XHJcblx0XHRcdHZhciBpdGVtID0gdGhpcy5maWxsSXRlbSh0aGlzLmRvbS4kY29udGVudCwgaSk7XHJcblx0XHRcdC8vIGFwcGVuZCBpbnRvIHN0YWdlXHJcblx0XHRcdHRoaXMuZG9tLiRzdGFnZS5hcHBlbmQoaXRlbSk7XHJcblx0XHR9XHJcblx0XHR0aGlzLmRvbS4kY29udGVudCA9IG51bGw7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBjcmVhdGVDdXN0b21TdHJ1Y3R1cmVcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUuY3JlYXRlQ3VzdG9tU3RydWN0dXJlID0gZnVuY3Rpb24gKGhvd01hbnlJdGVtcykge1xyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBob3dNYW55SXRlbXM7IGkrKykge1xyXG5cdFx0XHR2YXIgZW1wdHlJdGVtID0gdGhpcy5jcmVhdGVJdGVtKCk7XHJcblx0XHRcdHZhciBpdGVtID0gJChlbXB0eUl0ZW0pO1xyXG5cclxuXHRcdFx0dGhpcy5zZXREYXRhKGl0ZW0sIGZhbHNlKTtcclxuXHRcdFx0dGhpcy5kb20uJHN0YWdlLmFwcGVuZChpdGVtKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIGNyZWF0ZUxhenlDb250ZW50U3RydWN0dXJlXHJcbiAgKiBAZGVzYyBDcmVhdGUgbGF6eUNvbnRlbnQgc3RydWN0dXJlIGZvciBsYXJnZSBjb250ZW50IGFuZCBiZXR0ZXIgbW9iaWxlIGV4cGVyaWVuY2VcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUuY3JlYXRlTGF6eUNvbnRlbnRTdHJ1Y3R1cmUgPSBmdW5jdGlvbiAocmVmcmVzaCkge1xyXG5cdFx0aWYgKCF0aGlzLnN0YXRlLmxhenlDb250ZW50KSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBwcmV2ZW50IHJlY3JlYXRlIC0gdG8gZG9cclxuXHRcdGlmIChyZWZyZXNoICYmIHRoaXMuZG9tLiRzdGFnZS5jaGlsZHJlbigpLmxlbmd0aCA9PT0gdGhpcy5vcHRpb25zLml0ZW1zICogMykge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0XHQvLyByZW1vdmUgaXRlbXMgZnJvbSBzdGFnZVxyXG5cdFx0dGhpcy5kb20uJHN0YWdlLmVtcHR5KCk7XHJcblxyXG5cdFx0Ly8gY3JlYXRlIGN1c3RvbSBzdHJ1Y3R1cmVcclxuXHRcdHRoaXMuY3JlYXRlQ3VzdG9tU3RydWN0dXJlKDMgKiB0aGlzLm9wdGlvbnMuaXRlbXMpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogZmlsbEl0ZW1cclxuICAqIEBkZXNjIEZpbGwgZW1wdHkgaXRlbSBjb250YWluZXIgd2l0aCBwcm92aWRlZCBjb250ZW50XHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqIEBwYXJhbSBbY29udGVudF0gLSBzdHJpbmcvJGRvbSAtIHBhc3NlZCBvd2wtaXRlbVxyXG4gICogQHBhcmFtIFtpXSAtIGluZGV4IGluIGpxdWVyeSBvYmplY3RcclxuICAqIHJldHVybiAkIG5ldyBvYmplY3RcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLmZpbGxJdGVtID0gZnVuY3Rpb24gKGNvbnRlbnQsIGkpIHtcclxuXHRcdHZhciBlbXB0eUl0ZW0gPSB0aGlzLmNyZWF0ZUl0ZW0oKTtcclxuXHRcdHZhciBjID0gY29udGVudFtpXSB8fCBjb250ZW50O1xyXG5cdFx0Ly8gc2V0IGl0ZW0gZGF0YVxyXG5cdFx0dmFyIHRyYXZlcnNlZCA9IHRoaXMudHJhdmVyc0NvbnRlbnQoYyk7XHJcblx0XHR0aGlzLnNldERhdGEoZW1wdHlJdGVtLCBmYWxzZSwgdHJhdmVyc2VkKTtcclxuXHRcdHJldHVybiAkKGVtcHR5SXRlbSkuYXBwZW5kKGMpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogdHJhdmVyc0NvbnRlbnRcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICogQHBhcmFtIFtjXSAtIGNvbnRlbnRcclxuICAqIHJldHVybiBvYmplY3RcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLnRyYXZlcnNDb250ZW50ID0gZnVuY3Rpb24gKGMpIHtcclxuXHRcdHZhciAkYyA9ICQoYyksXHJcblx0XHQgICAgZG90VmFsdWUsXHJcblx0XHQgICAgaGFzaFZhbHVlO1xyXG5cdFx0aWYgKHRoaXMub3B0aW9ucy5kb3REYXRhKSB7XHJcblx0XHRcdGRvdFZhbHVlID0gJGMuZmluZCgnW2RhdGEtZG90XScpLmFuZFNlbGYoKS5kYXRhKCdkb3QnKTtcclxuXHRcdH1cclxuXHRcdC8vIHVwZGF0ZSBVUkwgaGFzaFxyXG5cdFx0aWYgKHRoaXMub3B0aW9ucy5VUkxoYXNoTGlzdGVuZXIpIHtcclxuXHRcdFx0aGFzaFZhbHVlID0gJGMuZmluZCgnW2RhdGEtaGFzaF0nKS5hbmRTZWxmKCkuZGF0YSgnaGFzaCcpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0ZG90OiBkb3RWYWx1ZSB8fCBmYWxzZSxcclxuXHRcdFx0aGFzaDogaGFzaFZhbHVlIHx8IGZhbHNlXHJcblx0XHR9O1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogc2V0RGF0YVxyXG4gICogQGRlc2MgU2V0IGl0ZW0galF1ZXJ5IERhdGEgXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqIEBwYXJhbSBbaXRlbV0gLSBkb20gLSBwYXNzZWQgb3dsLWl0ZW1cclxuICAqIEBwYXJhbSBbY2xvbmVPYmpdIC0gJGRvbSAtIHBhc3NlZCBjbG9uZSBpdGVtXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5zZXREYXRhID0gZnVuY3Rpb24gKGl0ZW0sIGNsb25lT2JqLCB0cmF2ZXJzZWQpIHtcclxuXHRcdHZhciBkb3QsIGhhc2g7XHJcblx0XHRpZiAodHJhdmVyc2VkKSB7XHJcblx0XHRcdGRvdCA9IHRyYXZlcnNlZC5kb3Q7XHJcblx0XHRcdGhhc2ggPSB0cmF2ZXJzZWQuaGFzaDtcclxuXHRcdH1cclxuXHRcdHZhciBpdGVtRGF0YSA9IHtcclxuXHRcdFx0aW5kZXg6IGZhbHNlLFxyXG5cdFx0XHRpbmRleEFiczogZmFsc2UsXHJcblx0XHRcdHBvc0xlZnQ6IGZhbHNlLFxyXG5cdFx0XHRjbG9uZTogZmFsc2UsXHJcblx0XHRcdGFjdGl2ZTogZmFsc2UsXHJcblx0XHRcdGxvYWRlZDogZmFsc2UsXHJcblx0XHRcdGxhenlMb2FkOiBmYWxzZSxcclxuXHRcdFx0Y3VycmVudDogZmFsc2UsXHJcblx0XHRcdHdpZHRoOiBmYWxzZSxcclxuXHRcdFx0Y2VudGVyOiBmYWxzZSxcclxuXHRcdFx0cGFnZTogZmFsc2UsXHJcblx0XHRcdGhhc1ZpZGVvOiBmYWxzZSxcclxuXHRcdFx0cGxheVZpZGVvOiBmYWxzZSxcclxuXHRcdFx0ZG90OiBkb3QsXHJcblx0XHRcdGhhc2g6IGhhc2hcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gY29weSBpdGVtRGF0YSB0byBjbG9uZWQgaXRlbVxyXG5cclxuXHRcdGlmIChjbG9uZU9iaikge1xyXG5cdFx0XHRpdGVtRGF0YSA9ICQuZXh0ZW5kKHt9LCBpdGVtRGF0YSwgY2xvbmVPYmouZGF0YSgnb3dsLWl0ZW0nKSk7XHJcblx0XHR9XHJcblxyXG5cdFx0JChpdGVtKS5kYXRhKCdvd2wtaXRlbScsIGl0ZW1EYXRhKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIHVwZGF0ZUxvY2FsQ29udGVudFxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS51cGRhdGVMb2NhbENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHR0aGlzLmRvbS4kb0l0ZW1zID0gdGhpcy5kb20uJHN0YWdlLmZpbmQoJy4nICsgdGhpcy5vcHRpb25zLml0ZW1DbGFzcykuZmlsdGVyKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuICQodGhpcykuZGF0YSgnb3dsLWl0ZW0nKS5jbG9uZSA9PT0gZmFsc2U7XHJcblx0XHR9KTtcclxuXHJcblx0XHR0aGlzLm51bS5vSXRlbXMgPSB0aGlzLmRvbS4kb0l0ZW1zLmxlbmd0aDtcclxuXHRcdC8vdXBkYXRlIGluZGV4IG9uIG9yaWdpbmFsIGl0ZW1zXHJcblxyXG5cdFx0Zm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLm51bS5vSXRlbXM7IGsrKykge1xyXG5cdFx0XHR2YXIgaXRlbSA9IHRoaXMuZG9tLiRvSXRlbXMuZXEoayk7XHJcblx0XHRcdGl0ZW0uZGF0YSgnb3dsLWl0ZW0nKS5pbmRleCA9IGs7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBjaGVja1ZpZGVvTGlua3NcclxuICAqIEBkZXNjIENoZWNrIGlmIGZvciBhbnkgdmlkZW9zIGxpbmtzXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLmNoZWNrVmlkZW9MaW5rcyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdGlmICghdGhpcy5vcHRpb25zLnZpZGVvKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdHZhciB2aWRlb0VsLCBpdGVtO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5udW0uaXRlbXM7IGkrKykge1xyXG5cclxuXHRcdFx0aXRlbSA9IHRoaXMuZG9tLiRpdGVtcy5lcShpKTtcclxuXHRcdFx0aWYgKGl0ZW0uZGF0YSgnb3dsLWl0ZW0nKS5oYXNWaWRlbykge1xyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2aWRlb0VsID0gaXRlbS5maW5kKCcub3dsLXZpZGVvJyk7XHJcblx0XHRcdGlmICh2aWRlb0VsLmxlbmd0aCkge1xyXG5cdFx0XHRcdHRoaXMuc3RhdGUuaGFzVmlkZW9zID0gdHJ1ZTtcclxuXHRcdFx0XHR0aGlzLmRvbS4kaXRlbXMuZXEoaSkuZGF0YSgnb3dsLWl0ZW0nKS5oYXNWaWRlbyA9IHRydWU7XHJcblx0XHRcdFx0dmlkZW9FbC5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG5cdFx0XHRcdHRoaXMuZ2V0VmlkZW9JbmZvKHZpZGVvRWwsIGl0ZW0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBnZXRWaWRlb0luZm9cclxuICAqIEBkZXNjIEdldCBWaWRlbyBJRCBhbmQgVHlwZSAoWW91VHViZS9WaW1lbyBvbmx5KVxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5nZXRWaWRlb0luZm8gPSBmdW5jdGlvbiAodmlkZW9FbCwgaXRlbSkge1xyXG5cclxuXHRcdHZhciBpbmZvLFxyXG5cdFx0ICAgIHR5cGUsXHJcblx0XHQgICAgaWQsXHJcblx0XHQgICAgdmltZW9JZCA9IHZpZGVvRWwuZGF0YSgndmltZW8taWQnKSxcclxuXHRcdCAgICB5b3VUdWJlSWQgPSB2aWRlb0VsLmRhdGEoJ3lvdXR1YmUtaWQnKSxcclxuXHRcdCAgICB3aWR0aCA9IHZpZGVvRWwuZGF0YSgnd2lkdGgnKSB8fCB0aGlzLm9wdGlvbnMudmlkZW9XaWR0aCxcclxuXHRcdCAgICBoZWlnaHQgPSB2aWRlb0VsLmRhdGEoJ2hlaWdodCcpIHx8IHRoaXMub3B0aW9ucy52aWRlb0hlaWdodCxcclxuXHRcdCAgICB1cmwgPSB2aWRlb0VsLmF0dHIoJ2hyZWYnKTtcclxuXHJcblx0XHRpZiAodmltZW9JZCkge1xyXG5cdFx0XHR0eXBlID0gJ3ZpbWVvJztcclxuXHRcdFx0aWQgPSB2aW1lb0lkO1xyXG5cdFx0fSBlbHNlIGlmICh5b3VUdWJlSWQpIHtcclxuXHRcdFx0dHlwZSA9ICd5b3V0dWJlJztcclxuXHRcdFx0aWQgPSB5b3VUdWJlSWQ7XHJcblx0XHR9IGVsc2UgaWYgKHVybCkge1xyXG5cdFx0XHRpZCA9IHVybC5tYXRjaCgvKGh0dHA6fGh0dHBzOnwpXFwvXFwvKHBsYXllci58d3d3Lik/KHZpbWVvXFwuY29tfHlvdXR1KGJlXFwuY29tfFxcLmJlfGJlXFwuZ29vZ2xlYXBpc1xcLmNvbSkpXFwvKHZpZGVvXFwvfGVtYmVkXFwvfHdhdGNoXFw/dj18dlxcLyk/KFtBLVphLXowLTkuXyUtXSopKFxcJlxcUyspPy8pO1xyXG5cclxuXHRcdFx0aWYgKGlkWzNdLmluZGV4T2YoJ3lvdXR1JykgPiAtMSkge1xyXG5cdFx0XHRcdHR5cGUgPSAneW91dHViZSc7XHJcblx0XHRcdH0gZWxzZSBpZiAoaWRbM10uaW5kZXhPZigndmltZW8nKSA+IC0xKSB7XHJcblx0XHRcdFx0dHlwZSA9ICd2aW1lbyc7XHJcblx0XHRcdH1cclxuXHRcdFx0aWQgPSBpZFs2XTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignTWlzc2luZyB2aWRlbyBsaW5rLicpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGl0ZW0uZGF0YSgnb3dsLWl0ZW0nKS52aWRlb1R5cGUgPSB0eXBlO1xyXG5cdFx0aXRlbS5kYXRhKCdvd2wtaXRlbScpLnZpZGVvSWQgPSBpZDtcclxuXHRcdGl0ZW0uZGF0YSgnb3dsLWl0ZW0nKS52aWRlb1dpZHRoID0gd2lkdGg7XHJcblx0XHRpdGVtLmRhdGEoJ293bC1pdGVtJykudmlkZW9IZWlnaHQgPSBoZWlnaHQ7XHJcblxyXG5cdFx0aW5mbyA9IHtcclxuXHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0aWQ6IGlkXHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIENoZWNrIGRpbWVuc2lvbnNcclxuXHRcdHZhciBkaW1lbnNpb25zID0gd2lkdGggJiYgaGVpZ2h0ID8gJ3N0eWxlPVwid2lkdGg6JyArIHdpZHRoICsgJ3B4O2hlaWdodDonICsgaGVpZ2h0ICsgJ3B4O1wiJyA6ICcnO1xyXG5cclxuXHRcdC8vIHdyYXAgdmlkZW8gY29udGVudCBpbnRvIG93bC12aWRlby13cmFwcGVyIGRpdlxyXG5cdFx0dmlkZW9FbC53cmFwKCc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLXdyYXBwZXJcIicgKyBkaW1lbnNpb25zICsgJz48L2Rpdj4nKTtcclxuXHJcblx0XHR0aGlzLmNyZWF0ZVZpZGVvVG4odmlkZW9FbCwgaW5mbyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBjcmVhdGVWaWRlb1RuXHJcbiAgKiBAZGVzYyBDcmVhdGUgVmlkZW8gVGh1bWJuYWlsXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLmNyZWF0ZVZpZGVvVG4gPSBmdW5jdGlvbiAodmlkZW9FbCwgaW5mbykge1xyXG5cclxuXHRcdHZhciB0bkxpbmssIGljb24sIGhlaWdodDtcclxuXHRcdHZhciBjdXN0b21UbiA9IHZpZGVvRWwuZmluZCgnaW1nJyk7XHJcblx0XHR2YXIgc3JjVHlwZSA9ICdzcmMnO1xyXG5cdFx0dmFyIGxhenlDbGFzcyA9ICcnO1xyXG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xyXG5cclxuXHRcdGlmICh0aGlzLm9wdGlvbnMubGF6eUxvYWQpIHtcclxuXHRcdFx0c3JjVHlwZSA9ICdkYXRhLXNyYyc7XHJcblx0XHRcdGxhenlDbGFzcyA9ICdvd2wtbGF6eSc7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ3VzdG9tIHRodW1ibmFpbFxyXG5cclxuXHRcdGlmIChjdXN0b21Ubi5sZW5ndGgpIHtcclxuXHRcdFx0YWRkVGh1bWJuYWlsKGN1c3RvbVRuLmF0dHIoc3JjVHlwZSkpO1xyXG5cdFx0XHRjdXN0b21Ubi5yZW1vdmUoKTtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGFkZFRodW1ibmFpbCh0blBhdGgpIHtcclxuXHRcdFx0aWNvbiA9ICc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLXBsYXktaWNvblwiPjwvZGl2Pic7XHJcblxyXG5cdFx0XHRpZiAodGhhdC5vcHRpb25zLmxhenlMb2FkKSB7XHJcblx0XHRcdFx0dG5MaW5rID0gJzxkaXYgY2xhc3M9XCJvd2wtdmlkZW8tdG4gJyArIGxhenlDbGFzcyArICdcIiAnICsgc3JjVHlwZSArICc9XCInICsgdG5QYXRoICsgJ1wiPjwvZGl2Pic7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dG5MaW5rID0gJzxkaXYgY2xhc3M9XCJvd2wtdmlkZW8tdG5cIiBzdHlsZT1cIm9wYWNpdHk6MTtiYWNrZ3JvdW5kLWltYWdlOnVybCgnICsgdG5QYXRoICsgJylcIj48L2Rpdj4nO1xyXG5cdFx0XHR9XHJcblx0XHRcdHZpZGVvRWwuYWZ0ZXIodG5MaW5rKTtcclxuXHRcdFx0dmlkZW9FbC5hZnRlcihpY29uKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoaW5mby50eXBlID09PSAneW91dHViZScpIHtcclxuXHRcdFx0dmFyIHBhdGggPSBcImh0dHA6Ly9pbWcueW91dHViZS5jb20vdmkvXCIgKyBpbmZvLmlkICsgXCIvaHFkZWZhdWx0LmpwZ1wiO1xyXG5cdFx0XHRhZGRUaHVtYm5haWwocGF0aCk7XHJcblx0XHR9IGVsc2UgaWYgKGluZm8udHlwZSA9PT0gJ3ZpbWVvJykge1xyXG5cdFx0XHQkLmFqYXgoe1xyXG5cdFx0XHRcdHR5cGU6ICdHRVQnLFxyXG5cdFx0XHRcdHVybDogJ2h0dHA6Ly92aW1lby5jb20vYXBpL3YyL3ZpZGVvLycgKyBpbmZvLmlkICsgJy5qc29uJyxcclxuXHRcdFx0XHRqc29ucDogJ2NhbGxiYWNrJyxcclxuXHRcdFx0XHRkYXRhVHlwZTogJ2pzb25wJyxcclxuXHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiBzdWNjZXNzKGRhdGEpIHtcclxuXHRcdFx0XHRcdHZhciBwYXRoID0gZGF0YVswXS50aHVtYm5haWxfbGFyZ2U7XHJcblx0XHRcdFx0XHRhZGRUaHVtYm5haWwocGF0aCk7XHJcblx0XHRcdFx0XHRpZiAodGhhdC5vcHRpb25zLmxvb3ApIHtcclxuXHRcdFx0XHRcdFx0dGhhdC51cGRhdGVJdGVtU3RhdGUoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogc3RvcFZpZGVvXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLnN0b3BWaWRlbyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdHRoaXMuZmlyZUNhbGxiYWNrKCdvblZpZGVvU3RvcCcpO1xyXG5cdFx0dmFyIGl0ZW0gPSB0aGlzLmRvbS4kaXRlbXMuZXEodGhpcy5zdGF0ZS52aWRlb1BsYXlJbmRleCk7XHJcblx0XHRpdGVtLmZpbmQoJy5vd2wtdmlkZW8tZnJhbWUnKS5yZW1vdmUoKTtcclxuXHRcdGl0ZW0ucmVtb3ZlQ2xhc3MoJ293bC12aWRlby1wbGF5aW5nJyk7XHJcblx0XHR0aGlzLnN0YXRlLnZpZGVvUGxheSA9IGZhbHNlO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogcGxheVZpZGVvXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLnBsYXlWaWRlbyA9IGZ1bmN0aW9uIChldikge1xyXG5cdFx0dGhpcy5maXJlQ2FsbGJhY2soJ29uVmlkZW9QbGF5Jyk7XHJcblxyXG5cdFx0aWYgKHRoaXMuc3RhdGUudmlkZW9QbGF5KSB7XHJcblx0XHRcdHRoaXMuc3RvcFZpZGVvKCk7XHJcblx0XHR9XHJcblx0XHR2YXIgdmlkZW9MaW5rLFxyXG5cdFx0ICAgIHZpZGVvV3JhcCxcclxuXHRcdCAgICB0YXJnZXQgPSAkKGV2LnRhcmdldCB8fCBldi5zcmNFbGVtZW50KSxcclxuXHRcdCAgICBpdGVtID0gdGFyZ2V0LmNsb3Nlc3QoJy4nICsgdGhpcy5vcHRpb25zLml0ZW1DbGFzcyk7XHJcblxyXG5cdFx0dmFyIHZpZGVvVHlwZSA9IGl0ZW0uZGF0YSgnb3dsLWl0ZW0nKS52aWRlb1R5cGUsXHJcblx0XHQgICAgaWQgPSBpdGVtLmRhdGEoJ293bC1pdGVtJykudmlkZW9JZCxcclxuXHRcdCAgICB3aWR0aCA9IGl0ZW0uZGF0YSgnb3dsLWl0ZW0nKS52aWRlb1dpZHRoIHx8IE1hdGguZmxvb3IoaXRlbS5kYXRhKCdvd2wtaXRlbScpLndpZHRoIC0gdGhpcy5vcHRpb25zLm1hcmdpbiksXHJcblx0XHQgICAgaGVpZ2h0ID0gaXRlbS5kYXRhKCdvd2wtaXRlbScpLnZpZGVvSGVpZ2h0IHx8IHRoaXMuZG9tLiRzdGFnZS5oZWlnaHQoKTtcclxuXHJcblx0XHRpZiAodmlkZW9UeXBlID09PSAneW91dHViZScpIHtcclxuXHRcdFx0dmlkZW9MaW5rID0gXCI8aWZyYW1lIHdpZHRoPVxcXCJcIiArIHdpZHRoICsgXCJcXFwiIGhlaWdodD1cXFwiXCIgKyBoZWlnaHQgKyBcIlxcXCIgc3JjPVxcXCJodHRwOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL1wiICsgaWQgKyBcIj9hdXRvcGxheT0xJnY9XCIgKyBpZCArIFwiXFxcIiBmcmFtZWJvcmRlcj1cXFwiMFxcXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPlwiO1xyXG5cdFx0fSBlbHNlIGlmICh2aWRlb1R5cGUgPT09ICd2aW1lbycpIHtcclxuXHRcdFx0dmlkZW9MaW5rID0gJzxpZnJhbWUgc3JjPVwiaHR0cDovL3BsYXllci52aW1lby5jb20vdmlkZW8vJyArIGlkICsgJz9hdXRvcGxheT0xXCIgd2lkdGg9XCInICsgd2lkdGggKyAnXCIgaGVpZ2h0PVwiJyArIGhlaWdodCArICdcIiBmcmFtZWJvcmRlcj1cIjBcIiB3ZWJraXRhbGxvd2Z1bGxzY3JlZW4gbW96YWxsb3dmdWxsc2NyZWVuIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT4nO1xyXG5cdFx0fVxyXG5cclxuXHRcdGl0ZW0uYWRkQ2xhc3MoJ293bC12aWRlby1wbGF5aW5nJyk7XHJcblx0XHR0aGlzLnN0YXRlLnZpZGVvUGxheSA9IHRydWU7XHJcblx0XHR0aGlzLnN0YXRlLnZpZGVvUGxheUluZGV4ID0gaXRlbS5kYXRhKCdvd2wtaXRlbScpLmluZGV4QWJzO1xyXG5cclxuXHRcdHZpZGVvV3JhcCA9ICQoJzxkaXYgc3R5bGU9XCJoZWlnaHQ6JyArIGhlaWdodCArICdweDsgd2lkdGg6JyArIHdpZHRoICsgJ3B4XCIgY2xhc3M9XCJvd2wtdmlkZW8tZnJhbWVcIj4nICsgdmlkZW9MaW5rICsgJzwvZGl2PicpO1xyXG5cdFx0dGFyZ2V0LmFmdGVyKHZpZGVvV3JhcCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBsb29wQ2xvbmVcclxuICAqIEBkZXNjIE1ha2UgYSBjbG9uZXMgZm9yIGluZmluaXR5IGxvb3BcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUubG9vcENsb25lID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0aWYgKCF0aGlzLm9wdGlvbnMubG9vcCB8fCB0aGlzLnN0YXRlLmxhenlDb250ZW50IHx8IHRoaXMubnVtLm9JdGVtcyA8IHRoaXMub3B0aW9ucy5pdGVtcykge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGZpcnN0Q2xvbmUsXHJcblx0XHQgICAgbGFzdENsb25lLFxyXG5cdFx0ICAgIGksXHJcblx0XHQgICAgbnVtID0gdGhpcy5vcHRpb25zLml0ZW1zLFxyXG5cdFx0ICAgIGxhc3ROdW0gPSB0aGlzLm51bS5vSXRlbXMgLSAxO1xyXG5cclxuXHRcdC8vIGlmIG5laWdoYm91ciBtYXJnaW4gdGhlbiBhZGQgb25lIG1vcmUgZHVwbGljYXRcclxuXHRcdGlmICh0aGlzLm9wdGlvbnMuc3RhZ2VQYWRkaW5nICYmIHRoaXMub3B0aW9ucy5pdGVtcyA9PT0gMSkge1xyXG5cdFx0XHRudW0gKz0gMTtcclxuXHRcdH1cclxuXHRcdHRoaXMubnVtLmNJdGVtcyA9IG51bSAqIDI7XHJcblxyXG5cdFx0Zm9yIChpID0gMDsgaSA8IG51bTsgaSsrKSB7XHJcblx0XHRcdC8vIENsb25lIGl0ZW1cclxuXHRcdFx0dmFyIGZpcnN0ID0gdGhpcy5kb20uJG9JdGVtcy5lcShpKS5jbG9uZSh0cnVlLCB0cnVlKTtcclxuXHRcdFx0dmFyIGxhc3QgPSB0aGlzLmRvbS4kb0l0ZW1zLmVxKGxhc3ROdW0gLSBpKS5jbG9uZSh0cnVlLCB0cnVlKTtcclxuXHRcdFx0Zmlyc3RDbG9uZSA9ICQoZmlyc3RbMF0pLmFkZENsYXNzKCdjbG9uZWQnKTtcclxuXHRcdFx0bGFzdENsb25lID0gJChsYXN0WzBdKS5hZGRDbGFzcygnY2xvbmVkJyk7XHJcblxyXG5cdFx0XHQvLyBzZXQgY2xvbmUgZGF0YVxyXG5cdFx0XHQvLyBTb21laG93IGRhdGEgaGFzIHJlZmVyZW5jZSB0byBzYW1lIGRhdGEgaWQgaW4gY2FzaFxyXG5cclxuXHRcdFx0dGhpcy5zZXREYXRhKGZpcnN0Q2xvbmVbMF0sIGZpcnN0KTtcclxuXHRcdFx0dGhpcy5zZXREYXRhKGxhc3RDbG9uZVswXSwgbGFzdCk7XHJcblxyXG5cdFx0XHRmaXJzdENsb25lLmRhdGEoJ293bC1pdGVtJykuY2xvbmUgPSB0cnVlO1xyXG5cdFx0XHRsYXN0Q2xvbmUuZGF0YSgnb3dsLWl0ZW0nKS5jbG9uZSA9IHRydWU7XHJcblxyXG5cdFx0XHR0aGlzLmRvbS4kc3RhZ2UuYXBwZW5kKGZpcnN0Q2xvbmUpO1xyXG5cdFx0XHR0aGlzLmRvbS4kc3RhZ2UucHJlcGVuZChsYXN0Q2xvbmUpO1xyXG5cclxuXHRcdFx0Zmlyc3RDbG9uZSA9IGxhc3RDbG9uZSA9IG51bGw7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5kb20uJGNJdGVtcyA9IHRoaXMuZG9tLiRzdGFnZS5maW5kKCcuJyArIHRoaXMub3B0aW9ucy5pdGVtQ2xhc3MpLmZpbHRlcihmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHJldHVybiAkKHRoaXMpLmRhdGEoJ293bC1pdGVtJykuY2xvbmUgPT09IHRydWU7XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIHJlQ2xvbmVcclxuICAqIEBkZXNjIFVwZGF0ZSBDbG9uZWQgZWxlbWVudHNcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUucmVDbG9uZSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdC8vIHJlbW92ZSBjbG9uZWQgaXRlbXNcclxuXHRcdGlmICh0aGlzLmRvbS4kY0l0ZW1zICE9PSBudWxsKSB7XHJcblx0XHRcdC8vICYmICh0aGlzLm51bS5vSXRlbXMgIT09IDAgJiYgdGhpcy5udW0ub0l0ZW1zIDw9IHRoaXMub3B0aW9ucy5pdGVtcykpe1xyXG5cdFx0XHR0aGlzLmRvbS4kY0l0ZW1zLnJlbW92ZSgpO1xyXG5cdFx0XHR0aGlzLmRvbS4kY0l0ZW1zID0gbnVsbDtcclxuXHRcdFx0dGhpcy5udW0uY0l0ZW1zID0gMDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIXRoaXMub3B0aW9ucy5sb29wKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdC8vIGdlbmVyZXRlIG5ldyBlbGVtZW50c1xyXG5cdFx0dGhpcy5sb29wQ2xvbmUoKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIGNhbGN1bGF0ZVxyXG4gICogQGRlc2MgVXBkYXRlIGl0ZW0gaW5kZXggZGF0YVxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5jYWxjdWxhdGUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIGksXHJcblx0XHQgICAgaixcclxuXHRcdCAgICBrLFxyXG5cdFx0ICAgIGRpc3QsXHJcblx0XHQgICAgcG9zTGVmdCA9IDAsXHJcblx0XHQgICAgZnVsbFdpZHRoID0gMDtcclxuXHJcblx0XHQvLyBlbGVtZW50IHdpZHRoIG1pbnVzIG5laWdoYm91clxyXG5cdFx0dGhpcy53aWR0aC5lbCA9IHRoaXMuZG9tLiRlbC53aWR0aCgpIC0gdGhpcy5vcHRpb25zLnN0YWdlUGFkZGluZyAqIDI7XHJcblxyXG5cdFx0Ly90byBjaGVja1xyXG5cdFx0dGhpcy53aWR0aC52aWV3ID0gdGhpcy5kb20uJGVsLndpZHRoKCk7XHJcblxyXG5cdFx0Ly8gY2FsY3VsYXRlIHdpZHRoIG1pbnVzIGFkZGl0aW9uIG1hcmdpbnNcclxuXHRcdHZhciBlbE1pbnVzTWFyZ2luID0gdGhpcy53aWR0aC5lbCAtIHRoaXMub3B0aW9ucy5tYXJnaW4gKiAodGhpcy5vcHRpb25zLml0ZW1zID09PSAxID8gMCA6IHRoaXMub3B0aW9ucy5pdGVtcyAtIDEpO1xyXG5cclxuXHRcdC8vIGNhbGN1bGF0ZSBlbGVtZW50IHdpZHRoIGFuZCBpdGVtIHdpZHRoXHJcblx0XHR0aGlzLndpZHRoLmVsID0gdGhpcy53aWR0aC5lbCArIHRoaXMub3B0aW9ucy5tYXJnaW47XHJcblx0XHR0aGlzLndpZHRoLml0ZW0gPSAoZWxNaW51c01hcmdpbiAvIHRoaXMub3B0aW9ucy5pdGVtcyArIHRoaXMub3B0aW9ucy5tYXJnaW4pLnRvRml4ZWQoMyk7XHJcblxyXG5cdFx0dGhpcy5kb20uJGl0ZW1zID0gdGhpcy5kb20uJHN0YWdlLmZpbmQoJy5vd2wtaXRlbScpO1xyXG5cdFx0dGhpcy5udW0uaXRlbXMgPSB0aGlzLmRvbS4kaXRlbXMubGVuZ3RoO1xyXG5cclxuXHRcdC8vY2hhbmdlIHRvIGF1dG9XaWR0aHNcclxuXHRcdGlmICh0aGlzLm9wdGlvbnMuYXV0b1dpZHRoKSB7XHJcblx0XHRcdHRoaXMuZG9tLiRpdGVtcy5jc3MoJ3dpZHRoJywgJycpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNldCBncmlkIGFycmF5XHJcblx0XHR0aGlzLnBvcy5pdGVtcyA9IFtdO1xyXG5cdFx0dGhpcy5udW0ubWVyZ2VkID0gW107XHJcblx0XHR0aGlzLm51bS5uYXYgPSBbXTtcclxuXHJcblx0XHQvLyBpdGVtIGRpc3RhbmNlc1xyXG5cdFx0aWYgKHRoaXMub3B0aW9ucy5ydGwpIHtcclxuXHRcdFx0ZGlzdCA9IHRoaXMub3B0aW9ucy5jZW50ZXIgPyAtKHRoaXMud2lkdGguZWwgLyAyKSA6IDA7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRkaXN0ID0gdGhpcy5vcHRpb25zLmNlbnRlciA/IHRoaXMud2lkdGguZWwgLyAyIDogMDtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLndpZHRoLm1lcmdlU3RhZ2UgPSAwO1xyXG5cclxuXHRcdC8vIENhbGN1bGF0ZSBpdGVtcyBwb3NpdGlvbnNcclxuXHRcdGZvciAoaSA9IDA7IGkgPCB0aGlzLm51bS5pdGVtczsgaSsrKSB7XHJcblxyXG5cdFx0XHQvLyBjaGVjayBtZXJnZWQgaXRlbXNcclxuXHJcblx0XHRcdGlmICh0aGlzLm9wdGlvbnMubWVyZ2UpIHtcclxuXHRcdFx0XHR2YXIgbWVyZ2VOdW1iZXIgPSB0aGlzLmRvbS4kaXRlbXMuZXEoaSkuZmluZCgnW2RhdGEtbWVyZ2VdJykuYXR0cignZGF0YS1tZXJnZScpIHx8IDE7XHJcblx0XHRcdFx0aWYgKHRoaXMub3B0aW9ucy5tZXJnZUZpdCAmJiBtZXJnZU51bWJlciA+IHRoaXMub3B0aW9ucy5pdGVtcykge1xyXG5cdFx0XHRcdFx0bWVyZ2VOdW1iZXIgPSB0aGlzLm9wdGlvbnMuaXRlbXM7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHRoaXMubnVtLm1lcmdlZC5wdXNoKHBhcnNlSW50KG1lcmdlTnVtYmVyKSk7XHJcblx0XHRcdFx0dGhpcy53aWR0aC5tZXJnZVN0YWdlICs9IHRoaXMud2lkdGguaXRlbSAqIHRoaXMubnVtLm1lcmdlZFtpXTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLm51bS5tZXJnZWQucHVzaCgxKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQXJyYXkgYmFzZWQgb24gbWVyZ2VkIGl0ZW1zIHVzZWQgYnkgZG90cyBhbmQgbmF2aWdhdGlvblxyXG5cdFx0XHRpZiAodGhpcy5vcHRpb25zLmxvb3ApIHtcclxuXHRcdFx0XHRpZiAoaSA+PSB0aGlzLm51bS5jSXRlbXMgLyAyICYmIGkgPCB0aGlzLm51bS5jSXRlbXMgLyAyICsgdGhpcy5udW0ub0l0ZW1zKSB7XHJcblx0XHRcdFx0XHR0aGlzLm51bS5uYXYucHVzaCh0aGlzLm51bS5tZXJnZWRbaV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLm51bS5uYXYucHVzaCh0aGlzLm51bS5tZXJnZWRbaV0pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgaVdpZHRoID0gdGhpcy53aWR0aC5pdGVtICogdGhpcy5udW0ubWVyZ2VkW2ldO1xyXG5cclxuXHRcdFx0Ly8gYXV0b1dpZHRoIGl0ZW0gc2l6ZVxyXG5cdFx0XHRpZiAodGhpcy5vcHRpb25zLmF1dG9XaWR0aCkge1xyXG5cdFx0XHRcdGlXaWR0aCA9IHRoaXMuZG9tLiRpdGVtcy5lcShpKS53aWR0aCgpICsgdGhpcy5vcHRpb25zLm1hcmdpbjtcclxuXHRcdFx0XHRpZiAodGhpcy5vcHRpb25zLnJ0bCkge1xyXG5cdFx0XHRcdFx0dGhpcy5kb20uJGl0ZW1zW2ldLnN0eWxlLm1hcmdpbkxlZnQgPSB0aGlzLm9wdGlvbnMubWFyZ2luICsgJ3B4JztcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dGhpcy5kb20uJGl0ZW1zW2ldLnN0eWxlLm1hcmdpblJpZ2h0ID0gdGhpcy5vcHRpb25zLm1hcmdpbiArICdweCc7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdC8vIHB1c2ggaXRlbSBwb3NpdGlvbiBpbnRvIGFycmF5XHJcblx0XHRcdHRoaXMucG9zLml0ZW1zLnB1c2goZGlzdCk7XHJcblxyXG5cdFx0XHQvLyB1cGRhdGUgaXRlbSBkYXRhXHJcblx0XHRcdHRoaXMuZG9tLiRpdGVtcy5lcShpKS5kYXRhKCdvd2wtaXRlbScpLnBvc0xlZnQgPSBwb3NMZWZ0O1xyXG5cdFx0XHR0aGlzLmRvbS4kaXRlbXMuZXEoaSkuZGF0YSgnb3dsLWl0ZW0nKS53aWR0aCA9IGlXaWR0aDtcclxuXHJcblx0XHRcdC8vIGRpc3Qgc3RhcnRzIGZyb20gbWlkZGxlIG9mIHN0YWdlIGlmIGNlbnRlclxyXG5cdFx0XHQvLyBwb3NMZWZ0IGFsd2F5cyBzdGFydHMgZnJvbSAwXHJcblx0XHRcdGlmICh0aGlzLm9wdGlvbnMucnRsKSB7XHJcblx0XHRcdFx0ZGlzdCArPSBpV2lkdGg7XHJcblx0XHRcdFx0cG9zTGVmdCArPSBpV2lkdGg7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZGlzdCAtPSBpV2lkdGg7XHJcblx0XHRcdFx0cG9zTGVmdCAtPSBpV2lkdGg7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZ1bGxXaWR0aCAtPSBNYXRoLmFicyhpV2lkdGgpO1xyXG5cclxuXHRcdFx0Ly8gdXBkYXRlIHBvc2l0aW9uIGlmIGNlbnRlclxyXG5cdFx0XHRpZiAodGhpcy5vcHRpb25zLmNlbnRlcikge1xyXG5cdFx0XHRcdHRoaXMucG9zLml0ZW1zW2ldID0gIXRoaXMub3B0aW9ucy5ydGwgPyB0aGlzLnBvcy5pdGVtc1tpXSAtIGlXaWR0aCAvIDIgOiB0aGlzLnBvcy5pdGVtc1tpXSArIGlXaWR0aCAvIDI7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5vcHRpb25zLmF1dG9XaWR0aCkge1xyXG5cdFx0XHR0aGlzLndpZHRoLnN0YWdlID0gdGhpcy5vcHRpb25zLmNlbnRlciA/IE1hdGguYWJzKGZ1bGxXaWR0aCkgOiBNYXRoLmFicyhkaXN0KTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMud2lkdGguc3RhZ2UgPSBNYXRoLmFicyhmdWxsV2lkdGgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vdXBkYXRlIGluZGV4QWJzIG9uIGFsbCBpdGVtc1xyXG5cdFx0dmFyIGFsbEl0ZW1zID0gdGhpcy5udW0ub0l0ZW1zICsgdGhpcy5udW0uY0l0ZW1zO1xyXG5cclxuXHRcdGZvciAoaiA9IDA7IGogPCBhbGxJdGVtczsgaisrKSB7XHJcblx0XHRcdHRoaXMuZG9tLiRpdGVtcy5lcShqKS5kYXRhKCdvd2wtaXRlbScpLmluZGV4QWJzID0gajtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTZXQgTWluIGFuZCBNYXhcclxuXHRcdHRoaXMuc2V0TWluTWF4KCk7XHJcblxyXG5cdFx0Ly8gUmVjYWxjdWxhdGUgZ3JpZFxyXG5cdFx0dGhpcy5zZXRTaXplcygpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogc2V0TWluTWF4XHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLnNldE1pbk1heCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHQvLyBzZXQgTWluXHJcblx0XHR2YXIgbWluaW11bSA9IHRoaXMuZG9tLiRvSXRlbXMuZXEoMCkuZGF0YSgnb3dsLWl0ZW0nKS5pbmRleEFicztcclxuXHRcdHZhciBpO1xyXG5cdFx0dGhpcy5wb3MubWluID0gMDtcclxuXHRcdHRoaXMucG9zLm1pblZhbHVlID0gdGhpcy5wb3MuaXRlbXNbbWluaW11bV07XHJcblxyXG5cdFx0Ly8gc2V0IG1heCBwb3NpdGlvblxyXG5cdFx0aWYgKCF0aGlzLm9wdGlvbnMubG9vcCkge1xyXG5cdFx0XHR0aGlzLnBvcy5tYXggPSB0aGlzLm51bS5vSXRlbXMgLSAxO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLm9wdGlvbnMubG9vcCkge1xyXG5cdFx0XHR0aGlzLnBvcy5tYXggPSB0aGlzLm51bS5vSXRlbXMgKyB0aGlzLm9wdGlvbnMuaXRlbXM7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCF0aGlzLm9wdGlvbnMubG9vcCAmJiAhdGhpcy5vcHRpb25zLmNlbnRlcikge1xyXG5cdFx0XHR0aGlzLnBvcy5tYXggPSB0aGlzLm51bS5vSXRlbXMgLSB0aGlzLm9wdGlvbnMuaXRlbXM7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMub3B0aW9ucy5sb29wICYmIHRoaXMub3B0aW9ucy5jZW50ZXIpIHtcclxuXHRcdFx0dGhpcy5wb3MubWF4ID0gdGhpcy5udW0ub0l0ZW1zICsgdGhpcy5vcHRpb25zLml0ZW1zO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vc2V0IG1heCB2YWx1ZVxyXG5cdFx0dGhpcy5wb3MubWF4VmFsdWUgPSB0aGlzLnBvcy5pdGVtc1t0aGlzLnBvcy5tYXhdO1xyXG5cclxuXHRcdC8vTWF4IGZvciBhdXRvV2lkdGggY29udGVudFxyXG5cdFx0aWYgKCF0aGlzLm9wdGlvbnMubG9vcCAmJiAhdGhpcy5vcHRpb25zLmNlbnRlciAmJiB0aGlzLm9wdGlvbnMuYXV0b1dpZHRoIHx8IHRoaXMub3B0aW9ucy5tZXJnZSAmJiAhdGhpcy5vcHRpb25zLmNlbnRlcikge1xyXG5cdFx0XHR2YXIgcmV2ZXJ0ID0gdGhpcy5vcHRpb25zLnJ0bCA/IDEgOiAtMTtcclxuXHRcdFx0Zm9yIChpID0gMDsgaSA8IHRoaXMucG9zLml0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0aWYgKHRoaXMucG9zLml0ZW1zW2ldICogcmV2ZXJ0IDwgdGhpcy53aWR0aC5zdGFnZSAtIHRoaXMud2lkdGguZWwpIHtcclxuXHRcdFx0XHRcdHRoaXMucG9zLm1heCA9IGkgKyAxO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLnBvcy5tYXhWYWx1ZSA9IHRoaXMub3B0aW9ucy5ydGwgPyB0aGlzLndpZHRoLnN0YWdlIC0gdGhpcy53aWR0aC5lbCA6IC0odGhpcy53aWR0aC5zdGFnZSAtIHRoaXMud2lkdGguZWwpO1xyXG5cdFx0XHR0aGlzLnBvcy5pdGVtc1t0aGlzLnBvcy5tYXhdID0gdGhpcy5wb3MubWF4VmFsdWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2V0IGxvb3AgYm91bmRyaWVzXHJcblx0XHRpZiAodGhpcy5vcHRpb25zLmNlbnRlcikge1xyXG5cdFx0XHR0aGlzLnBvcy5sb29wID0gdGhpcy5wb3MuaXRlbXNbMF0gLSB0aGlzLnBvcy5pdGVtc1t0aGlzLm51bS5vSXRlbXNdO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5wb3MubG9vcCA9IC10aGlzLnBvcy5pdGVtc1t0aGlzLm51bS5vSXRlbXNdO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vaWYgaXMgbGVzcyBpdGVtc1xyXG5cdFx0aWYgKHRoaXMubnVtLm9JdGVtcyA8IHRoaXMub3B0aW9ucy5pdGVtcyAmJiAhdGhpcy5vcHRpb25zLmNlbnRlcikge1xyXG5cdFx0XHR0aGlzLnBvcy5tYXggPSAwO1xyXG5cdFx0XHR0aGlzLnBvcy5tYXhWYWx1ZSA9IHRoaXMucG9zLml0ZW1zWzBdO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogc2V0U2l6ZXNcclxuICAqIEBkZXNjIFNldCBzaXplcyBvbiBlbGVtZW50cyAoZnJvbSBjb2xsZWN0RGF0YSBmdW5jdGlvbilcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUuc2V0U2l6ZXMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Ly8gc2hvdyBuZWlnaGJvdXJzXHJcblx0XHRpZiAodGhpcy5vcHRpb25zLnN0YWdlUGFkZGluZyAhPT0gZmFsc2UpIHtcclxuXHRcdFx0dGhpcy5kb20ub1N0YWdlLnN0eWxlLnBhZGRpbmdMZWZ0ID0gdGhpcy5vcHRpb25zLnN0YWdlUGFkZGluZyArICdweCc7XHJcblx0XHRcdHRoaXMuZG9tLm9TdGFnZS5zdHlsZS5wYWRkaW5nUmlnaHQgPSB0aGlzLm9wdGlvbnMuc3RhZ2VQYWRkaW5nICsgJ3B4JztcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDUkFaWSBGSVghISEgRG91YmxlY2hlY2sgdGhpcyFcclxuXHRcdC8vaWYodGhpcy53aWR0aC5zdGFnZVByZXYgPiB0aGlzLndpZHRoLnN0YWdlKXtcclxuXHRcdGlmICh0aGlzLm9wdGlvbnMucnRsKSB7XHJcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0dGhpcy5kb20uc3RhZ2Uuc3R5bGUud2lkdGggPSB0aGlzLndpZHRoLnN0YWdlICsgJ3B4JztcclxuXHRcdFx0fSkuYmluZCh0aGlzKSwgMCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLmRvbS5zdGFnZS5zdHlsZS53aWR0aCA9IHRoaXMud2lkdGguc3RhZ2UgKyAncHgnO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5udW0uaXRlbXM7IGkrKykge1xyXG5cclxuXHRcdFx0Ly8gU2V0IGl0ZW1zIHdpZHRoXHJcblx0XHRcdGlmICghdGhpcy5vcHRpb25zLmF1dG9XaWR0aCkge1xyXG5cdFx0XHRcdHRoaXMuZG9tLiRpdGVtc1tpXS5zdHlsZS53aWR0aCA9IHRoaXMud2lkdGguaXRlbSAtIHRoaXMub3B0aW9ucy5tYXJnaW4gKyAncHgnO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIGFkZCBtYXJnaW5cclxuXHRcdFx0aWYgKHRoaXMub3B0aW9ucy5ydGwpIHtcclxuXHRcdFx0XHR0aGlzLmRvbS4kaXRlbXNbaV0uc3R5bGUubWFyZ2luTGVmdCA9IHRoaXMub3B0aW9ucy5tYXJnaW4gKyAncHgnO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRoaXMuZG9tLiRpdGVtc1tpXS5zdHlsZS5tYXJnaW5SaWdodCA9IHRoaXMub3B0aW9ucy5tYXJnaW4gKyAncHgnO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAodGhpcy5udW0ubWVyZ2VkW2ldICE9PSAxICYmICF0aGlzLm9wdGlvbnMuYXV0b1dpZHRoKSB7XHJcblx0XHRcdFx0dGhpcy5kb20uJGl0ZW1zW2ldLnN0eWxlLndpZHRoID0gdGhpcy53aWR0aC5pdGVtICogdGhpcy5udW0ubWVyZ2VkW2ldIC0gdGhpcy5vcHRpb25zLm1hcmdpbiArICdweCc7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBzYXZlIHByZXYgc3RhZ2Ugc2l6ZVxyXG5cdFx0dGhpcy53aWR0aC5zdGFnZVByZXYgPSB0aGlzLndpZHRoLnN0YWdlO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogcmVzcG9uc2l2ZVxyXG4gICogQGRlc2MgUmVzcG9uc2l2ZSBmdW5jdGlvbiB1cGRhdGUgYWxsIGRhdGEgYnkgY2FsbGluZyByZWZyZXNoKCkgXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLnJlc3BvbnNpdmUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0aWYgKCF0aGlzLm51bS5vSXRlbXMpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0Ly8gSWYgRWwgd2lkdGggaGFzbnQgY2hhbmdlIHRoZW4gc3RvcCByZXNwb25zaXZlXHJcblx0XHR2YXIgZWxDaGFuZ2VkID0gdGhpcy5pc0VsV2lkdGhDaGFuZ2VkKCk7XHJcblx0XHRpZiAoIWVsQ2hhbmdlZCkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gaWYgVmltZW8gRnVsbHNjcmVlbiBtb2RlXHJcblx0XHR2YXIgZnVsbHNjcmVlbkVsZW1lbnQgPSBkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC5tb3pGdWxsU2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC53ZWJraXRGdWxsc2NyZWVuRWxlbWVudDtcclxuXHRcdGlmIChmdWxsc2NyZWVuRWxlbWVudCkge1xyXG5cdFx0XHRpZiAoJChmdWxsc2NyZWVuRWxlbWVudC5wYXJlbnROb2RlKS5oYXNDbGFzcygnb3dsLXZpZGVvLWZyYW1lJykpIHtcclxuXHRcdFx0XHR0aGlzLnNldFNwZWVkKDApO1xyXG5cdFx0XHRcdHRoaXMuc3RhdGUuaXNGdWxsU2NyZWVuID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChmdWxsc2NyZWVuRWxlbWVudCAmJiB0aGlzLnN0YXRlLmlzRnVsbFNjcmVlbiAmJiB0aGlzLnN0YXRlLnZpZGVvUGxheSkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ29tbWluZyBiYWNrIGZyb20gZnVsbHNjcmVlblxyXG5cdFx0aWYgKHRoaXMuc3RhdGUuaXNGdWxsU2NyZWVuKSB7XHJcblx0XHRcdHRoaXMuc3RhdGUuaXNGdWxsU2NyZWVuID0gZmFsc2U7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBjaGVjayBmdWxsIHNjcmVlbiBtb2RlIGFuZCB3aW5kb3cgb3JpZW50YXRpb25cclxuXHRcdGlmICh0aGlzLnN0YXRlLnZpZGVvUGxheSkge1xyXG5cdFx0XHRpZiAodGhpcy5zdGF0ZS5vcmllbnRhdGlvbiAhPT0gd2luZG93Lm9yaWVudGF0aW9uKSB7XHJcblx0XHRcdFx0dGhpcy5zdGF0ZS5vcmllbnRhdGlvbiA9IHdpbmRvdy5vcmllbnRhdGlvbjtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmZpcmVDYWxsYmFjaygnb25SZXNwb25zaXZlQmVmb3JlJyk7XHJcblx0XHR0aGlzLnN0YXRlLnJlc3BvbnNpdmUgPSB0cnVlO1xyXG5cdFx0dGhpcy5yZWZyZXNoKCk7XHJcblx0XHR0aGlzLnN0YXRlLnJlc3BvbnNpdmUgPSBmYWxzZTtcclxuXHRcdHRoaXMuZmlyZUNhbGxiYWNrKCdvblJlc3BvbnNpdmVBZnRlcicpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogcmVmcmVzaFxyXG4gICogQGRlc2MgUmVmcmVzaCBtZXRob2QgaXMgYmFzaWNhbGx5IGNvbGxlY3Rpb24gb2YgZnVuY3Rpb25zIHRoYXQgYXJlIHJlc3BvbnNpYmxlIGZvciBPd2wgcmVzcG9uc2l2ZSBmdW5jdGlvbmFsaXR5XHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoaW5pdCkge1xyXG5cclxuXHRcdGlmICh0aGlzLnN0YXRlLnZpZGVvUGxheSkge1xyXG5cdFx0XHR0aGlzLnN0b3BWaWRlbygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFVwZGF0ZSBPcHRpb25zIGZvciBnaXZlbiB3aWR0aFxyXG5cdFx0dGhpcy5zZXRSZXNwb25zaXZlT3B0aW9ucygpO1xyXG5cclxuXHRcdC8vc2V0IGxhenkgc3RydWN0dXJlXHJcblx0XHR0aGlzLmNyZWF0ZUxhenlDb250ZW50U3RydWN0dXJlKHRydWUpO1xyXG5cclxuXHRcdC8vIHVwZGF0ZSBpbmZvIGFib3V0IGxvY2FsIGNvbnRlbnRcclxuXHRcdHRoaXMudXBkYXRlTG9jYWxDb250ZW50KCk7XHJcblxyXG5cdFx0Ly8gdWRwYXRlIG9wdGlvbnNcclxuXHRcdHRoaXMub3B0aW9uc0xvZ2ljKCk7XHJcblxyXG5cdFx0Ly8gaWYgbm8gaXRlbXMgdGhlbiBzdG9wXHJcblx0XHRpZiAodGhpcy5udW0ub0l0ZW1zID09PSAwKSB7XHJcblx0XHRcdGlmICh0aGlzLmRvbS4kcGFnZSAhPT0gbnVsbCkge1xyXG5cdFx0XHRcdHRoaXMuZG9tLiRwYWdlLmhpZGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSGlkZSBhbmQgU2hvdyBtZXRob2RzIGhlbHBzIGhlcmUgdG8gc2V0IGEgcHJvcGVyIHdpZHRocy5cclxuXHRcdC8vIFRoaXMgcHJldmVudHMgU2Nyb2xsYmFyIHRvIGJlIGNhbGN1bGF0ZWQgaW4gc3RhZ2Ugd2lkdGhcclxuXHRcdHRoaXMuZG9tLiRzdGFnZS5hZGRDbGFzcygnb3dsLXJlZnJlc2gnKTtcclxuXHJcblx0XHQvLyBSZW1vdmUgY2xvbmVzIGFuZCBnZW5lcmF0ZSBuZXcgb25lc1xyXG5cdFx0dGhpcy5yZUNsb25lKCk7XHJcblxyXG5cdFx0Ly8gY2FsY3VsYXRlXHJcblx0XHR0aGlzLmNhbGN1bGF0ZSgpO1xyXG5cclxuXHRcdC8vYWFhYW5kIHNob3cuXHJcblx0XHR0aGlzLmRvbS4kc3RhZ2UucmVtb3ZlQ2xhc3MoJ293bC1yZWZyZXNoJyk7XHJcblxyXG5cdFx0Ly8gdG8gZG9cclxuXHRcdC8vIGxhenlDb250ZW50IGxhc3QgcG9zaXRpb24gb24gcmVmcmVzaFxyXG5cdFx0aWYgKHRoaXMuc3RhdGUubGF6eUNvbnRlbnQpIHtcclxuXHRcdFx0dGhpcy5wb3MuY3VycmVudEFicyA9IHRoaXMub3B0aW9ucy5pdGVtcztcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmluaXRQb3NpdGlvbihpbml0KTtcclxuXHJcblx0XHQvLyBqdW1wIHRvIGxhc3QgcG9zaXRpb25cclxuXHRcdGlmICghdGhpcy5zdGF0ZS5sYXp5Q29udGVudCAmJiAhaW5pdCkge1xyXG5cdFx0XHR0aGlzLmp1bXBUbyh0aGlzLnBvcy5jdXJyZW50LCBmYWxzZSk7IC8vIGZpeCB0aGF0XHJcblx0XHR9XHJcblxyXG5cdFx0Ly9DaGVjayBmb3IgdmlkZW9zICggWW91VHViZSBhbmQgVmltZW8gY3VycmVudGx5IHN1cHBvcnRlZClcclxuXHRcdHRoaXMuY2hlY2tWaWRlb0xpbmtzKCk7XHJcblxyXG5cdFx0dGhpcy51cGRhdGVJdGVtU3RhdGUoKTtcclxuXHJcblx0XHQvLyBVcGRhdGUgY29udHJvbHNcclxuXHRcdHRoaXMucmVidWlsZERvdHMoKTtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZUNvbnRyb2xzKCk7XHJcblxyXG5cdFx0Ly8gdXBkYXRlIGRyYWcgZXZlbnRzXHJcblx0XHQvL3RoaXMudXBkYXRlRXZlbnRzKCk7XHJcblxyXG5cdFx0Ly8gdXBkYXRlIGF1dG9wbGF5XHJcblx0XHR0aGlzLmF1dG9wbGF5KCk7XHJcblxyXG5cdFx0dGhpcy5hdXRvSGVpZ2h0KCk7XHJcblxyXG5cdFx0dGhpcy5zdGF0ZS5vcmllbnRhdGlvbiA9IHdpbmRvdy5vcmllbnRhdGlvbjtcclxuXHJcblx0XHR0aGlzLndhdGNoVmlzaWJpbGl0eSgpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogdXBkYXRlSXRlbVN0YXRlXHJcbiAgKiBAZGVzYyBVcGRhdGUgaW5mb3JtYXRpb24gYWJvdXQgY3VycmVudCBzdGF0ZSBvZiBpdGVtcyAodmlzaWJpbGUsIGhpZGRlbiwgYWN0aXZlLCBldGMuKVxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS51cGRhdGVJdGVtU3RhdGUgPSBmdW5jdGlvbiAodXBkYXRlKSB7XHJcblxyXG5cdFx0aWYgKCF0aGlzLnN0YXRlLmxhenlDb250ZW50KSB7XHJcblx0XHRcdHRoaXMudXBkYXRlQWN0aXZlSXRlbXMoKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMudXBkYXRlTGF6eUNvbnRlbnQodXBkYXRlKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5vcHRpb25zLmNlbnRlcikge1xyXG5cdFx0XHR0aGlzLmRvbS4kaXRlbXMuZXEodGhpcy5wb3MuY3VycmVudEFicykuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmNlbnRlckNsYXNzKS5kYXRhKCdvd2wtaXRlbScpLmNlbnRlciA9IHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMub3B0aW9ucy5sYXp5TG9hZCkge1xyXG5cdFx0XHR0aGlzLmxhenlMb2FkKCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiB1cGRhdGVBY3RpdmVJdGVtc1xyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS51cGRhdGVBY3RpdmVJdGVtcyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdHZhciBpLCBqLCBpdGVtLCBpcG9zLCBpd2lkdGgsIHdwb3MsIHN0YWdlLCBvdXRzaWRlVmlldywgZm91bmRDdXJyZW50LCBzdGFnZVgsIHZpZXc7XHJcblx0XHQvLyBjbGVhciBzdGF0ZXNcclxuXHRcdGZvciAoaSA9IDA7IGkgPCB0aGlzLm51bS5pdGVtczsgaSsrKSB7XHJcblx0XHRcdHRoaXMuZG9tLiRpdGVtcy5lcShpKS5kYXRhKCdvd2wtaXRlbScpLmFjdGl2ZSA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLmRvbS4kaXRlbXMuZXEoaSkuZGF0YSgnb3dsLWl0ZW0nKS5jdXJyZW50ID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuZG9tLiRpdGVtcy5lcShpKS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5jZW50ZXJDbGFzcyk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5udW0uYWN0aXZlID0gMDtcclxuXHRcdHN0YWdlWCA9IHRoaXMucG9zLnN0YWdlO1xyXG5cdFx0dmlldyA9IHRoaXMub3B0aW9ucy5ydGwgPyB0aGlzLndpZHRoLnZpZXcgOiAtdGhpcy53aWR0aC52aWV3O1xyXG5cclxuXHRcdGZvciAoaiA9IDA7IGogPCB0aGlzLm51bS5pdGVtczsgaisrKSB7XHJcblxyXG5cdFx0XHRpdGVtID0gdGhpcy5kb20uJGl0ZW1zLmVxKGopO1xyXG5cdFx0XHRpcG9zID0gaXRlbS5kYXRhKCdvd2wtaXRlbScpLnBvc0xlZnQ7XHJcblx0XHRcdGl3aWR0aCA9IGl0ZW0uZGF0YSgnb3dsLWl0ZW0nKS53aWR0aDtcclxuXHRcdFx0b3V0c2lkZVZpZXcgPSB0aGlzLm9wdGlvbnMucnRsID8gaXBvcyArIGl3aWR0aCA6IGlwb3MgLSBpd2lkdGg7XHJcblxyXG5cdFx0XHRpZiAodGhpcy5vcChpcG9zLCAnPD0nLCBzdGFnZVgpICYmIHRoaXMub3AoaXBvcywgJz4nLCBzdGFnZVggKyB2aWV3KSB8fCB0aGlzLm9wKG91dHNpZGVWaWV3LCAnPCcsIHN0YWdlWCkgJiYgdGhpcy5vcChvdXRzaWRlVmlldywgJz4nLCBzdGFnZVggKyB2aWV3KSkge1xyXG5cclxuXHRcdFx0XHR0aGlzLm51bS5hY3RpdmUrKztcclxuXHJcblx0XHRcdFx0aWYgKHRoaXMub3B0aW9ucy5mcmVlRHJhZyAmJiAhZm91bmRDdXJyZW50KSB7XHJcblx0XHRcdFx0XHRmb3VuZEN1cnJlbnQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0dGhpcy5wb3MuY3VycmVudCA9IGl0ZW0uZGF0YSgnb3dsLWl0ZW0nKS5pbmRleDtcclxuXHRcdFx0XHRcdHRoaXMucG9zLmN1cnJlbnRBYnMgPSBpdGVtLmRhdGEoJ293bC1pdGVtJykuaW5kZXhBYnM7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpdGVtLmRhdGEoJ293bC1pdGVtJykuYWN0aXZlID0gdHJ1ZTtcclxuXHRcdFx0XHRpdGVtLmRhdGEoJ293bC1pdGVtJykuY3VycmVudCA9IHRydWU7XHJcblx0XHRcdFx0aXRlbS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xyXG5cclxuXHRcdFx0XHRpZiAoIXRoaXMub3B0aW9ucy5sYXp5TG9hZCkge1xyXG5cdFx0XHRcdFx0aXRlbS5kYXRhKCdvd2wtaXRlbScpLmxvYWRlZCA9IHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmICh0aGlzLm9wdGlvbnMubG9vcCAmJiAodGhpcy5vcHRpb25zLmxhenlMb2FkIHx8IHRoaXMub3B0aW9ucy5jZW50ZXIpKSB7XHJcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZUNsb25lZEl0ZW1zU3RhdGUoaXRlbS5kYXRhKCdvd2wtaXRlbScpLmluZGV4KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIHVwZGF0ZUNsb25lZEl0ZW1zU3RhdGVcclxuICAqIEBkZXNjIFNldCBjdXJyZW50IHN0YXRlIG9uIHNpYmlsaW5ncyBpdGVtcyBmb3IgbGF6eUxvYWQgYW5kIGNlbnRlclxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS51cGRhdGVDbG9uZWRJdGVtc1N0YXRlID0gZnVuY3Rpb24gKGFjdGl2ZUluZGV4KSB7XHJcblxyXG5cdFx0Ly9maW5kIGNsb25lZCBjZW50ZXJcclxuXHRcdHZhciBjZW50ZXIsICRlbCwgaTtcclxuXHRcdGlmICh0aGlzLm9wdGlvbnMuY2VudGVyKSB7XHJcblx0XHRcdGNlbnRlciA9IHRoaXMuZG9tLiRpdGVtcy5lcSh0aGlzLnBvcy5jdXJyZW50QWJzKS5kYXRhKCdvd2wtaXRlbScpLmluZGV4O1xyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAoaSA9IDA7IGkgPCB0aGlzLm51bS5pdGVtczsgaSsrKSB7XHJcblx0XHRcdCRlbCA9IHRoaXMuZG9tLiRpdGVtcy5lcShpKTtcclxuXHRcdFx0aWYgKCRlbC5kYXRhKCdvd2wtaXRlbScpLmluZGV4ID09PSBhY3RpdmVJbmRleCkge1xyXG5cdFx0XHRcdCRlbC5kYXRhKCdvd2wtaXRlbScpLmN1cnJlbnQgPSB0cnVlO1xyXG5cdFx0XHRcdGlmICgkZWwuZGF0YSgnb3dsLWl0ZW0nKS5pbmRleCA9PT0gY2VudGVyKSB7XHJcblx0XHRcdFx0XHQkZWwuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmNlbnRlckNsYXNzKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIHVwZGF0ZUxhenlQb3NpdGlvblxyXG4gICogQGRlc2MgU2V0IGN1cnJlbnQgc3RhdGUgb24gc2liaWxpbmdzIGl0ZW1zIGZvciBsYXp5TG9hZCBhbmQgY2VudGVyXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLnVwZGF0ZUxhenlQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdHZhciBqdW1wVG8gPSB0aGlzLnBvcy5nb1RvTGF6eUNvbnRlbnQgfHwgMDtcclxuXHJcblx0XHR0aGlzLnBvcy5sY01vdmVkQnkgPSBNYXRoLmFicyh0aGlzLm9wdGlvbnMuaXRlbXMgLSB0aGlzLnBvcy5jdXJyZW50QWJzKTtcclxuXHJcblx0XHRpZiAodGhpcy5vcHRpb25zLml0ZW1zIDwgdGhpcy5wb3MuY3VycmVudEFicykge1xyXG5cdFx0XHR0aGlzLnBvcy5sY0N1cnJlbnQgKz0gdGhpcy5wb3MuY3VycmVudEFicyAtIHRoaXMub3B0aW9ucy5pdGVtcztcclxuXHRcdFx0dGhpcy5zdGF0ZS5sY0RpcmVjdGlvbiA9ICdyaWdodCc7XHJcblx0XHR9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5pdGVtcyA+IHRoaXMucG9zLmN1cnJlbnRBYnMpIHtcclxuXHRcdFx0dGhpcy5wb3MubGNDdXJyZW50IC09IHRoaXMub3B0aW9ucy5pdGVtcyAtIHRoaXMucG9zLmN1cnJlbnRBYnM7XHJcblx0XHRcdHRoaXMuc3RhdGUubGNEaXJlY3Rpb24gPSAnbGVmdCc7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5wb3MubGNDdXJyZW50ID0ganVtcFRvICE9PSAwID8ganVtcFRvIDogdGhpcy5wb3MubGNDdXJyZW50O1xyXG5cclxuXHRcdGlmICh0aGlzLnBvcy5sY0N1cnJlbnQgPj0gdGhpcy5kb20uJGNvbnRlbnQubGVuZ3RoKSB7XHJcblx0XHRcdHRoaXMucG9zLmxjQ3VycmVudCA9IHRoaXMucG9zLmxjQ3VycmVudCAtIHRoaXMuZG9tLiRjb250ZW50Lmxlbmd0aDtcclxuXHRcdH0gZWxzZSBpZiAodGhpcy5wb3MubGNDdXJyZW50IDwgLXRoaXMuZG9tLiRjb250ZW50Lmxlbmd0aCArIDEpIHtcclxuXHRcdFx0dGhpcy5wb3MubGNDdXJyZW50ID0gdGhpcy5wb3MubGNDdXJyZW50ICsgdGhpcy5kb20uJGNvbnRlbnQubGVuZ3RoO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLm9wdGlvbnMuc3RhcnRQb3NpdGlvbiA+IDApIHtcclxuXHRcdFx0dGhpcy5wb3MubGNDdXJyZW50ID0gdGhpcy5vcHRpb25zLnN0YXJ0UG9zaXRpb247XHJcblx0XHRcdHRoaXMuX29wdGlvbnMuc3RhcnRQb3NpdGlvbiA9IHRoaXMub3B0aW9ucy5zdGFydFBvc2l0aW9uID0gMDtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnBvcy5sY0N1cnJlbnRBYnMgPSB0aGlzLnBvcy5sY0N1cnJlbnQgPCAwID8gdGhpcy5wb3MubGNDdXJyZW50ICsgdGhpcy5kb20uJGNvbnRlbnQubGVuZ3RoIDogdGhpcy5wb3MubGNDdXJyZW50O1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogdXBkYXRlTGF6eUNvbnRlbnRcclxuICAqIEBwYXJhbSBbdXBkYXRlXSAtIGJvb2xlYW4gLSB1cGRhdGUgY2FsbCBieSBjb250ZW50IG1hbmlwdWxhdGlvbnNcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUudXBkYXRlTGF6eUNvbnRlbnQgPSBmdW5jdGlvbiAodXBkYXRlKSB7XHJcblxyXG5cdFx0aWYgKHRoaXMucG9zLmxjQ3VycmVudCA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHRoaXMucG9zLmxjQ3VycmVudCA9IDA7XHJcblx0XHRcdHRoaXMucG9zLmN1cnJlbnQgPSB0aGlzLnBvcy5jdXJyZW50QWJzID0gdGhpcy5vcHRpb25zLml0ZW1zO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghdXBkYXRlKSB7XHJcblx0XHRcdHRoaXMudXBkYXRlTGF6eVBvc2l0aW9uKCk7XHJcblx0XHR9XHJcblx0XHR2YXIgaSwgaiwgaXRlbSwgY29udGVudFBvcywgY29udGVudCwgZnJlc2hJdGVtLCBmcmVzaERhdGE7XHJcblxyXG5cdFx0aWYgKHRoaXMuc3RhdGUubGNEaXJlY3Rpb24gIT09IGZhbHNlKSB7XHJcblx0XHRcdGZvciAoaSA9IDA7IGkgPCB0aGlzLnBvcy5sY01vdmVkQnk7IGkrKykge1xyXG5cclxuXHRcdFx0XHRpZiAodGhpcy5zdGF0ZS5sY0RpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xyXG5cdFx0XHRcdFx0aXRlbSA9IHRoaXMuZG9tLiRzdGFnZS5maW5kKCcub3dsLWl0ZW0nKS5lcSgwKTsgLy8uYXBwZW5kVG8odGhpcy5kb20uJHN0YWdlKTtcclxuXHRcdFx0XHRcdGl0ZW0uYXBwZW5kVG8odGhpcy5kb20uJHN0YWdlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKHRoaXMuc3RhdGUubGNEaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xyXG5cdFx0XHRcdFx0aXRlbSA9IHRoaXMuZG9tLiRzdGFnZS5maW5kKCcub3dsLWl0ZW0nKS5lcSgtMSk7XHJcblx0XHRcdFx0XHRpdGVtLnByZXBlbmRUbyh0aGlzLmRvbS4kc3RhZ2UpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpdGVtLmRhdGEoJ293bC1pdGVtJykuYWN0aXZlID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyByZWNvbGxlY3RcclxuXHRcdHRoaXMuZG9tLiRpdGVtcyA9IHRoaXMuZG9tLiRzdGFnZS5maW5kKCcub3dsLWl0ZW0nKTtcclxuXHJcblx0XHRmb3IgKGogPSAwOyBqIDwgdGhpcy5udW0uaXRlbXM7IGorKykge1xyXG5cdFx0XHQvLyB0byBkb1xyXG5cdFx0XHR0aGlzLmRvbS4kaXRlbXMuZXEoaikucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmNlbnRlckNsYXNzKTtcclxuXHJcblx0XHRcdC8vIGdldCBDb250ZW50XHJcblx0XHRcdGNvbnRlbnRQb3MgPSB0aGlzLnBvcy5sY0N1cnJlbnQgKyBqIC0gdGhpcy5vcHRpb25zLml0ZW1zOyAvLyArIHRoaXMub3B0aW9ucy5zdGFydFBvc2l0aW9uO1xyXG5cclxuXHRcdFx0aWYgKGNvbnRlbnRQb3MgPj0gdGhpcy5kb20uJGNvbnRlbnQubGVuZ3RoKSB7XHJcblx0XHRcdFx0Y29udGVudFBvcyA9IGNvbnRlbnRQb3MgLSB0aGlzLmRvbS4kY29udGVudC5sZW5ndGg7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKGNvbnRlbnRQb3MgPCAtdGhpcy5kb20uJGNvbnRlbnQubGVuZ3RoKSB7XHJcblx0XHRcdFx0Y29udGVudFBvcyA9IGNvbnRlbnRQb3MgKyB0aGlzLmRvbS4kY29udGVudC5sZW5ndGg7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbnRlbnQgPSB0aGlzLmRvbS4kY29udGVudC5lcShjb250ZW50UG9zKTtcclxuXHRcdFx0ZnJlc2hJdGVtID0gdGhpcy5kb20uJGl0ZW1zLmVxKGopO1xyXG5cdFx0XHRmcmVzaERhdGEgPSBmcmVzaEl0ZW0uZGF0YSgnb3dsLWl0ZW0nKTtcclxuXHJcblx0XHRcdGlmIChmcmVzaERhdGEuYWN0aXZlID09PSBmYWxzZSB8fCB0aGlzLnBvcy5nb1RvTGF6eUNvbnRlbnQgIT09IDAgfHwgdXBkYXRlID09PSB0cnVlKSB7XHJcblxyXG5cdFx0XHRcdGZyZXNoSXRlbS5lbXB0eSgpO1xyXG5cdFx0XHRcdGZyZXNoSXRlbS5hcHBlbmQoY29udGVudC5jbG9uZSh0cnVlLCB0cnVlKSk7XHJcblx0XHRcdFx0ZnJlc2hEYXRhLmFjdGl2ZSA9IHRydWU7XHJcblx0XHRcdFx0ZnJlc2hEYXRhLmN1cnJlbnQgPSB0cnVlO1xyXG5cdFx0XHRcdGlmICghdGhpcy5vcHRpb25zLmxhenlMb2FkKSB7XHJcblx0XHRcdFx0XHRmcmVzaERhdGEubG9hZGVkID0gdHJ1ZTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZnJlc2hEYXRhLmxvYWRlZCA9IGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMucG9zLmdvVG9MYXp5Q29udGVudCA9IDA7XHJcblx0XHR0aGlzLnBvcy5jdXJyZW50ID0gdGhpcy5wb3MuY3VycmVudEFicyA9IHRoaXMub3B0aW9ucy5pdGVtcztcclxuXHRcdHRoaXMuc2V0U3BlZWQoMCk7XHJcblx0XHR0aGlzLmFuaW1TdGFnZSh0aGlzLnBvcy5pdGVtc1t0aGlzLm9wdGlvbnMuaXRlbXNdKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIGV2ZW50c0NhbGxcclxuICAqIEBkZXNjIFNhdmUgaW50ZXJuYWwgZXZlbnQgcmVmZXJlbmNlcyBhbmQgYWRkIGV2ZW50IGJhc2VkIGZ1bmN0aW9ucyBsaWtlIHRyYW5zaXRpb25FbmQscmVzcG9uc2l2ZSBldGMuXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLmV2ZW50c0NhbGwgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHQvLyBTYXZlIGV2ZW50cyByZWZlcmVuY2VzXHJcblx0XHR0aGlzLmUuX29uRHJhZ1N0YXJ0ID0gKGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdHRoaXMub25EcmFnU3RhcnQoZSk7XHJcblx0XHR9KS5iaW5kKHRoaXMpO1xyXG5cdFx0dGhpcy5lLl9vbkRyYWdNb3ZlID0gKGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdHRoaXMub25EcmFnTW92ZShlKTtcclxuXHRcdH0pLmJpbmQodGhpcyk7XHJcblx0XHR0aGlzLmUuX29uRHJhZ0VuZCA9IChmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHR0aGlzLm9uRHJhZ0VuZChlKTtcclxuXHRcdH0pLmJpbmQodGhpcyk7XHJcblx0XHR0aGlzLmUuX3RyYW5zaXRpb25FbmQgPSAoZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0dGhpcy50cmFuc2l0aW9uRW5kKGUpO1xyXG5cdFx0fSkuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMuZS5fcmVzaXplciA9IChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHRoaXMucmVzcG9uc2l2ZVRpbWVyKCk7XHJcblx0XHR9KS5iaW5kKHRoaXMpO1xyXG5cdFx0dGhpcy5lLl9yZXNwb25zaXZlQ2FsbCA9IChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHRoaXMucmVzcG9uc2l2ZSgpO1xyXG5cdFx0fSkuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMuZS5fcHJldmVudENsaWNrID0gKGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdHRoaXMucHJldmVudENsaWNrKGUpO1xyXG5cdFx0fSkuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMuZS5fZ29Ub0hhc2ggPSAoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHR0aGlzLmdvVG9IYXNoKCk7XHJcblx0XHR9KS5iaW5kKHRoaXMpO1xyXG5cdFx0dGhpcy5lLl9nb1RvUGFnZSA9IChmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHR0aGlzLmdvVG9QYWdlKGUpO1xyXG5cdFx0fSkuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMuZS5fYXAgPSAoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHR0aGlzLmF1dG9wbGF5KCk7XHJcblx0XHR9KS5iaW5kKHRoaXMpO1xyXG5cdFx0dGhpcy5lLl9wbGF5ID0gKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0dGhpcy5wbGF5KCk7XHJcblx0XHR9KS5iaW5kKHRoaXMpO1xyXG5cdFx0dGhpcy5lLl9wYXVzZSA9IChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHRoaXMucGF1c2UoKTtcclxuXHRcdH0pLmJpbmQodGhpcyk7XHJcblx0XHR0aGlzLmUuX3BsYXlWaWRlbyA9IChmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHR0aGlzLnBsYXlWaWRlbyhlKTtcclxuXHRcdH0pLmJpbmQodGhpcyk7XHJcblxyXG5cdFx0dGhpcy5lLl9uYXZOZXh0ID0gKGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdGlmICgkKGUudGFyZ2V0KS5oYXNDbGFzcygnZGlzYWJsZWQnKSkge1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdHRoaXMubmV4dCgpO1xyXG5cdFx0fSkuYmluZCh0aGlzKTtcclxuXHJcblx0XHR0aGlzLmUuX25hdlByZXYgPSAoZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0aWYgKCQoZS50YXJnZXQpLmhhc0NsYXNzKCdkaXNhYmxlZCcpKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0dGhpcy5wcmV2KCk7XHJcblx0XHR9KS5iaW5kKHRoaXMpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogcmVzcG9uc2l2ZVRpbWVyXHJcbiAgKiBAZGVzYyBDaGVjayBXaW5kb3cgcmVzaXplIGV2ZW50IHdpdGggMjAwbXMgZGVsYXkgLyB0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZVJlZnJlc2hSYXRlXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLnJlc3BvbnNpdmVUaW1lciA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdGlmICh0aGlzLndpbmRvd1dpZHRoKCkgPT09IHRoaXMud2lkdGgucHJldldpbmRvdykge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0XHR3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLmUuX2F1dG9wbGF5KTtcclxuXHRcdHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5yZXNpemVUaW1lcik7XHJcblx0XHR0aGlzLnJlc2l6ZVRpbWVyID0gd2luZG93LnNldFRpbWVvdXQodGhpcy5lLl9yZXNwb25zaXZlQ2FsbCwgdGhpcy5vcHRpb25zLnJlc3BvbnNpdmVSZWZyZXNoUmF0ZSk7XHJcblx0XHR0aGlzLndpZHRoLnByZXZXaW5kb3cgPSB0aGlzLndpbmRvd1dpZHRoKCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBpbnRlcm5hbEV2ZW50c1xyXG4gICogQGRlc2MgQ2hlY2tzIGZvciB0b3VjaC9tb3VzZSBkcmFnIG9wdGlvbnMgYW5kIGFkZCBuZWNlc3NlcnkgZXZlbnQgaGFuZGxlcnMuXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLmludGVybmFsRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyIGlzVG91Y2ggPSBpc1RvdWNoU3VwcG9ydCgpO1xyXG5cdFx0dmFyIGlzVG91Y2hJRSA9IGlzVG91Y2hTdXBwb3J0SUUoKTtcclxuXHJcblx0XHRpZiAoaXNUb3VjaCAmJiAhaXNUb3VjaElFKSB7XHJcblx0XHRcdHRoaXMuZHJhZ1R5cGUgPSBbJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJywgJ3RvdWNoZW5kJywgJ3RvdWNoY2FuY2VsJ107XHJcblx0XHR9IGVsc2UgaWYgKGlzVG91Y2ggJiYgaXNUb3VjaElFKSB7XHJcblx0XHRcdHRoaXMuZHJhZ1R5cGUgPSBbJ01TUG9pbnRlckRvd24nLCAnTVNQb2ludGVyTW92ZScsICdNU1BvaW50ZXJVcCcsICdNU1BvaW50ZXJDYW5jZWwnXTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuZHJhZ1R5cGUgPSBbJ21vdXNlZG93bicsICdtb3VzZW1vdmUnLCAnbW91c2V1cCddO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICgoaXNUb3VjaCB8fCBpc1RvdWNoSUUpICYmIHRoaXMub3B0aW9ucy50b3VjaERyYWcpIHtcclxuXHRcdFx0Ly90b3VjaCBjYW5jZWwgZXZlbnRcclxuXHRcdFx0dGhpcy5vbihkb2N1bWVudCwgdGhpcy5kcmFnVHlwZVszXSwgdGhpcy5lLl9vbkRyYWdFbmQpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gZmlyZWZveCBzdGFydGRyYWcgZml4IC0gYWRkZXZlbnRsaXN0ZW5lciBkb2VzbnQgd29yayBoZXJlIDovXHJcblx0XHRcdHRoaXMuZG9tLiRzdGFnZS5vbignZHJhZ3N0YXJ0JywgZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRpZiAodGhpcy5vcHRpb25zLm1vdXNlRHJhZykge1xyXG5cdFx0XHRcdC8vZGlzYWJsZSB0ZXh0IHNlbGVjdFxyXG5cdFx0XHRcdHRoaXMuZG9tLnN0YWdlLm9uc2VsZWN0c3RhcnQgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBlbmFibGUgdGV4dCBzZWxlY3RcclxuXHRcdFx0XHR0aGlzLmRvbS4kZWwuYWRkQ2xhc3MoJ293bC10ZXh0LXNlbGVjdC1vbicpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVmlkZW8gUGxheSBCdXR0b24gZXZlbnQgZGVsZWdhdGlvblxyXG5cdFx0dGhpcy5kb20uJHN0YWdlLm9uKHRoaXMuZHJhZ1R5cGVbMl0sICcub3dsLXZpZGVvLXBsYXktaWNvbicsIHRoaXMuZS5fcGxheVZpZGVvKTtcclxuXHJcblx0XHRpZiAodGhpcy5vcHRpb25zLlVSTGhhc2hMaXN0ZW5lcikge1xyXG5cdFx0XHR0aGlzLm9uKHdpbmRvdywgJ2hhc2hjaGFuZ2UnLCB0aGlzLmUuX2dvVG9IYXNoLCBmYWxzZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMub3B0aW9ucy5hdXRvcGxheUhvdmVyUGF1c2UpIHtcclxuXHRcdFx0dmFyIHRoYXQgPSB0aGlzO1xyXG5cdFx0XHR0aGlzLmRvbS4kc3RhZ2Uub24oJ21vdXNlb3ZlcicsIHRoaXMuZS5fcGF1c2UpO1xyXG5cdFx0XHR0aGlzLmRvbS4kc3RhZ2Uub24oJ21vdXNlbGVhdmUnLCB0aGlzLmUuX2FwKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDYXRjaCB0cmFuc2l0aW9uRW5kIGV2ZW50XHJcblx0XHRpZiAodGhpcy50cmFuc2l0aW9uRW5kVmVuZG9yKSB7XHJcblx0XHRcdHRoaXMub24odGhpcy5kb20uc3RhZ2UsIHRoaXMudHJhbnNpdGlvbkVuZFZlbmRvciwgdGhpcy5lLl90cmFuc2l0aW9uRW5kLCBmYWxzZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmVzcG9uc2l2ZVxyXG5cdFx0aWYgKHRoaXMub3B0aW9ucy5yZXNwb25zaXZlICE9PSBmYWxzZSkge1xyXG5cdFx0XHR0aGlzLm9uKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuZS5fcmVzaXplciwgZmFsc2UpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudXBkYXRlRXZlbnRzKCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiB1cGRhdGVFdmVudHNcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUudXBkYXRlRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGlmICh0aGlzLm9wdGlvbnMudG91Y2hEcmFnICYmICh0aGlzLmRyYWdUeXBlWzBdID09PSAndG91Y2hzdGFydCcgfHwgdGhpcy5kcmFnVHlwZVswXSA9PT0gJ01TUG9pbnRlckRvd24nKSkge1xyXG5cdFx0XHR0aGlzLm9uKHRoaXMuZG9tLnN0YWdlLCB0aGlzLmRyYWdUeXBlWzBdLCB0aGlzLmUuX29uRHJhZ1N0YXJ0LCBmYWxzZSk7XHJcblx0XHR9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5tb3VzZURyYWcgJiYgdGhpcy5kcmFnVHlwZVswXSA9PT0gJ21vdXNlZG93bicpIHtcclxuXHRcdFx0dGhpcy5vbih0aGlzLmRvbS5zdGFnZSwgdGhpcy5kcmFnVHlwZVswXSwgdGhpcy5lLl9vbkRyYWdTdGFydCwgZmFsc2UpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5vZmYodGhpcy5kb20uc3RhZ2UsIHRoaXMuZHJhZ1R5cGVbMF0sIHRoaXMuZS5fb25EcmFnU3RhcnQpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogb25EcmFnU3RhcnRcclxuICAqIEBkZXNjIHRvdWNoc3RhcnQvbW91c2Vkb3duIGV2ZW50XHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLm9uRHJhZ1N0YXJ0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcblx0XHR2YXIgZXYgPSBldmVudC5vcmlnaW5hbEV2ZW50IHx8IGV2ZW50IHx8IHdpbmRvdy5ldmVudDtcclxuXHRcdC8vIHByZXZlbnQgcmlnaHQgY2xpY2tcclxuXHRcdGlmIChldi53aGljaCA9PT0gMykge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuZHJhZ1R5cGVbMF0gPT09ICdtb3VzZWRvd24nKSB7XHJcblx0XHRcdHRoaXMuZG9tLiRzdGFnZS5hZGRDbGFzcygnb3dsLWdyYWInKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmZpcmVDYWxsYmFjaygnb25Ub3VjaFN0YXJ0Jyk7XHJcblx0XHR0aGlzLmRyYWcuc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblx0XHR0aGlzLnNldFNwZWVkKDApO1xyXG5cdFx0dGhpcy5zdGF0ZS5pc1RvdWNoID0gdHJ1ZTtcclxuXHRcdHRoaXMuc3RhdGUuaXNTY3JvbGxpbmcgPSBmYWxzZTtcclxuXHRcdHRoaXMuc3RhdGUuaXNTd2lwaW5nID0gZmFsc2U7XHJcblx0XHR0aGlzLmRyYWcuZGlzdGFuY2UgPSAwO1xyXG5cclxuXHRcdC8vIGlmIGlzICd0b3VjaHN0YXJ0J1xyXG5cdFx0dmFyIGlzVG91Y2hFdmVudCA9IGV2LnR5cGUgPT09ICd0b3VjaHN0YXJ0JztcclxuXHRcdHZhciBwYWdlWCA9IGlzVG91Y2hFdmVudCA/IGV2ZW50LnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBldi5wYWdlWCB8fCBldi5jbGllbnRYO1xyXG5cdFx0dmFyIHBhZ2VZID0gaXNUb3VjaEV2ZW50ID8gZXZlbnQudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGV2LnBhZ2VZIHx8IGV2LmNsaWVudFk7XHJcblxyXG5cdFx0Ly9nZXQgc3RhZ2UgcG9zaXRpb24gbGVmdFxyXG5cdFx0dGhpcy5kcmFnLm9mZnNldFggPSB0aGlzLmRvbS4kc3RhZ2UucG9zaXRpb24oKS5sZWZ0IC0gdGhpcy5vcHRpb25zLnN0YWdlUGFkZGluZztcclxuXHRcdHRoaXMuZHJhZy5vZmZzZXRZID0gdGhpcy5kb20uJHN0YWdlLnBvc2l0aW9uKCkudG9wO1xyXG5cclxuXHRcdGlmICh0aGlzLm9wdGlvbnMucnRsKSB7XHJcblx0XHRcdHRoaXMuZHJhZy5vZmZzZXRYID0gdGhpcy5kb20uJHN0YWdlLnBvc2l0aW9uKCkubGVmdCArIHRoaXMud2lkdGguc3RhZ2UgLSB0aGlzLndpZHRoLmVsICsgdGhpcy5vcHRpb25zLm1hcmdpbjtcclxuXHRcdH1cclxuXHJcblx0XHQvL2NhdGNoIHBvc2l0aW9uIC8vIGllIHRvIGZpeFxyXG5cdFx0aWYgKHRoaXMuc3RhdGUuaW5Nb3Rpb24gJiYgdGhpcy5zdXBwb3J0M2QpIHtcclxuXHRcdFx0dmFyIGFuaW1hdGVkUG9zID0gdGhpcy5nZXRUcmFuc2Zvcm1Qcm9wZXJ0eSgpO1xyXG5cdFx0XHR0aGlzLmRyYWcub2Zmc2V0WCA9IGFuaW1hdGVkUG9zO1xyXG5cdFx0XHR0aGlzLmFuaW1TdGFnZShhbmltYXRlZFBvcyk7XHJcblx0XHR9IGVsc2UgaWYgKHRoaXMuc3RhdGUuaW5Nb3Rpb24gJiYgIXRoaXMuc3VwcG9ydDNkKSB7XHJcblx0XHRcdHRoaXMuc3RhdGUuaW5Nb3Rpb24gPSBmYWxzZTtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuZHJhZy5zdGFydFggPSBwYWdlWCAtIHRoaXMuZHJhZy5vZmZzZXRYO1xyXG5cdFx0dGhpcy5kcmFnLnN0YXJ0WSA9IHBhZ2VZIC0gdGhpcy5kcmFnLm9mZnNldFk7XHJcblxyXG5cdFx0dGhpcy5kcmFnLnN0YXJ0ID0gcGFnZVggLSB0aGlzLmRyYWcuc3RhcnRYO1xyXG5cdFx0dGhpcy5kcmFnLnRhcmdldEVsID0gZXYudGFyZ2V0IHx8IGV2LnNyY0VsZW1lbnQ7XHJcblx0XHR0aGlzLmRyYWcudXBkYXRlZFggPSB0aGlzLmRyYWcuc3RhcnQ7XHJcblxyXG5cdFx0Ly8gdG8gZG8vY2hlY2tcclxuXHRcdC8vcHJldmVudCBsaW5rcyBhbmQgaW1hZ2VzIGRyYWdnaW5nO1xyXG5cdFx0Ly90aGlzLmRyYWcudGFyZ2V0RWwuZHJhZ2dhYmxlID0gZmFsc2U7XHJcblxyXG5cdFx0dGhpcy5vbihkb2N1bWVudCwgdGhpcy5kcmFnVHlwZVsxXSwgdGhpcy5lLl9vbkRyYWdNb3ZlLCBmYWxzZSk7XHJcblx0XHR0aGlzLm9uKGRvY3VtZW50LCB0aGlzLmRyYWdUeXBlWzJdLCB0aGlzLmUuX29uRHJhZ0VuZCwgZmFsc2UpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogb25EcmFnTW92ZVxyXG4gICogQGRlc2MgdG91Y2htb3ZlL21vdXNlbW92ZSBldmVudFxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5vbkRyYWdNb3ZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcblx0XHRpZiAoIXRoaXMuc3RhdGUuaXNUb3VjaCkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuc3RhdGUuaXNTY3JvbGxpbmcpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBuZWlnaGJvdXJJdGVtV2lkdGggPSAwO1xyXG5cdFx0dmFyIGV2ID0gZXZlbnQub3JpZ2luYWxFdmVudCB8fCBldmVudCB8fCB3aW5kb3cuZXZlbnQ7XHJcblxyXG5cdFx0Ly8gaWYgaXMgJ3RvdWNoc3RhcnQnXHJcblx0XHR2YXIgaXNUb3VjaEV2ZW50ID0gZXYudHlwZSA9PSAndG91Y2htb3ZlJztcclxuXHRcdHZhciBwYWdlWCA9IGlzVG91Y2hFdmVudCA/IGV2LnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBldi5wYWdlWCB8fCBldi5jbGllbnRYO1xyXG5cdFx0dmFyIHBhZ2VZID0gaXNUb3VjaEV2ZW50ID8gZXYudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGV2LnBhZ2VZIHx8IGV2LmNsaWVudFk7XHJcblxyXG5cdFx0Ly8gRHJhZyBEaXJlY3Rpb25cclxuXHRcdHRoaXMuZHJhZy5jdXJyZW50WCA9IHBhZ2VYIC0gdGhpcy5kcmFnLnN0YXJ0WDtcclxuXHRcdHRoaXMuZHJhZy5jdXJyZW50WSA9IHBhZ2VZIC0gdGhpcy5kcmFnLnN0YXJ0WTtcclxuXHRcdHRoaXMuZHJhZy5kaXN0YW5jZSA9IHRoaXMuZHJhZy5jdXJyZW50WCAtIHRoaXMuZHJhZy5vZmZzZXRYO1xyXG5cclxuXHRcdC8vIENoZWNrIG1vdmUgZGlyZWN0aW9uXHJcblx0XHRpZiAodGhpcy5kcmFnLmRpc3RhbmNlIDwgMCkge1xyXG5cdFx0XHR0aGlzLnN0YXRlLmRpcmVjdGlvbiA9IHRoaXMub3B0aW9ucy5ydGwgPyAncmlnaHQnIDogJ2xlZnQnO1xyXG5cdFx0fSBlbHNlIGlmICh0aGlzLmRyYWcuZGlzdGFuY2UgPiAwKSB7XHJcblx0XHRcdHRoaXMuc3RhdGUuZGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLnJ0bCA/ICdsZWZ0JyA6ICdyaWdodCc7XHJcblx0XHR9XHJcblx0XHQvLyBMb29wXHJcblx0XHRpZiAodGhpcy5vcHRpb25zLmxvb3ApIHtcclxuXHRcdFx0aWYgKHRoaXMub3AodGhpcy5kcmFnLmN1cnJlbnRYLCAnPicsIHRoaXMucG9zLm1pblZhbHVlKSAmJiB0aGlzLnN0YXRlLmRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xyXG5cdFx0XHRcdHRoaXMuZHJhZy5jdXJyZW50WCAtPSB0aGlzLnBvcy5sb29wO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMub3AodGhpcy5kcmFnLmN1cnJlbnRYLCAnPCcsIHRoaXMucG9zLm1heFZhbHVlKSAmJiB0aGlzLnN0YXRlLmRpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7XHJcblx0XHRcdFx0dGhpcy5kcmFnLmN1cnJlbnRYICs9IHRoaXMucG9zLmxvb3A7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIHB1bGxcclxuXHRcdFx0dmFyIG1pblZhbHVlID0gdGhpcy5vcHRpb25zLnJ0bCA/IHRoaXMucG9zLm1heFZhbHVlIDogdGhpcy5wb3MubWluVmFsdWU7XHJcblx0XHRcdHZhciBtYXhWYWx1ZSA9IHRoaXMub3B0aW9ucy5ydGwgPyB0aGlzLnBvcy5taW5WYWx1ZSA6IHRoaXMucG9zLm1heFZhbHVlO1xyXG5cdFx0XHR2YXIgcHVsbCA9IHRoaXMub3B0aW9ucy5wdWxsRHJhZyA/IHRoaXMuZHJhZy5kaXN0YW5jZSAvIDUgOiAwO1xyXG5cdFx0XHR0aGlzLmRyYWcuY3VycmVudFggPSBNYXRoLm1heChNYXRoLm1pbih0aGlzLmRyYWcuY3VycmVudFgsIG1pblZhbHVlICsgcHVsbCksIG1heFZhbHVlICsgcHVsbCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTG9jayBicm93c2VyIGlmIHN3aXBpbmcgaG9yaXpvbnRhbFxyXG5cclxuXHRcdGlmICh0aGlzLmRyYWcuZGlzdGFuY2UgPiA4IHx8IHRoaXMuZHJhZy5kaXN0YW5jZSA8IC04KSB7XHJcblx0XHRcdGlmIChldi5wcmV2ZW50RGVmYXVsdCAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0ZXYucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRldi5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMuc3RhdGUuaXNTd2lwaW5nID0gdHJ1ZTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmRyYWcudXBkYXRlZFggPSB0aGlzLmRyYWcuY3VycmVudFg7XHJcblxyXG5cdFx0Ly8gTG9jayBPd2wgaWYgc2Nyb2xsaW5nXHJcblx0XHRpZiAoKHRoaXMuZHJhZy5jdXJyZW50WSA+IDE2IHx8IHRoaXMuZHJhZy5jdXJyZW50WSA8IC0xNikgJiYgdGhpcy5zdGF0ZS5pc1N3aXBpbmcgPT09IGZhbHNlKSB7XHJcblx0XHRcdHRoaXMuc3RhdGUuaXNTY3JvbGxpbmcgPSB0cnVlO1xyXG5cdFx0XHR0aGlzLmRyYWcudXBkYXRlZFggPSB0aGlzLmRyYWcuc3RhcnQ7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5hbmltU3RhZ2UodGhpcy5kcmFnLnVwZGF0ZWRYKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIG9uRHJhZ0VuZCBcclxuICAqIEBkZXNjIHRvdWNoZW5kL21vdXNldXAgZXZlbnRcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUub25EcmFnRW5kID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcblx0XHRpZiAoIXRoaXMuc3RhdGUuaXNUb3VjaCkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRpZiAodGhpcy5kcmFnVHlwZVswXSA9PT0gJ21vdXNlZG93bicpIHtcclxuXHRcdFx0dGhpcy5kb20uJHN0YWdlLnJlbW92ZUNsYXNzKCdvd2wtZ3JhYicpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuZmlyZUNhbGxiYWNrKCdvblRvdWNoRW5kJyk7XHJcblxyXG5cdFx0Ly9wcmV2ZW50IGxpbmtzIGFuZCBpbWFnZXMgZHJhZ2dpbmc7XHJcblx0XHQvL3RoaXMuZHJhZy50YXJnZXRFbC5kcmFnZ2FibGUgPSB0cnVlO1xyXG5cclxuXHRcdC8vcmVtb3ZlIGRyYWcgZXZlbnQgbGlzdGVuZXJzXHJcblxyXG5cdFx0dGhpcy5zdGF0ZS5pc1RvdWNoID0gZmFsc2U7XHJcblx0XHR0aGlzLnN0YXRlLmlzU2Nyb2xsaW5nID0gZmFsc2U7XHJcblx0XHR0aGlzLnN0YXRlLmlzU3dpcGluZyA9IGZhbHNlO1xyXG5cclxuXHRcdC8vdG8gY2hlY2tcclxuXHRcdGlmICh0aGlzLmRyYWcuZGlzdGFuY2UgPT09IDAgJiYgdGhpcy5zdGF0ZS5pbk1vdGlvbiAhPT0gdHJ1ZSkge1xyXG5cdFx0XHR0aGlzLnN0YXRlLmluTW90aW9uID0gZmFsc2U7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBwcmV2ZW50IGNsaWNrcyB3aGlsZSBzY3JvbGxpbmdcclxuXHJcblx0XHR0aGlzLmRyYWcuZW5kVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG5cdFx0dmFyIGNvbXBhcmVUaW1lcyA9IHRoaXMuZHJhZy5lbmRUaW1lIC0gdGhpcy5kcmFnLnN0YXJ0VGltZTtcclxuXHRcdHZhciBkaXN0YW5jZUFicyA9IE1hdGguYWJzKHRoaXMuZHJhZy5kaXN0YW5jZSk7XHJcblxyXG5cdFx0Ly90byB0ZXN0XHJcblx0XHRpZiAoZGlzdGFuY2VBYnMgPiAzIHx8IGNvbXBhcmVUaW1lcyA+IDMwMCkge1xyXG5cdFx0XHR0aGlzLnJlbW92ZUNsaWNrKHRoaXMuZHJhZy50YXJnZXRFbCk7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGNsb3Nlc3QgPSB0aGlzLmNsb3Nlc3QodGhpcy5kcmFnLnVwZGF0ZWRYKTtcclxuXHJcblx0XHR0aGlzLnNldFNwZWVkKHRoaXMub3B0aW9ucy5kcmFnRW5kU3BlZWQsIGZhbHNlLCB0cnVlKTtcclxuXHRcdHRoaXMuYW5pbVN0YWdlKHRoaXMucG9zLml0ZW1zW2Nsb3Nlc3RdKTtcclxuXHJcblx0XHQvL2lmIHB1bGxEcmFnIGlzIG9mZiB0aGVuIGZpcmUgdHJhbnNpdGlvbkVuZCBldmVudCBtYW51YWxseSB3aGVuIHN0aWNrIHRvIGJvcmRlclxyXG5cdFx0aWYgKCF0aGlzLm9wdGlvbnMucHVsbERyYWcgJiYgdGhpcy5kcmFnLnVwZGF0ZWRYID09PSB0aGlzLnBvcy5pdGVtc1tjbG9zZXN0XSkge1xyXG5cdFx0XHR0aGlzLnRyYW5zaXRpb25FbmQoKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmRyYWcuZGlzdGFuY2UgPSAwO1xyXG5cclxuXHRcdHRoaXMub2ZmKGRvY3VtZW50LCB0aGlzLmRyYWdUeXBlWzFdLCB0aGlzLmUuX29uRHJhZ01vdmUpO1xyXG5cdFx0dGhpcy5vZmYoZG9jdW1lbnQsIHRoaXMuZHJhZ1R5cGVbMl0sIHRoaXMuZS5fb25EcmFnRW5kKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIHJlbW92ZUNsaWNrXHJcbiAgKiBAZGVzYyBBdHRhY2ggcHJldmVudENsaWNrIGZ1bmN0aW9uIHRvIGRpc2FibGUgbGluayB3aGlsZSBzd2lwcGluZ1xyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKiBAcGFyYW0gW3RhcmdldF0gLSBjbGlja2VkIGRvbSBlbGVtZW50XHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5yZW1vdmVDbGljayA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuXHRcdHRoaXMuZHJhZy50YXJnZXRFbCA9IHRhcmdldDtcclxuXHRcdHRoaXMub24odGFyZ2V0LCAnY2xpY2snLCB0aGlzLmUuX3ByZXZlbnRDbGljaywgZmFsc2UpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogcHJldmVudENsaWNrXHJcbiAgKiBAZGVzYyBBZGQgcHJldmVudERlZmF1bHQgZm9yIGFueSBsaW5rIGFuZCB0aGVuIHJlbW92ZSByZW1vdmVDbGljayBldmVudCBoYW5sZGVyXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLnByZXZlbnRDbGljayA9IGZ1bmN0aW9uIChldikge1xyXG5cdFx0aWYgKGV2LnByZXZlbnREZWZhdWx0KSB7XHJcblx0XHRcdGV2LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRldi5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGV2LnN0b3BQcm9wYWdhdGlvbikge1xyXG5cdFx0XHRldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdH1cclxuXHRcdHRoaXMub2ZmKHRoaXMuZHJhZy50YXJnZXRFbCwgJ2NsaWNrJywgdGhpcy5lLl9wcmV2ZW50Q2xpY2ssIGZhbHNlKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIGdldFRyYW5zZm9ybVByb3BlcnR5XHJcbiAgKiBAZGVzYyBjYXRjaCBzdGFnZSBwb3NpdGlvbiB3aGlsZSBhbmltYXRlIChvbmx5IGNzczMpXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLmdldFRyYW5zZm9ybVByb3BlcnR5ID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyIHRyYW5zZm9ybSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuZG9tLnN0YWdlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHRoaXMudmVuZG9yTmFtZSArICd0cmFuc2Zvcm0nKTtcclxuXHRcdC8vdmFyIHRyYW5zZm9ybSA9IHRoaXMuZG9tLiRzdGFnZS5jc3ModGhpcy52ZW5kb3JOYW1lICsgJ3RyYW5zZm9ybScpXHJcblx0XHR0cmFuc2Zvcm0gPSB0cmFuc2Zvcm0ucmVwbGFjZSgvbWF0cml4KDNkKT9cXCh8XFwpL2csICcnKS5zcGxpdCgnLCcpO1xyXG5cdFx0dmFyIG1hdHJpeDNkID0gdHJhbnNmb3JtLmxlbmd0aCA9PT0gMTY7XHJcblxyXG5cdFx0cmV0dXJuIG1hdHJpeDNkICE9PSB0cnVlID8gdHJhbnNmb3JtWzRdIDogdHJhbnNmb3JtWzEyXTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIGNsb3Nlc3RcclxuICAqIEBkZXNjIEdldCBjbG9zZXN0IGl0ZW0gYWZ0ZXIgdG91Y2hlbmQvbW91c2V1cFxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKiBAcGFyYW0gW3hdIC0gY3VyZW50IHBvc2l0aW9uIGluIHBpeGVsc1xyXG4gICogcmV0dXJuIHBvc2l0aW9uIGluIHBpeGVsc1xyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUuY2xvc2VzdCA9IGZ1bmN0aW9uICh4KSB7XHJcblx0XHR2YXIgbmV3WCA9IDAsXHJcblx0XHQgICAgcHVsbCA9IDMwO1xyXG5cclxuXHRcdGlmICghdGhpcy5vcHRpb25zLmZyZWVEcmFnKSB7XHJcblx0XHRcdC8vIENoZWNrIGNsb3Nlc3QgaXRlbVxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubnVtLml0ZW1zOyBpKyspIHtcclxuXHRcdFx0XHRpZiAoeCA+IHRoaXMucG9zLml0ZW1zW2ldIC0gcHVsbCAmJiB4IDwgdGhpcy5wb3MuaXRlbXNbaV0gKyBwdWxsKSB7XHJcblx0XHRcdFx0XHRuZXdYID0gaTtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMub3AoeCwgJzwnLCB0aGlzLnBvcy5pdGVtc1tpXSkgJiYgdGhpcy5vcCh4LCAnPicsIHRoaXMucG9zLml0ZW1zW2kgKyAxIHx8IHRoaXMucG9zLml0ZW1zW2ldIC0gdGhpcy53aWR0aC5lbF0pKSB7XHJcblx0XHRcdFx0XHRuZXdYID0gdGhpcy5zdGF0ZS5kaXJlY3Rpb24gPT09ICdsZWZ0JyA/IGkgKyAxIDogaTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdC8vbm9uIGxvb3AgYm91bmRyaWVzXHJcblx0XHRpZiAoIXRoaXMub3B0aW9ucy5sb29wKSB7XHJcblx0XHRcdGlmICh0aGlzLm9wKHgsICc+JywgdGhpcy5wb3MubWluVmFsdWUpKSB7XHJcblx0XHRcdFx0bmV3WCA9IHggPSB0aGlzLnBvcy5taW47XHJcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5vcCh4LCAnPCcsIHRoaXMucG9zLm1heFZhbHVlKSkge1xyXG5cdFx0XHRcdG5ld1ggPSB4ID0gdGhpcy5wb3MubWF4O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCF0aGlzLm9wdGlvbnMuZnJlZURyYWcpIHtcclxuXHRcdFx0Ly8gc2V0IHBvc2l0aW9uc1xyXG5cdFx0XHR0aGlzLnBvcy5jdXJyZW50QWJzID0gbmV3WDtcclxuXHRcdFx0dGhpcy5wb3MuY3VycmVudCA9IHRoaXMuZG9tLiRpdGVtcy5lcShuZXdYKS5kYXRhKCdvd2wtaXRlbScpLmluZGV4O1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy51cGRhdGVJdGVtU3RhdGUoKTtcclxuXHRcdFx0cmV0dXJuIHg7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG5ld1g7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBhbmltU3RhZ2VcclxuICAqIEBkZXNjIGFuaW1hdGUgc3RhZ2UgcG9zaXRpb24gKGJvdGggY3NzMy9jc3MyKSBhbmQgcGVyZm9ybSBvbkNoYW5nZSBmdW5jdGlvbnMvZXZlbnRzXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqIEBwYXJhbSBbeF0gLSBjdXJlbnQgcG9zaXRpb24gaW4gcGl4ZWxzXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5hbmltU3RhZ2UgPSBmdW5jdGlvbiAocG9zKSB7XHJcblxyXG5cdFx0Ly8gaWYgc3BlZWQgaXMgMCB0aGUgc2V0IGluTW90aW9uIHRvIGZhbHNlXHJcblx0XHRpZiAodGhpcy5zcGVlZC5jdXJyZW50ICE9PSAwICYmIHRoaXMucG9zLmN1cnJlbnRBYnMgIT09IHRoaXMucG9zLm1pbikge1xyXG5cdFx0XHR0aGlzLmZpcmVDYWxsYmFjaygnb25UcmFuc2l0aW9uU3RhcnQnKTtcclxuXHRcdFx0dGhpcy5zdGF0ZS5pbk1vdGlvbiA9IHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHBvc1ggPSB0aGlzLnBvcy5zdGFnZSA9IHBvcyxcclxuXHRcdCAgICBzdHlsZSA9IHRoaXMuZG9tLnN0YWdlLnN0eWxlO1xyXG5cclxuXHRcdGlmICh0aGlzLnN1cHBvcnQzZCkge1xyXG5cdFx0XHR2YXIgdHJhbnNsYXRlID0gJ3RyYW5zbGF0ZTNkKCcgKyBwb3NYICsgJ3B4JyArICcsMHB4LCAwcHgpJztcclxuXHRcdFx0c3R5bGVbdGhpcy50cmFuc2Zvcm1WZW5kb3JdID0gdHJhbnNsYXRlO1xyXG5cdFx0fSBlbHNlIGlmICh0aGlzLnN0YXRlLmlzVG91Y2gpIHtcclxuXHRcdFx0c3R5bGUubGVmdCA9IHBvc1ggKyAncHgnO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5kb20uJHN0YWdlLmFuaW1hdGUoeyBsZWZ0OiBwb3NYIH0sIHRoaXMuc3BlZWQuY3NzMnNwZWVkLCB0aGlzLm9wdGlvbnMuZmFsbGJhY2tFYXNpbmcsIChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0aWYgKHRoaXMuc3RhdGUuaW5Nb3Rpb24pIHtcclxuXHRcdFx0XHRcdHRoaXMudHJhbnNpdGlvbkVuZCgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSkuYmluZCh0aGlzKSk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5vbkNoYW5nZSgpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogdXBkYXRlUG9zaXRpb25cclxuICAqIEBkZXNjIFVwZGF0ZSBjdXJyZW50IHBvc2l0aW9uc1xyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKiBAcGFyYW0gW3Bvc10gLSBudW1iZXIgLSBuZXcgcG9zaXRpb25cclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLnVwZGF0ZVBvc2l0aW9uID0gZnVuY3Rpb24gKHBvcykge1xyXG5cclxuXHRcdC8vIGlmIG5vIGl0ZW1zIHRoZW4gc3RvcFxyXG5cdFx0aWYgKHRoaXMubnVtLm9JdGVtcyA9PT0gMCkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0XHQvLyB0byBkb1xyXG5cdFx0Ly9pZihwb3MgPiB0aGlzLm51bS5pdGVtcyl7cG9zID0gMDt9XHJcblx0XHRpZiAocG9zID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vcG9zIC0gbmV3IGN1cnJlbnQgcG9zaXRpb25cclxuXHRcdHZhciBuZXh0UG9zID0gcG9zO1xyXG5cdFx0dGhpcy5wb3MucHJldiA9IHRoaXMucG9zLmN1cnJlbnRBYnM7XHJcblxyXG5cdFx0aWYgKHRoaXMuc3RhdGUucmV2ZXJ0KSB7XHJcblx0XHRcdHRoaXMucG9zLmN1cnJlbnQgPSB0aGlzLmRvbS4kaXRlbXMuZXEobmV4dFBvcykuZGF0YSgnb3dsLWl0ZW0nKS5pbmRleDtcclxuXHRcdFx0dGhpcy5wb3MuY3VycmVudEFicyA9IG5leHRQb3M7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIXRoaXMub3B0aW9ucy5sb29wKSB7XHJcblx0XHRcdGlmICh0aGlzLm9wdGlvbnMubmF2UmV3aW5kKSB7XHJcblx0XHRcdFx0bmV4dFBvcyA9IG5leHRQb3MgPiB0aGlzLnBvcy5tYXggPyB0aGlzLnBvcy5taW4gOiBuZXh0UG9zIDwgMCA/IHRoaXMucG9zLm1heCA6IG5leHRQb3M7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bmV4dFBvcyA9IG5leHRQb3MgPiB0aGlzLnBvcy5tYXggPyB0aGlzLnBvcy5tYXggOiBuZXh0UG9zIDw9IDAgPyAwIDogbmV4dFBvcztcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bmV4dFBvcyA9IG5leHRQb3MgPj0gdGhpcy5udW0ub0l0ZW1zID8gdGhpcy5udW0ub0l0ZW1zIC0gMSA6IG5leHRQb3M7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5wb3MuY3VycmVudCA9IHRoaXMuZG9tLiRvSXRlbXMuZXEobmV4dFBvcykuZGF0YSgnb3dsLWl0ZW0nKS5pbmRleDtcclxuXHRcdHRoaXMucG9zLmN1cnJlbnRBYnMgPSB0aGlzLmRvbS4kb0l0ZW1zLmVxKG5leHRQb3MpLmRhdGEoJ293bC1pdGVtJykuaW5kZXhBYnM7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBzZXRTcGVlZFxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKiBAcGFyYW0gW3NwZWVkXSAtIG51bWJlclxyXG4gICogQHBhcmFtIFtwb3NdIC0gbnVtYmVyIC0gbmV4dCBwb3NpdGlvbiAtIHVzZSB0aGlzIHBhcmFtIHRvIGNhbGN1bGF0ZSBzbWFydFNwZWVkXHJcbiAgKiBAcGFyYW0gW2RyYWddIC0gYm9vbGVhbiAtIGlmIGRyYWcgaXMgdHJ1ZSB0aGVuIHNtYXJ0IHNwZWVkIGlzIGRpc2FibGVkXHJcbiAgKiByZXR1cm4gc3BlZWRcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLnNldFNwZWVkID0gZnVuY3Rpb24gKHNwZWVkLCBwb3MsIGRyYWcpIHtcclxuXHRcdHZhciBzID0gc3BlZWQsXHJcblx0XHQgICAgbmV4dFBvcyA9IHBvcztcclxuXHJcblx0XHRpZiAocyA9PT0gZmFsc2UgJiYgcyAhPT0gMCAmJiBkcmFnICE9PSB0cnVlIHx8IHMgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Ly9Eb3VibGUgY2hlY2sgdGhpc1xyXG5cdFx0XHQvLyB2YXIgbmV4dFB4ID0gdGhpcy5wb3MuaXRlbXNbbmV4dFBvc107XHJcblx0XHRcdC8vIHZhciBjdXJyUHggPSB0aGlzLnBvcy5zdGFnZVxyXG5cdFx0XHQvLyB2YXIgZGlmZiA9IE1hdGguYWJzKG5leHRQeC1jdXJyUHgpO1xyXG5cdFx0XHQvLyB2YXIgcyA9IGRpZmYvMVxyXG5cdFx0XHQvLyBpZihzPjEwMDApe1xyXG5cdFx0XHQvLyBcdHMgPSAxMDAwO1xyXG5cdFx0XHQvLyB9XHJcblxyXG5cdFx0XHR2YXIgZGlmZiA9IE1hdGguYWJzKG5leHRQb3MgLSB0aGlzLnBvcy5wcmV2KTtcclxuXHRcdFx0ZGlmZiA9IGRpZmYgPT09IDAgPyAxIDogZGlmZjtcclxuXHRcdFx0aWYgKGRpZmYgPiA2KSB7XHJcblx0XHRcdFx0ZGlmZiA9IDY7XHJcblx0XHRcdH1cclxuXHRcdFx0cyA9IGRpZmYgKiB0aGlzLm9wdGlvbnMuc21hcnRTcGVlZDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAocyA9PT0gZmFsc2UgJiYgZHJhZyA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRzID0gdGhpcy5vcHRpb25zLnNtYXJ0U3BlZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHMgPT09IDApIHtcclxuXHRcdFx0cyA9IDA7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuc3VwcG9ydDNkKSB7XHJcblx0XHRcdHZhciBzdHlsZSA9IHRoaXMuZG9tLnN0YWdlLnN0eWxlO1xyXG5cdFx0XHRzdHlsZS53ZWJraXRUcmFuc2l0aW9uRHVyYXRpb24gPSBzdHlsZS5Nc1RyYW5zaXRpb25EdXJhdGlvbiA9IHN0eWxlLm1zVHJhbnNpdGlvbkR1cmF0aW9uID0gc3R5bGUuTW96VHJhbnNpdGlvbkR1cmF0aW9uID0gc3R5bGUuT1RyYW5zaXRpb25EdXJhdGlvbiA9IHN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IHMgLyAxMDAwICsgJ3MnO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5zcGVlZC5jc3Myc3BlZWQgPSBzO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5zcGVlZC5jdXJyZW50ID0gcztcclxuXHRcdHJldHVybiBzO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICoganVtcFRvXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqIEBwYXJhbSBbcG9zXSAtIG51bWJlciAtIG5leHQgcG9zaXRpb24gLSB1c2UgdGhpcyBwYXJhbSB0byBjYWxjdWxhdGUgc21hcnRTcGVlZFxyXG4gICogQHBhcmFtIFt1cGRhdGVdIC0gYm9vbGVhbiAtIGlmIGRyYWcgaXMgdHJ1ZSB0aGVuIHNtYXJ0IHNwZWVkIGlzIGRpc2FibGVkXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5qdW1wVG8gPSBmdW5jdGlvbiAocG9zLCB1cGRhdGUpIHtcclxuXHRcdGlmICh0aGlzLnN0YXRlLmxhenlDb250ZW50KSB7XHJcblx0XHRcdHRoaXMucG9zLmdvVG9MYXp5Q29udGVudCA9IHBvcztcclxuXHRcdH1cclxuXHRcdHRoaXMudXBkYXRlUG9zaXRpb24ocG9zKTtcclxuXHRcdHRoaXMuc2V0U3BlZWQoMCk7XHJcblx0XHR0aGlzLmFuaW1TdGFnZSh0aGlzLnBvcy5pdGVtc1t0aGlzLnBvcy5jdXJyZW50QWJzXSk7XHJcblx0XHRpZiAodXBkYXRlICE9PSB0cnVlKSB7XHJcblx0XHRcdHRoaXMudXBkYXRlSXRlbVN0YXRlKCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBnb1RvXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqIEBwYXJhbSBbcG9zXSAtIG51bWJlclxyXG4gICogQHBhcmFtIFtzcGVlZF0gLSBzcGVlZCBpbiBtc1xyXG4gICogQHBhcmFtIFtzcGVlZF0gLSBzcGVlZCBpbiBtc1xyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUuZ29UbyA9IGZ1bmN0aW9uIChwb3MsIHNwZWVkKSB7XHJcblx0XHRpZiAodGhpcy5zdGF0ZS5sYXp5Q29udGVudCAmJiB0aGlzLnN0YXRlLmluTW90aW9uKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnVwZGF0ZVBvc2l0aW9uKHBvcyk7XHJcblxyXG5cdFx0aWYgKHRoaXMuc3RhdGUuYW5pbWF0ZSkge1xyXG5cdFx0XHRzcGVlZCA9IDA7XHJcblx0XHR9XHJcblx0XHR0aGlzLnNldFNwZWVkKHNwZWVkLCB0aGlzLnBvcy5jdXJyZW50QWJzKTtcclxuXHJcblx0XHRpZiAodGhpcy5zdGF0ZS5hbmltYXRlKSB7XHJcblx0XHRcdHRoaXMuYW5pbWF0ZSgpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5hbmltU3RhZ2UodGhpcy5wb3MuaXRlbXNbdGhpcy5wb3MuY3VycmVudEFic10pO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogbmV4dFxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKG9wdGlvbmFsU3BlZWQpIHtcclxuXHRcdHZhciBzID0gb3B0aW9uYWxTcGVlZCB8fCB0aGlzLm9wdGlvbnMubmF2U3BlZWQ7XHJcblx0XHRpZiAodGhpcy5vcHRpb25zLmxvb3AgJiYgIXRoaXMuc3RhdGUubGF6eUNvbnRlbnQpIHtcclxuXHRcdFx0dGhpcy5nb1RvTG9vcCh0aGlzLm9wdGlvbnMuc2xpZGVCeSwgcyk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLmdvVG8odGhpcy5wb3MuY3VycmVudCArIHRoaXMub3B0aW9ucy5zbGlkZUJ5LCBzKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIHByZXZcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUucHJldiA9IGZ1bmN0aW9uIChvcHRpb25hbFNwZWVkKSB7XHJcblx0XHR2YXIgcyA9IG9wdGlvbmFsU3BlZWQgfHwgdGhpcy5vcHRpb25zLm5hdlNwZWVkO1xyXG5cdFx0aWYgKHRoaXMub3B0aW9ucy5sb29wICYmICF0aGlzLnN0YXRlLmxhenlDb250ZW50KSB7XHJcblx0XHRcdHRoaXMuZ29Ub0xvb3AoLXRoaXMub3B0aW9ucy5zbGlkZUJ5LCBzKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuZ29Ubyh0aGlzLnBvcy5jdXJyZW50IC0gdGhpcy5vcHRpb25zLnNsaWRlQnksIHMpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogZ29Ub0xvb3BcclxuICAqIEBkZXNjIEdvIHRvIGdpdmVuIHBvc2l0aW9uIGlmIGxvb3AgaXMgZW5hYmxlZCAtIHVzZWQgb25seSBpbnRlcm5hbFxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKiBAcGFyYW0gW2Rpc3RhbmNlXSAtIG51bWJlciAtaG93IGZhciB0byBnb1xyXG4gICogQHBhcmFtIFtzcGVlZF0gLSBudW1iZXIgLSBzcGVlZCBpbiBtc1xyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUuZ29Ub0xvb3AgPSBmdW5jdGlvbiAoZGlzdGFuY2UsIHNwZWVkKSB7XHJcblxyXG5cdFx0dmFyIHJldmVydCA9IHRoaXMucG9zLmN1cnJlbnRBYnMsXHJcblx0XHQgICAgcHJldlBvc2l0aW9uID0gdGhpcy5wb3MuY3VycmVudEFicyxcclxuXHRcdCAgICBuZXdQb3NpdGlvbiA9IHRoaXMucG9zLmN1cnJlbnRBYnMgKyBkaXN0YW5jZSxcclxuXHRcdCAgICBkaXJlY3Rpb24gPSBwcmV2UG9zaXRpb24gLSBuZXdQb3NpdGlvbiA8IDAgPyB0cnVlIDogZmFsc2U7XHJcblxyXG5cdFx0dGhpcy5zdGF0ZS5yZXZlcnQgPSB0cnVlO1xyXG5cclxuXHRcdGlmIChuZXdQb3NpdGlvbiA8IDEgJiYgZGlyZWN0aW9uID09PSBmYWxzZSkge1xyXG5cclxuXHRcdFx0dGhpcy5zdGF0ZS5ieXBhc3MgPSB0cnVlO1xyXG5cdFx0XHRyZXZlcnQgPSB0aGlzLm51bS5pdGVtcyAtICh0aGlzLm9wdGlvbnMuaXRlbXMgLSBwcmV2UG9zaXRpb24pIC0gdGhpcy5vcHRpb25zLml0ZW1zO1xyXG5cdFx0XHR0aGlzLmp1bXBUbyhyZXZlcnQsIHRydWUpO1xyXG5cdFx0fSBlbHNlIGlmIChuZXdQb3NpdGlvbiA+PSB0aGlzLm51bS5pdGVtcyAtIHRoaXMub3B0aW9ucy5pdGVtcyAmJiBkaXJlY3Rpb24gPT09IHRydWUpIHtcclxuXHJcblx0XHRcdHRoaXMuc3RhdGUuYnlwYXNzID0gdHJ1ZTtcclxuXHRcdFx0cmV2ZXJ0ID0gcHJldlBvc2l0aW9uIC0gdGhpcy5udW0ub0l0ZW1zO1xyXG5cdFx0XHR0aGlzLmp1bXBUbyhyZXZlcnQsIHRydWUpO1xyXG5cdFx0fVxyXG5cdFx0d2luZG93LmNsZWFyVGltZW91dCh0aGlzLmUuX2dvVG9Mb29wKTtcclxuXHRcdHRoaXMuZS5fZ29Ub0xvb3AgPSB3aW5kb3cuc2V0VGltZW91dCgoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHR0aGlzLnN0YXRlLmJ5cGFzcyA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLmdvVG8ocmV2ZXJ0ICsgZGlzdGFuY2UsIHNwZWVkKTtcclxuXHRcdFx0dGhpcy5zdGF0ZS5yZXZlcnQgPSBmYWxzZTtcclxuXHRcdH0pLmJpbmQodGhpcyksIDMwKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIGluaXRQb3NpdGlvblxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5pbml0UG9zaXRpb24gPSBmdW5jdGlvbiAoaW5pdCkge1xyXG5cclxuXHRcdGlmICghdGhpcy5kb20uJG9JdGVtcyB8fCAhaW5pdCB8fCB0aGlzLnN0YXRlLmxhenlDb250ZW50KSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdHZhciBwb3MgPSB0aGlzLm9wdGlvbnMuc3RhcnRQb3NpdGlvbjtcclxuXHJcblx0XHRpZiAodGhpcy5vcHRpb25zLnN0YXJ0UG9zaXRpb24gPT09ICdVUkxIYXNoJykge1xyXG5cdFx0XHRwb3MgPSB0aGlzLm9wdGlvbnMuc3RhcnRQb3NpdGlvbiA9IHRoaXMuaGFzaFBvc2l0aW9uKCk7XHJcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuc3RhcnRQb3NpdGlvbiAhPT0gTnVtYmVyICYmICF0aGlzLm9wdGlvbnMuY2VudGVyKSB7XHJcblx0XHRcdHRoaXMub3B0aW9ucy5zdGFydFBvc2l0aW9uID0gMDtcclxuXHRcdH1cclxuXHRcdHRoaXMuZG9tLm9TdGFnZS5zY3JvbGxMZWZ0ID0gMDtcclxuXHRcdHRoaXMuanVtcFRvKHBvcywgdHJ1ZSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBnb1RvSGFzaFxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5nb1RvSGFzaCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdHZhciBwb3MgPSB0aGlzLmhhc2hQb3NpdGlvbigpO1xyXG5cdFx0aWYgKHBvcyA9PT0gZmFsc2UpIHtcclxuXHRcdFx0cG9zID0gMDtcclxuXHRcdH1cclxuXHRcdHRoaXMuZG9tLm9TdGFnZS5zY3JvbGxMZWZ0ID0gMDtcclxuXHRcdHRoaXMuZ29Ubyhwb3MsIHRoaXMub3B0aW9ucy5uYXZTcGVlZCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBoYXNoUG9zaXRpb25cclxuICAqIEBkZXNjIEZpbmQgaGFzaCBpbiBVUkwgdGhlbiBsb29rIGludG8gaXRlbXMgdG8gZmluZCBjb250YWluZWQgSURcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICogcmV0dXJuIGhhc2hQb3MgLSBudW1iZXIgb2YgaXRlbVxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUuaGFzaFBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSksXHJcblx0XHQgICAgaGFzaFBvcztcclxuXHRcdGlmIChoYXNoID09PSBcIlwiKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubnVtLm9JdGVtczsgaSsrKSB7XHJcblx0XHRcdGlmIChoYXNoID09PSB0aGlzLmRvbS4kb0l0ZW1zLmVxKGkpLmRhdGEoJ293bC1pdGVtJykuaGFzaCkge1xyXG5cdFx0XHRcdGhhc2hQb3MgPSBpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gaGFzaFBvcztcclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIEF1dG9wbGF5XHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLmF1dG9wbGF5ID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0aWYgKHRoaXMub3B0aW9ucy5hdXRvcGxheSAmJiAhdGhpcy5zdGF0ZS52aWRlb1BsYXkpIHtcclxuXHRcdFx0d2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5lLl9hdXRvcGxheSk7XHJcblx0XHRcdHRoaXMuZS5fYXV0b3BsYXkgPSB3aW5kb3cuc2V0SW50ZXJ2YWwodGhpcy5lLl9wbGF5LCB0aGlzLm9wdGlvbnMuYXV0b3BsYXlUaW1lb3V0KTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuZS5fYXV0b3BsYXkpO1xyXG5cdFx0XHR0aGlzLnN0YXRlLmF1dG9wbGF5ID0gZmFsc2U7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBwbGF5XHJcbiAgKiBAcGFyYW0gW3RpbWVvdXRdIC0gSW50ZWdyZXJcclxuICAqIEBwYXJhbSBbc3BlZWRdIC0gSW50ZWdyZXJcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uICh0aW1lb3V0LCBzcGVlZCkge1xyXG5cclxuXHRcdC8vIGlmIHRhYiBpcyBpbmFjdGl2ZSAtIGRvZXNudCB3b3JrIGluIDxJRTEwXHJcblx0XHRpZiAoZG9jdW1lbnQuaGlkZGVuID09PSB0cnVlKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBvdmVyd3JpdGUgZGVmYXVsdCBvcHRpb25zIChjdXN0b20gb3B0aW9ucyBhcmUgYWx3YXlzIHByaW9yaXR5KVxyXG5cdFx0aWYgKCF0aGlzLm9wdGlvbnMuYXV0b3BsYXkpIHtcclxuXHRcdFx0dGhpcy5fb3B0aW9ucy5hdXRvcGxheSA9IHRoaXMub3B0aW9ucy5hdXRvcGxheSA9IHRydWU7XHJcblx0XHRcdHRoaXMuX29wdGlvbnMuYXV0b3BsYXlUaW1lb3V0ID0gdGhpcy5vcHRpb25zLmF1dG9wbGF5VGltZW91dCA9IHRpbWVvdXQgfHwgdGhpcy5vcHRpb25zLmF1dG9wbGF5VGltZW91dCB8fCA0MDAwO1xyXG5cdFx0XHR0aGlzLl9vcHRpb25zLmF1dG9wbGF5U3BlZWQgPSBzcGVlZCB8fCB0aGlzLm9wdGlvbnMuYXV0b3BsYXlTcGVlZDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5vcHRpb25zLmF1dG9wbGF5ID09PSBmYWxzZSB8fCB0aGlzLnN0YXRlLmlzVG91Y2ggfHwgdGhpcy5zdGF0ZS5pc1Njcm9sbGluZyB8fCB0aGlzLnN0YXRlLmlzU3dpcGluZyB8fCB0aGlzLnN0YXRlLmluTW90aW9uKSB7XHJcblx0XHRcdHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuZS5fYXV0b3BsYXkpO1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCF0aGlzLm9wdGlvbnMubG9vcCAmJiB0aGlzLnBvcy5jdXJyZW50ID49IHRoaXMucG9zLm1heCkge1xyXG5cdFx0XHR3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLmUuX2F1dG9wbGF5KTtcclxuXHRcdFx0dGhpcy5nb1RvKDApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5uZXh0KHRoaXMub3B0aW9ucy5hdXRvcGxheVNwZWVkKTtcclxuXHRcdH1cclxuXHRcdHRoaXMuc3RhdGUuYXV0b3BsYXkgPSB0cnVlO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogc3RvcFxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0dGhpcy5fb3B0aW9ucy5hdXRvcGxheSA9IHRoaXMub3B0aW9ucy5hdXRvcGxheSA9IGZhbHNlO1xyXG5cdFx0dGhpcy5zdGF0ZS5hdXRvcGxheSA9IGZhbHNlO1xyXG5cdFx0d2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5lLl9hdXRvcGxheSk7XHJcblx0fTtcclxuXHJcblx0T3dsLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuZS5fYXV0b3BsYXkpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogdHJhbnNpdGlvbkVuZFxyXG4gICogQGRlc2MgZXZlbnQgdXNlZCBieSBjc3MzIGFuaW1hdGlvbiBlbmQgYW5kICQuYW5pbWF0ZSBjYWxsYmFjayBsaWtlIHRyYW5zaXRpb25FbmQscmVzcG9uc2l2ZSBldGMuXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLnRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHJcblx0XHQvLyBpZiBjc3MyIGFuaW1hdGlvbiB0aGVuIGV2ZW50IG9iamVjdCBpcyB1bmRlZmluZWRcclxuXHRcdGlmIChldmVudCAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuXHRcdFx0Ly8gQ2F0Y2ggb25seSBvd2wtc3RhZ2UgdHJhbnNpdGlvbkVuZCBldmVudFxyXG5cdFx0XHR2YXIgZXZlbnRUYXJnZXQgPSBldmVudC50YXJnZXQgfHwgZXZlbnQuc3JjRWxlbWVudCB8fCBldmVudC5vcmlnaW5hbFRhcmdldDtcclxuXHRcdFx0aWYgKGV2ZW50VGFyZ2V0ICE9PSB0aGlzLmRvbS5zdGFnZSkge1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuc3RhdGUuaW5Nb3Rpb24gPSBmYWxzZTtcclxuXHRcdHRoaXMudXBkYXRlSXRlbVN0YXRlKCk7XHJcblx0XHR0aGlzLmF1dG9wbGF5KCk7XHJcblx0XHR0aGlzLmZpcmVDYWxsYmFjaygnb25UcmFuc2l0aW9uRW5kJyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBpc0VsV2lkdGhDaGFuZ2VkXHJcbiAgKiBAZGVzYyBDaGVjayBpZiBlbGVtZW50IHdpZHRoIGhhcyBjaGFuZ2VkXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLmlzRWxXaWR0aENoYW5nZWQgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHR2YXIgbmV3RWxXaWR0aCA9IHRoaXMuZG9tLiRlbC53aWR0aCgpIC0gdGhpcy5vcHRpb25zLnN0YWdlUGFkZGluZyxcclxuXHRcdCAgICAvL3RvIGNoZWNrXHJcblx0XHRwcmV2RWxXaWR0aCA9IHRoaXMud2lkdGguZWwgKyB0aGlzLm9wdGlvbnMubWFyZ2luO1xyXG5cdFx0cmV0dXJuIG5ld0VsV2lkdGggIT09IHByZXZFbFdpZHRoO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogd2luZG93V2lkdGhcclxuICAqIEBkZXNjIEdldCBXaW5kb3cvcmVzcG9uc2l2ZUJhc2VFbGVtZW50IHdpZHRoXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLndpbmRvd1dpZHRoID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0aWYgKHRoaXMub3B0aW9ucy5yZXNwb25zaXZlQmFzZUVsZW1lbnQgIT09IHdpbmRvdykge1xyXG5cdFx0XHR0aGlzLndpZHRoLndpbmRvdyA9ICQodGhpcy5vcHRpb25zLnJlc3BvbnNpdmVCYXNlRWxlbWVudCkud2lkdGgoKTtcclxuXHRcdH0gZWxzZSBpZiAod2luZG93LmlubmVyV2lkdGgpIHtcclxuXHRcdFx0dGhpcy53aWR0aC53aW5kb3cgPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuXHRcdH0gZWxzZSBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCkge1xyXG5cdFx0XHR0aGlzLndpZHRoLndpbmRvdyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLndpZHRoLndpbmRvdztcclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIENvbnRyb2xzXHJcbiAgKiBAZGVzYyBDYWxscyBjb250cm9scyBjb250YWluZXIsIG5hdmlnYXRpb24gYW5kIGRvdHMgY3JlYXRvclxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5jb250cm9scyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdHZhciBjYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdFx0Y2MuY2xhc3NOYW1lID0gdGhpcy5vcHRpb25zLmNvbnRyb2xzQ2xhc3M7XHJcblx0XHR0aGlzLmRvbS4kZWwuYXBwZW5kKGNjKTtcclxuXHRcdHRoaXMuZG9tLiRjYyA9ICQoY2MpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogdXBkYXRlQ29udHJvbHMgXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLnVwZGF0ZUNvbnRyb2xzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGlmICh0aGlzLmRvbS4kY2MgPT09IG51bGwgJiYgKHRoaXMub3B0aW9ucy5uYXYgfHwgdGhpcy5vcHRpb25zLmRvdHMpKSB7XHJcblx0XHRcdHRoaXMuY29udHJvbHMoKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5kb20uJG5hdiA9PT0gbnVsbCAmJiB0aGlzLm9wdGlvbnMubmF2KSB7XHJcblx0XHRcdHRoaXMuY3JlYXRlTmF2aWdhdGlvbih0aGlzLmRvbS4kY2NbMF0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLmRvbS4kcGFnZSA9PT0gbnVsbCAmJiB0aGlzLm9wdGlvbnMuZG90cykge1xyXG5cdFx0XHR0aGlzLmNyZWF0ZURvdHModGhpcy5kb20uJGNjWzBdKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5kb20uJG5hdiAhPT0gbnVsbCkge1xyXG5cdFx0XHRpZiAodGhpcy5vcHRpb25zLm5hdikge1xyXG5cdFx0XHRcdHRoaXMuZG9tLiRuYXYuc2hvdygpO1xyXG5cdFx0XHRcdHRoaXMudXBkYXRlTmF2aWdhdGlvbigpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRoaXMuZG9tLiRuYXYuaGlkZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuZG9tLiRwYWdlICE9PSBudWxsKSB7XHJcblx0XHRcdGlmICh0aGlzLm9wdGlvbnMuZG90cykge1xyXG5cdFx0XHRcdHRoaXMuZG9tLiRwYWdlLnNob3coKTtcclxuXHRcdFx0XHR0aGlzLnVwZGF0ZURvdHMoKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLmRvbS4kcGFnZS5oaWRlKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIGNyZWF0ZU5hdmlnYXRpb25cclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICogQHBhcmFtIFtjY10gLSBkb20gZWxlbWVudCAtIENvbnRyb2xzIENvbnRhaW5lclxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUuY3JlYXRlTmF2aWdhdGlvbiA9IGZ1bmN0aW9uIChjYykge1xyXG5cclxuXHRcdC8vIENyZWF0ZSBuYXYgY29udGFpbmVyXHJcblx0XHR2YXIgbmF2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblx0XHRuYXYuY2xhc3NOYW1lID0gdGhpcy5vcHRpb25zLm5hdkNvbnRhaW5lckNsYXNzO1xyXG5cdFx0Y2MuYXBwZW5kQ2hpbGQobmF2KTtcclxuXHJcblx0XHQvLyBDcmVhdGUgbGVmdCBhbmQgcmlnaHQgYnV0dG9uc1xyXG5cdFx0dmFyIG5hdlByZXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcclxuXHRcdCAgICBuYXZOZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG5cdFx0bmF2UHJldi5jbGFzc05hbWUgPSB0aGlzLm9wdGlvbnMubmF2Q2xhc3NbMF07XHJcblx0XHRuYXZOZXh0LmNsYXNzTmFtZSA9IHRoaXMub3B0aW9ucy5uYXZDbGFzc1sxXTtcclxuXHJcblx0XHRuYXYuYXBwZW5kQ2hpbGQobmF2UHJldik7XHJcblx0XHRuYXYuYXBwZW5kQ2hpbGQobmF2TmV4dCk7XHJcblxyXG5cdFx0dGhpcy5kb20uJG5hdiA9ICQobmF2KTtcclxuXHRcdHRoaXMuZG9tLiRuYXZQcmV2ID0gJChuYXZQcmV2KS5odG1sKHRoaXMub3B0aW9ucy5uYXZUZXh0WzBdKTtcclxuXHRcdHRoaXMuZG9tLiRuYXZOZXh0ID0gJChuYXZOZXh0KS5odG1sKHRoaXMub3B0aW9ucy5uYXZUZXh0WzFdKTtcclxuXHJcblx0XHQvLyBhZGQgZXZlbnRzIHRvIGRvXHJcblx0XHQvL3RoaXMub24obmF2UHJldiwgdGhpcy5kcmFnVHlwZVsyXSwgdGhpcy5lLl9uYXZQcmV2LCBmYWxzZSk7XHJcblx0XHQvL3RoaXMub24obmF2TmV4dCwgdGhpcy5kcmFnVHlwZVsyXSwgdGhpcy5lLl9uYXZOZXh0LCBmYWxzZSk7XHJcblxyXG5cdFx0Ly9GRiBmaXg/XHJcblx0XHR0aGlzLmRvbS4kbmF2Lm9uKHRoaXMuZHJhZ1R5cGVbMl0sICcuJyArIHRoaXMub3B0aW9ucy5uYXZDbGFzc1swXSwgdGhpcy5lLl9uYXZQcmV2KTtcclxuXHRcdHRoaXMuZG9tLiRuYXYub24odGhpcy5kcmFnVHlwZVsyXSwgJy4nICsgdGhpcy5vcHRpb25zLm5hdkNsYXNzWzFdLCB0aGlzLmUuX25hdk5leHQpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogY3JlYXRlTmF2aWdhdGlvblxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKiBAcGFyYW0gW2NjXSAtIGRvbSBlbGVtZW50IC0gQ29udHJvbHMgQ29udGFpbmVyXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5jcmVhdGVEb3RzID0gZnVuY3Rpb24gKGNjKSB7XHJcblxyXG5cdFx0Ly8gQ3JlYXRlIGRvdHMgY29udGFpbmVyXHJcblx0XHR2YXIgcGFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdFx0cGFnZS5jbGFzc05hbWUgPSB0aGlzLm9wdGlvbnMuZG90c0NsYXNzO1xyXG5cdFx0Y2MuYXBwZW5kQ2hpbGQocGFnZSk7XHJcblxyXG5cdFx0Ly8gc2F2ZSByZWZlcmVuY2VcclxuXHRcdHRoaXMuZG9tLiRwYWdlID0gJChwYWdlKTtcclxuXHJcblx0XHQvLyBhZGQgZXZlbnRzXHJcblx0XHQvL3RoaXMub24ocGFnZSwgdGhpcy5kcmFnVHlwZVsyXSwgdGhpcy5lLl9nb1RvUGFnZSwgZmFsc2UpO1xyXG5cclxuXHRcdC8vIEZGIGZpeD8gVG8gdGVzdCFcclxuXHRcdHZhciB0aGF0ID0gdGhpcztcclxuXHRcdHRoaXMuZG9tLiRwYWdlLm9uKHRoaXMuZHJhZ1R5cGVbMl0sICcuJyArIHRoaXMub3B0aW9ucy5kb3RDbGFzcywgZ29Ub1BhZ2UpO1xyXG5cclxuXHRcdGZ1bmN0aW9uIGdvVG9QYWdlKGUpIHtcclxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHR2YXIgcGFnZSA9ICQodGhpcykuZGF0YSgncGFnZScpO1xyXG5cdFx0XHR0aGF0LmdvVG8ocGFnZSwgdGhhdC5vcHRpb25zLmRvdHNTcGVlZCk7XHJcblx0XHR9XHJcblx0XHQvLyBidWlsZCBkb3RzXHJcblx0XHR0aGlzLnJlYnVpbGREb3RzKCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBnb1RvUGFnZVxyXG4gICogQGRlc2MgRXZlbnQgdXNlZCBieSBkb3RzXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHQvLyBPd2wucHJvdG90eXBlLmdvVG9QYWdlID0gZnVuY3Rpb24oZSl7XHJcblx0Ly8gXHRjb25zb2xlLmxvZyhlLnRhZ2V0KTtcclxuXHQvLyBcdHZhciBwYWdlID0gJChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ3BhZ2UnKVxyXG5cdC8vIFx0dGhpcy5nb1RvKHBhZ2UsdGhpcy5vcHRpb25zLmRvdHNTcGVlZCk7XHJcblx0Ly8gXHRyZXR1cm4gZmFsc2U7XHJcblx0Ly8gfTtcclxuXHJcblx0LyoqXHJcbiAgKiByZWJ1aWxkRG90c1xyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5yZWJ1aWxkRG90cyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdGlmICh0aGlzLmRvbS4kcGFnZSA9PT0gbnVsbCkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0XHR2YXIgZWFjaCxcclxuXHRcdCAgICBkb3QsXHJcblx0XHQgICAgc3BhbixcclxuXHRcdCAgICBjb3VudGVyID0gMCxcclxuXHRcdCAgICBsYXN0ID0gMCxcclxuXHRcdCAgICBpLFxyXG5cdFx0ICAgIHBhZ2UgPSAwLFxyXG5cdFx0ICAgIHJvdW5kUGFnZXMgPSAwO1xyXG5cclxuXHRcdGVhY2ggPSB0aGlzLm9wdGlvbnMuZG90c0VhY2ggfHwgdGhpcy5vcHRpb25zLml0ZW1zO1xyXG5cclxuXHRcdC8vIGRpc3BsYXkgZnVsbCBkb3RzIGlmIGNlbnRlclxyXG5cdFx0aWYgKHRoaXMub3B0aW9ucy5jZW50ZXIgfHwgdGhpcy5vcHRpb25zLmRvdERhdGEpIHtcclxuXHRcdFx0ZWFjaCA9IDE7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gY2xlYXIgZG90c1xyXG5cdFx0dGhpcy5kb20uJHBhZ2UuaHRtbCgnJyk7XHJcblxyXG5cdFx0Zm9yIChpID0gMDsgaSA8IHRoaXMubnVtLm5hdi5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0aWYgKGNvdW50ZXIgPj0gZWFjaCB8fCBjb3VudGVyID09PSAwKSB7XHJcblxyXG5cdFx0XHRcdGRvdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdFx0XHRcdGRvdC5jbGFzc05hbWUgPSB0aGlzLm9wdGlvbnMuZG90Q2xhc3M7XHJcblx0XHRcdFx0c3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuXHRcdFx0XHRkb3QuYXBwZW5kQ2hpbGQoc3Bhbik7XHJcblx0XHRcdFx0dmFyICRkb3QgPSAkKGRvdCk7XHJcblxyXG5cdFx0XHRcdGlmICh0aGlzLm9wdGlvbnMuZG90RGF0YSkge1xyXG5cdFx0XHRcdFx0JGRvdC5odG1sKHRoaXMuZG9tLiRvSXRlbXMuZXEoaSkuZGF0YSgnb3dsLWl0ZW0nKS5kb3QpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0JGRvdC5kYXRhKCdwYWdlJywgcGFnZSk7XHJcblx0XHRcdFx0JGRvdC5kYXRhKCdnb1RvUGFnZScsIHJvdW5kUGFnZXMpO1xyXG5cclxuXHRcdFx0XHR0aGlzLmRvbS4kcGFnZS5hcHBlbmQoZG90KTtcclxuXHJcblx0XHRcdFx0Y291bnRlciA9IDA7XHJcblx0XHRcdFx0cm91bmRQYWdlcysrO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLmRvbS4kb0l0ZW1zLmVxKGkpLmRhdGEoJ293bC1pdGVtJykucGFnZSA9IHJvdW5kUGFnZXMgLSAxO1xyXG5cclxuXHRcdFx0Ly9hZGQgbWVyZ2VkIGl0ZW1zXHJcblx0XHRcdGNvdW50ZXIgKz0gdGhpcy5udW0ubmF2W2ldO1xyXG5cdFx0XHRwYWdlKys7XHJcblx0XHR9XHJcblx0XHQvLyBmaW5kIHJlc3Qgb2YgZG90c1xyXG5cdFx0aWYgKCF0aGlzLm9wdGlvbnMubG9vcCAmJiAhdGhpcy5vcHRpb25zLmNlbnRlcikge1xyXG5cdFx0XHRmb3IgKHZhciBqID0gdGhpcy5udW0ubmF2Lmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7XHJcblx0XHRcdFx0bGFzdCArPSB0aGlzLm51bS5uYXZbal07XHJcblx0XHRcdFx0dGhpcy5kb20uJG9JdGVtcy5lcShqKS5kYXRhKCdvd2wtaXRlbScpLnBhZ2UgPSByb3VuZFBhZ2VzIC0gMTtcclxuXHRcdFx0XHRpZiAobGFzdCA+PSBlYWNoKSB7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLm51bS5hbGxQYWdlcyA9IHJvdW5kUGFnZXMgLSAxO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogdXBkYXRlRG90c1xyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS51cGRhdGVEb3RzID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyIGRvdHMgPSB0aGlzLmRvbS4kcGFnZS5jaGlsZHJlbigpO1xyXG5cdFx0dmFyIGl0ZW1JbmRleCA9IHRoaXMuZG9tLiRvSXRlbXMuZXEodGhpcy5wb3MuY3VycmVudCkuZGF0YSgnb3dsLWl0ZW0nKS5wYWdlO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZG90cy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgZG90UGFnZSA9IGRvdHMuZXEoaSkuZGF0YSgnZ29Ub1BhZ2UnKTtcclxuXHJcblx0XHRcdGlmIChkb3RQYWdlID09PSBpdGVtSW5kZXgpIHtcclxuXHRcdFx0XHR0aGlzLnBvcy5jdXJyZW50UGFnZSA9IGk7XHJcblx0XHRcdFx0ZG90cy5lcShpKS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZG90cy5lcShpKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIHVwZGF0ZU5hdmlnYXRpb25cclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUudXBkYXRlTmF2aWdhdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgaXNOYXYgPSB0aGlzLm9wdGlvbnMubmF2O1xyXG5cclxuXHRcdHRoaXMuZG9tLiRuYXZOZXh0LnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsICFpc05hdik7XHJcblx0XHR0aGlzLmRvbS4kbmF2UHJldi50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCAhaXNOYXYpO1xyXG5cclxuXHRcdGlmICghdGhpcy5vcHRpb25zLmxvb3AgJiYgaXNOYXYgJiYgIXRoaXMub3B0aW9ucy5uYXZSZXdpbmQpIHtcclxuXHJcblx0XHRcdGlmICh0aGlzLnBvcy5jdXJyZW50IDw9IDApIHtcclxuXHRcdFx0XHR0aGlzLmRvbS4kbmF2UHJldi5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAodGhpcy5wb3MuY3VycmVudCA+PSB0aGlzLnBvcy5tYXgpIHtcclxuXHRcdFx0XHR0aGlzLmRvbS4kbmF2TmV4dC5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdE93bC5wcm90b3R5cGUuaW5zZXJ0Q29udGVudCA9IGZ1bmN0aW9uIChjb250ZW50KSB7XHJcblx0XHR0aGlzLmRvbS4kc3RhZ2UuZW1wdHkoKTtcclxuXHRcdHRoaXMuZmV0Y2hDb250ZW50KGNvbnRlbnQpO1xyXG5cdFx0dGhpcy5yZWZyZXNoKCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBhZGRJdGVtIC0gQWRkIGFuIGl0ZW1cclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICogQHBhcmFtIFtjb250ZW50XSAtIGRvbSBlbGVtZW50IC8gc3RyaW5nICc8ZGl2PmNvbnRlbnQ8L2Rpdj4nXHJcbiAgKiBAcGFyYW0gW3Bvc10gLSBudW1iZXIgLSBwb3NpdGlvblxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUuYWRkSXRlbSA9IGZ1bmN0aW9uIChjb250ZW50LCBwb3MpIHtcclxuXHRcdHBvcyA9IHBvcyB8fCAwO1xyXG5cclxuXHRcdGlmICh0aGlzLnN0YXRlLmxhenlDb250ZW50KSB7XHJcblx0XHRcdHRoaXMuZG9tLiRjb250ZW50ID0gdGhpcy5kb20uJGNvbnRlbnQuYWRkKCQoY29udGVudCkpO1xyXG5cdFx0XHR0aGlzLnVwZGF0ZUl0ZW1TdGF0ZSh0cnVlKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIHdyYXAgY29udGVudFxyXG5cdFx0XHR2YXIgaXRlbSA9IHRoaXMuZmlsbEl0ZW0oY29udGVudCk7XHJcblx0XHRcdC8vIGlmIGNhcm91c2VsIGlzIGVtcHR5IHRoZW4gYXBwZW5kIGl0ZW1cclxuXHRcdFx0aWYgKHRoaXMuZG9tLiRvSXRlbXMubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdFx0dGhpcy5kb20uJHN0YWdlLmFwcGVuZChpdGVtKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBhcHBlbmQgaXRlbVxyXG5cdFx0XHRcdHZhciBpdCA9IHRoaXMuZG9tLiRvSXRlbXMuZXEocG9zKTtcclxuXHRcdFx0XHRpZiAocG9zICE9PSAtMSkge1xyXG5cdFx0XHRcdFx0aXQuYmVmb3JlKGl0ZW0pO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRpdC5hZnRlcihpdGVtKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gdXBkYXRlIGFuZCBjYWxjdWxhdGUgY2Fyb3VzZWxcclxuXHRcdFx0dGhpcy5yZWZyZXNoKCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiByZW1vdmVJdGVtIC0gUmVtb3ZlIGFuIEl0ZW1cclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICogQHBhcmFtIFtwb3NdIC0gbnVtYmVyIC0gcG9zaXRpb25cclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbiAocG9zKSB7XHJcblx0XHRpZiAodGhpcy5zdGF0ZS5sYXp5Q29udGVudCkge1xyXG5cdFx0XHR0aGlzLmRvbS4kY29udGVudC5zcGxpY2UocG9zLCAxKTtcclxuXHRcdFx0dGhpcy51cGRhdGVJdGVtU3RhdGUodHJ1ZSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLmRvbS4kb0l0ZW1zLmVxKHBvcykucmVtb3ZlKCk7XHJcblx0XHRcdHRoaXMucmVmcmVzaCgpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogYWRkQ3VzdG9tRXZlbnRzXHJcbiAgKiBAZGVzYyBBZGQgY3VzdG9tIGV2ZW50cyBieSBqUXVlcnkgLm9uIG1ldGhvZFxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5hZGRDdXN0b21FdmVudHMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy5lLm5leHQgPSAoZnVuY3Rpb24gKGUsIHMpIHtcclxuXHRcdFx0dGhpcy5uZXh0KHMpO1xyXG5cdFx0fSkuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMuZS5wcmV2ID0gKGZ1bmN0aW9uIChlLCBzKSB7XHJcblx0XHRcdHRoaXMucHJldihzKTtcclxuXHRcdH0pLmJpbmQodGhpcyk7XHJcblx0XHR0aGlzLmUuZ29UbyA9IChmdW5jdGlvbiAoZSwgcCwgcykge1xyXG5cdFx0XHR0aGlzLmdvVG8ocCwgcyk7XHJcblx0XHR9KS5iaW5kKHRoaXMpO1xyXG5cdFx0dGhpcy5lLmp1bXBUbyA9IChmdW5jdGlvbiAoZSwgcCkge1xyXG5cdFx0XHR0aGlzLmp1bXBUbyhwKTtcclxuXHRcdH0pLmJpbmQodGhpcyk7XHJcblx0XHR0aGlzLmUuYWRkSXRlbSA9IChmdW5jdGlvbiAoZSwgYywgcCkge1xyXG5cdFx0XHR0aGlzLmFkZEl0ZW0oYywgcCk7XHJcblx0XHR9KS5iaW5kKHRoaXMpO1xyXG5cdFx0dGhpcy5lLnJlbW92ZUl0ZW0gPSAoZnVuY3Rpb24gKGUsIHApIHtcclxuXHRcdFx0dGhpcy5yZW1vdmVJdGVtKHApO1xyXG5cdFx0fSkuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMuZS5yZWZyZXNoID0gKGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdHRoaXMucmVmcmVzaCgpO1xyXG5cdFx0fSkuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMuZS5kZXN0cm95ID0gKGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdHRoaXMuZGVzdHJveSgpO1xyXG5cdFx0fSkuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMuZS5hdXRvSGVpZ2h0ID0gKGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdHRoaXMuYXV0b0hlaWdodCh0cnVlKTtcclxuXHRcdH0pLmJpbmQodGhpcyk7XHJcblx0XHR0aGlzLmUuc3RvcCA9IChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHRoaXMuc3RvcCgpO1xyXG5cdFx0fSkuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMuZS5wbGF5ID0gKGZ1bmN0aW9uIChlLCB0LCBzKSB7XHJcblx0XHRcdHRoaXMucGxheSh0LCBzKTtcclxuXHRcdH0pLmJpbmQodGhpcyk7XHJcblx0XHR0aGlzLmUuaW5zZXJ0Q29udGVudCA9IChmdW5jdGlvbiAoZSwgZCkge1xyXG5cdFx0XHR0aGlzLmluc2VydENvbnRlbnQoZCk7XHJcblx0XHR9KS5iaW5kKHRoaXMpO1xyXG5cclxuXHRcdHRoaXMuZG9tLiRlbC5vbignbmV4dC5vd2wnLCB0aGlzLmUubmV4dCk7XHJcblx0XHR0aGlzLmRvbS4kZWwub24oJ3ByZXYub3dsJywgdGhpcy5lLnByZXYpO1xyXG5cdFx0dGhpcy5kb20uJGVsLm9uKCdnb1RvLm93bCcsIHRoaXMuZS5nb1RvKTtcclxuXHRcdHRoaXMuZG9tLiRlbC5vbignanVtcFRvLm93bCcsIHRoaXMuZS5qdW1wVG8pO1xyXG5cdFx0dGhpcy5kb20uJGVsLm9uKCdhZGRJdGVtLm93bCcsIHRoaXMuZS5hZGRJdGVtKTtcclxuXHRcdHRoaXMuZG9tLiRlbC5vbigncmVtb3ZlSXRlbS5vd2wnLCB0aGlzLmUucmVtb3ZlSXRlbSk7XHJcblx0XHR0aGlzLmRvbS4kZWwub24oJ2Rlc3Ryb3kub3dsJywgdGhpcy5lLmRlc3Ryb3kpO1xyXG5cdFx0dGhpcy5kb20uJGVsLm9uKCdyZWZyZXNoLm93bCcsIHRoaXMuZS5yZWZyZXNoKTtcclxuXHRcdHRoaXMuZG9tLiRlbC5vbignYXV0b0hlaWdodC5vd2wnLCB0aGlzLmUuYXV0b0hlaWdodCk7XHJcblx0XHR0aGlzLmRvbS4kZWwub24oJ3BsYXkub3dsJywgdGhpcy5lLnBsYXkpO1xyXG5cdFx0dGhpcy5kb20uJGVsLm9uKCdzdG9wLm93bCcsIHRoaXMuZS5zdG9wKTtcclxuXHRcdHRoaXMuZG9tLiRlbC5vbignc3RvcFZpZGVvLm93bCcsIHRoaXMuZS5zdG9wKTtcclxuXHRcdHRoaXMuZG9tLiRlbC5vbignaW5zZXJ0Q29udGVudC5vd2wnLCB0aGlzLmUuaW5zZXJ0Q29udGVudCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBvblxyXG4gICogQGRlc2MgT24gbWV0aG9kIGZvciBhZGRpbmcgaW50ZXJuYWwgZXZlbnRzXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGVsZW1lbnQsIGV2ZW50LCBsaXN0ZW5lciwgY2FwdHVyZSkge1xyXG5cclxuXHRcdGlmIChlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcclxuXHRcdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgY2FwdHVyZSk7XHJcblx0XHR9IGVsc2UgaWYgKGVsZW1lbnQuYXR0YWNoRXZlbnQpIHtcclxuXHRcdFx0ZWxlbWVudC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIG9mZlxyXG4gICogQGRlc2MgT2ZmIG1ldGhvZCBmb3IgcmVtb3ZpbmcgaW50ZXJuYWwgZXZlbnRzXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIChlbGVtZW50LCBldmVudCwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcclxuXHRcdGlmIChlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcclxuXHRcdFx0ZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgY2FwdHVyZSk7XHJcblx0XHR9IGVsc2UgaWYgKGVsZW1lbnQuZGV0YWNoRXZlbnQpIHtcclxuXHRcdFx0ZWxlbWVudC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIGZpcmVDYWxsYmFja1xyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKiBAcGFyYW0gZXZlbnQgLSBzdHJpbmcgLSBldmVudCBuYW1lXHJcbiAgKiBAcGFyYW0gZGF0YSAtIG9iamVjdCAtIGFkZGl0aW9uYWwgb3B0aW9ucyAtIHRvIGRvXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5maXJlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQsIGRhdGEpIHtcclxuXHRcdGlmICghdGhpcy5vcHRpb25zLmNhbGxiYWNrcykge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuZG9tLmVsLmRpc3BhdGNoRXZlbnQpIHtcclxuXHJcblx0XHRcdC8vIGRpc3BhdGNoIGV2ZW50XHJcblx0XHRcdHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcclxuXHJcblx0XHRcdC8vZXZ0LmluaXRFdmVudChldmVudCwgZmFsc2UsIHRydWUgKTtcclxuXHRcdFx0ZXZ0LmluaXRDdXN0b21FdmVudChldmVudCwgdHJ1ZSwgdHJ1ZSwgZGF0YSk7XHJcblx0XHRcdHJldHVybiB0aGlzLmRvbS5lbC5kaXNwYXRjaEV2ZW50KGV2dCk7XHJcblx0XHR9IGVsc2UgaWYgKCF0aGlzLmRvbS5lbC5kaXNwYXRjaEV2ZW50KSB7XHJcblxyXG5cdFx0XHQvL1x0VGhlcmUgaXMgbm8gY2xlYW4gc29sdXRpb24gZm9yIGN1c3RvbSBldmVudHMgbmFtZSBpbiA8PUlFOFxyXG5cdFx0XHQvL1x0QnV0IGlmIHlvdSBrbm93IGJldHRlciB3YXksIHBsZWFzZSBsZXQgbWUga25vdyA6KVxyXG5cdFx0XHRyZXR1cm4gdGhpcy5kb20uJGVsLnRyaWdnZXIoZXZlbnQpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogd2F0Y2hWaXNpYmlsaXR5XHJcbiAgKiBAZGVzYyBjaGVjayBpZiBlbCBpcyB2aXNpYmxlIC0gaGFuZHkgaWYgT3dsIGlzIGluc2lkZSBoaWRkZW4gY29udGVudCAodGFicyBldGMuKVxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS53YXRjaFZpc2liaWxpdHkgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Ly8gdGVzdCBvbiB6ZXB0b1xyXG5cdFx0aWYgKCFpc0VsVmlzaWJsZSh0aGlzLmRvbS5lbCkpIHtcclxuXHRcdFx0dGhpcy5kb20uJGVsLmFkZENsYXNzKCdvd2wtaGlkZGVuJyk7XHJcblx0XHRcdHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuZS5fY2hlY2tWaXNpYmlsZSk7XHJcblx0XHRcdHRoaXMuZS5fY2hlY2tWaXNpYmlsZSA9IHdpbmRvdy5zZXRJbnRlcnZhbChjaGVja1Zpc2libGUuYmluZCh0aGlzKSwgNTAwKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBpc0VsVmlzaWJsZShlbCkge1xyXG5cdFx0XHRyZXR1cm4gZWwub2Zmc2V0V2lkdGggPiAwICYmIGVsLm9mZnNldEhlaWdodCA+IDA7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gY2hlY2tWaXNpYmxlKCkge1xyXG5cdFx0XHRpZiAoaXNFbFZpc2libGUodGhpcy5kb20uZWwpKSB7XHJcblx0XHRcdFx0dGhpcy5kb20uJGVsLnJlbW92ZUNsYXNzKCdvd2wtaGlkZGVuJyk7XHJcblx0XHRcdFx0dGhpcy5yZWZyZXNoKCk7XHJcblx0XHRcdFx0d2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5lLl9jaGVja1Zpc2liaWxlKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogb25DaGFuZ2VcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUub25DaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0aWYgKCF0aGlzLnN0YXRlLmlzVG91Y2ggJiYgIXRoaXMuc3RhdGUuYnlwYXNzICYmICF0aGlzLnN0YXRlLnJlc3BvbnNpdmUpIHtcclxuXHJcblx0XHRcdGlmICh0aGlzLm9wdGlvbnMubmF2IHx8IHRoaXMub3B0aW9ucy5kb3RzKSB7XHJcblx0XHRcdFx0dGhpcy51cGRhdGVDb250cm9scygpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMuYXV0b0hlaWdodCgpO1xyXG5cclxuXHRcdFx0dGhpcy5maXJlQ2FsbGJhY2soJ29uQ2hhbmdlU3RhdGUnKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIXRoaXMuc3RhdGUuaXNUb3VjaCAmJiAhdGhpcy5zdGF0ZS5ieXBhc3MpIHtcclxuXHRcdFx0Ly8gc2V0IFN0YXR1cyB0byBkb1xyXG5cdFx0XHR0aGlzLnN0b3JlSW5mbygpO1xyXG5cclxuXHRcdFx0Ly8gc3RvcFZpZGVvXHJcblx0XHRcdGlmICh0aGlzLnN0YXRlLnZpZGVvUGxheSkge1xyXG5cdFx0XHRcdHRoaXMuc3RvcFZpZGVvKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIHN0b3JlSW5mb1xyXG4gICogc3RvcmUgYmFzaWMgaW5mb3JtYXRpb24gYWJvdXQgY3VycmVudCBzdGF0ZXNcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUuc3RvcmVJbmZvID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyIGN1cnJlbnRQb3NpdGlvbiA9IHRoaXMuc3RhdGUubGF6eUNvbnRlbnQgPyB0aGlzLnBvcy5sY0N1cnJlbnRBYnMgfHwgMCA6IHRoaXMucG9zLmN1cnJlbnQ7XHJcblx0XHR2YXIgYWxsSXRlbXMgPSB0aGlzLnN0YXRlLmxhenlDb250ZW50ID8gdGhpcy5kb20uJGNvbnRlbnQubGVuZ3RoIC0gMSA6IHRoaXMubnVtLm9JdGVtcztcclxuXHJcblx0XHR0aGlzLmluZm8gPSB7XHJcblx0XHRcdGl0ZW1zOiB0aGlzLm9wdGlvbnMuaXRlbXMsXHJcblx0XHRcdGFsbEl0ZW1zOiBhbGxJdGVtcyxcclxuXHRcdFx0Y3VycmVudFBvc2l0aW9uOiBjdXJyZW50UG9zaXRpb24sXHJcblx0XHRcdGN1cnJlbnRQYWdlOiB0aGlzLnBvcy5jdXJyZW50UGFnZSxcclxuXHRcdFx0YWxsUGFnZXM6IHRoaXMubnVtLmFsbFBhZ2VzLFxyXG5cdFx0XHRhdXRvcGxheTogdGhpcy5zdGF0ZS5hdXRvcGxheSxcclxuXHRcdFx0d2luZG93V2lkdGg6IHRoaXMud2lkdGgud2luZG93LFxyXG5cdFx0XHRlbFdpZHRoOiB0aGlzLndpZHRoLmVsLFxyXG5cdFx0XHRicmVha3BvaW50OiB0aGlzLm51bS5icmVha3BvaW50XHJcblx0XHR9O1xyXG5cclxuXHRcdGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmluZm8gPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0dGhpcy5vcHRpb25zLmluZm8uYXBwbHkodGhpcywgW3RoaXMuaW5mbywgdGhpcy5kb20uZWxdKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIGF1dG9IZWlnaHRcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUuYXV0b0hlaWdodCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG5cdFx0aWYgKHRoaXMub3B0aW9ucy5hdXRvSGVpZ2h0ICE9PSB0cnVlICYmIGNhbGxiYWNrICE9PSB0cnVlKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdGlmICghdGhpcy5kb20uJG9TdGFnZS5oYXNDbGFzcyh0aGlzLm9wdGlvbnMuYXV0b0hlaWdodENsYXNzKSkge1xyXG5cdFx0XHR0aGlzLmRvbS4kb1N0YWdlLmFkZENsYXNzKHRoaXMub3B0aW9ucy5hdXRvSGVpZ2h0Q2xhc3MpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBsb2FkZWQgPSB0aGlzLmRvbS4kaXRlbXMuZXEodGhpcy5wb3MuY3VycmVudEFicyk7XHJcblx0XHR2YXIgc3RhZ2UgPSB0aGlzLmRvbS4kb1N0YWdlO1xyXG5cdFx0dmFyIGl0ZXJhdGlvbnMgPSAwO1xyXG5cclxuXHRcdHZhciBpc0xvYWRlZCA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGl0ZXJhdGlvbnMgKz0gMTtcclxuXHRcdFx0aWYgKGxvYWRlZC5kYXRhKCdvd2wtaXRlbScpLmxvYWRlZCkge1xyXG5cdFx0XHRcdHN0YWdlLmhlaWdodChsb2FkZWQuaGVpZ2h0KCkgKyAncHgnKTtcclxuXHRcdFx0XHRjbGVhckludGVydmFsKGlzTG9hZGVkKTtcclxuXHRcdFx0fSBlbHNlIGlmIChpdGVyYXRpb25zID09PSA1MDApIHtcclxuXHRcdFx0XHRjbGVhckludGVydmFsKGlzTG9hZGVkKTtcclxuXHRcdFx0fVxyXG5cdFx0fSwgMTAwKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIHByZWxvYWRBdXRvV2lkdGhJbWFnZXNcclxuICAqIEBkZXNjIHN0aWxsIHRvIHRlc3RcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUucHJlbG9hZEF1dG9XaWR0aEltYWdlcyA9IGZ1bmN0aW9uIChpbWdzKSB7XHJcblx0XHR2YXIgbG9hZGVkID0gMDtcclxuXHRcdHZhciB0aGF0ID0gdGhpcztcclxuXHRcdGltZ3MuZWFjaChmdW5jdGlvbiAoaSwgZWwpIHtcclxuXHRcdFx0dmFyICRlbCA9ICQoZWwpO1xyXG5cdFx0XHR2YXIgaW1nID0gbmV3IEltYWdlKCk7XHJcblxyXG5cdFx0XHRpbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdGxvYWRlZCsrO1xyXG5cdFx0XHRcdCRlbC5hdHRyKCdzcmMnLCBpbWcuc3JjKTtcclxuXHRcdFx0XHQkZWwuY3NzKCdvcGFjaXR5JywgMSk7XHJcblx0XHRcdFx0aWYgKGxvYWRlZCA+PSBpbWdzLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0dGhhdC5zdGF0ZS5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0dGhhdC5pbml0KCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0aW1nLnNyYyA9ICRlbC5hdHRyKCdzcmMnKSB8fCAkZWwuYXR0cignZGF0YS1zcmMnKSB8fCAkZWwuYXR0cignZGF0YS1zcmMtcmV0aW5hJyk7O1xyXG5cdFx0fSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBsYXp5TG9hZFxyXG4gICogQGRlc2MgbGF6eUxvYWQgaW1hZ2VzXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLmxhenlMb2FkID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyIGF0dHIgPSBpc1JldGluYSgpID8gJ2RhdGEtc3JjLXJldGluYScgOiAnZGF0YS1zcmMnO1xyXG5cdFx0dmFyIHNyYywgaW1nLCBpO1xyXG5cclxuXHRcdGZvciAoaSA9IDA7IGkgPCB0aGlzLm51bS5pdGVtczsgaSsrKSB7XHJcblx0XHRcdHZhciAkaXRlbSA9IHRoaXMuZG9tLiRpdGVtcy5lcShpKTtcclxuXHJcblx0XHRcdGlmICgkaXRlbS5kYXRhKCdvd2wtaXRlbScpLmN1cnJlbnQgPT09IHRydWUgJiYgJGl0ZW0uZGF0YSgnb3dsLWl0ZW0nKS5sb2FkZWQgPT09IGZhbHNlKSB7XHJcblx0XHRcdFx0aW1nID0gJGl0ZW0uZmluZCgnLm93bC1sYXp5Jyk7XHJcblx0XHRcdFx0c3JjID0gaW1nLmF0dHIoYXR0cik7XHJcblx0XHRcdFx0c3JjID0gc3JjIHx8IGltZy5hdHRyKCdkYXRhLXNyYycpO1xyXG5cdFx0XHRcdGlmIChzcmMpIHtcclxuXHRcdFx0XHRcdGltZy5jc3MoJ29wYWNpdHknLCAnMCcpO1xyXG5cdFx0XHRcdFx0dGhpcy5wcmVsb2FkKGltZywgJGl0ZW0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogcHJlbG9hZFxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5wcmVsb2FkID0gZnVuY3Rpb24gKGltYWdlcywgJGl0ZW0pIHtcclxuXHRcdHZhciB0aGF0ID0gdGhpczsgLy8gZml4IHRoaXMgbGF0ZXJcclxuXHJcblx0XHRpbWFnZXMuZWFjaChmdW5jdGlvbiAoaSwgZWwpIHtcclxuXHRcdFx0dmFyICRlbCA9ICQoZWwpO1xyXG5cdFx0XHR2YXIgaW1nID0gbmV3IEltYWdlKCk7XHJcblxyXG5cdFx0XHRpbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0XHQkaXRlbS5kYXRhKCdvd2wtaXRlbScpLmxvYWRlZCA9IHRydWU7XHJcblx0XHRcdFx0aWYgKCRlbC5pcygnaW1nJykpIHtcclxuXHRcdFx0XHRcdCRlbC5hdHRyKCdzcmMnLCBpbWcuc3JjKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0JGVsLmNzcygnYmFja2dyb3VuZC1pbWFnZScsICd1cmwoJyArIGltZy5zcmMgKyAnKScpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0JGVsLmNzcygnb3BhY2l0eScsIDEpO1xyXG5cdFx0XHRcdHRoYXQuZmlyZUNhbGxiYWNrKCdvbkxhenlMb2FkZWQnKTtcclxuXHRcdFx0fTtcclxuXHRcdFx0aW1nLnNyYyA9ICRlbC5hdHRyKCdkYXRhLXNyYycpIHx8ICRlbC5hdHRyKCdkYXRhLXNyYy1yZXRpbmEnKTtcclxuXHRcdH0pO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogYW5pbWF0ZVxyXG4gICogQHNpbmNlIDIuMC4wXHJcbiAgKi9cclxuXHJcblx0T3dsLnByb3RvdHlwZS5hbmltYXRlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciBwcmV2SXRlbSA9IHRoaXMuZG9tLiRpdGVtcy5lcSh0aGlzLnBvcy5wcmV2KSxcclxuXHRcdCAgICBwcmV2UG9zID0gTWF0aC5hYnMocHJldkl0ZW0uZGF0YSgnb3dsLWl0ZW0nKS53aWR0aCkgKiB0aGlzLnBvcy5wcmV2LFxyXG5cdFx0ICAgIGN1cnJlbnRJdGVtID0gdGhpcy5kb20uJGl0ZW1zLmVxKHRoaXMucG9zLmN1cnJlbnRBYnMpLFxyXG5cdFx0ICAgIGN1cnJlbnRQb3MgPSBNYXRoLmFicyhjdXJyZW50SXRlbS5kYXRhKCdvd2wtaXRlbScpLndpZHRoKSAqIHRoaXMucG9zLmN1cnJlbnRBYnM7XHJcblxyXG5cdFx0aWYgKHRoaXMucG9zLmN1cnJlbnRBYnMgPT09IHRoaXMucG9zLnByZXYpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBwb3MgPSBjdXJyZW50UG9zIC0gcHJldlBvcztcclxuXHRcdHZhciB0SW4gPSB0aGlzLm9wdGlvbnMuYW5pbWF0ZUluO1xyXG5cdFx0dmFyIHRPdXQgPSB0aGlzLm9wdGlvbnMuYW5pbWF0ZU91dDtcclxuXHRcdHZhciB0aGF0ID0gdGhpcztcclxuXHJcblx0XHRyZW1vdmVTdHlsZXMgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdCQodGhpcykuY3NzKHtcclxuXHRcdFx0XHRcImxlZnRcIjogXCJcIlxyXG5cdFx0XHR9KS5yZW1vdmVDbGFzcygnYW5pbWF0ZWQgb3dsLWFuaW1hdGVkLW91dCBvd2wtYW5pbWF0ZWQtaW4nKS5yZW1vdmVDbGFzcyh0SW4pLnJlbW92ZUNsYXNzKHRPdXQpO1xyXG5cclxuXHRcdFx0dGhhdC50cmFuc2l0aW9uRW5kKCk7XHJcblx0XHR9O1xyXG5cclxuXHRcdGlmICh0T3V0KSB7XHJcblx0XHRcdHByZXZJdGVtLmNzcyh7XHJcblx0XHRcdFx0XCJsZWZ0XCI6IHBvcyArIFwicHhcIlxyXG5cdFx0XHR9KS5hZGRDbGFzcygnYW5pbWF0ZWQgb3dsLWFuaW1hdGVkLW91dCAnICsgdE91dCkub25lKCd3ZWJraXRBbmltYXRpb25FbmQgbW96QW5pbWF0aW9uRW5kIE1TQW5pbWF0aW9uRW5kIG9hbmltYXRpb25lbmQgYW5pbWF0aW9uZW5kJywgcmVtb3ZlU3R5bGVzKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodEluKSB7XHJcblx0XHRcdGN1cnJlbnRJdGVtLmFkZENsYXNzKCdhbmltYXRlZCBvd2wtYW5pbWF0ZWQtaW4gJyArIHRJbikub25lKCd3ZWJraXRBbmltYXRpb25FbmQgbW96QW5pbWF0aW9uRW5kIE1TQW5pbWF0aW9uRW5kIG9hbmltYXRpb25lbmQgYW5pbWF0aW9uZW5kJywgcmVtb3ZlU3R5bGVzKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuICAqIGRlc3Ryb3lcclxuICAqIEBkZXNjIFJlbW92ZSBPd2wgc3RydWN0dXJlIGFuZCBldmVudHMgOihcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLmUuX2F1dG9wbGF5KTtcclxuXHJcblx0XHRpZiAodGhpcy5kb20uJGVsLmhhc0NsYXNzKHRoaXMub3B0aW9ucy50aGVtZUNsYXNzKSkge1xyXG5cdFx0XHR0aGlzLmRvbS4kZWwucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLnRoZW1lQ2xhc3MpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZSAhPT0gZmFsc2UpIHtcclxuXHRcdFx0dGhpcy5vZmYod2luZG93LCAncmVzaXplJywgdGhpcy5lLl9yZXNpemVyKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy50cmFuc2l0aW9uRW5kVmVuZG9yKSB7XHJcblx0XHRcdHRoaXMub2ZmKHRoaXMuZG9tLnN0YWdlLCB0aGlzLnRyYW5zaXRpb25FbmRWZW5kb3IsIHRoaXMuZS5fdHJhbnNpdGlvbkVuZCk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMub3B0aW9ucy5tb3VzZURyYWcgfHwgdGhpcy5vcHRpb25zLnRvdWNoRHJhZykge1xyXG5cdFx0XHR0aGlzLm9mZih0aGlzLmRvbS5zdGFnZSwgdGhpcy5kcmFnVHlwZVswXSwgdGhpcy5lLl9vbkRyYWdTdGFydCk7XHJcblx0XHRcdGlmICh0aGlzLm9wdGlvbnMubW91c2VEcmFnKSB7XHJcblx0XHRcdFx0dGhpcy5vZmYoZG9jdW1lbnQsIHRoaXMuZHJhZ1R5cGVbM10sIHRoaXMuZS5fb25EcmFnU3RhcnQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICh0aGlzLm9wdGlvbnMubW91c2VEcmFnKSB7XHJcblx0XHRcdFx0dGhpcy5kb20uJHN0YWdlLm9mZignZHJhZ3N0YXJ0JywgZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHRoaXMuZG9tLnN0YWdlLm9uc2VsZWN0c3RhcnQgPSBmdW5jdGlvbiAoKSB7fTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLm9wdGlvbnMuVVJMaGFzaExpc3RlbmVyKSB7XHJcblx0XHRcdHRoaXMub2ZmKHdpbmRvdywgJ2hhc2hjaGFuZ2UnLCB0aGlzLmUuX2dvVG9IYXNoKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmRvbS4kZWwub2ZmKCduZXh0Lm93bCcsIHRoaXMuZS5uZXh0KTtcclxuXHRcdHRoaXMuZG9tLiRlbC5vZmYoJ3ByZXYub3dsJywgdGhpcy5lLnByZXYpO1xyXG5cdFx0dGhpcy5kb20uJGVsLm9mZignZ29Uby5vd2wnLCB0aGlzLmUuZ29Ubyk7XHJcblx0XHR0aGlzLmRvbS4kZWwub2ZmKCdqdW1wVG8ub3dsJywgdGhpcy5lLmp1bXBUbyk7XHJcblx0XHR0aGlzLmRvbS4kZWwub2ZmKCdhZGRJdGVtLm93bCcsIHRoaXMuZS5hZGRJdGVtKTtcclxuXHRcdHRoaXMuZG9tLiRlbC5vZmYoJ3JlbW92ZUl0ZW0ub3dsJywgdGhpcy5lLnJlbW92ZUl0ZW0pO1xyXG5cdFx0dGhpcy5kb20uJGVsLm9mZigncmVmcmVzaC5vd2wnLCB0aGlzLmUucmVmcmVzaCk7XHJcblx0XHR0aGlzLmRvbS4kZWwub2ZmKCdhdXRvSGVpZ2h0Lm93bCcsIHRoaXMuZS5hdXRvSGVpZ2h0KTtcclxuXHRcdHRoaXMuZG9tLiRlbC5vZmYoJ3BsYXkub3dsJywgdGhpcy5lLnBsYXkpO1xyXG5cdFx0dGhpcy5kb20uJGVsLm9mZignc3RvcC5vd2wnLCB0aGlzLmUuc3RvcCk7XHJcblx0XHR0aGlzLmRvbS4kZWwub2ZmKCdzdG9wVmlkZW8ub3dsJywgdGhpcy5lLnN0b3ApO1xyXG5cdFx0dGhpcy5kb20uJHN0YWdlLm9mZignY2xpY2snLCB0aGlzLmUuX3BsYXlWaWRlbyk7XHJcblxyXG5cdFx0aWYgKHRoaXMuZG9tLiRjYyAhPT0gbnVsbCkge1xyXG5cdFx0XHR0aGlzLmRvbS4kY2MucmVtb3ZlKCk7XHJcblx0XHR9XHJcblx0XHRpZiAodGhpcy5kb20uJGNJdGVtcyAhPT0gbnVsbCkge1xyXG5cdFx0XHR0aGlzLmRvbS4kY0l0ZW1zLnJlbW92ZSgpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5lID0gbnVsbDtcclxuXHRcdHRoaXMuZG9tLiRlbC5kYXRhKCdvd2xDYXJvdXNlbCcsIG51bGwpO1xyXG5cdFx0ZGVsZXRlIHRoaXMuZG9tLmVsLm93bENhcm91c2VsO1xyXG5cclxuXHRcdHRoaXMuZG9tLiRzdGFnZS51bndyYXAoKTtcclxuXHRcdHRoaXMuZG9tLiRpdGVtcy51bndyYXAoKTtcclxuXHRcdHRoaXMuZG9tLiRpdGVtcy5jb250ZW50cygpLnVud3JhcCgpO1xyXG5cdFx0dGhpcy5kb20gPSBudWxsO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG4gICogT3BlcnRhdG9ycyBcclxuICAqIEBkZXNjIFVzZWQgdG8gY2FsY3VsYXRlIFJUTFxyXG4gICogQHBhcmFtIFthXSAtIE51bWJlciAtIGxlZnQgc2lkZVxyXG4gICogQHBhcmFtIFtvXSAtIFN0cmluZyAtIG9wZXJhdG9yIFxyXG4gICogQHBhcmFtIFtiXSAtIE51bWJlciAtIHJpZ2h0IHNpZGVcclxuICAqIEBzaW5jZSAyLjAuMFxyXG4gICovXHJcblxyXG5cdE93bC5wcm90b3R5cGUub3AgPSBmdW5jdGlvbiAoYSwgbywgYikge1xyXG5cdFx0dmFyIHJ0bCA9IHRoaXMub3B0aW9ucy5ydGw7XHJcblx0XHRzd2l0Y2ggKG8pIHtcclxuXHRcdFx0Y2FzZSAnPCc6XHJcblx0XHRcdFx0cmV0dXJuIHJ0bCA/IGEgPiBiIDogYSA8IGI7XHJcblx0XHRcdGNhc2UgJz4nOlxyXG5cdFx0XHRcdHJldHVybiBydGwgPyBhIDwgYiA6IGEgPiBiO1xyXG5cdFx0XHRjYXNlICc+PSc6XHJcblx0XHRcdFx0cmV0dXJuIHJ0bCA/IGEgPD0gYiA6IGEgPj0gYjtcclxuXHRcdFx0Y2FzZSAnPD0nOlxyXG5cdFx0XHRcdHJldHVybiBydGwgPyBhID49IGIgOiBhIDw9IGI7XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcbiAgKiBPcGVydGF0b3JzIFxyXG4gICogQGRlc2MgVXNlZCB0byBjYWxjdWxhdGUgUlRMXHJcbiAgKiBAc2luY2UgMi4wLjBcclxuICAqL1xyXG5cclxuXHRPd2wucHJvdG90eXBlLmJyb3dzZXJTdXBwb3J0ID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0dGhpcy5zdXBwb3J0M2QgPSBpc1BlcnNwZWN0aXZlKCk7XHJcblxyXG5cdFx0aWYgKHRoaXMuc3VwcG9ydDNkKSB7XHJcblx0XHRcdHRoaXMudHJhbnNmb3JtVmVuZG9yID0gaXNUcmFuc2Zvcm0oKTtcclxuXHJcblx0XHRcdC8vIHRha2UgdHJhbnNpdGlvbmVuZCBldmVudCBuYW1lIGJ5IGRldGVjdGluZyB0cmFuc2l0aW9uXHJcblx0XHRcdHZhciBlbmRWZW5kb3JzID0gWyd0cmFuc2l0aW9uZW5kJywgJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCAndHJhbnNpdGlvbmVuZCcsICdvVHJhbnNpdGlvbkVuZCddO1xyXG5cdFx0XHR0aGlzLnRyYW5zaXRpb25FbmRWZW5kb3IgPSBlbmRWZW5kb3JzW2lzVHJhbnNpdGlvbigpXTtcclxuXHJcblx0XHRcdC8vIHRha2UgdmVuZG9yIG5hbWUgZnJvbSB0cmFuc2Zvcm0gbmFtZVxyXG5cdFx0XHR0aGlzLnZlbmRvck5hbWUgPSB0aGlzLnRyYW5zZm9ybVZlbmRvci5yZXBsYWNlKC9UcmFuc2Zvcm0vaSwgJycpO1xyXG5cdFx0XHR0aGlzLnZlbmRvck5hbWUgPSB0aGlzLnZlbmRvck5hbWUgIT09ICcnID8gJy0nICsgdGhpcy52ZW5kb3JOYW1lLnRvTG93ZXJDYXNlKCkgKyAnLScgOiAnJztcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnN0YXRlLm9yaWVudGF0aW9uID0gd2luZG93Lm9yaWVudGF0aW9uO1xyXG5cdH07XHJcblxyXG5cdC8vIFBpdmF0ZSBtZXRob2RzXHJcblxyXG5cdC8vIENTUyBkZXRlY3Rpb247XHJcblx0ZnVuY3Rpb24gaXNTdHlsZVN1cHBvcnRlZChhcnJheSkge1xyXG5cdFx0dmFyIHAsXHJcblx0XHQgICAgcyxcclxuXHRcdCAgICBmYWtlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXHJcblx0XHQgICAgbGlzdCA9IGFycmF5O1xyXG5cdFx0Zm9yIChwIGluIGxpc3QpIHtcclxuXHRcdFx0cyA9IGxpc3RbcF07XHJcblx0XHRcdGlmICh0eXBlb2YgZmFrZS5zdHlsZVtzXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRmYWtlID0gbnVsbDtcclxuXHRcdFx0XHRyZXR1cm4gW3MsIHBdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gW2ZhbHNlXTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGlzVHJhbnNpdGlvbigpIHtcclxuXHRcdHJldHVybiBpc1N0eWxlU3VwcG9ydGVkKFsndHJhbnNpdGlvbicsICdXZWJraXRUcmFuc2l0aW9uJywgJ01velRyYW5zaXRpb24nLCAnT1RyYW5zaXRpb24nXSlbMV07XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBpc1RyYW5zZm9ybSgpIHtcclxuXHRcdHJldHVybiBpc1N0eWxlU3VwcG9ydGVkKFsndHJhbnNmb3JtJywgJ1dlYmtpdFRyYW5zZm9ybScsICdNb3pUcmFuc2Zvcm0nLCAnT1RyYW5zZm9ybScsICdtc1RyYW5zZm9ybSddKVswXTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGlzUGVyc3BlY3RpdmUoKSB7XHJcblx0XHRyZXR1cm4gaXNTdHlsZVN1cHBvcnRlZChbJ3BlcnNwZWN0aXZlJywgJ3dlYmtpdFBlcnNwZWN0aXZlJywgJ01velBlcnNwZWN0aXZlJywgJ09QZXJzcGVjdGl2ZScsICdNc1BlcnNwZWN0aXZlJ10pWzBdO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gaXNUb3VjaFN1cHBvcnQoKSB7XHJcblx0XHRyZXR1cm4gJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8ICEhbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHM7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBpc1RvdWNoU3VwcG9ydElFKCkge1xyXG5cdFx0cmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IubXNQb2ludGVyRW5hYmxlZDtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGlzUmV0aW5hKCkge1xyXG5cdFx0cmV0dXJuIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID4gMTtcclxuXHR9XHJcblxyXG5cdCQuZm4ub3dsQ2Fyb3VzZWwgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGlmICghJCh0aGlzKS5kYXRhKCdvd2xDYXJvdXNlbCcpKSB7XHJcblx0XHRcdFx0JCh0aGlzKS5kYXRhKCdvd2xDYXJvdXNlbCcsIG5ldyBPd2wodGhpcywgb3B0aW9ucykpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9O1xyXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XHJcblxyXG4vL2h0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Z1bmN0aW9uL2JpbmRcclxuLy9UaGUgYmluZCgpIG1ldGhvZCBjcmVhdGVzIGEgbmV3IGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLCBoYXMgaXRzIHRoaXMga2V5d29yZCBzZXQgdG8gdGhlIHByb3ZpZGVkIHZhbHVlLCB3aXRoIGEgZ2l2ZW4gc2VxdWVuY2Ugb2YgYXJndW1lbnRzIHByZWNlZGluZyBhbnkgcHJvdmlkZWQgd2hlbiB0aGUgbmV3IGZ1bmN0aW9uIGlzIGNhbGxlZC5cclxuXHJcbmlmICghRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHtcclxuXHRGdW5jdGlvbi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChvVGhpcykge1xyXG5cdFx0aWYgKHR5cGVvZiB0aGlzICE9PSAnZnVuY3Rpb24nKSB7XHJcblx0XHRcdC8vIGNsb3Nlc3QgdGhpbmcgcG9zc2libGUgdG8gdGhlIEVDTUFTY3JpcHQgNSBpbnRlcm5hbCBJc0NhbGxhYmxlIGZ1bmN0aW9uXHJcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIC0gd2hhdCBpcyB0cnlpbmcgdG8gYmUgYm91bmQgaXMgbm90IGNhbGxhYmxlJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGFBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcclxuXHRcdCAgICBmVG9CaW5kID0gdGhpcyxcclxuXHRcdCAgICBmTk9QID0gZnVuY3Rpb24gZk5PUCgpIHt9LFxyXG5cdFx0ICAgIGZCb3VuZCA9IGZ1bmN0aW9uIGZCb3VuZCgpIHtcclxuXHRcdFx0cmV0dXJuIGZUb0JpbmQuYXBwbHkodGhpcyBpbnN0YW5jZW9mIGZOT1AgJiYgb1RoaXMgPyB0aGlzIDogb1RoaXMsIGFBcmdzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XHJcblx0XHR9O1xyXG5cdFx0Zk5PUC5wcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcclxuXHRcdGZCb3VuZC5wcm90b3R5cGUgPSBuZXcgZk5PUCgpO1xyXG5cdFx0cmV0dXJuIGZCb3VuZDtcclxuXHR9O1xyXG59XHJcblxyXG59LHt9XX0se30sWzFdKVxyXG4iLCIvLyAgICAgWmVwdG8uanNcclxuLy8gICAgIChjKSAyMDEwLTIwMTQgVGhvbWFzIEZ1Y2hzXHJcbi8vICAgICBaZXB0by5qcyBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cclxuXHJcbi8vIFRoZSBmb2xsb3dpbmcgY29kZSBpcyBoZWF2aWx5IGluc3BpcmVkIGJ5IGpRdWVyeSdzICQuZm4uZGF0YSgpXHJcblxyXG47KGZ1bmN0aW9uKCQpe1xyXG4gIHZhciBkYXRhID0ge30sIGRhdGFBdHRyID0gJC5mbi5kYXRhLCBjYW1lbGl6ZSA9ICQuY2FtZWxDYXNlLFxyXG4gICAgZXhwID0gJC5leHBhbmRvID0gJ1plcHRvJyArICgrbmV3IERhdGUoKSksIGVtcHR5QXJyYXkgPSBbXVxyXG5cclxuICAvLyBHZXQgdmFsdWUgZnJvbSBub2RlOlxyXG4gIC8vIDEuIGZpcnN0IHRyeSBrZXkgYXMgZ2l2ZW4sXHJcbiAgLy8gMi4gdGhlbiB0cnkgY2FtZWxpemVkIGtleSxcclxuICAvLyAzLiBmYWxsIGJhY2sgdG8gcmVhZGluZyBcImRhdGEtKlwiIGF0dHJpYnV0ZS5cclxuICBmdW5jdGlvbiBnZXREYXRhKG5vZGUsIG5hbWUpIHtcclxuICAgIHZhciBpZCA9IG5vZGVbZXhwXSwgc3RvcmUgPSBpZCAmJiBkYXRhW2lkXVxyXG4gICAgaWYgKG5hbWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHN0b3JlIHx8IHNldERhdGEobm9kZSlcclxuICAgIGVsc2Uge1xyXG4gICAgICBpZiAoc3RvcmUpIHtcclxuICAgICAgICBpZiAobmFtZSBpbiBzdG9yZSkgcmV0dXJuIHN0b3JlW25hbWVdXHJcbiAgICAgICAgdmFyIGNhbWVsTmFtZSA9IGNhbWVsaXplKG5hbWUpXHJcbiAgICAgICAgaWYgKGNhbWVsTmFtZSBpbiBzdG9yZSkgcmV0dXJuIHN0b3JlW2NhbWVsTmFtZV1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZGF0YUF0dHIuY2FsbCgkKG5vZGUpLCBuYW1lKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gU3RvcmUgdmFsdWUgdW5kZXIgY2FtZWxpemVkIGtleSBvbiBub2RlXHJcbiAgZnVuY3Rpb24gc2V0RGF0YShub2RlLCBuYW1lLCB2YWx1ZSkge1xyXG4gICAgdmFyIGlkID0gbm9kZVtleHBdIHx8IChub2RlW2V4cF0gPSArKyQudXVpZCksXHJcbiAgICAgIHN0b3JlID0gZGF0YVtpZF0gfHwgKGRhdGFbaWRdID0gYXR0cmlidXRlRGF0YShub2RlKSlcclxuICAgIGlmIChuYW1lICE9PSB1bmRlZmluZWQpIHN0b3JlW2NhbWVsaXplKG5hbWUpXSA9IHZhbHVlXHJcbiAgICByZXR1cm4gc3RvcmVcclxuICB9XHJcblxyXG4gIC8vIFJlYWQgYWxsIFwiZGF0YS0qXCIgYXR0cmlidXRlcyBmcm9tIGEgbm9kZVxyXG4gIGZ1bmN0aW9uIGF0dHJpYnV0ZURhdGEobm9kZSkge1xyXG4gICAgdmFyIHN0b3JlID0ge31cclxuICAgICQuZWFjaChub2RlLmF0dHJpYnV0ZXMgfHwgZW1wdHlBcnJheSwgZnVuY3Rpb24oaSwgYXR0cil7XHJcbiAgICAgIGlmIChhdHRyLm5hbWUuaW5kZXhPZignZGF0YS0nKSA9PSAwKVxyXG4gICAgICAgIHN0b3JlW2NhbWVsaXplKGF0dHIubmFtZS5yZXBsYWNlKCdkYXRhLScsICcnKSldID1cclxuICAgICAgICAgICQuemVwdG8uZGVzZXJpYWxpemVWYWx1ZShhdHRyLnZhbHVlKVxyXG4gICAgfSlcclxuICAgIHJldHVybiBzdG9yZVxyXG4gIH1cclxuXHJcbiAgJC5mbi5kYXRhID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cclxuICAgICAgLy8gc2V0IG11bHRpcGxlIHZhbHVlcyB2aWEgb2JqZWN0XHJcbiAgICAgICQuaXNQbGFpbk9iamVjdChuYW1lKSA/XHJcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGksIG5vZGUpe1xyXG4gICAgICAgICAgJC5lYWNoKG5hbWUsIGZ1bmN0aW9uKGtleSwgdmFsdWUpeyBzZXREYXRhKG5vZGUsIGtleSwgdmFsdWUpIH0pXHJcbiAgICAgICAgfSkgOlxyXG4gICAgICAgIC8vIGdldCB2YWx1ZSBmcm9tIGZpcnN0IGVsZW1lbnRcclxuICAgICAgICB0aGlzLmxlbmd0aCA9PSAwID8gdW5kZWZpbmVkIDogZ2V0RGF0YSh0aGlzWzBdLCBuYW1lKSA6XHJcbiAgICAgIC8vIHNldCB2YWx1ZSBvbiBhbGwgZWxlbWVudHNcclxuICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCl7IHNldERhdGEodGhpcywgbmFtZSwgdmFsdWUpIH0pXHJcbiAgfVxyXG5cclxuICAkLmZuLnJlbW92ZURhdGEgPSBmdW5jdGlvbihuYW1lcykge1xyXG4gICAgaWYgKHR5cGVvZiBuYW1lcyA9PSAnc3RyaW5nJykgbmFtZXMgPSBuYW1lcy5zcGxpdCgvXFxzKy8pXHJcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgIHZhciBpZCA9IHRoaXNbZXhwXSwgc3RvcmUgPSBpZCAmJiBkYXRhW2lkXVxyXG4gICAgICBpZiAoc3RvcmUpICQuZWFjaChuYW1lcyB8fCBzdG9yZSwgZnVuY3Rpb24oa2V5KXtcclxuICAgICAgICBkZWxldGUgc3RvcmVbbmFtZXMgPyBjYW1lbGl6ZSh0aGlzKSA6IGtleV1cclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICAvLyBHZW5lcmF0ZSBleHRlbmRlZCBgcmVtb3ZlYCBhbmQgYGVtcHR5YCBmdW5jdGlvbnNcclxuICA7WydyZW1vdmUnLCAnZW1wdHknXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZE5hbWUpe1xyXG4gICAgdmFyIG9yaWdGbiA9ICQuZm5bbWV0aG9kTmFtZV1cclxuICAgICQuZm5bbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGVsZW1lbnRzID0gdGhpcy5maW5kKCcqJylcclxuICAgICAgaWYgKG1ldGhvZE5hbWUgPT09ICdyZW1vdmUnKSBlbGVtZW50cyA9IGVsZW1lbnRzLmFkZCh0aGlzKVxyXG4gICAgICBlbGVtZW50cy5yZW1vdmVEYXRhKClcclxuICAgICAgcmV0dXJuIG9yaWdGbi5jYWxsKHRoaXMpXHJcbiAgICB9XHJcbiAgfSlcclxufSkoWmVwdG8pIiwiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcbiAgICBpZigkKCcubWVyZ2UtYWNxdWlzdGlvbicpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBcdHZhciBGaXJzdENoYXJ0VHlwZSA9ICQoJyNjaGFydGRpdi1kZWFscycpLmF0dHIoJ2RhdGEtdHlwZScpLFxyXG4gICAgICAgIFx0XHRGaXJzdENoYXJ0Q29sb3IgPSAkKCcjY2hhcnRkaXYtZGVhbHMnKS5hdHRyKCdkYXRhLWNvbG9yJyksXHJcbiAgICAgICAgXHRcdFNlY29uZENoYXJ0VHlwZSA9ICQoJyNjaGFydGRpdi1yZWdpb24nKS5hdHRyKCdkYXRhLXR5cGUnKSxcclxuICAgICAgICBcdFx0U2Vjb25kQ2hhcnRDb2xvciA9ICQoJyNjaGFydGRpdi1yZWdpb24nKS5hdHRyKCdkYXRhLWNvbG9yJyksXHJcbiAgICAgICAgXHRcdFRoaXJkQ2hhcnRUeXBlID0gJCgnI2NoYXJ0ZGl2LXJlZ2lvbjInKS5hdHRyKCdkYXRhLXR5cGUnKSxcclxuICAgICAgICBcdFx0VGhpcmRDaGFydENvbG9yID0gJCgnI2NoYXJ0ZGl2LXJlZ2lvbjInKS5hdHRyKCdkYXRhLWNvbG9yJyksXHJcbiAgICAgICAgXHRcdEZvdXJ0aENoYXJ0VHlwZSA9ICQoJyNjaGFydGRpdi10eXBlJykuYXR0cignZGF0YS10eXBlJyksXHJcbiAgICAgICAgXHRcdEZvdXJ0aENoYXJ0Q29sb3IgPSAkKCcjY2hhcnRkaXYtdHlwZScpLmF0dHIoJ2RhdGEtY29sb3InKTtcclxuICAgICAgICAgICAgQW1DaGFydHMucmVhZHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGFydCA9IG5ldyBBbUNoYXJ0cy5BbVNlcmlhbENoYXJ0KCk7XHJcbiAgICAgICAgICAgIGNoYXJ0LmRhdGFQcm92aWRlciA9IGdlbmVyYXRlQ2hhcnREYXRhU2l6ZVJhbmdlKCk7XHJcbiAgICAgICAgICAgIGNoYXJ0LmNhdGVnb3J5RmllbGQgPSBcInJhbmdlXCI7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZUF4aXMxID0gbmV3IEFtQ2hhcnRzLlZhbHVlQXhpcygpO1xyXG4gICAgICAgICAgICB2YWx1ZUF4aXMxLmludGVnZXJzT25seSA9IHRydWU7XHJcbiAgICAgICAgICAgIGNoYXJ0LmFkZFZhbHVlQXhpcyh2YWx1ZUF4aXMxKTtcclxuICAgICAgICAgICAgdmFyIGdyYXBoID0gbmV3IEFtQ2hhcnRzLkFtR3JhcGgoKTtcclxuICAgICAgICAgICAgZ3JhcGgudmFsdWVGaWVsZCA9IFwiY291bnRcIjtcclxuICAgICAgICAgICAgZ3JhcGgudHlwZSA9IEZpcnN0Q2hhcnRUeXBlO1xyXG4gICAgICAgICAgICBncmFwaC5maWxsQWxwaGFzID0gMC43O0ZvdXJ0aENoYXJ0VHlwZVxyXG4gICAgICAgICAgICBncmFwaC5saW5lQWxwaGEgPSAwLjU7XHJcbiAgICAgICAgICAgIGdyYXBoLmJhbGxvb25UZXh0ID0gXCJbW3RpdGxlXV06IFtbY291bnRdXVwiO1xyXG4gICAgICAgICAgICBncmFwaC5iYWxsb29uQ29sb3IgPSAnIycrRmlyc3RDaGFydENvbG9yO1xyXG4gICAgICAgICAgICBncmFwaC5maWxsQ29sb3JzID0gJyMnK0ZpcnN0Q2hhcnRDb2xvcjtcclxuICAgICAgICAgICAgZ3JhcGgubGluZUNvbG9yID0gJyMnK0ZpcnN0Q2hhcnRDb2xvcjtcclxuICAgICAgICAgICAgY2hhcnQuYWRkR3JhcGgoZ3JhcGgpO1xyXG4gICAgICAgICAgICBjaGFydC53cml0ZSgnY2hhcnRkaXYtZGVhbHMnKTtcclxuICAgICAgICAgICAgdmFyIGNoYXJ0MiA9IG5ldyBBbUNoYXJ0cy5BbVNlcmlhbENoYXJ0KCk7XHJcbiAgICAgICAgICAgIGNoYXJ0Mi5kYXRhUHJvdmlkZXIgPSBnZW5lcmF0ZUNoYXJ0RGF0YURlYWxzQnlSZWdpb24oKTtcclxuICAgICAgICAgICAgY2hhcnQyLmNhdGVnb3J5RmllbGQgPSBcInJlZ2lvblwiO1xyXG4gICAgICAgICAgICB2YXIgdmFsdWVBeGlzMiA9IG5ldyBBbUNoYXJ0cy5WYWx1ZUF4aXMoKTtcclxuICAgICAgICAgICAgdmFsdWVBeGlzMi5pbnRlZ2Vyc09ubHkgPSB0cnVlO1xyXG4gICAgICAgICAgICBjaGFydDIuYWRkVmFsdWVBeGlzKHZhbHVlQXhpczIpO1xyXG4gICAgICAgICAgICB2YXIgZ3JhcGgyID0gbmV3IEFtQ2hhcnRzLkFtR3JhcGgoKTtcclxuICAgICAgICAgICAgZ3JhcGgyLnZhbHVlRmllbGQgPSBcInRhbGx5XCI7XHJcbiAgICAgICAgICAgIGdyYXBoMi50eXBlID0gU2Vjb25kQ2hhcnRUeXBlO1xyXG4gICAgICAgICAgICBncmFwaDIuZmlsbEFscGhhcyA9IDAuNztcclxuICAgICAgICAgICAgZ3JhcGgyLmxpbmVBbHBoYSA9IDAuNTtcclxuICAgICAgICAgICAgZ3JhcGgyLmJhbGxvb25UZXh0ID0gXCJbW3RpdGxlXV06IFtbdmFsdWVdXVwiO1xyXG4gICAgICAgICAgICBncmFwaDIuYmFsbG9vbkNvbG9yID0gJyMnK1NlY29uZENoYXJ0Q29sb3I7XHJcbiAgICAgICAgICAgIGdyYXBoMi5maWxsQ29sb3JzID0gJyMnK1NlY29uZENoYXJ0Q29sb3I7XHJcbiAgICAgICAgICAgIGdyYXBoMi5saW5lQ29sb3IgPSAnIycrU2Vjb25kQ2hhcnRDb2xvcjtcclxuICAgICAgICAgICAgY2hhcnQyLmNhdGVnb3J5QXhpcy5sYWJlbFJvdGF0aW9uID0gNDA7XHJcbiAgICAgICAgICAgIGNoYXJ0Mi5jYXRlZ29yeUF4aXMuYXV0b0dyaWRDb3VudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjaGFydDIuYWRkR3JhcGgoZ3JhcGgyKTtcclxuICAgICAgICAgICAgY2hhcnQyLndyaXRlKCdjaGFydGRpdi1yZWdpb24nKTtcclxuICAgICAgICAgICAgdmFyIGNoYXJ0MyA9IG5ldyBBbUNoYXJ0cy5BbVNlcmlhbENoYXJ0KCk7XHJcbiAgICAgICAgICAgIGNoYXJ0My5kYXRhUHJvdmlkZXIgPSBnZW5lcmF0ZUNoYXJ0RGF0YUJ5UmVnaW9uKCk7XHJcbiAgICAgICAgICAgIGNoYXJ0My5jYXRlZ29yeUZpZWxkID0gXCJyZWdpb25cIjtcclxuICAgICAgICAgICAgdmFyIHZhbHVlQXhpczMgPSBuZXcgQW1DaGFydHMuVmFsdWVBeGlzKCk7XHJcbiAgICAgICAgICAgIHZhbHVlQXhpczMuaW50ZWdlcnNPbmx5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgY2hhcnQzLmFkZFZhbHVlQXhpcyh2YWx1ZUF4aXMzKTtcclxuICAgICAgICAgICAgdmFyIGdyYXBoMyA9IG5ldyBBbUNoYXJ0cy5BbUdyYXBoKCk7XHJcbiAgICAgICAgICAgIGdyYXBoMy52YWx1ZUZpZWxkID0gXCJjb3VudFwiO1xyXG4gICAgICAgICAgICBncmFwaDMudHlwZSA9IFRoaXJkQ2hhcnRUeXBlO1xyXG4gICAgICAgICAgICBncmFwaDMuZmlsbEFscGhhcyA9IDAuNztcclxuICAgICAgICAgICAgZ3JhcGgzLmxpbmVBbHBoYSA9IDAuNTtcclxuICAgICAgICAgICAgZ3JhcGgzLmJhbGxvb25UZXh0ID0gXCJbW3RpdGxlXV06IFtbdmFsdWVdXVwiO1xyXG4gICAgICAgICAgICBncmFwaDMuYmFsbG9vbkNvbG9yID0gJyMnK1RoaXJkQ2hhcnRDb2xvcjtcclxuICAgICAgICAgICAgZ3JhcGgzLmZpbGxDb2xvcnMgPSAnIycrVGhpcmRDaGFydENvbG9yO1xyXG4gICAgICAgICAgICBncmFwaDMubGluZUNvbG9yID0gJyMnK1RoaXJkQ2hhcnRDb2xvcjtcclxuICAgICAgICAgICAgY2hhcnQzLmNhdGVnb3J5QXhpcy5sYWJlbFJvdGF0aW9uID0gNDA7XHJcbiAgICAgICAgICAgIGNoYXJ0My5jYXRlZ29yeUF4aXMuYXV0b0dyaWRDb3VudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjaGFydDMuYWRkR3JhcGgoZ3JhcGgzKTtcclxuICAgICAgICAgICAgY2hhcnQzLndyaXRlKCdjaGFydGRpdi1yZWdpb24yJyk7XHJcbiAgICAgICAgICAgIHZhciBjaGFydDQgPSBuZXcgQW1DaGFydHMuQW1TZXJpYWxDaGFydCgpO1xyXG4gICAgICAgICAgICBjaGFydDQuZGF0YVByb3ZpZGVyID0gZ2VuZXJhdGVDaGFydERhdGEoKTtcclxuICAgICAgICAgICAgY2hhcnQ0LnZhbGlkYXRlRGF0YSgpO1xyXG4gICAgICAgICAgICBjaGFydDQuY2F0ZWdvcnlGaWVsZCA9IFwidHlwZVwiO1xyXG4gICAgICAgICAgICB2YXIgdmFsdWVBeGlzNCA9IG5ldyBBbUNoYXJ0cy5WYWx1ZUF4aXMoKTtcclxuICAgICAgICAgICAgdmFsdWVBeGlzNC5pbnRlZ2Vyc09ubHkgPSB0cnVlO1xyXG4gICAgICAgICAgICBjaGFydDQuYWRkVmFsdWVBeGlzKHZhbHVlQXhpczQpO1xyXG4gICAgICAgICAgICB2YXIgZ3JhcGg0ID0gbmV3IEFtQ2hhcnRzLkFtR3JhcGgoKTtcclxuICAgICAgICAgICAgZ3JhcGg0LnZhbHVlRmllbGQgPSBcImNvdW50XCI7XHJcbiAgICAgICAgICAgIGdyYXBoNC50eXBlID0gRm91cnRoQ2hhcnRUeXBlO1xyXG4gICAgICAgICAgICBncmFwaDQuZmlsbEFscGhhcyA9IDAuNztcclxuICAgICAgICAgICAgZ3JhcGg0LmxpbmVBbHBoYSA9IDAuNTtcclxuICAgICAgICAgICAgZ3JhcGg0LmJhbGxvb25UZXh0ID0gXCJbW3RpdGxlXV06IFtbdmFsdWVdXVwiO1xyXG4gICAgICAgICAgICBncmFwaDQuYmFsbG9vbkNvbG9yID0gJyMnK0ZvdXJ0aENoYXJ0Q29sb3I7XHJcbiAgICAgICAgICAgIGdyYXBoNC5maWxsQ29sb3JzID0gJyMnK0ZvdXJ0aENoYXJ0Q29sb3I7XHJcbiAgICAgICAgICAgIGdyYXBoNC5saW5lQ29sb3IgPSAnIycrRm91cnRoQ2hhcnRDb2xvcjtcclxuICAgICAgICAgICAgY2hhcnQ0LmFkZEdyYXBoKGdyYXBoNCk7XHJcbiAgICAgICAgICAgIGNoYXJ0NC53cml0ZSgnY2hhcnRkaXYtdHlwZScpO1xyXG4gICAgICAgICAgICB2YXIgaW5wdXRTZXQgPSAkKFwiLm1lcmdlLWFjcXVpc3Rpb24gdGggaW5wdXRcIik7XHJcbiAgICAgICAgICAgIGlucHV0U2V0LmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIFx0aWYoISQodGhpcykuaGFzQ2xhc3MoJ3JhbmdlLWZpZWxkJykpIHtcclxuICAgICAgICBcdCAgICAgICAgJCh0aGlzKS5rZXl1cChmdW5jdGlvbigpIHtcclxuICAgICAgICBcdCAgICAgICAgICAgIGNoYXJ0LmRhdGFQcm92aWRlciA9IGdlbmVyYXRlQ2hhcnREYXRhU2l6ZVJhbmdlKCk7XHJcbiAgICAgICAgXHQgICAgICAgICAgICBjaGFydC52YWxpZGF0ZURhdGEoKTtcclxuICAgICAgICBcdCAgICAgICAgICAgIGNoYXJ0Mi5kYXRhUHJvdmlkZXIgPSBnZW5lcmF0ZUNoYXJ0RGF0YURlYWxzQnlSZWdpb24oKTtcclxuICAgICAgICBcdCAgICAgICAgICAgIGNoYXJ0Mi52YWxpZGF0ZURhdGEoKTtcclxuICAgICAgICBcdCAgICAgICAgICAgIGNoYXJ0My5kYXRhUHJvdmlkZXIgPSBnZW5lcmF0ZUNoYXJ0RGF0YUJ5UmVnaW9uKCk7XHJcbiAgICAgICAgXHQgICAgICAgICAgICBjaGFydDMudmFsaWRhdGVEYXRhKCk7XHJcbiAgICAgICAgXHQgICAgICAgICAgICBjaGFydDQuZGF0YVByb3ZpZGVyID0gZ2VuZXJhdGVDaGFydERhdGEoKTtcclxuICAgICAgICBcdCAgICAgICAgICAgIGNoYXJ0NC52YWxpZGF0ZURhdGEoKTtcclxuICAgICAgICBcdCAgICAgICAgfSk7XHJcbiAgICAgICAgXHQgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gJChcIiNmaWx0ZXJEcm9wRG93blwiKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vICAgICBjaGFydC5kYXRhUHJvdmlkZXIgPSBnZW5lcmF0ZUNoYXJ0RGF0YVNpemVSYW5nZSgpO1xyXG4gICAgICAgICAgICAvLyAgICAgY2hhcnQudmFsaWRhdGVEYXRhKCk7XHJcbiAgICAgICAgICAgIC8vICAgICBjaGFydDIuZGF0YVByb3ZpZGVyID0gZ2VuZXJhdGVDaGFydERhdGFEZWFsc0J5UmVnaW9uKCk7XHJcbiAgICAgICAgICAgIC8vICAgICBjaGFydDIudmFsaWRhdGVEYXRhKCk7XHJcbiAgICAgICAgICAgIC8vICAgICBjaGFydDMuZGF0YVByb3ZpZGVyID0gZ2VuZXJhdGVDaGFydERhdGFCeVJlZ2lvbigpO1xyXG4gICAgICAgICAgICAvLyAgICAgY2hhcnQzLnZhbGlkYXRlRGF0YSgpO1xyXG4gICAgICAgICAgICAvLyAgICAgY2hhcnQ0LmRhdGFQcm92aWRlciA9IGdlbmVyYXRlQ2hhcnREYXRhKCk7XHJcbiAgICAgICAgICAgIC8vICAgICBjaGFydDQudmFsaWRhdGVEYXRhKCk7XHJcbiAgICAgICAgICAgIC8vIH0pO1xyXG4gICAgICAgICAgICAkKCQoXCIucmFuZ2UtZmllbGRcIilbMF0pLmtleXVwKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY2hhcnQuZGF0YVByb3ZpZGVyID0gZ2VuZXJhdGVDaGFydERhdGFTaXplUmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgIGNoYXJ0LnZhbGlkYXRlRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgY2hhcnQyLmRhdGFQcm92aWRlciA9IGdlbmVyYXRlQ2hhcnREYXRhRGVhbHNCeVJlZ2lvbigpO1xyXG4gICAgICAgICAgICAgICAgY2hhcnQyLnZhbGlkYXRlRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgY2hhcnQzLmRhdGFQcm92aWRlciA9IGdlbmVyYXRlQ2hhcnREYXRhQnlSZWdpb24oKTtcclxuICAgICAgICAgICAgICAgIGNoYXJ0My52YWxpZGF0ZURhdGEoKTtcclxuICAgICAgICAgICAgICAgIGNoYXJ0NC5kYXRhUHJvdmlkZXIgPSBnZW5lcmF0ZUNoYXJ0RGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgY2hhcnQ0LnZhbGlkYXRlRGF0YSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgJCgkKFwiLnJhbmdlLWZpZWxkXCIpWzFdKS5rZXl1cChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNoYXJ0LmRhdGFQcm92aWRlciA9IGdlbmVyYXRlQ2hhcnREYXRhU2l6ZVJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICBjaGFydC52YWxpZGF0ZURhdGEoKTtcclxuICAgICAgICAgICAgICAgIGNoYXJ0Mi5kYXRhUHJvdmlkZXIgPSBnZW5lcmF0ZUNoYXJ0RGF0YURlYWxzQnlSZWdpb24oKTtcclxuICAgICAgICAgICAgICAgIGNoYXJ0Mi52YWxpZGF0ZURhdGEoKTtcclxuICAgICAgICAgICAgICAgIGNoYXJ0My5kYXRhUHJvdmlkZXIgPSBnZW5lcmF0ZUNoYXJ0RGF0YUJ5UmVnaW9uKCk7XHJcbiAgICAgICAgICAgICAgICBjaGFydDMudmFsaWRhdGVEYXRhKCk7XHJcbiAgICAgICAgICAgICAgICBjaGFydDQuZGF0YVByb3ZpZGVyID0gZ2VuZXJhdGVDaGFydERhdGEoKTtcclxuICAgICAgICAgICAgICAgIGNoYXJ0NC52YWxpZGF0ZURhdGEoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vICQoXCIjbGFyZ2VzdC1kZWFsc1wiKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gICAgIGNoYXJ0LmRhdGFQcm92aWRlciA9IGdlbmVyYXRlQ2hhcnREYXRhU2l6ZVJhbmdlKCk7XHJcbiAgICAgICAgICAgIC8vICAgICBjaGFydC52YWxpZGF0ZURhdGEoKTtcclxuICAgICAgICAgICAgLy8gICAgIGNoYXJ0Mi5kYXRhUHJvdmlkZXIgPSBnZW5lcmF0ZUNoYXJ0RGF0YURlYWxzQnlSZWdpb24oKTtcclxuICAgICAgICAgICAgLy8gICAgIGNoYXJ0Mi52YWxpZGF0ZURhdGEoKTtcclxuICAgICAgICAgICAgLy8gICAgIGNoYXJ0My5kYXRhUHJvdmlkZXIgPSBnZW5lcmF0ZUNoYXJ0RGF0YUJ5UmVnaW9uKCk7XHJcbiAgICAgICAgICAgIC8vICAgICBjaGFydDMudmFsaWRhdGVEYXRhKCk7XHJcbiAgICAgICAgICAgIC8vICAgICBjaGFydDQuZGF0YVByb3ZpZGVyID0gZ2VuZXJhdGVDaGFydERhdGEoKTtcclxuICAgICAgICAgICAgLy8gICAgIGNoYXJ0NC52YWxpZGF0ZURhdGEoKTtcclxuICAgICAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgICAgIHZhciBkZWZhdWx0UmVnaW9ucyA9IFtcIkFmcmljYVwiLCBcIkFzaWEtUGFjaWZpY1wiLCBcIkJlcm11ZGFcIiwgXCJFdXJvcGVcIiwgXCJHbG9iYWxcIiwgXCJMYXRpbiBBbWVyaWNhXCIsIFwiTG9uZG9uL1VLXCIsIFwiTm9ydGggQW1lcmljYVwiXTtcclxuICAgICAgICAgICAgdmFyIGRlZmF1bHRUeXBlcyA9IFtcIm5vbi1saWZlXCIsIFwibGlmZVwiLCBcImludGVybmF0aW9uYWwvcmVpbnN1cmFuY2VcIiwgXCJjb21wb3NpdGVcIl07XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZUNoYXJ0RGF0YVNpemVSYW5nZSgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGFydERhdGFUeXBlID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJpY2UgPSBbXTtcclxuICAgICAgICAgICAgICAgIHZhciBpO1xyXG4gICAgICAgICAgICAgICAgJChcIi5tZXJnZS1hY3F1aXN0aW9uIHRkW2RlYWw9J1ByaWNlJ11cIikuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcFByaWNlID0gJCh0aGlzKS50ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJpY2UucHVzaCh0ZW1wUHJpY2UpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgMTAwOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIDI1MDogMCxcclxuICAgICAgICAgICAgICAgICAgICAxMDAwOiAwXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHByaWNlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByaWNlW2ldID49IDEwMCAmJiBwcmljZVtpXSA8IDI1MCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZVsxMDBdID0gcmFuZ2VbMTAwXSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcmljZVtpXSA+PSAyNTAgJiYgcHJpY2VbaV0gPCAxMDAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlWzI1MF0gPSByYW5nZVsyNTBdICsgMTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByaWNlW2ldID49IDEwMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VbMTAwMF0gPSByYW5nZVsxMDAwXSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlQXNBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlQ291bnRBc0FycmF5ID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gcmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZUFzQXJyYXkucHVzaChrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlQ291bnRBc0FycmF5LnB1c2gocmFuZ2Vba2V5XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcmFuZ2VBc0FycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VBc0FycmF5W2ldID0gcmFuZ2VBc0FycmF5W2ldICsgXCIrXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2U6IHJhbmdlQXNBcnJheVtpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IHJhbmdlQ291bnRBc0FycmF5W2ldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogcmFuZ2VBc0FycmF5W2ldXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBjaGFydERhdGFUeXBlLnB1c2gob2JqKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjaGFydERhdGFUeXBlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZUNoYXJ0RGF0YURlYWxzQnlSZWdpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hhcnREYXRhVHlwZSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlZ2lvbnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICQoXCIubWVyZ2UtYWNxdWlzdGlvbiB0ZFtkZWFsPSdUYXJnZXRMb2NhdGlvbiddXCIpLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBSZWdpb24gPSAkKHRoaXMpLnRleHQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZWdpb25zLnB1c2godGVtcFJlZ2lvbik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHZhciBwcmljZSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgJChcIi5tZXJnZS1hY3F1aXN0aW9uIHRkW2RlYWw9J1ByaWNlJ11cIikuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcFByaWNlID0gJCh0aGlzKS50ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJpY2UucHVzaCh0ZW1wUHJpY2UpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVnaW9uV2l0aFRvdGFsUHJpY2UgPSB7fTtcclxuICAgICAgICAgICAgICAgIHZhciByZWdpb25OYW1lID0ge307XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcmVnaW9ucy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlZ2lvbldpdGhUb3RhbFByaWNlW3JlZ2lvbnNbaV1dID0gMDtcclxuICAgICAgICAgICAgICAgICAgICByZWdpb25OYW1lW3JlZ2lvbnNbaV1dID0gcmVnaW9uc1tpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCByZWdpb25zLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByaWNlW2ldICE9IFwiLVwiICYmIHByaWNlW2ldID49IDEwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpb25XaXRoVG90YWxQcmljZVtyZWdpb25zW2ldXSA9IHJlZ2lvbldpdGhUb3RhbFByaWNlW3JlZ2lvbnNbaV1dICsgcGFyc2VGbG9hdChwcmljZVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHJlZ2lvbk5hbWVBc0FycmF5ID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gcmVnaW9uTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWdpb25OYW1lLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uTmFtZUFzQXJyYXkucHVzaChyZWdpb25OYW1lW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlZ2lvbk5hbWVBc0FycmF5LnNvcnQoKTtcclxuICAgICAgICAgICAgICAgIHZhciBpc051bGwgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlzTnVsbCA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KHByaWNlKTtcclxuICAgICAgICAgICAgICAgIGlmICghaXNOdWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWdpb25OYW1lQXNBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVnaW9uV2l0aFRvdGFsUHJpY2VbcmVnaW9uTmFtZUFzQXJyYXlbaV1dICE9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhYmJyUmVnaW9uTmFtZUFzQXJyYXkgPSBhYmJyZXZpYXRlKHJlZ2lvbk5hbWVBc0FycmF5W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uOiBhYmJyUmVnaW9uTmFtZUFzQXJyYXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFsbHk6IHJlZ2lvbldpdGhUb3RhbFByaWNlW3JlZ2lvbk5hbWVBc0FycmF5W2ldXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogcmVnaW9uTmFtZUFzQXJyYXlbaV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydERhdGFUeXBlLnB1c2gob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGRlZmF1bHRSZWdpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhYmJyUmVnaW9uTmFtZUFzQXJyYXkgPSBhYmJyZXZpYXRlKGRlZmF1bHRSZWdpb25zW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbjogYWJiclJlZ2lvbk5hbWVBc0FycmF5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFsbHk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZGVmYXVsdFJlZ2lvbnNbaV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnREYXRhVHlwZS5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNoYXJ0RGF0YVR5cGUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGRlZmF1bHRSZWdpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhYmJyUmVnaW9uTmFtZUFzQXJyYXkgPSBhYmJyZXZpYXRlKGRlZmF1bHRSZWdpb25zW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbjogYWJiclJlZ2lvbk5hbWVBc0FycmF5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFsbHk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZGVmYXVsdFJlZ2lvbnNbaV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnREYXRhVHlwZS5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoYXJ0RGF0YVR5cGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlQ2hhcnREYXRhQnlSZWdpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hhcnREYXRhVHlwZSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlZ2lvbnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICQoXCIubWVyZ2UtYWNxdWlzdGlvbiB0ZFtkZWFsPSdUYXJnZXRMb2NhdGlvbiddXCIpLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBSZWdpb24gPSAkKHRoaXMpLnRleHQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZWdpb25zLnB1c2godGVtcFJlZ2lvbik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHZhciBwcmljZSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgJChcIi5tZXJnZS1hY3F1aXN0aW9uIHRkW2RlYWw9J1ByaWNlJ11cIikuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcFByaWNlID0gJCh0aGlzKS50ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJpY2UucHVzaCh0ZW1wUHJpY2UpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVnaW9uT3ZlcjEwMG0gPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmljZVtpXSAhPSBcIi1cIiAmJiBwcmljZVtpXSA+PSAxMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uT3ZlcjEwMG0ucHVzaChyZWdpb25zW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgdW5pcXVlUmVnaW9ucyA9IG5ldyBzdHJpbmdTZXQoKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZWdpb25PdmVyMTAwbS5sZW5ndGggIT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCByZWdpb25PdmVyMTAwbS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmlxdWVSZWdpb25zLmFkZChyZWdpb25PdmVyMTAwbVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIG9yZGVyZWRWYWx1ZVJlZ2lvbnMgPSB1bmlxdWVSZWdpb25zLnZhbHVlcygpO1xyXG4gICAgICAgICAgICAgICAgb3JkZXJlZFZhbHVlUmVnaW9ucy5zb3J0KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY1IgPSB1bmlxdWVSZWdpb25zLmNvdW50KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXNOdWxsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpc051bGwgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCh1bmlxdWVSZWdpb25zLmNvdW50KCkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpc051bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgb3JkZXJlZFZhbHVlUmVnaW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWJiclVuaXF1ZVZhbHVlVHlwZSA9IGFiYnJldmlhdGUob3JkZXJlZFZhbHVlUmVnaW9uc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpb246IGFiYnJVbmlxdWVWYWx1ZVR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudDogY1Jbb3JkZXJlZFZhbHVlUmVnaW9uc1tpXV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogb3JkZXJlZFZhbHVlUmVnaW9uc1tpXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFydERhdGFUeXBlLnB1c2gob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBkZWZhdWx0UmVnaW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWJiclJlZ2lvbk5hbWVBc0FycmF5ID0gYWJicmV2aWF0ZShkZWZhdWx0UmVnaW9uc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpb246IGFiYnJSZWdpb25OYW1lQXNBcnJheSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGRlZmF1bHRSZWdpb25zW2ldXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0RGF0YVR5cGUucHVzaChvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjaGFydERhdGFUeXBlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZUNoYXJ0RGF0YSgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGFydERhdGFUeXBlID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgdHlwZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICQoXCIubWVyZ2UtYWNxdWlzdGlvbiB0ZFtkZWFsPSdUYXJnZXRTZWN0b3InXVwiKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wVHlwZSA9ICQodGhpcykudGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVzLnB1c2godGVtcFR5cGUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJpY2UgPSBbXTtcclxuICAgICAgICAgICAgICAgICQoXCIubWVyZ2UtYWNxdWlzdGlvbiB0ZFtkZWFsPSdQcmljZSddXCIpLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBQcmljZSA9ICQodGhpcykudGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByaWNlLnB1c2godGVtcFByaWNlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIHR5cGVzT3ZlcjEwMG0gPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJpY2VbaV0gIT0gXCItXCIgJiYgcHJpY2VbaV0gPj0gMTAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVzT3ZlcjEwMG0ucHVzaCh0eXBlc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHVuaXF1ZVR5cGVzID0gbmV3IHN0cmluZ1NldCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVzT3ZlcjEwMG0ubGVuZ3RoICE9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdHlwZXNPdmVyMTAwbS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmlxdWVUeXBlcy5hZGQodHlwZXNPdmVyMTAwbVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHVuaXF1ZVZhbHVlVHlwZXMgPSB1bmlxdWVUeXBlcy52YWx1ZXMoKTtcclxuICAgICAgICAgICAgICAgIHVuaXF1ZVZhbHVlVHlwZXMuc29ydCgpO1xyXG4gICAgICAgICAgICAgICAgdW5pcXVlVmFsdWVUeXBlcy5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY1QgPSB1bmlxdWVUeXBlcy5jb3VudCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzTnVsbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaXNOdWxsID0galF1ZXJ5LmlzRW1wdHlPYmplY3QodW5pcXVlVHlwZXMuY291bnQoKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzTnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB1bmlxdWVWYWx1ZVR5cGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhYmJyVW5pcXVlVmFsdWVUeXBlID0gYWJicmV2aWF0ZSh1bmlxdWVWYWx1ZVR5cGVzW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFiYnJVbmlxdWVWYWx1ZVR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudDogY1RbdW5pcXVlVmFsdWVUeXBlc1tpXV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdW5pcXVlVmFsdWVUeXBlc1tpXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFydERhdGFUeXBlLnB1c2gob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBkZWZhdWx0VHlwZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFiYnJUeXBlTmFtZUFzQXJyYXkgPSBhYmJyZXZpYXRlKGRlZmF1bHRUeXBlc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhYmJyVHlwZU5hbWVBc0FycmF5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZGVmYXVsdFR5cGVzW2ldXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0RGF0YVR5cGUucHVzaChvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjaGFydERhdGFUeXBlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBhYmJyZXZpYXRlKHN0cikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0ciA9PSBcImludGVybmF0aW9uYWwvcmVpbnN1cmFuY2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IFwiaW50L3JlXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzdHIgPT0gXCJjb21wb3NpdGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IFwiY29tXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzdHIgPT0gXCJBZnJpY2FcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IFwiQUZcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHN0ciA9PSBcIkFzaWEtUGFjaWZpY1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gXCJBUEFDXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzdHIgPT0gXCJCZXJtdWRhXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHIgPSBcIkJNXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzdHIgPT0gXCJFdXJvcGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IFwiRVVcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHN0ciA9PSBcIkdsb2JhbFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gXCJHXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzdHIgPT0gXCJMYXRpbiBBbWVyaWNhXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHIgPSBcIkxBXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzdHIgPT0gXCJMb25kb24vVUtcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IFwiVUtcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHN0ciA9PSBcIk5vcnRoIEFtZXJpY2FcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IFwiTkFcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gc3RyaW5nU2V0KCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNldE9iaiA9IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgdmFyIG9iamVjdENvdW50ID0ge307XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZCA9IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldE9ialtzdHJdID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmplY3RDb3VudFtzdHJdID09IG51bGwgfHwgb2JqZWN0Q291bnRbc3RyXSA9PSB7fSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RDb3VudFtzdHJdID0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnQgPSBvYmplY3RDb3VudFtzdHJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RDb3VudFtzdHJdID0gY291bnQgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdENvdW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWlucyA9IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXRPYmpbc3RyXSA9PT0gdmFsO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlID0gZnVuY3Rpb24oc3RyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNldE9ialtzdHJdO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gc2V0T2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXRPYmpbaV0gPT09IHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSk7IiwidmFyIGFydGljbGVTaWRlYmFyQWQsXHJcbiAgICBhcnRpY2xlU2lkZWJhckFkUGFyZW50LFxyXG4gICAgbGFzdEFjdGlvbkZsYWdzQmFyLFxyXG4gICAgc3RpY2t5Rmxvb3IsXHJcbiAgICBzaWRlYmFySXNUYWxsZXI7XHJcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICAgIGFydGljbGVTaWRlYmFyQWRQYXJlbnQgPSAkKCcuYXJ0aWNsZS1yaWdodC1yYWlsIHNlY3Rpb246bGFzdC1jaGlsZCcpO1xyXG4gICAgYXJ0aWNsZVNpZGViYXJBZCA9IGFydGljbGVTaWRlYmFyQWRQYXJlbnQuZmluZCgnLmFkdmVydGlzaW5nJyk7XHJcbiAgICBsYXN0QWN0aW9uRmxhZ3NCYXIgPSAkKCcuYWN0aW9uLWZsYWdzLWJhcjpsYXN0LW9mLXR5cGUnKTtcclxuICAgIHNpZGViYXJJc1RhbGxlciA9ICQoJy5hcnRpY2xlLXJpZ2h0LXJhaWwnKS5oZWlnaHQoKSA+ICQoJy5hcnRpY2xlLWxlZnQtcmFpbCcpLmhlaWdodCgpO1xyXG59KTtcclxuJCh3aW5kb3cpLm9uKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoYXJ0aWNsZVNpZGViYXJBZFBhcmVudCAmJiBhcnRpY2xlU2lkZWJhckFkUGFyZW50Lmxlbmd0aCAmJiAhc2lkZWJhcklzVGFsbGVyKSB7XHJcbiAgICAgICAgLy8gcGFnZVlPZmZzZXQgaW5zdGVhZCBvZiBzY3JvbGxZIGZvciBJRSAvIHByZS1FZGdlIGNvbXBhdGliaWxpdHlcclxuICAgICAgICBzdGlja3lGbG9vciA9IGxhc3RBY3Rpb25GbGFnc0Jhci5vZmZzZXQoKS50b3AgLSB3aW5kb3cucGFnZVlPZmZzZXQgLSBhcnRpY2xlU2lkZWJhckFkLmhlaWdodCgpO1xyXG4gICAgICAgIGlmIChhcnRpY2xlU2lkZWJhckFkUGFyZW50Lm9mZnNldCgpLnRvcCAtIHdpbmRvdy5wYWdlWU9mZnNldCA8PSAxNikge1xyXG4gICAgICAgICAgICBhcnRpY2xlU2lkZWJhckFkUGFyZW50LmFkZENsYXNzKCdhZHZlcnRpc2luZy0tc3RpY2t5Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYXJ0aWNsZVNpZGViYXJBZFBhcmVudC5yZW1vdmVDbGFzcygnYWR2ZXJ0aXNpbmctLXN0aWNreScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3RpY2t5Rmxvb3IgPD0gNDApIHtcclxuICAgICAgICAgICAgYXJ0aWNsZVNpZGViYXJBZC5jc3MoJ3RvcCcsIChzdGlja3lGbG9vciAtIDQwKSArICdweCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFydGljbGVTaWRlYmFyQWQuY3NzKCd0b3AnLCAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBSZWNvbWVuZGVkQ29udGVudCA9IHtcclxuICAgICAgICAgICAgQWpheERhdGE6IGZ1bmN0aW9uICh1cmwsIHR5cGUsIGRhdGEsIFN1Y2Nlc3NDYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhY2hlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmIChkYXRhLmFydGljbGVzICYmIHR5cGVvZiBkYXRhLmFydGljbGVzID09PSBcIm9iamVjdFwiICYmIGRhdGEuYXJ0aWNsZXMubGVuZ3RoID49IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU3VjY2Vzc0NhbGxiYWNrKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL30gXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFJlY29tZW5kZWRUZW1wbGF0ZTogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBUZW1wbGF0ZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuYXJ0aWNsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuYXJ0aWNsZXNbaV0ubGlzdGFibGVJbWFnZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZW1wbGF0ZSArPSAnPGRpdiBjbGFzcz1cInNlY3Rpb24tYXJ0aWNsZVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImFydGljbGUtcmVsYXRlZC1jb250ZW50X19jYXRlZ29yeVwiPiAnICsgZGF0YS5hcnRpY2xlc1tpXS5saXN0YWJsZVB1YmxpY2F0aW9uICsgJyA8L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGg1PjxhIGNsYXNzPVwiY2xpY2stdXRhZ1wiIGhyZWY9XCInICsgZGF0YS5hcnRpY2xlc1tpXS5saW5rYWJsZVVybCArICdcIj4nICsgZGF0YS5hcnRpY2xlc1tpXS5saXN0YWJsZVRpdGxlICsgJzwvYT48L2g1PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8dGltZSBjbGFzcz1cImFydGljbGUtcmVsYXRlZC1jb250ZW50X19kYXRlXCI+JyArIGRhdGEuYXJ0aWNsZXNbaV0ubGlzdGFibGVEYXRlICsgJzwvdGltZT4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVGVtcGxhdGUgKz0gJzxkaXYgY2xhc3M9XCJzZWN0aW9uLWFydGljbGVcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGltZyBjbGFzcz1cImFydGljbGUtcmVsYXRlZC1jb250ZW50X19pbWdcIiBzcmM9XCInICsgZGF0YS5hcnRpY2xlc1tpXS5saXN0YWJsZUltYWdlICsgJ1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImFydGljbGUtcmVsYXRlZC1jb250ZW50X19jYXRlZ29yeVwiPiAnICsgZGF0YS5hcnRpY2xlc1tpXS5saXN0YWJsZVB1YmxpY2F0aW9uICsgJyA8L3NwYW4+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGg1PjxhIGNsYXNzPVwiY2xpY2stdXRhZ1wiIGhyZWY9XCInICsgZGF0YS5hcnRpY2xlc1tpXS5saW5rYWJsZVVybCArICdcIj4nICsgZGF0YS5hcnRpY2xlc1tpXS5saXN0YWJsZVRpdGxlICsgJzwvYT48L2g1PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8dGltZSBjbGFzcz1cImFydGljbGUtcmVsYXRlZC1jb250ZW50X19kYXRlXCI+JyArIGRhdGEuYXJ0aWNsZXNbaV0ubGlzdGFibGVEYXRlICsgJzwvdGltZT4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIFRlbXBsYXRlICs9ICc8L2Rpdj4nO1xyXG5cclxuICAgICAgICAgICAgICAgICQoJy5Db250ZW50UmVjb21tLVJlYWROZXh0JykuYXBwZW5kKFRlbXBsYXRlKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFN1Z2dlc3RlZFRlbXBsYXRlOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIFRlbXBsYXRlID0gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5hcnRpY2xlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5hcnRpY2xlc1tpXS5saXN0YWJsZUltYWdlID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRlbXBsYXRlICs9ICc8ZGl2IGNsYXNzPVwiY29udGVudFJlY29tbS1hcnRpY2xlXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiYXJ0aWNsZS1yZWxhdGVkLWNvbnRlbnRfX2NhdGVnb3J5XCI+ICcgKyBkYXRhLmFydGljbGVzW2ldLmxpc3RhYmxlUHVibGljYXRpb24gKyAnIDwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGg1PjxhIGNsYXNzPVwiY2xpY2stdXRhZ1wiIGhyZWY9XCInICsgZGF0YS5hcnRpY2xlc1tpXS5saW5rYWJsZVVybCArICdcIj4nICsgZGF0YS5hcnRpY2xlc1tpXS5saXN0YWJsZVRpdGxlICsgJzwvYT48L2g1PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8dGltZSBjbGFzcz1cImFydGljbGUtcmVsYXRlZC1jb250ZW50X19kYXRlXCI+JyArIGRhdGEuYXJ0aWNsZXNbaV0ubGlzdGFibGVEYXRlICsgJzwvdGltZT4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBUZW1wbGF0ZSArPSAnPGRpdiBjbGFzcz1cImNvbnRlbnRSZWNvbW0tYXJ0aWNsZVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8aW1nIGNsYXNzPVwiYXJ0aWNsZS1yZWxhdGVkLWNvbnRlbnRfX2ltZ1wiIHNyYz1cIicgKyBkYXRhLmFydGljbGVzW2ldLmxpc3RhYmxlSW1hZ2UgKyAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiYXJ0aWNsZS1yZWxhdGVkLWNvbnRlbnRfX2NhdGVnb3J5XCI+ICcgKyBkYXRhLmFydGljbGVzW2ldLmxpc3RhYmxlUHVibGljYXRpb24gKyAnIDwvc3Bhbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGg1PjxhIGNsYXNzPVwiY2xpY2stdXRhZ1wiIGhyZWY9XCInICsgZGF0YS5hcnRpY2xlc1tpXS5saW5rYWJsZVVybCArICdcIj4nICsgZGF0YS5hcnRpY2xlc1tpXS5saXN0YWJsZVRpdGxlICsgJzwvYT48L2g1PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8dGltZSBjbGFzcz1cImFydGljbGUtcmVsYXRlZC1jb250ZW50X19kYXRlXCI+JyArIGRhdGEuYXJ0aWNsZXNbaV0ubGlzdGFibGVEYXRlICsgJzwvdGltZT4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgVGVtcGxhdGUgKz0gJzwvZGl2Pic7XHJcblxyXG4gICAgICAgICAgICAgICAgJCgnLnN1Z2dlc3RlZC1hcnRpY2xlJykuYXBwZW5kKFRlbXBsYXRlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgaWYgKCQoJy5Db250ZW50UmVjb21tLVJlYWROZXh0JykubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuQWpheERhdGEoJy9hcGkvYXJ0aWNsZXNlYXJjaCcsICdQT1NUJywgeyAnVGF4b25vbXlJZHMnOiAkKCcjaGRuVGF4b25vbXlJZHMnKS52YWwoKS5zcGxpdChcIixcIiksICdQYWdlTm8nOiAxLCAnUGFnZVNpemUnOiA0IH0sIHNlbGYuUmVjb21lbmRlZFRlbXBsYXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgkKCcjaGRuUHJlZmVyYW5jZUlkcycpLnZhbCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5BamF4RGF0YSgnL2FwaS9hcnRpY2xlc2VhcmNoJywgJ1BPU1QnLCB7ICdUYXhvbm9teUlkcyc6ICQoJyNoZG5QcmVmZXJhbmNlSWRzJykudmFsKCkuc3BsaXQoXCIsXCIpLCAnUGFnZU5vJzogMSwgJ1BhZ2VTaXplJzogNCB9LCBzZWxmLlN1Z2dlc3RlZFRlbXBsYXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgUmVjb21lbmRlZENvbnRlbnQuaW5pdCgpO1xyXG4gICAgfSkoKTtcclxuIiwiJChmdW5jdGlvbigpe1xyXG5cdCQoJy5hdmFpbGFibGVHcmFwaHMnKS5vZmYoJ2NsaWNrJykub24oJ2NsaWNrJywgJ2xpIGEnLCBmdW5jdGlvbiAoKSB7XHJcblx0XHR2YXIgJHRoaXMgPSAkKHRoaXMpLCBpZCA9ICR0aGlzLmF0dHIoJ2lkJyksIGdldEZvY3VzSWQgPSBpZC5zcGxpdCgnLScpWzFdO1xyXG5cdFx0JCh3aW5kb3cpLnNjcm9sbFRvcCgkKCcjJyArIGdldEZvY3VzSWQpLm9mZnNldCgpLnRvcCk7XHJcblx0XHRpZighJCgnIycrZ2V0Rm9jdXNJZCkuZmluZCgnLmNoYXJ0ZXhwYW5kJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKXtcclxuXHRcdFx0JCgnIycrZ2V0Rm9jdXNJZCkuZmluZCgnLmNoYXJ0ZXhwYW5kJykudHJpZ2dlcignY2xpY2snKTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHRcclxuXHR2YXIgY2hhcnRBY2NvcmRpb25JRHMgPSBbXCJHV1BcIiwgXCJOV1BcIiwgXCJVUlwiLCBcIk5QXCIsIFwiU0ZcIiwgXCJOV1BOUlwiLCBcIlNGTlJcIiwgXCJOUFNGUlwiXTtcclxuXHQkKCcuZXhwYW5kQWxsJywgJy5jb21wYXJlQ2hhcnQnKS5jbGljayhmdW5jdGlvbigpe1xyXG5cdFx0dmFyIGVhY2hDaGFydERhdGEgID0gJCgnLmVhY2hDaGFydERhdGEnKTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBjaGFydEFjY29yZGlvbklEcy5sZW5ndGg7IGkrKyl7XHJcblx0XHRcdGlmKCEkKGVhY2hDaGFydERhdGFbaV0pLmZpbmQoJy5jaGFydGV4cGFuZCcpLmhhc0NsYXNzKCdhY3RpdmUnKSl7XHJcblx0XHRcdFx0JChlYWNoQ2hhcnREYXRhW2ldKS5maW5kKCcuY2hhcnRleHBhbmQnKS5jbGljaygpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHQkKCcuY2hhcnRleHBhbmQnLCAnLmNvbXBhcmVDaGFydCcpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuXHR9KTtcclxuXHRcclxuXHQkKCcuY29sbGFwc2VBbGwnLCAnLmNvbXBhcmVDaGFydCcpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcblx0XHRpZigkKCcuZ3JhcGgtY29udGFpbmVyJykgJiYgJCgnLmdyYXBoLWNvbnRhaW5lcicpLmxlbmd0aCl7XHJcblx0XHRcdCQoJy5ncmFwaC1jb250YWluZXInLCAnLmNvbXBhcmVDaGFydCcpLmFkZENsYXNzKCdoaWRlJyk7XHJcblx0XHR9XHJcblx0XHQkKCcuY2hhcnREYXRhJywgJy5jb21wYXJlQ2hhcnQnKS5hZGRDbGFzcygnaGlkZScpO1xyXG5cdFx0JCgnLmNoYXJ0ZXhwYW5kJywgJy5jb21wYXJlQ2hhcnQnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcblx0fSk7XHJcblx0XHJcblx0JCgnLmNoYXJ0ZXhwYW5kJywgJy5lYWNoQ2hhcnREYXRhJykuY2xpY2soZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyICR0aGlzID0gJCh0aGlzKSwgZWFjaENoYXJ0RGF0YSA9ICR0aGlzLmNsb3Nlc3QoJy5lYWNoQ2hhcnREYXRhJyksIGNoYXJ0ZXhwYW5kID0gZWFjaENoYXJ0RGF0YS5maW5kKCcuY2hhcnRleHBhbmQnKSwgZ3JhcGhDb250ID0gZWFjaENoYXJ0RGF0YS5maW5kKCcuZ3JhcGgtY29udGFpbmVyJyk7XHJcblx0XHRpZihjaGFydGV4cGFuZC5oYXNDbGFzcygnYWN0aXZlJykpe1xyXG5cdFx0XHRncmFwaENvbnQuYWRkQ2xhc3MoJ2hpZGUnKTtcclxuXHRcdFx0JHRoaXMucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZXtcclxuXHRcdFx0Z3JhcGhDb250LnJlbW92ZUNsYXNzKCdoaWRlJyk7XHJcblx0XHRcdCR0aGlzLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHRcclxuXHR2YXIgZ2V0dXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XHJcblx0aWYoZ2V0dXJsLmluZGV4T2YoJ2dyYXBoaWQ9JykgIT09IC0xKXtcclxuXHRcdHZhciBnZXRJZCA9IGdldHVybC5zcGxpdCgnZ3JhcGhpZD0nKVsxXTtcclxuXHRcdCQod2luZG93KS5zY3JvbGxUb3AoJCgnIycgKyBnZXRJZCkub2Zmc2V0KCkudG9wKTtcclxuXHRcdCQoJyMnK2dldElkKS5maW5kKCcuY2hhcnRleHBhbmQnKS50cmlnZ2VyKCdjbGljaycpOyBcclxuXHR9XHJcbn0pO1xyXG5cclxuIiwiKGZ1bmN0aW9uICgpIHtcclxuXHQvLyBib2R5Li4uXHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHR2YXIgUmVzcG9uc2l2ZVRhYmxlID0ge1xyXG5cdFx0R2V0QWpheERhdGE6IGZ1bmN0aW9uKGRhdGEsIGlkKSB7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdFx0aWYoZGF0YSkge1xyXG5cdFx0XHRcdHdpbmRvdy5SZXNwb25zaXZlSlNPTiA9IGRhdGE7XHJcblx0XHRcdFx0d2luZG93LlJlc3BvbnNpdmVNb2RhbEpTT04gPSBkYXRhO1xyXG5cdFx0XHQgXHRzZWxmLlJlbmRlckNhcm91c2VsKGRhdGEsIGlkKTtcclxuXHRcdFx0IFx0c2VsZi5SZW5kZXJNb2RhbChkYXRhLCBpZCk7XHJcblx0XHRcdFx0Ly99IFxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0UmVuZGVyTW9kYWw6IGZ1bmN0aW9uKGRhdGEsIGlkKSB7XHJcblx0XHRcdHZhciBNb2RhbElkID0gJChpZCkuYXR0cignZGF0YS1tb2RhbCcpLFxyXG5cdFx0XHRcdFBhcmVudCA9ICQoJyMnICsgTW9kYWxJZCksXHJcblx0XHRcdFx0SGVhZGVyRGF0YSA9IGRhdGFbMF0sXHJcblx0XHRcdFx0SGVhZGVyID0gXCJcIixcclxuXHRcdFx0XHRjYXRlZ29yeSA9IFwiXCI7XHJcblxyXG5cdFx0XHRcclxuXHRcdFx0UGFyZW50LmZpbmQoJy50YWJsZScpLmVtcHR5KCk7XHJcblx0XHRcdGZvcih2YXIga2V5IGluIEhlYWRlckRhdGEpIHtcclxuXHRcdFx0XHRpZihrZXkgIT09IFwiSURcIikge1xyXG5cdFx0XHRcdFx0SGVhZGVyKz1cIjxkaXYgY2xhc3M9J3RhYmxlSGVhZCc+PHN0cm9uZz5cIiArIGtleSArIFwiPC9zdHJvbmc+PGEgaHJlZj0nIycgY2xhc3M9J3NvcnQnIGNhdGVnb3J5PSdcIiArY2F0ZWdvcnkgK1wiJyB0eXBlPSdhc2NlbmRpbmcnPjwvYT48YSBocmVmPScjJyBjbGFzcz0nc29ydCcgY2F0ZWdvcnk9J1wiICtjYXRlZ29yeSArXCInIHR5cGU9J2Rlc2NlbmRpbmcnPjwvYT48L2Rpdj5cIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0UGFyZW50LmZpbmQoJy50YWJsZScpLmFwcGVuZCgnPGRpdiBjbGFzcz1cInRhYmxlUm93XCI+JyArIEhlYWRlciArICc8L2Rpdj4nKTtcclxuXHRcdFx0Zm9yKHZhciBrZXkgaW4gZGF0YSkge1xyXG5cdFx0XHRcdHZhciBJdGVtID0gZGF0YVtrZXldLFxyXG5cdFx0XHRcdFx0VGVtcGxhdGUgPSBcIlwiO1xyXG5cdFx0XHRcdGZvcih2YXIgdmFsIGluIEl0ZW0pIHtcclxuXHRcdFx0XHRcdHZhciBjb250ZW50ID0gXCJcIjtcclxuXHRcdFx0XHRcdGlmKHZhbCAhPT0gXCJJRFwiKSB7XHJcblx0XHRcdFx0XHRcdGlmKEFycmF5LmlzQXJyYXkoSXRlbVt2YWxdKSkge1xyXG5cdFx0XHRcdFx0XHRcdGNvbnRlbnQgPSBJdGVtW3ZhbF1bMF0udmFsdWU7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0Y29udGVudCA9IEl0ZW1bdmFsXTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRUZW1wbGF0ZSArPSBcIjxkaXYgY2xhc3M9J3RhYmxlQ2VsbCc+XCIgKyBjb250ZW50ICsgXCI8L2Rpdj5cIjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0UGFyZW50LmZpbmQoJy50YWJsZScpLmFwcGVuZCgnPGRpdiBjbGFzcz1cInRhYmxlUm93XCI+JyArIFRlbXBsYXRlICsgJzwvZGl2PicpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSxcclxuXHRcdFJlbmRlckNhcm91c2VsOiBmdW5jdGlvbihkYXRhLCBQYXJlbnQpIHtcclxuXHRcdFx0XHJcblx0XHRcdFBhcmVudC5maW5kKCcub3dsLWNhcm91c2VsJykucmVtb3ZlKCk7XHJcblx0XHRcdFBhcmVudC5maW5kKCcuc3RhdGVzX2hlYWRpbmcnKS5maW5kKCcuUkIxNicpLnJlbW92ZSgpO1xyXG5cdFx0XHRQYXJlbnQuZmluZCgnLnN0YXRlc19oZWFkaW5nJykuYWZ0ZXIoJzxkaXYgY2xhc3M9XCJvd2wtY2Fyb3VzZWxcIj48L2Rpdj4nKTtcclxuXHRcdFx0dmFyIENyZWF0ZUxpc3QgPSB3aW5kb3cuanNvbk1hcHBpbmdEYXRhO1xyXG5cclxuXHRcdFx0Zm9yKHZhciBrZXkgaW4gQ3JlYXRlTGlzdCkge1xyXG5cdFx0XHRcdFBhcmVudC5maW5kKCcub3dsLWNhcm91c2VsJykuYXBwZW5kKCc8ZGl2IGNsYXNzPVwiYXJ0aWNsZVwiIGRhdGEtaGVhZD1cIicgK0NyZWF0ZUxpc3Rba2V5XS5LZXkrICdcIj48ZGl2IGNsYXNzPVwieWVhcl9oZWFkaW5nXCI+PHNwYW4+JyArIENyZWF0ZUxpc3Rba2V5XS5WYWx1ZSArICc8L3NwYW4+PGEgaHJlZj1cIiNcIiBjbGFzcz1cInNvcnRcIiB0eXBlPVwiYXNjZW5kaW5nXCI+PHN2ZyBjbGFzcz1cInNvcnRpbmctYXJyb3dzX19hcnJvdyBzb3J0aW5nLWFycm93c19fYXJyb3ctLXVwXCI+PHVzZSB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bGluazpocmVmPVwiL2Rpc3QvaW1nL3N2Zy1zcHJpdGUuc3ZnI3NvcnQtZG93bi1hcnJvd1wiPjwvdXNlPjwvc3ZnPjwvYT48YSBocmVmPVwiI1wiIGNsYXNzPVwic29ydFwiIHR5cGU9XCJkZXNjZW5kaW5nXCI+PHN2ZyBjbGFzcz1cInNvcnRpbmctYXJyb3dzX19hcnJvdyBzb3J0aW5nLWFycm93c19fYXJyb3ctLWRvd25cIj48dXNlIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHhsaW5rOmhyZWY9XCIvZGlzdC9pbWcvc3ZnLXNwcml0ZS5zdmcjc29ydC1kb3duLWFycm93XCI+PC91c2U+PC9zdmc+PC9hPjwvZGl2PjwvZGl2PicpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHZhciBJdGVtcyA9IFBhcmVudC5maW5kKCcub3dsLWNhcm91c2VsJykuZmluZCgnLmFydGljbGUnKTtcclxuXHJcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIEl0ZW0gPSBkYXRhW2ldLCBpbmRleCA9IGksXHJcblx0XHRcdFx0XHRDb21wYW55TGluayA9IGRhdGFbaV0uQ29tcGFueS50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiIFwiKS5qb2luKFwiLVwiKTtcclxuXHRcdFx0XHRQYXJlbnQuZmluZCgnLnN0YXRlc19oZWFkaW5nJykuYXBwZW5kKCc8ZGl2IGNsYXNzPVwiUkIxNlwiPjxhIGhyZWY9XCInICsgZGF0YVtpXS5Db21wYW55UGFnZVVybCArICdcIj4nICtkYXRhW2ldLkNvbXBhbnkrICc8L2E+PC9kaXY+Jyk7XHJcblx0XHRcdFx0Zm9yKHZhciBrZXkgaW4gSXRlbSkge1xyXG5cdFx0XHRcdFx0aWYoQXJyYXkuaXNBcnJheShJdGVtW2tleV0pKSB7XHJcblx0XHRcdFx0XHRcdFBhcmVudC5maW5kKCcuYXJ0aWNsZVtkYXRhLWhlYWQ9XCInICtrZXkrICdcIl0nKS5hcHBlbmQoJzxkaXYgIGNsYXNzPVwiUjE2IFRhYmxlUm93JytpbmRleCsnXCI+JyArSXRlbVtrZXldWzBdLnZhbHVlKyAnPC9kaXY+Jyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMuSW5pdGlhdGVDYXJvdXNlbChQYXJlbnQpO1xyXG5cdFx0XHR0aGlzLkhlaWdodE1hbmFnZW1lbnQoUGFyZW50KTtcclxuXHRcdFx0XHJcblx0XHR9LFxyXG5cdFx0SGVpZ2h0TWFuYWdlbWVudDogZnVuY3Rpb24oUGFyZW50KSB7XHJcblx0XHRcdHZhciBIZWFkaW5nSXRlbXMgPSBQYXJlbnQuZmluZCgnLnllYXJfaGVhZGluZycpLFxyXG5cdFx0XHRcdE1heEhlYWRpbmdIZWlnaHQgPSAwO1xyXG5cclxuXHRcdFx0UGFyZW50LmZpbmQoJy5zdGF0ZXNfaGVhZGluZyAuUkIxNicpLmVhY2goZnVuY3Rpb24oa2V5KXtcclxuXHRcdFx0XHR2YXIgSGVpZ2h0ID0gJCh0aGlzKS5oZWlnaHQoKSxcclxuXHRcdFx0XHRcdEl0ZW0gPSBbXTtcclxuXHJcblx0XHRcdFx0XHQkKCcuYXJ0aWNsZScpLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdHZhciBDdXJyZW50SXRlbSA9ICQodGhpcykuZmluZCgnLlIxNicpW2tleV07XHJcblx0XHRcdFx0XHRcdEl0ZW0ucHVzaChDdXJyZW50SXRlbSk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHJcblxyXG5cdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBJdGVtLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0XHQkKEl0ZW1baV0pLmhlaWdodChIZWlnaHQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdC8vIEhlYWRpbmdJdGVtcy5oZWlnaHQoMCk7XHJcblx0XHRcdEhlYWRpbmdJdGVtcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciB0aGlzSGVpZ2h0ID0gJCh0aGlzKS5oZWlnaHQoKTtcclxuXHRcdFx0XHRpZih0aGlzSGVpZ2h0ID4gTWF4SGVhZGluZ0hlaWdodCkge1xyXG5cdFx0XHRcdFx0TWF4SGVhZGluZ0hlaWdodCA9IHRoaXNIZWlnaHQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0JChIZWFkaW5nSXRlbXMpLmZpbmQoJ3NwYW4nKS5oZWlnaHQoTWF4SGVhZGluZ0hlaWdodCk7XHJcblx0XHR9LFxyXG5cdFx0SW5pdGlhdGVDYXJvdXNlbDogZnVuY3Rpb24oUGFyZW50KSB7XHJcblxyXG5cdFx0XHRcclxuXHRcdFx0UGFyZW50LmZpbmQoJy5vd2wtY2Fyb3VzZWwnKS5vd2xDYXJvdXNlbCh7XHJcbiAgICAgICAgICAgICAgIGxvb3A6dHJ1ZSxcclxuICAgICAgICAgICAgICAgbWFyZ2luOjEwLFxyXG4gICAgICAgICAgICAgICBtZXJnZTp0cnVlLFxyXG4gICAgICAgICAgICAgICBuYXY6dHJ1ZSxcclxuICAgICAgICAgICAgICAgbmF2VGV4dDogW1xyXG4gICAgICAgICAgICAgICBcdCAgXCI8aW1nIHNyYz0nL2Rpc3QvaW1nL2xlc3N0aGFuLnBuZycvPlwiLFxyXG4gICAgICAgICAgICAgICBcdCAgXCI8aW1nIHNyYz0nL2Rpc3QvaW1nL2dyZWF0ZXJ0aGFuLnBuZycvPlwiXHJcbiAgICAgICAgICAgICAgIFx0ICBdLFxyXG5cdFx0XHQgICBzbGlkZUJ5OiAzLCAgXHJcbiAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6e1xyXG4gICAgICAgICAgICAgICAwOntcclxuICAgICAgICAgICAgICAgaXRlbXM6M1xyXG4gICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICA2Nzg6e1xyXG4gICAgICAgICAgICAgICBpdGVtczozXHJcbiAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgIDMyMDp7XHJcbiAgICAgICAgICAgICAgICBpdGVtczoyXHJcbiAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgIDQ4MDp7XHJcbiAgICAgICAgICAgICAgICBpdGVtczoyXHJcbiAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgIDEwMDA6e1xyXG4gICAgICAgICAgICAgICBpdGVtczozXHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIE1vZGFsRXZlbnRzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBcdCQoZG9jdW1lbnQpLm9uKCdjbGljaycsICdhW2RhdGEtdG9nZ2xlPVwibW9kYWwtY29tcGFyZWZpbmFuY2lhbHJlc3VsdHNcIl0nLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgXHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBcdFx0JCgnI21vZGFsLWNvbXBhcmVmaW5hbmNpYWxyZXN1bHRzJykuc2hvdygpO1xyXG4gICAgICAgIFx0fSk7XHJcbiAgICAgICAgXHQkKGRvY3VtZW50KS5vbignY2xpY2snLCAnI21vZGFsLWNvbXBhcmVmaW5hbmNpYWxyZXN1bHRzIC50YWJsZV9jbG9zZScsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIFx0XHQkKHRoaXMpLnBhcmVudHMoJy5JRC1yZXNwb25zaXZlLXRhYmxlLW1vZGFsJykuaGlkZSgpO1xyXG4gICAgICAgIFx0fSk7XHJcbiAgICAgICAgXHQkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLklELXJlc3BvbnNpdmUtdGFibGUtbW9kYWwnLCBmdW5jdGlvbihlKSB7XHJcbiAgICBcdFx0XHRpZigkKGUudGFyZ2V0KS5wYXJlbnRzKCcuY29udGFpbmVyJykubGVuZ3RoID4gMCB8fCAkKGUudGFyZ2V0KS5oYXNDbGFzcygnLmNvbnRhaW5lcicpKSB7XHJcbiAgICBcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuICAgIFx0XHRcdH0gZWxzZSB7XHJcbiAgICBcdFx0XHRcdCQodGhpcykuaGlkZSgpO1xyXG4gICAgXHRcdFx0fVxyXG4gICAgICAgIFx0fSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBTb3J0aW5nTW9kYWw6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgXHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgIFx0JChkb2N1bWVudCkub24oJ2NsaWNrJywnI21vZGFsLXRhYmxlIC5zb3J0JywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgXHRcdHZhciBNYWluRGF0YSA9IHdpbmRvdy5SZXNwb25zaXZlSlNPTixcclxuICAgICAgICBcdFx0XHRJbmRleCA9ICQodGhpcykucGFyZW50cygnLnRhYmxlSGVhZCcpLmluZGV4KCksXHJcbiAgICAgICAgXHRcdFx0SXRlbXMgPSBbXSxcclxuICAgICAgICBcdFx0XHR0eXBlID0gJCh0aGlzKS5hdHRyKCd0eXBlJyksXHJcbiAgICAgICAgXHRcdFx0Q2F0ZWdvcnkgPSAkKHRoaXMpLmF0dHIoJ2NhdGVnb3J5JyksXHJcbiAgICAgICAgXHRcdFx0TW9kYWxEYXRhID0gd2luZG93LlJlc3BvbnNpdmVNb2RhbEpTT04sXHJcbiAgICAgICAgXHRcdFx0VXBkYXRlZEpzb24gPSBbXSxcclxuICAgICAgICBcdFx0XHRIZWFkaW5nVGV4dCA9ICQodGhpcykucGFyZW50cygnLnRhYmxlSGVhZCcpLmZpbmQoJ3N0cm9uZycpLnRleHQoKTtcclxuXHJcbiAgICAgICAgXHRcdCQoJyNtb2RhbC10YWJsZSAudGFibGVSb3cnKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIFx0XHRcdGlmKCQodGhpcykuZmluZCgnLnRhYmxlQ2VsbCcpLmxlbmd0aCA+IDApIHtcclxuXHQgICAgICAgIFx0XHRcdHZhciBUZXh0ID0gJCgkKHRoaXMpLmZpbmQoJy50YWJsZUNlbGwnKVtJbmRleF0pLnRleHQoKTtcclxuXHQgICAgICAgIFx0XHRcdGlmKEhlYWRpbmdUZXh0ID09ICdDb21wYW55Jykge1xyXG5cdFx0ICAgICAgICBcdFx0XHRJdGVtcy5wdXNoKFRleHQpO1xyXG5cdFx0ICAgICAgICBcdFx0fSBlbHNlIHtcclxuXHRcdCAgICAgICAgXHRcdFx0SXRlbXMucHVzaChwYXJzZUZsb2F0KFRleHQpKTtcclxuXHRcdCAgICAgICAgXHRcdH1cclxuXHQgICAgICAgIFx0XHRcdFxyXG5cdCAgICAgICAgXHRcdH1cclxuICAgICAgICBcdFx0fSk7XHJcblxyXG4gICAgICAgIFx0XHRpZihIZWFkaW5nVGV4dCA9PSAnQ29tcGFueScpIHtcclxuXHRcdFx0XHRcdGlmKHR5cGUgPT0gXCJkZXNjZW5kaW5nXCIpIHtcclxuXHRcdFx0XHRcdFx0SXRlbXMuc29ydCgpLnJldmVyc2UoKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdEl0ZW1zLnNvcnQoKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRmb3IodmFyIGtleSBpbiBJdGVtcykge1xyXG5cdFx0XHRcdFx0XHRmb3IodmFyIGpzb24gaW4gTW9kYWxEYXRhKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYoSXRlbXNba2V5XSA9PSBNb2RhbERhdGFbanNvbl0uQ29tcGFueSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0VXBkYXRlZEpzb24ucHVzaChNb2RhbERhdGFbanNvbl0pO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRpZih0eXBlID09IFwiZGVzY2VuZGluZ1wiKSB7XHJcblx0XHRcdFx0XHRcdEl0ZW1zLnNvcnQoZnVuY3Rpb24oYSwgYil7XHJcblx0XHRcdFx0XHRcdCAgcmV0dXJuIGIgLSBhO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdEl0ZW1zLnNvcnQoZnVuY3Rpb24oYSwgYil7XHJcblx0XHRcdFx0XHRcdCAgcmV0dXJuIGEgLSBiO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRmb3IodmFyIGtleSBpbiBJdGVtcykge1xyXG5cdFx0XHRcdFx0XHRmb3IodmFyIGpzb24gaW4gTW9kYWxEYXRhKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYoSXRlbXNba2V5XSA9PSBNb2RhbERhdGFbanNvbl1bSGVhZGluZ1RleHRdWzBdLnZhbHVlKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRVcGRhdGVkSnNvbi5wdXNoKE1vZGFsRGF0YVtqc29uXSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHdpbmRvdy5SZXNwb25zaXZlTW9kYWxKU09OID0gVXBkYXRlZEpzb247XHJcblxyXG5cdFx0XHRcdHNlbGYuUmVuZGVyTW9kYWwod2luZG93LlJlc3BvbnNpdmVNb2RhbEpTT04sIGlkKTtcclxuICAgICAgICBcdH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgU29ydGluZ0Z1bmN0aW9uYWxpdHk6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgXHQvL1NvcnRpbmcgRnVuY3Rpb25hbGl0eVxyXG4gICAgICAgIFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0XHQkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLnllYXJfaGVhZGluZyAuc29ydCcsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0dmFyIFBhcmVudCA9ICQodGhpcykucGFyZW50cygnLmFydGljbGUnKSxcclxuXHRcdFx0XHRcdFZhbHVlcyA9IFBhcmVudC5maW5kKCcuUjE2JyksXHJcblx0XHRcdFx0XHRDb250ZW50ID0gUGFyZW50LmF0dHIoJ2RhdGEtaGVhZCcpLFxyXG5cdFx0XHRcdFx0dHlwZSA9ICQodGhpcykuYXR0cigndHlwZScpLFxyXG5cdFx0XHRcdFx0Y2F0ZWdvcnkgPSAkKHRoaXMpLmF0dHIoJ2NhdGVnb3J5JyksXHJcblx0XHRcdFx0XHRJdGVtcyA9IFtdLFxyXG5cdFx0XHRcdFx0Q2Fyb3VzZWxDb250cm9sID0gJCh0aGlzKS5wYXJlbnRzKCcuSUQtUmVzcG9uc2l2ZS1UYWJsZScpLmZpbmQoJy5vd2wtY29udHJvbHMnKS5maW5kKCcub3dsLWRvdHMnKSxcclxuXHRcdFx0XHRcdENvbnRyb2xJbmRleCA9IENhcm91c2VsQ29udHJvbC5maW5kKCcuYWN0aXZlJykuaW5kZXgoKSxcclxuXHRcdFx0XHRcdENhcm91c2VsU3R5bGVzID0gJCgnI2NvbXBhcmVmaW5hbmNpYWxyZXN1bHRzIC5vd2wtc3RhZ2UnKS5hdHRyKCdzdHlsZScpLFxyXG5cdFx0XHRcdFx0T3dsSXRlbXMgPSAkKCcjY29tcGFyZWZpbmFuY2lhbHJlc3VsdHMgLm93bC1zdGFnZScpLmZpbmQoJy5vd2wtaXRlbScpLFxyXG5cdFx0XHRcdFx0Q2xvbmVkSXRlbXMgPSBbXSxcclxuXHRcdFx0XHRcdEFjdGl2ZUl0ZW1zID0gW107XHJcblxyXG5cdFx0XHRcdE93bEl0ZW1zLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRpZigkKHRoaXMpLmhhc0NsYXNzKCdjbG9uZWQnKSkge1xyXG5cdFx0XHRcdFx0XHRDbG9uZWRJdGVtcy5wdXNoKCQodGhpcykuaW5kZXgoKSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZigkKHRoaXMpLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xyXG5cdFx0XHRcdFx0XHRBY3RpdmVJdGVtcy5wdXNoKCQodGhpcykuaW5kZXgoKSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0JCgnLnllYXJfaGVhZGluZyAuc29ydCcpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuXHRcdFx0XHQkKHRoaXMpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuXHJcblx0XHRcdFx0aWYoY2F0ZWdvcnkgPT0gJ2NvbXBhbmllcycpIHtcclxuXHRcdFx0XHRcdHZhciBDb21wYW55TmFtZXMgPSAkKHRoaXMpLnBhcmVudHMoJy5zdGF0ZXNfaGVhZGluZycpLmZpbmQoJy5SQjE2Jyk7XHJcblxyXG5cdFx0XHRcdFx0Q29tcGFueU5hbWVzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdEl0ZW1zLnB1c2goJCh0aGlzKS50ZXh0KCkpO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRpZih0eXBlID09IFwiZGVzY2VuZGluZ1wiKSB7XHJcblx0XHRcdFx0XHRcdEl0ZW1zLnNvcnQoKS5yZXZlcnNlKCk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRJdGVtcy5zb3J0KCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFZhbHVlcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRpZigkKHRoaXMpLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0XHRcdFx0XHRJdGVtcy5wdXNoKHBhcnNlRmxvYXQoJCh0aGlzKS50ZXh0KCkpKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRpZih0eXBlID09IFwiZGVzY2VuZGluZ1wiKSB7XHJcblx0XHRcdFx0XHRcdEl0ZW1zLnNvcnQoZnVuY3Rpb24oYSwgYil7XHJcblx0XHRcdFx0XHRcdCAgcmV0dXJuIGIgLSBhO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdEl0ZW1zLnNvcnQoZnVuY3Rpb24oYSwgYil7XHJcblx0XHRcdFx0XHRcdCAgcmV0dXJuIGEgLSBiO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0c2VsZi5SZWNyZWF0ZU9iamVjdChDb250ZW50LCBJdGVtcywgd2luZG93LlJlc3BvbnNpdmVKU09OLCBpZCwgY2F0ZWdvcnkpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdCQoJyNjb21wYXJlZmluYW5jaWFscmVzdWx0cyAub3dsLXN0YWdlJykuYXR0cignc3R5bGUnLCBDYXJvdXNlbFN0eWxlcyk7XHJcblx0XHRcdFx0JCgnI2NvbXBhcmVmaW5hbmNpYWxyZXN1bHRzIC5vd2wtc3RhZ2UgLm93bC1pdGVtJykucmVtb3ZlQ2xhc3MoJ2Nsb25lZCcpO1xyXG5cdFx0XHRcdCQoJyNjb21wYXJlZmluYW5jaWFscmVzdWx0cyAub3dsLXN0YWdlIC5vd2wtaXRlbScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuXHRcdFx0XHRmb3IodmFyIGtleSBpbiBDbG9uZWRJdGVtcykge1xyXG5cdFx0XHRcdFx0JCgkKCcjY29tcGFyZWZpbmFuY2lhbHJlc3VsdHMgLm93bC1zdGFnZSAub3dsLWl0ZW0nKVtDbG9uZWRJdGVtc1trZXldXSkuYWRkQ2xhc3MoJ2Nsb25lZCcpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Zm9yKHZhciBrZXkgaW4gQWN0aXZlSXRlbXMpIHtcclxuXHRcdFx0XHRcdCQoJCgnI2NvbXBhcmVmaW5hbmNpYWxyZXN1bHRzIC5vd2wtc3RhZ2UgLm93bC1pdGVtJylbQWN0aXZlSXRlbXNba2V5XV0pLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdCQoJyNjb21wYXJlZmluYW5jaWFscmVzdWx0cyAub3dsLWRvdCcpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuXHRcdFx0XHQkKCQoJyNjb21wYXJlZmluYW5jaWFscmVzdWx0cyAub3dsLWRvdCcpW0NvbnRyb2xJbmRleF0pLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuXHRcdFx0XHQkKCcjY29tcGFyZWZpbmFuY2lhbHJlc3VsdHMgLmFydGljbGVbZGF0YS1oZWFkPVwiJyArIENvbnRlbnQgKyAnXCJdIC5zb3J0W3R5cGU9XCInICsgdHlwZSArICdcIl0nKS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcblx0XHRcdH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgUmVjcmVhdGVPYmplY3Q6IGZ1bmN0aW9uKENvbnRlbnQsIFNvcnRlZEl0ZW0sIE1haW5BcnJheSwgaWQsIGNhdGVnb3J5LCBtb2RhbCkge1xyXG4gICAgICAgIFx0dmFyIHNlbGYgPSB0aGlzLCBSZWNyZWF0ZWRBcnJheSA9IFtdO1xyXG4gICAgICAgIFx0Ly8gaWQuZmluZCgnLlJCMTYnKS5yZW1vdmUoKTtcclxuICAgICAgICBcdGlmKGNhdGVnb3J5ID09PSAnY29tcGFuaWVzJykge1xyXG4gICAgICAgIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgU29ydGVkSXRlbS5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgXHRcdGZvcih2YXIga2V5IGluIE1haW5BcnJheSkge1xyXG5cdCAgICAgICAgXHRcdFx0dmFyIE5hbWUgPSBNYWluQXJyYXlba2V5XS5Db21wYW55O1xyXG5cdCAgICAgICAgXHRcdFx0aWYoTmFtZSA9PSBTb3J0ZWRJdGVtW2ldKSB7XHJcblx0ICAgICAgICBcdFx0XHRcdFJlY3JlYXRlZEFycmF5LnB1c2goTWFpbkFycmF5W2tleV0pO1xyXG5cdCAgICAgICAgXHRcdFx0fVxyXG5cdCAgICAgICAgXHRcdH1cclxuXHQgICAgICAgIFx0fVxyXG4gICAgICAgIFx0fSBlbHNlIHtcclxuXHQgICAgICAgIFx0Zm9yKHZhciBpID0gMDsgaSA8IFNvcnRlZEl0ZW0ubGVuZ3RoOyBpKyspIHtcclxuXHQgICAgICAgIFx0XHRmb3IodmFyIGtleSBpbiBNYWluQXJyYXkpIHtcclxuXHQgICAgICAgIFx0XHRcdHZhciBfT2JqZWN0ID0gTWFpbkFycmF5W2tleV07XHJcblx0ICAgICAgICBcdFx0XHRpZihfT2JqZWN0W0NvbnRlbnRdWzBdLnZhbHVlID09IFNvcnRlZEl0ZW1baV0pIHtcclxuXHQgICAgICAgIFx0XHRcdFx0UmVjcmVhdGVkQXJyYXkucHVzaChfT2JqZWN0KTtcclxuXHQgICAgICAgIFx0XHRcdH1cclxuXHQgICAgICAgIFx0XHR9XHJcblx0ICAgICAgICBcdH1cclxuXHQgICAgICAgIFx0Zm9yKHZhciBrZXkgaW4gTWFpbkFycmF5KSB7XHJcbiAgICAgICAgXHRcdFx0dmFyIF9PYmplY3QgPSBNYWluQXJyYXlba2V5XTtcclxuICAgICAgICBcdFx0XHRpZihfT2JqZWN0W0NvbnRlbnRdWzBdLnZhbHVlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIFx0XHRcdFx0UmVjcmVhdGVkQXJyYXkucHVzaChfT2JqZWN0KTtcclxuICAgICAgICBcdFx0XHR9XHJcbiAgICAgICAgXHRcdH1cclxuXHQgICAgICAgIH1cclxuICAgICAgICBcdC8vICRvd2wudHJpZ2dlcignZGVzdHJveS5vd2wuY2Fyb3VzZWwnKTtcclxuICAgICAgICBcdFxyXG4gICAgICAgIFx0aWYobW9kYWwpIHtcclxuICAgICAgICBcdFx0d2luZG93LlJlc3BvbnNpdmVNb2RhbEpTT04gPSBSZWNyZWF0ZWRBcnJheTtcclxuICAgICAgICBcdFx0c2VsZi5SZW5kZXJNb2RhbCh3aW5kb3cuUmVzcG9uc2l2ZU1vZGFsSlNPTiwgaWQpO1xyXG4gICAgICAgIFx0fSBlbHNlIHtcclxuICAgICAgICBcdFx0d2luZG93LlJlc3BvbnNpdmVKU09OID0gUmVjcmVhdGVkQXJyYXk7XHJcblx0ICAgICAgICBcdHNlbGYuUmVuZGVyQ2Fyb3VzZWwod2luZG93LlJlc3BvbnNpdmVKU09OLCBpZCk7XHJcblx0ICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGRhdGEsIGlkKSB7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdFx0c2VsZi5HZXRBamF4RGF0YShkYXRhLCBpZCk7XHJcblx0XHRcdHNlbGYuTW9kYWxFdmVudHMoKTtcclxuXHRcdFx0c2VsZi5Tb3J0aW5nRnVuY3Rpb25hbGl0eShpZCk7XHJcblx0XHRcdHNlbGYuU29ydGluZ01vZGFsKGlkKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGlmKCQoJyNjb21wYXJlZmluYW5jaWFscmVzdWx0cycpLmxlbmd0aCA+IDApIHtcclxuXHRcdFJlc3BvbnNpdmVUYWJsZS5pbml0KHdpbmRvdy5qc29uRmluYW5jaWFsUmVzdWx0Rm9yQ29tcGFyZSwgJCgnI2NvbXBhcmVmaW5hbmNpYWxyZXN1bHRzJykpO1x0XHJcblx0fVxyXG5cdFxyXG5cclxuXHRcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG5cdC8vIGJvZHkuLi5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdHZhciBSZXNwb25zaXZlRmluYW5jaWFsVGFibGUgPSB7XHJcblx0XHRMYXN0SXRlbTogbnVsbCxcclxuXHRcdEZpcnN0SXRlbTogbnVsbCxcclxuXHRcdFJlbmRlckNhcm91c2VsOiBmdW5jdGlvbihkYXRhLCBQYXJlbnQpIHtcclxuXHRcdFx0UGFyZW50LmZpbmQoJy5vd2wtY2Fyb3VzZWwnKS5yZW1vdmUoKTtcclxuXHRcdFx0UGFyZW50LmZpbmQoJy5zdGF0ZXNfaGVhZGluZycpLnBhcmVudCgpLmFwcGVuZCgnPGRpdiBjbGFzcz1cIm93bC13cmFwcGVyXCI+PGRpdiBjbGFzcz1cIm93bC1jYXJvdXNlbFwiPjwvZGl2PjwvZGl2PicpO1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0SGVhZGVyID0gZGF0YVswXS5IZWFkZXIsXHJcblx0XHRcdFx0VmFsdWVzID0gZGF0YVswXS5WYWx1ZXMsXHJcblx0XHRcdFx0U3RhdGVzSGVhZGluZyA9IFBhcmVudC5maW5kKCcuc3RhdGVzX2hlYWRpbmcnKSxcclxuXHRcdFx0XHRDYXJvdXNlbCA9IFBhcmVudC5maW5kKCcub3dsLWNhcm91c2VsJyk7XHJcblxyXG5cdFx0XHRzZWxmLkZpcnN0SXRlbSA9IGRhdGFbMF0uSGVhZGVyWzFdO1xyXG5cdFx0XHRzZWxmLkxhc3RJdGVtID0gZGF0YVswXS5IZWFkZXJbZGF0YVswXS5IZWFkZXIubGVuZ3RoIC0gMV07XHJcblx0XHRcdFBhcmVudC5maW5kKCcuc3RhdGVzX2hlYWRpbmcnKS5lbXB0eSgpO1xyXG5cdFx0XHRmb3IodmFyIGtleSBpbiBIZWFkZXIpIHtcclxuXHRcdFx0XHRpZihrZXkgPT0gMCkge1xyXG5cdFx0XHRcdFx0U3RhdGVzSGVhZGluZy5hcHBlbmQoJzxkaXYgY2xhc3M9XCJ5ZWFyX2hlYWRpbmdcIj4nICsgSGVhZGVyW2tleV0gKyAnPC9kaXY+Jyk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdENhcm91c2VsLmFwcGVuZCgnPGRpdiBjbGFzcz1cImFydGljbGVcIj48ZGl2IGNsYXNzPVwieWVhcl9oZWFkaW5nXCIgZGF0YS1oZWFkPVwiJyArSGVhZGVyW2tleV0rICdcIj4nICsgSGVhZGVyW2tleV0gKyAnPC9kaXY+PC9kaXY+Jyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmb3IodmFyIGtleSBpbiBWYWx1ZXMpIHtcclxuXHRcdFx0XHR2YXIgQ3VycmVudFZhbHVlID0gVmFsdWVzW2tleV07XHJcblx0XHRcdFx0Zm9yKHZhciBpdGVtIGluIEN1cnJlbnRWYWx1ZSkge1xyXG5cdFx0XHRcdFx0aWYoaXRlbSA9PSAwKSB7XHJcblx0XHRcdFx0XHRcdFN0YXRlc0hlYWRpbmcuYXBwZW5kKCc8ZGl2IGNsYXNzPVwiUkIxNlwiPicgK0N1cnJlbnRWYWx1ZVtpdGVtXSsgJzwvZGl2PicpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0JChQYXJlbnQuZmluZCgnLmFydGljbGUnKVtpdGVtLTFdKS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJSMTZcIj4nICtDdXJyZW50VmFsdWVbaXRlbV0rICc8L2Rpdj4nKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0c2VsZi5Jbml0YXRlQ2Fyb3VzZWwoUGFyZW50KTtcclxuXHRcdFx0c2VsZi5IZWlnaHRNYW5hZ2VtZW50KFBhcmVudCk7XHJcblx0XHRcdHNlbGYuQ2hhbmdlU3RhdGVFdmVudHMoUGFyZW50KTtcclxuXHRcdH0sXHJcblx0XHRDaGFuZ2VTdGF0ZUV2ZW50czogZnVuY3Rpb24oUGFyZW50KSB7XHJcblx0XHRcdHZhciBPd2xOZXh0ID0gUGFyZW50LmZpbmQoJy5vd2wtbmV4dCcpLFxyXG5cdFx0XHRcdE93bFByZXZpb3VzID0gUGFyZW50LmZpbmQoJy5vd2wtcHJldmlvdXMnKSxcclxuXHRcdFx0XHRzZWxmID0gdGhpcztcclxuXHJcblx0XHRcdCQoJy5vd2wtcHJldicpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xyXG5cdFx0XHQkKGRvY3VtZW50KS5vbignY2xpY2snLCcub3dsLXByZXYsIC5vd2wtbmV4dCcsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHR2YXIgQWN0aXZlRWxlbWVudHMgPSBQYXJlbnQuZmluZCgnLm93bC1pdGVtLmFjdGl2ZSAueWVhcl9oZWFkaW5nJyksXHJcblx0XHRcdFx0XHRcdEFjdGl2ZUVsZW1lbnRzVGV4dHMgPSBbXTtcclxuXHJcblx0XHRcdFx0XHRBY3RpdmVFbGVtZW50cy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRBY3RpdmVFbGVtZW50c1RleHRzLnB1c2goJCh0aGlzKS50ZXh0KCkudHJpbSgpKTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0JCgnLm93bC1wcmV2LCAub3dsLW5leHQnKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcclxuXHRcdFx0XHRcdGlmKHNlbGYuRmlyc3RJdGVtLnRyaW0oKSA9PSBBY3RpdmVFbGVtZW50c1RleHRzWzBdKSB7XHJcblx0XHRcdFx0XHRcdCQoJy5vd2wtcHJldicpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0JCgnLm93bC1wcmV2JykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZihzZWxmLkxhc3RJdGVtLnRyaW0oKSA9PSBBY3RpdmVFbGVtZW50c1RleHRzW0FjdGl2ZUVsZW1lbnRzVGV4dHMubGVuZ3RoIC0gMV0pIHtcclxuXHRcdFx0XHRcdFx0JCgnLm93bC1uZXh0JykuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHQkKCcub3dsLW5leHQnKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LCA0MDApO1xyXG5cdFx0XHR9KTtcclxuIFx0XHR9LFxyXG5cdFx0SGVpZ2h0TWFuYWdlbWVudDogZnVuY3Rpb24oUGFyZW50KSB7XHJcblx0XHRcdFBhcmVudC5maW5kKCcuc3RhdGVzX2hlYWRpbmcgLlJCMTYnKS5lYWNoKGZ1bmN0aW9uKGtleSl7XHJcblx0XHRcdFx0dmFyIEhlaWdodCA9ICQodGhpcykuaGVpZ2h0KCksXHJcblx0XHRcdFx0XHRJdGVtID0gW107XHJcblxyXG5cdFx0XHRcdFx0JCgnLmFydGljbGUnKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHR2YXIgQ3VycmVudEl0ZW0gPSAkKHRoaXMpLmZpbmQoJy5SMTYnKVtrZXldO1xyXG5cdFx0XHRcdFx0XHRJdGVtLnB1c2goQ3VycmVudEl0ZW0pO1xyXG5cdFx0XHRcdFx0fSk7XHJcblxyXG5cclxuXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgSXRlbS5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdFx0JChJdGVtW2ldKS5oZWlnaHQoSGVpZ2h0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHR9LFxyXG5cdFx0UmVuZGVyTW9kYWw6IGZ1bmN0aW9uKGRhdGEsIFBhcmVudCkge1xyXG5cdFx0XHR2YXIgSGVhZGVyID0gZGF0YVswXS5IZWFkZXIsXHJcblx0XHRcdFx0VmFsdWVzID0gZGF0YVswXS5WYWx1ZXMsXHJcblx0XHRcdFx0RmluYW5jZU1vZGFsID0gJCgnI21vZGFsLWZpbmFuY2lhbHJlc3VsdHMnKSxcclxuXHRcdFx0XHRNb2RhbFRhYmxlID0gRmluYW5jZU1vZGFsLmZpbmQoJy50YWJsZScpO1xyXG5cclxuXHRcdFx0TW9kYWxUYWJsZS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJ0YWJsZVJvd1wiPjwvZGl2PicpO1xyXG5cdFx0XHRmb3IodmFyIGtleSBpbiBIZWFkZXIpIHtcclxuXHRcdFx0XHRNb2RhbFRhYmxlLmZpbmQoJy50YWJsZVJvdycpLmFwcGVuZCgnPGRpdiBjbGFzcz1cInRhYmxlSGVhZFwiPjxzdHJvbmc+JyArSGVhZGVyW2tleV0rICc8L3N0cm9uZz48L2Rpdj4nKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Zm9yKHZhciBrZXkgaW4gVmFsdWVzKSB7XHJcblx0XHRcdFx0TW9kYWxUYWJsZS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJ0YWJsZVJvd1wiPjwvZGl2PicpO1xyXG5cdFx0XHRcdHZhciBDdXJyZW50VmFsdWUgPSBWYWx1ZXNba2V5XTtcclxuXHRcdFx0XHRmb3IodmFyIGl0ZW0gaW4gQ3VycmVudFZhbHVlKSB7XHJcblx0XHRcdFx0XHRNb2RhbFRhYmxlLmZpbmQoJy50YWJsZVJvdzpsYXN0LWNoaWxkJykuYXBwZW5kKCc8ZGl2IGNsYXNzPVwidGFibGVDZWxsXCI+JyArQ3VycmVudFZhbHVlW2l0ZW1dKyAnPC9kaXY+Jyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSxcclxuXHRcdEluaXRhdGVDYXJvdXNlbDogZnVuY3Rpb24oUGFyZW50KSB7XHJcblx0XHRcdFBhcmVudC5maW5kKCcub3dsLWNhcm91c2VsJykub3dsQ2Fyb3VzZWwoe1xyXG4gICAgICAgICAgICAgICBsb29wOmZhbHNlLFxyXG4gICAgICAgICAgICAgICBtZXJnZTp0cnVlLFxyXG4gICAgICAgICAgICAgICBtYXJnaW46MSxcclxuICAgICAgICAgICAgICAgbmF2OnRydWUsXHJcbiAgICAgICAgICAgICAgIG9uRHJhZ2dlZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgIFx0XHR2YXIgQWN0aXZlRWxlbWVudHMgPSBQYXJlbnQuZmluZCgnLm93bC1pdGVtLmFjdGl2ZSAueWVhcl9oZWFkaW5nJyksXHJcblx0XHRcdFx0XHRcdEFjdGl2ZUVsZW1lbnRzVGV4dHMgPSBbXTtcclxuXHJcblx0XHRcdFx0XHRBY3RpdmVFbGVtZW50cy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRBY3RpdmVFbGVtZW50c1RleHRzLnB1c2goJCh0aGlzKS50ZXh0KCkudHJpbSgpKTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0JCgnLm93bC1wcmV2LCAub3dsLW5leHQnKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcclxuXHRcdFx0XHRcdGlmKHNlbGYuRmlyc3RJdGVtLnRyaW0oKSA9PSBBY3RpdmVFbGVtZW50c1RleHRzWzBdKSB7XHJcblx0XHRcdFx0XHRcdCQoJy5vd2wtcHJldicpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0JCgnLm93bC1wcmV2JykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZihzZWxmLkxhc3RJdGVtLnRyaW0oKSA9PSBBY3RpdmVFbGVtZW50c1RleHRzW0FjdGl2ZUVsZW1lbnRzVGV4dHMubGVuZ3RoIC0gMV0pIHtcclxuXHRcdFx0XHRcdFx0JCgnLm93bC1uZXh0JykuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHQkKCcub3dsLW5leHQnKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcclxuXHRcdFx0XHRcdH1cclxuICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgbmF2VGV4dDogW1xyXG4gICAgICAgICAgICAgICBcdCAgXCI8aW1nIHNyYz0nL2Rpc3QvaW1nL2xlc3N0aGFuLnBuZycvPlwiLFxyXG4gICAgICAgICAgICAgICBcdCAgXCI8aW1nIHNyYz0nL2Rpc3QvaW1nL2dyZWF0ZXJ0aGFuLnBuZycvPlwiXHJcbiAgICAgICAgICAgICAgIFx0ICBdLFxyXG5cdFx0XHQgICBzbGlkZUJ5OiAxLCAgXHJcbiAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6e1xyXG4gICAgICAgICAgICAgICAwOntcclxuICAgICAgICAgICAgICAgaXRlbXM6M1xyXG4gICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICA2Nzg6e1xyXG4gICAgICAgICAgICAgICBpdGVtczozXHJcbiAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgIDMyMDp7XHJcbiAgICAgICAgICAgICAgICBpdGVtczoyXHJcbiAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgIDQ4MDp7XHJcbiAgICAgICAgICAgICAgICBpdGVtczoyXHJcbiAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgIDEwMDA6e1xyXG4gICAgICAgICAgICAgICBpdGVtczo1XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIE1vZGFsRXZlbnRzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBcdCQoZG9jdW1lbnQpLm9uKCdjbGljaycsICdhW2RhdGEtdG9nZ2xlPVwibW9kYWwtZmluYW5jaWFscmVzdWx0c1wiXScsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIFx0XHQkKCcjbW9kYWwtZmluYW5jaWFscmVzdWx0cycpLnNob3coKTtcclxuICAgICAgICBcdH0pO1xyXG4gICAgICAgIFx0JChkb2N1bWVudCkub24oJ2NsaWNrJywgJyNtb2RhbC1maW5hbmNpYWxyZXN1bHRzIC50YWJsZV9jbG9zZScsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIFx0XHQkKHRoaXMpLnBhcmVudHMoJy5JRC1yZXNwb25zaXZlLXRhYmxlLW1vZGFsJykuaGlkZSgpO1xyXG4gICAgICAgIFx0fSk7XHJcbiAgICAgICAgXHQkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLklELXJlc3BvbnNpdmUtdGFibGUtbW9kYWwnLCBmdW5jdGlvbihlKSB7XHJcbiAgICBcdFx0XHRpZigkKGUudGFyZ2V0KS5wYXJlbnRzKCcuY29udGFpbmVyJykubGVuZ3RoID4gMCB8fCAkKGUudGFyZ2V0KS5oYXNDbGFzcygnLmNvbnRhaW5lcicpKSB7XHJcbiAgICBcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuICAgIFx0XHRcdH0gZWxzZSB7XHJcbiAgICBcdFx0XHRcdCQodGhpcykuaGlkZSgpO1xyXG4gICAgXHRcdFx0fVxyXG4gICAgICAgIFx0fSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBSZW5kZXJUYWJsZTogZnVuY3Rpb24oZGF0YSwgUGFyZW50KSB7XHJcbiAgICBcdCBcdFBhcmVudC5maW5kKCcuc3RhdGVzX2hlYWRpbmcnKS5wYXJlbnQoKS5yZW1vdmUoKTtcclxuXHRcdCBcdFBhcmVudC5hcHBlbmQoJzxkaXYgY2xhc3M9XCJ0YWJsZS13cmFwcGVyXCI+PGRpdiBjbGFzcz1cInRhYmxlXCI+PC9kaXY+PC9kaXY+Jyk7XHJcblx0XHQgXHR2YXIgV3JhcHBlciA9ICQoJyNmaW5hbmNpYWxyZXN1bHRzIC50YWJsZScpLFxyXG5cdFx0IFx0XHRIZWFkZXIgPSBkYXRhWzBdLkhlYWRlcixcclxuXHRcdCBcdFx0VmFsdWVzID0gZGF0YVswXS5WYWx1ZXM7XHJcblxyXG5cdFx0IFx0V3JhcHBlci5hcHBlbmQoJzxkaXYgY2xhc3M9XCJ0YWJsZVJvd1wiPjwvZGl2PicpO1xyXG5cdFx0XHRcclxuXHRcdFx0Zm9yKHZhciBrZXkgaW4gSGVhZGVyKSB7XHJcblx0XHRcdFx0V3JhcHBlci5maW5kKCcudGFibGVSb3c6bGFzdC1jaGlsZCcpLmFwcGVuZCgnPGRpdiBjbGFzcz1cInRhYmxlSGVhZFwiPicgK0hlYWRlcltrZXldKyAnPC9kaXY+Jyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZvcih2YXIga2V5SXRlbSBpbiBWYWx1ZXMpIHtcclxuXHRcdFx0XHR2YXIgSXRlbXMgPSBWYWx1ZXNba2V5SXRlbV07XHJcblx0XHRcdFx0V3JhcHBlci5hcHBlbmQoJzxkaXYgY2xhc3M9XCJ0YWJsZVJvd1wiPjwvZGl2PicpO1xyXG5cdFx0XHRcdGZvcih2YXIgaXRlbSBpbiBJdGVtcykge1xyXG5cdFx0XHRcdFx0V3JhcHBlci5maW5kKCcudGFibGVSb3c6bGFzdC1jaGlsZCcpLmFwcGVuZCgnPGRpdiBjbGFzcz1cInRhYmxlQ2VsbFwiPicgK0l0ZW1zW2l0ZW1dKyAnPC9kaXY+Jyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcbiAgICAgICAgfSxcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGRhdGEsIFBhcmVudCkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0d2luZG93U2l6ZSA9ICQoIGRvY3VtZW50ICkud2lkdGgoKTtcclxuXHJcblx0XHRcdGlmKHdpbmRvd1NpemUgPiA3MzYpIHtcclxuXHRcdFx0XHRzZWxmLlJlbmRlclRhYmxlKGRhdGEsIFBhcmVudCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c2VsZi5SZW5kZXJDYXJvdXNlbChkYXRhLCBQYXJlbnQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHNlbGYuUmVuZGVyTW9kYWwoZGF0YSwgUGFyZW50KTtcclxuXHRcdFx0c2VsZi5Nb2RhbEV2ZW50cygpO1xyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGlmKCQoJyNmaW5hbmNpYWxyZXN1bHRzJykubGVuZ3RoID4gMCkge1xyXG5cdFx0UmVzcG9uc2l2ZUZpbmFuY2lhbFRhYmxlLmluaXQod2luZG93Lmpzb25SZXN1bHRGaW5hbmNpYWwsICQoJyNmaW5hbmNpYWxyZXN1bHRzJykpO1x0XHJcblx0fVxyXG59KSgpOyIsIihmdW5jdGlvbiAoYXJndW1lbnQpIHtcclxuXHR2YXIgTWVyZ2VBY3F1aXN0aW9uID0ge1xyXG5cdFx0Q3VycmVudEFycmF5OiBbXSxcclxuXHRcdE1vbnRoTmFtZXM6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxyXG5cdFx0UmVuZGVyRGVza3RvcFZlcnNpb246IGZ1bmN0aW9uKGRhdGEsIFBhcmVudCkge1xyXG5cdFx0XHRQYXJlbnQuZmluZCgndGJvZHkudmlzaWJsZS1sZycpLnJlbW92ZSgpO1xyXG5cdFx0XHRQYXJlbnQuYXBwZW5kKCc8dGJvZHkgY2xhc3M9XCJ2aXNpYmxlLWxnXCI+PC90Ym9keT4nKTtcclxuXHJcblx0XHRcdHZhciBXcmFwcGVyID0gUGFyZW50LmZpbmQoJ3Rib2R5LnZpc2libGUtbGcnKTtcclxuXHJcblx0XHRcdGZvcih2YXIga2V5IGluIGRhdGEpIHtcclxuXHRcdFx0XHRXcmFwcGVyLmFwcGVuZCgnPHRyPjwvdHI+Jyk7XHRcdFx0XHRcclxuXHRcdFx0XHRXcmFwcGVyLmZpbmQoJ3RyOmxhc3QtY2hpbGQnKS5hcHBlbmQoJzx0ZCBhbGlnbj1cImxlZnRcIiBkZWFsPVwiTW9udGhcIiB0eXBlPVwiZGF0ZVwiIG1vbnRoPVwiJyAgK2RhdGFba2V5XS5Nb250aCsgJ1wiIGNsYXNzPVwiUjE2IHBhZC0xMFwiPicgK3RoaXMuTW9udGhOYW1lc1tkYXRhW2tleV0uTW9udGggLSAxXSsgJzwvdGQ+Jyk7XHJcblx0XHRcdFx0V3JhcHBlci5maW5kKCd0cjpsYXN0LWNoaWxkJykuYXBwZW5kKCc8dGQgYWxpZ249XCJsZWZ0XCIgZGVhbD1cIkFjcXVpcmVyXCIgdHlwZT1cInRleHRcIiBjbGFzcz1cIlIxNiBwYWQtMTBcIj4nK2RhdGFba2V5XS5BY3F1aXJlcisnPC90ZD4nKTtcclxuXHRcdFx0XHRXcmFwcGVyLmZpbmQoJ3RyOmxhc3QtY2hpbGQnKS5hcHBlbmQoJzx0ZCBhbGlnbj1cImxlZnRcIiBkZWFsPVwiVGFyZ2V0XCIgdHlwZT1cInRleHRcIiBjbGFzcz1cIlIxNiBwYWQtMTBcIj4nK2RhdGFba2V5XS5UYXJnZXQrJzwvdGQ+Jyk7XHJcblx0XHRcdFx0V3JhcHBlci5maW5kKCd0cjpsYXN0LWNoaWxkJykuYXBwZW5kKCc8dGQgYWxpZ249XCJsZWZ0XCIgZGVhbD1cIlRhcmdldFNlY3RvclwiIHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJSMTYgcGFkLTEwXCI+JytkYXRhW2tleV0uVGFyZ2V0U2VjdG9yKyc8L3RkPicpO1xyXG5cdFx0XHRcdFdyYXBwZXIuZmluZCgndHI6bGFzdC1jaGlsZCcpLmFwcGVuZCgnPHRkIGFsaWduPVwibGVmdFwiIGRlYWw9XCJUYXJnZXRMb2NhdGlvblwiIHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJSMTYgcGFkLTEwXCI+JytkYXRhW2tleV0uVGFyZ2V0TG9jYXRpb24rJzwvdGQ+Jyk7XHJcblx0XHRcdFx0V3JhcHBlci5maW5kKCd0cjpsYXN0LWNoaWxkJykuYXBwZW5kKCc8dGQgYWxpZ249XCJyaWdodFwiIGRlYWw9XCJEZXRhaWxcIiB0eXBlPVwibnVtYmVyXCIgY2xhc3M9XCJSMTYgcGFkLTEwXCI+JytkYXRhW2tleV0uRGV0YWlsKyc8L3RkPicpO1xyXG5cdFx0XHRcdGlmKGRhdGFba2V5XS5QcmljZSkge1xyXG5cdFx0XHRcdFx0dmFyIFByaWNlID0gZGF0YVtrZXldLlByaWNlO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRQcmljZSA9ICctLSc7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFdyYXBwZXIuZmluZCgndHI6bGFzdC1jaGlsZCcpLmFwcGVuZCgnPHRkIGFsaWduPVwicmlnaHRcIiBkZWFsPVwiUHJpY2VcIiB0eXBlPVwibnVtYmVyXCIgY2xhc3M9XCJSMTYgcGFkLTEwXCI+JytQcmljZSsnPC90ZD4nKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH0sXHJcblx0XHRTb3J0aW5nRXZlbnQ6IGZ1bmN0aW9uKGRhdGEsIFBhcmVudCkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHRcdCQoZG9jdW1lbnQpLm9uKCdjbGljaycsJy5zb3J0aW5nLWJ1dHRvbnMgYScsIGZ1bmN0aW9uKGUpe1xyXG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHR2YXIgVHlwZSA9ICQodGhpcykuYXR0cigndHlwZScpLFxyXG5cdFx0XHRcdFx0Q2F0ZWdvcnkgPSAkKHRoaXMpLmF0dHIoJ2NhdGVnb3J5JyksXHJcblx0XHRcdFx0XHRJbmRleCA9ICQodGhpcykucGFyZW50cygndGgnKS5pbmRleCgpLFxyXG5cdFx0XHRcdFx0U29ydGluZ0FycmF5ID0gW10sXHJcblx0XHRcdFx0XHRNeUFycmF5ID0gc2VsZi5DdXJyZW50QXJyYXksXHJcblx0XHRcdFx0XHRCb2R5ID0gUGFyZW50LmZpbmQoJ3Rib2R5LnZpc2libGUtbGcnKSxcclxuXHRcdFx0XHRcdEFwcGVuZFRvRW5kRWxlbWVudHMgPSBbXSxcclxuXHRcdFx0XHRcdFNvcnRlZEVsZW1lbnRzID0gW10sXHJcblx0XHRcdFx0XHRTb3J0aW5nVHlwZSA9ICQodGhpcykucGFyZW50cygnLnNvcnRpbmctYnV0dG9ucycpLmF0dHIoJ2RlYWwnKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHQvL0ZldGNoaW5nIEVsZW1lbnRzXHJcblx0XHRcdFx0Qm9keS5maW5kKCd0cicpLmVhY2goZnVuY3Rpb24oa2V5KSB7XHJcblx0XHRcdFx0XHR2YXIgVGV4dCA9IFwiXCI7XHJcblx0XHRcdFx0XHRpZihDYXRlZ29yeSA9PT0gJ21vbnRoJykge1xyXG5cdFx0XHRcdFx0XHRTb3J0aW5nQXJyYXkucHVzaChwYXJzZUludCgkKCQodGhpcykuZmluZCgndGQnKVtJbmRleF0pLmF0dHIoJ21vbnRoJykpKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGlmKCQoJCh0aGlzKS5maW5kKCd0ZCcpW0luZGV4XSkudGV4dCgpLmluY2x1ZGVzKCc8YSBocmVmPScpKSB7XHJcblx0XHRcdFx0XHRcdFx0VGV4dCA9ICQoJCh0aGlzKS5maW5kKCd0ZCcpW0luZGV4XSkuZmluZCgnYScpLnRleHQoKTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRUZXh0ID0gJCgkKHRoaXMpLmZpbmQoJ3RkJylbSW5kZXhdKS50ZXh0KCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0U29ydGluZ0FycmF5LnB1c2goVGV4dCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coU29ydGluZ0FycmF5KTtcclxuXHRcdFx0XHRpZihDYXRlZ29yeSA9PT0gJ21vbnRoJykge1xyXG5cdFx0XHRcdFx0aWYoVHlwZSA9PT0gJ2FzY2VuZGluZycpIHtcclxuXHRcdFx0XHRcdFx0U29ydGluZ0FycmF5LnNvcnQoZnVuY3Rpb24oYSwgYil7XHJcblx0XHRcdFx0XHRcdCAgcmV0dXJuIGEgLSBiO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFNvcnRpbmdBcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpe1xyXG5cdFx0XHRcdFx0XHQgIHJldHVybiBiIC0gYTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGlmKFR5cGUgPT09ICdhc2NlbmRpbmcnKSB7XHJcblx0XHRcdFx0XHRcdFNvcnRpbmdBcnJheS5zb3J0KCk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRTb3J0aW5nQXJyYXkuc29ydCgpLnJldmVyc2UoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Y29uc29sZS5sb2coU29ydGluZ0FycmF5KTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHR2YXIgQ3VycmVudEl0ZW0gPSBzZWxmLkN1cnJlbnRBcnJheTtcclxuXHRcdFx0XHRmb3IodmFyIGkgaW4gU29ydGluZ0FycmF5KSB7XHJcblx0XHRcdFx0XHRmb3IodmFyIGogaW4gQ3VycmVudEl0ZW0pIHtcclxuXHRcdFx0XHRcdFx0aWYoU29ydGluZ0FycmF5W2ldID09IEN1cnJlbnRJdGVtW2pdW1NvcnRpbmdUeXBlXSkge1xyXG5cdFx0XHRcdFx0XHRcdFNvcnRlZEVsZW1lbnRzLnB1c2goQ3VycmVudEl0ZW1bal0pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmKEFwcGVuZFRvRW5kRWxlbWVudHMubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdFx0U29ydGVkRWxlbWVudHMucHVzaChBcHBlbmRUb0VuZEVsZW1lbnRzKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Ly8gdmFyIFVuaXF1ZUFycmF5ID0gW107XHJcblx0XHRcdFx0Ly8gZm9yKHZhciBrID0gMDsgayA8IFNvcnRlZEVsZW1lbnRzLmxlbmd0aDsgaysrKSB7XHJcblx0XHRcdFx0Ly8gXHRpZighU29ydGVkRWxlbWVudHMuY29udGFpbnMoU29ydGVkRWxlbWVudHNba10pKSB7XHJcblx0XHRcdFx0Ly8gXHRcdFVuaXF1ZUFycmF5LnB1c2goU29ydGVkRWxlbWVudHNba10pO1xyXG5cdFx0XHRcdC8vIFx0fVxyXG5cdFx0XHRcdC8vIH1cclxuXHJcblx0XHRcdFx0c2VsZi5DdXJyZW50QXJyYXkgPSBTb3J0ZWRFbGVtZW50cztcclxuXHRcdFx0XHRzZWxmLlJlbmRlckRlc2t0b3BWZXJzaW9uKHNlbGYuQ3VycmVudEFycmF5LCAkKCcubWVyZ2UtYWNxdWlzdGlvbicpKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9LFxyXG5cdFx0RmlsdGVyRXZlbnQ6IGZ1bmN0aW9uKGRhdGEsIFBhcmVudCkge1xyXG5cdFx0XHR2YXIgSW5wdXRWYWx1ZXMgPSBQYXJlbnQuZmluZCgndGgnKS5maW5kKCdpbnB1dCcpLFxyXG5cdFx0XHRcdHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdFx0SW5wdXRWYWx1ZXMub24oJ2tleXVwJywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIHRleHRGaWVsZFZhbHVlID0gJCh0aGlzKS52YWwoKSxcclxuXHRcdFx0XHRcdERlYWxUeXBlID0gJCh0aGlzKS5wYXJlbnRzKCd0aCcpLmZpbmQoJy5zb3J0aW5nLWJ1dHRvbnMnKS5hdHRyKCdkZWFsJyksXHJcblx0XHRcdFx0XHRJbmRleCA9ICQodGhpcykucGFyZW50cygndGgnKS5pbmRleCgpLFxyXG5cdFx0XHRcdFx0Qm9keSA9IFBhcmVudC5maW5kKCd0Ym9keS52aXNpYmxlLWxnJyksXHJcblx0XHRcdFx0XHRyZWdFeHAgPSBuZXcgUmVnRXhwKHRleHRGaWVsZFZhbHVlLCBcImlcIiksXHJcblx0XHRcdFx0XHRJdGVtQXJyYXkgPSBbXSxcclxuXHRcdFx0XHRcdEZpbHRlcmVkQXJyYXkgPSBbXSxcclxuXHRcdFx0XHRcdE9iaiA9IHt9LFxyXG5cdFx0XHRcdFx0U3RhcnRGaWVsZCA9IFBhcmVudC5maW5kKCcucmFuZ2UtZmllbGQnKVswXS52YWx1ZSxcclxuXHRcdFx0XHRcdEVuZEZpZWxkID0gUGFyZW50LmZpbmQoJy5yYW5nZS1maWVsZCcpWzFdLnZhbHVlO1xyXG5cclxuXHRcdFx0XHRQYXJlbnQuZmluZCgndGgnKS5lYWNoKGZ1bmN0aW9uKGtleSkge1xyXG5cdFx0XHRcdFx0dmFyIERlYWxUeXBlID0gJCh0aGlzKS5maW5kKCcuc29ydGluZy1idXR0b25zJykuYXR0cignZGVhbCcpO1xyXG5cdFx0XHRcdFx0aWYoRGVhbFR5cGUgIT0gJ1ByaWNlJykge1xyXG5cdFx0XHRcdFx0XHRpZigkKHRoaXMpLmZpbmQoJ2lucHV0JykudmFsKCkubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdFx0XHRcdE9ialtEZWFsVHlwZV0gPSAkKHRoaXMpLmZpbmQoJ2lucHV0JykudmFsKCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHZhciBTdGFydCwgRW5kO1xyXG5cdFx0XHRcdFx0XHRpZigkKHRoaXMpLmZpbmQoJ2lucHV0LnN0YXJ0JykudmFsKCkpIHtcclxuXHRcdFx0XHRcdFx0XHRTdGFydCA9IHBhcnNlRmxvYXQoJCh0aGlzKS5maW5kKCdpbnB1dC5zdGFydCcpLnZhbCgpKTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRTdGFydCA9IDA7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYoJCh0aGlzKS5maW5kKCdpbnB1dC5lbmQnKS52YWwoKSkge1xyXG5cdFx0XHRcdFx0XHRcdEVuZCA9IHBhcnNlRmxvYXQoJCh0aGlzKS5maW5kKCdpbnB1dC5lbmQnKS52YWwoKSk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0RW5kID0gMDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRPYmpbRGVhbFR5cGVdID0ge1xyXG5cdFx0XHRcdFx0XHRcdFN0YXJ0IDogU3RhcnQsXHJcblx0XHRcdFx0XHRcdFx0RW5kIDogRW5kXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0Ly8gT2JqW0RlYWxUeXBlXVsnRW5kJ10gPSBcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0Ly8gQm9keS5maW5kKCd0cicpLmVhY2goZnVuY3Rpb24oa2V5KSB7XHJcblx0XHRcdFx0Ly8gXHRJdGVtQXJyYXkucHVzaCgkKCQodGhpcykuZmluZCgndGQnKVtJbmRleF0pLnRleHQoKSk7XHJcblx0XHRcdFx0Ly8gfSk7XHJcblxyXG5cdFx0XHRcdC8vZm9yKHZhciBpIGluIEl0ZW1BcnJheSkge1xyXG5cdFx0XHRcdFx0Ly8gaWYocmVnRXhwLnRlc3QoSXRlbUFycmF5W2ldKSkge1xyXG5cdFx0XHRcdFx0Ly8gXHRmb3IodmFyIGogPSAwOyBqIDwgd2luZG93Lmpzb25NZXJnZUFjcXVpc3Rpb24ubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0XHRcdC8vIFx0XHRpZihJdGVtQXJyYXlbaV0gPT0gd2luZG93Lmpzb25NZXJnZUFjcXVpc3Rpb25bal1bRGVhbFR5cGVdKSB7XHJcblx0XHRcdFx0XHQvLyBcdFx0XHRGaWx0ZXJlZEFycmF5LnB1c2god2luZG93Lmpzb25NZXJnZUFjcXVpc3Rpb25bal0pO1xyXG5cdFx0XHRcdFx0Ly8gXHRcdH1cclxuXHRcdFx0XHRcdC8vIFx0fVxyXG5cdFx0XHRcdFx0Ly8gfVxyXG5cdFx0XHRcdC8vfVxyXG5cdFx0XHRcdGlmKE9iamVjdC5rZXlzKE9iaikubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdFx0Zm9yKHZhciBpIGluIHdpbmRvdy5qc29uTWVyZ2VBY3F1aXN0aW9uKSB7XHJcblx0XHRcdFx0XHRcdHZhciBjb3VudCA9IDA7XHJcblx0XHRcdFx0XHRcdGZvcih2YXIgaiBpbiBPYmopIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgdGV4dCA9IFwiXCI7XHJcblx0XHRcdFx0XHRcdFx0aWYoaiA9PSAnUHJpY2UnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgUHJpY2UgPSBwYXJzZUZsb2F0KHdpbmRvdy5qc29uTWVyZ2VBY3F1aXN0aW9uW2ldW2pdKTtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIGlmKFN0YXJ0RmllbGQubGVuZ3RoID4gMCAmJiBFbmRGaWVsZC5sZW5ndGggPiAwKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBcdGlmKChQcmljZSA+IHBhcnNlRmxvYXQoU3RhcnRGaWVsZCkpICYmIChQcmljZSA8IHBhcnNlRmxvYXQoRW5kRmllbGQpKSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gXHRcdGNvdW50Kys7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBcdH1cclxuXHRcdFx0XHRcdFx0XHRcdC8vIH0gZWxzZSBpZihTdGFydEZpZWxkLmxlbmd0aCA+IDAgJiYgRW5kRmllbGQubGVuZ3RoID09IDApIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIFx0aWYoKFByaWNlID4gcGFyc2VGbG9hdChTdGFydEZpZWxkKSkpIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIFx0XHRjb3VudCsrO1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gXHR9XHJcblx0XHRcdFx0XHRcdFx0XHQvLyB9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gXHRpZigoUHJpY2UgPCBwYXJzZUZsb2F0KEVuZEZpZWxkKSkpIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIFx0XHRjb3VudCsrO1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gXHR9XHJcblx0XHRcdFx0XHRcdFx0XHQvLyB9XHJcblx0XHRcdFx0XHRcdFx0XHRpZihPYmpbal1bJ0VuZCddICE9IDApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYoKFByaWNlID4gT2JqW2pdWydTdGFydCddKSAmJiAoUHJpY2UgPCBPYmpbal1bJ0VuZCddKSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvdW50Kys7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmKFByaWNlID4gT2JqW2pdWydTdGFydCddKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y291bnQrKztcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoaiA9PSAnTW9udGgnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgTW9udGhWYWx1ZSA9IHdpbmRvdy5qc29uTWVyZ2VBY3F1aXN0aW9uW2ldW2pdIC0gMTtcclxuXHRcdFx0XHRcdFx0XHRcdGlmKHNlbGYuTW9udGhOYW1lc1tNb250aFZhbHVlXS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKE9ialtqXS50b0xvd2VyQ2FzZSgpKSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb3VudCsrO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZih3aW5kb3cuanNvbk1lcmdlQWNxdWlzdGlvbltpXVtqXS5pbmNsdWRlcygnPGEgaHJlZj0nKSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR0ZXh0ID0gJCh3aW5kb3cuanNvbk1lcmdlQWNxdWlzdGlvbltpXVtqXSkudGV4dCgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0dGV4dCA9IHdpbmRvdy5qc29uTWVyZ2VBY3F1aXN0aW9uW2ldW2pdO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0aWYodGV4dC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKE9ialtqXS50b0xvd2VyQ2FzZSgpKSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb3VudCsrO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0aWYoY291bnQgPT09IE9iamVjdC5rZXlzKE9iaikubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdFx0RmlsdGVyZWRBcnJheS5wdXNoKHdpbmRvdy5qc29uTWVyZ2VBY3F1aXN0aW9uW2ldKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRGaWx0ZXJlZEFycmF5ID0gd2luZG93Lmpzb25NZXJnZUFjcXVpc3Rpb247XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHNlbGYuUmVuZGVyRGVza3RvcFZlcnNpb24oRmlsdGVyZWRBcnJheSwgJCgnLm1lcmdlLWFjcXVpc3Rpb24nKSk7XHJcblxyXG5cdFx0XHR9KTtcclxuXHRcdH0sXHJcblx0XHRZZWFyQ2hhbmdlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0JChkb2N1bWVudCkub24oJ2NoYW5nZScsICcjaWRZZWFyU2VsZWN0JywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIEhyZWYgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtaHJlZicpLFxyXG5cdFx0XHRcdFx0dmFsdWU9ICQodGhpcykuZmluZCgnLnNlbGVjdGl2aXR5LXNpbmdsZS1zZWxlY3RlZC1pdGVtJykuYXR0cignZGF0YS1pdGVtLWlkJyksXHJcblx0XHRcdFx0XHRuZXdVcmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgnPycpWzBdLmNvbmNhdChcIj95ZWFyPVwiK3ZhbHVlKTtcclxuXHJcblxyXG5cdFx0XHRcdHdpbmRvdy5sb2NhdGlvbiA9bmV3VXJsO1x0XHRcdFxyXG5cclxuXHRcdFx0fSk7XHJcblx0XHR9LFxyXG5cdFx0aW5pdDogZnVuY3Rpb24oZGF0YSwgUGFyZW50KSB7XHJcblx0XHRcdHRoaXMuQ3VycmVudEFycmF5ID0gZGF0YTtcclxuXHRcdFx0dGhpcy5SZW5kZXJEZXNrdG9wVmVyc2lvbihkYXRhLCBQYXJlbnQpO1xyXG5cdFx0XHR0aGlzLlNvcnRpbmdFdmVudChkYXRhLCBQYXJlbnQpO1xyXG5cdFx0XHR0aGlzLkZpbHRlckV2ZW50KGRhdGEsIFBhcmVudCk7XHJcblx0XHRcdHRoaXMuWWVhckNoYW5nZSgpO1xyXG5cdFx0XHQvL3RoaXMuUmVuZGVyTW9iaWxlVmVyc2lvbihkYXRhLCBQYXJlbnQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYoJCgnLm1lcmdlLWFjcXVpc3Rpb24nKS5sZW5ndGggPiAwKSB7XHJcblx0XHRNZXJnZUFjcXVpc3Rpb24uaW5pdCh3aW5kb3cuanNvbk1lcmdlQWNxdWlzdGlvbiwgJCgnLm1lcmdlLWFjcXVpc3Rpb24nKSk7XHJcblx0fVxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcblx0Ly8gYm9keS4uLlxyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0dmFyIFJlc3BvbnNpdmVGaW5hbmNpYWxUYWJsZSA9IHtcclxuXHRcdFJlbmRlclRhYmxlOmZ1bmN0aW9uKGRhdGEsIFBhcmVudCkge1xyXG5cdFx0XHQgdmFyIFRhYmxlcyA9ICQoJyNxdWFydGVybHlyZXN1bHRzLCAjbW9kYWwtcXVhcnRlcmx5cmVzdWx0cycpLFxyXG5cdFx0XHQgXHRRdWF0ZXJseURhdGFIZWFkZXIgPSBkYXRhWzBdLlF1YXRlcmx5RGF0YUhlYWRlcixcclxuXHRcdFx0IFx0UXVhdGVybHlEYXRhID0gZGF0YVswXS5RdWF0ZXJseURhdGEsXHJcblx0XHRcdCBcdFF1YXRlcmx5UmVzdWx0SGVhZGVyID0gZGF0YVswXS5RdWF0ZXJseVJlc3VsdEhlYWRlcixcclxuXHRcdFx0IFx0UXVhdGVybHlSZXN1bHQ9IGRhdGFbMF0uUXVhdGVybHlSZXN1bHREYXRhWzBdO1xyXG5cclxuXHRcdFx0IFx0JCgnI3F1YXJ0ZXJseXJlc3VsdHMnKS5maW5kKCcuc3RhdGVzX2hlYWRpbmcnKS5wYXJlbnQoKS5yZW1vdmUoKTtcclxuXHRcdFx0IFx0JCgnI3F1YXJ0ZXJseXJlc3VsdHMnKS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJ0YWJsZS13cmFwcGVyXCI+PGRpdiBjbGFzcz1cInRhYmxlXCI+PC9kaXY+PC9kaXY+Jyk7XHJcblx0XHRcdCBcdHZhciBXcmFwcGVyID0gJCgnI3F1YXJ0ZXJseXJlc3VsdHMgLnRhYmxlLCAjbW9kYWwtcXVhcnRlcmx5cmVzdWx0cyAudGFibGUnKTtcclxuXHJcblx0XHRcdCBcdFdyYXBwZXIuYXBwZW5kKCc8ZGl2IGNsYXNzPVwidGFibGVSb3dcIj48L2Rpdj4nKTtcclxuXHRcdFx0XHRmb3IodmFyIGtleSBpbiBRdWF0ZXJseURhdGFIZWFkZXIpIHtcclxuXHRcdFx0XHQgXHRXcmFwcGVyLmZpbmQoJy50YWJsZVJvdzpsYXN0LWNoaWxkJykuYXBwZW5kKCc8ZGl2IGNsYXNzPVwidGFibGVIZWFkXCI+JyArUXVhdGVybHlEYXRhSGVhZGVyW2tleV0rICc8L2Rpdj4nKTtcclxuXHRcdFx0IFx0fVxyXG5cdFx0IFx0XHRcclxuXHRcdCBcdFx0XHJcblx0XHRcdFx0Zm9yKHZhciBrZXkgaW4gUXVhdGVybHlEYXRhKSB7XHJcblx0XHRcdFx0XHRXcmFwcGVyLmFwcGVuZCgnPGRpdiBjbGFzcz1cInRhYmxlUm93XCI+PC9kaXY+Jyk7XHJcblx0XHRcdFx0XHR2YXIgQ29udGVudCA9IFF1YXRlcmx5RGF0YVtrZXldO1xyXG5cdFx0XHRcdFx0Zm9yKHZhciBpdGVtIGluIENvbnRlbnQpIHtcclxuXHRcdFx0XHRcdCBcdFdyYXBwZXIuZmluZCgnLnRhYmxlUm93Omxhc3QtY2hpbGQnKS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJ0YWJsZUNlbGxcIj4nICtDb250ZW50W2l0ZW1dKyAnPC9kaXY+Jyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdCBcdH1cclxuXHJcblx0XHRcdCBcdFdyYXBwZXIuYXBwZW5kKCc8ZGl2IGNsYXNzPVwidGFibGVSb3dcIj48L2Rpdj4nKTtcclxuXHRcdFx0XHRmb3IodmFyIGtleSBpbiBRdWF0ZXJseVJlc3VsdEhlYWRlcikge1xyXG5cdFx0XHRcdCBcdFdyYXBwZXIuZmluZCgnLnRhYmxlUm93Omxhc3QtY2hpbGQnKS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJ0YWJsZUhlYWRcIj4nICtRdWF0ZXJseVJlc3VsdEhlYWRlcltrZXldKyAnPC9kaXY+Jyk7XHJcblx0XHRcdCBcdH1cclxuXHJcblx0XHRcdCBcdFdyYXBwZXIuYXBwZW5kKCc8ZGl2IGNsYXNzPVwidGFibGVSb3dcIj48L2Rpdj4nKTtcclxuXHRcdFx0XHRmb3IodmFyIGtleSBpbiBRdWF0ZXJseVJlc3VsdCkge1xyXG5cdFx0XHRcdCBcdFdyYXBwZXIuZmluZCgnLnRhYmxlUm93Omxhc3QtY2hpbGQnKS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJ0YWJsZUNlbGxcIj4nICtRdWF0ZXJseVJlc3VsdFtrZXldKyAnPC9kaXY+Jyk7XHJcblx0XHRcdCBcdH1cclxuXHRcdFx0IFxyXG5cdFx0fSxcclxuICAgICAgICBNb2RhbEV2ZW50czogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgXHQkKGRvY3VtZW50KS5vbignY2xpY2snLCAnYVtkYXRhLXRvZ2dsZT1cIm1vZGFsLXF1YXJ0ZXJseXJlc3VsdHNcIl0nLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgXHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBcdFx0JCgnI21vZGFsLXF1YXJ0ZXJseXJlc3VsdHMnKS5zaG93KCk7XHJcbiAgICAgICAgXHR9KTtcclxuICAgICAgICBcdCQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcjbW9kYWwtcXVhcnRlcmx5cmVzdWx0cyAudGFibGVfY2xvc2UnLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgXHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBcdFx0JCh0aGlzKS5wYXJlbnRzKCcuSUQtcmVzcG9uc2l2ZS10YWJsZS1tb2RhbCcpLmhpZGUoKTtcclxuICAgICAgICBcdH0pO1xyXG4gICAgICAgIFx0JChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5JRC1yZXNwb25zaXZlLXRhYmxlLW1vZGFsJywgZnVuY3Rpb24oZSkge1xyXG4gICAgXHRcdFx0aWYoJChlLnRhcmdldCkucGFyZW50cygnLmNvbnRhaW5lcicpLmxlbmd0aCA+IDAgfHwgJChlLnRhcmdldCkuaGFzQ2xhc3MoJy5jb250YWluZXInKSkge1xyXG4gICAgXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcbiAgICBcdFx0XHR9IGVsc2Uge1xyXG4gICAgXHRcdFx0XHQkKHRoaXMpLmhpZGUoKTtcclxuICAgIFx0XHRcdH1cclxuICAgICAgICBcdH0pO1xyXG4gICAgICAgIH0sXHJcblx0XHRpbml0OiBmdW5jdGlvbihkYXRhLCBQYXJlbnQpIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0XHRzZWxmLlJlbmRlclRhYmxlKGRhdGEsIFBhcmVudCk7XHJcblx0XHRcdHNlbGYuTW9kYWxFdmVudHMoKTtcclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRpZigkKCcjcXVhcnRlcmx5cmVzdWx0cycpLmxlbmd0aCA+IDApIHtcclxuXHRcdFJlc3BvbnNpdmVGaW5hbmNpYWxUYWJsZS5pbml0KHdpbmRvdy5qc29uUmVzdWx0UXVhcnRlcmx5LCAkKCcjcXVhcnRlcmx5cmVzdWx0cycpKTtcdFxyXG5cdH1cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG5cdC8vIGJvZHkuLi5cclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdHZhciBSZXNwb25zaXZlVGFibGUgPSB7XHJcblx0XHRHZXRBamF4RGF0YTogZnVuY3Rpb24oZGF0YSwgaWQpIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0XHRpZihkYXRhKSB7XHJcblx0XHRcdFx0d2luZG93LlJlc3BvbnNpdmVKU09OID0gZGF0YTtcclxuXHRcdFx0XHR3aW5kb3cuUmVzcG9uc2l2ZU1vZGFsSlNPTiA9IGRhdGE7XHJcblx0XHRcdCBcdHNlbGYuUmVuZGVyQ2Fyb3VzZWwoZGF0YSwgaWQpO1xyXG5cdFx0XHQgXHRzZWxmLlJlbmRlck1vZGFsKGRhdGEsIGlkKTtcclxuXHRcdFx0XHQvL30gXHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRSZW5kZXJNb2RhbDogZnVuY3Rpb24oZGF0YSwgaWQpIHtcclxuXHRcdFx0dmFyIE1vZGFsSWQgPSAkKGlkKS5hdHRyKCdkYXRhLW1vZGFsJyksXHJcblx0XHRcdFx0UGFyZW50ID0gJCgnIycgKyBNb2RhbElkKSxcclxuXHRcdFx0XHRIZWFkZXJEYXRhID0gZGF0YVswXSxcclxuXHRcdFx0XHRIZWFkZXIgPSBcIlwiLFxyXG5cdFx0XHRcdGNhdGVnb3J5ID0gXCJcIjtcclxuXHJcblx0XHRcdFxyXG5cdFx0XHRQYXJlbnQuZmluZCgnLnRhYmxlJykuZW1wdHkoKTtcclxuXHRcdFx0Zm9yKHZhciBrZXkgaW4gSGVhZGVyRGF0YSkge1xyXG5cdFx0XHRcdGlmKGtleSAhPT0gXCJJRFwiKSB7XHJcblx0XHRcdFx0XHRIZWFkZXIrPVwiPGRpdiBjbGFzcz0ndGFibGVIZWFkJz48c3Ryb25nPlwiICsga2V5ICsgXCI8L3N0cm9uZz48YSBocmVmPScjJyBjbGFzcz0nc29ydCcgY2F0ZWdvcnk9J1wiICtjYXRlZ29yeSArXCInIHR5cGU9J2FzY2VuZGluZyc+PC9hPjxhIGhyZWY9JyMnIGNsYXNzPSdzb3J0JyBjYXRlZ29yeT0nXCIgK2NhdGVnb3J5ICtcIicgdHlwZT0nZGVzY2VuZGluZyc+PC9hPjwvZGl2PlwiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRQYXJlbnQuZmluZCgnLnRhYmxlJykuYXBwZW5kKCc8ZGl2IGNsYXNzPVwidGFibGVSb3dcIj4nICsgSGVhZGVyICsgJzwvZGl2PicpO1xyXG5cdFx0XHRmb3IodmFyIGtleSBpbiBkYXRhKSB7XHJcblx0XHRcdFx0dmFyIEl0ZW0gPSBkYXRhW2tleV0sXHJcblx0XHRcdFx0XHRUZW1wbGF0ZSA9IFwiXCI7XHJcblx0XHRcdFx0Zm9yKHZhciB2YWwgaW4gSXRlbSkge1xyXG5cdFx0XHRcdFx0dmFyIGNvbnRlbnQgPSBcIlwiO1xyXG5cdFx0XHRcdFx0aWYodmFsICE9PSBcIklEXCIpIHtcclxuXHRcdFx0XHRcdFx0aWYoQXJyYXkuaXNBcnJheShJdGVtW3ZhbF0pKSB7XHJcblx0XHRcdFx0XHRcdFx0Y29udGVudCA9IEl0ZW1bdmFsXVswXS52YWx1ZTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRjb250ZW50ID0gSXRlbVt2YWxdO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFRlbXBsYXRlICs9IFwiPGRpdiBjbGFzcz0ndGFibGVDZWxsJz5cIiArIGNvbnRlbnQgKyBcIjwvZGl2PlwiO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRQYXJlbnQuZmluZCgnLnRhYmxlJykuYXBwZW5kKCc8ZGl2IGNsYXNzPVwidGFibGVSb3dcIj4nICsgVGVtcGxhdGUgKyAnPC9kaXY+Jyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHR9LFxyXG5cdFx0UmVuZGVyQ2Fyb3VzZWw6IGZ1bmN0aW9uKGRhdGEsIFBhcmVudCkge1xyXG5cdFx0XHRcclxuXHRcdFx0UGFyZW50LmZpbmQoJy5vd2wtY2Fyb3VzZWwnKS5yZW1vdmUoKTtcclxuXHRcdFx0UGFyZW50LmZpbmQoJy5zdGF0ZXNfaGVhZGluZycpLmZpbmQoJy5SQjE2JykucmVtb3ZlKCk7XHJcblx0XHRcdFBhcmVudC5maW5kKCcuc3RhdGVzX2hlYWRpbmcnKS5hZnRlcignPGRpdiBjbGFzcz1cIm93bC13cmFwcGVyXCI+PGRpdiBjbGFzcz1cIm93bC1jYXJvdXNlbFwiPjwvZGl2PjwvZGl2PicpO1xyXG5cdFx0XHR2YXIgQ3JlYXRlTGlzdCA9IHdpbmRvdy5qc29uTWFwcGluZ0RhdGE7XHJcblxyXG5cdFx0XHRmb3IodmFyIGtleSBpbiBDcmVhdGVMaXN0KSB7XHJcblx0XHRcdFx0UGFyZW50LmZpbmQoJy5vd2wtY2Fyb3VzZWwnKS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJhcnRpY2xlXCIgZGF0YS1oZWFkPVwiJyArQ3JlYXRlTGlzdFtrZXldLktleSsgJ1wiPjxkaXYgY2xhc3M9XCJ5ZWFyX2hlYWRpbmdcIj48c3Bhbj4nICsgQ3JlYXRlTGlzdFtrZXldLlZhbHVlICsgJzwvc3Bhbj48YSBocmVmPVwiI1wiIGNsYXNzPVwic29ydFwiIHR5cGU9XCJhc2NlbmRpbmdcIj48c3ZnIGNsYXNzPVwic29ydGluZy1hcnJvd3NfX2Fycm93IHNvcnRpbmctYXJyb3dzX19hcnJvdy0tdXBcIj48dXNlIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHhsaW5rOmhyZWY9XCIvZGlzdC9pbWcvc3ZnLXNwcml0ZS5zdmcjc29ydC1kb3duLWFycm93XCI+PC91c2U+PC9zdmc+PC9hPjxhIGhyZWY9XCIjXCIgY2xhc3M9XCJzb3J0XCIgdHlwZT1cImRlc2NlbmRpbmdcIj48c3ZnIGNsYXNzPVwic29ydGluZy1hcnJvd3NfX2Fycm93IHNvcnRpbmctYXJyb3dzX19hcnJvdy0tZG93blwiPjx1c2UgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeGxpbms6aHJlZj1cIi9kaXN0L2ltZy9zdmctc3ByaXRlLnN2ZyNzb3J0LWRvd24tYXJyb3dcIj48L3VzZT48L3N2Zz48L2E+PC9kaXY+PC9kaXY+Jyk7XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIEl0ZW1zID0gUGFyZW50LmZpbmQoJy5vd2wtY2Fyb3VzZWwnKS5maW5kKCcuYXJ0aWNsZScpO1xyXG5cclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHR2YXIgSXRlbSA9IGRhdGFbaV0sIGluZGV4ID0gaTtcclxuXHRcdFx0XHRQYXJlbnQuZmluZCgnLnN0YXRlc19oZWFkaW5nJykuYXBwZW5kKCc8ZGl2IGNsYXNzPVwiUkIxNlwiPjxhIGhyZWY9XCInICsgZGF0YVtpXS5Db21wYW55UGFnZVVybCArICdcIj4nICtkYXRhW2ldLkNvbXBhbnkrICc8L2E+PC9kaXY+Jyk7XHJcblx0XHRcdFx0Zm9yKHZhciBrZXkgaW4gSXRlbSkge1xyXG5cdFx0XHRcdFx0aWYoQXJyYXkuaXNBcnJheShJdGVtW2tleV0pKSB7XHJcblx0XHRcdFx0XHRcdFBhcmVudC5maW5kKCcuYXJ0aWNsZVtkYXRhLWhlYWQ9XCInICtrZXkrICdcIl0nKS5hcHBlbmQoJzxkaXYgIGNsYXNzPVwiUjE2IFRhYmxlUm93JytpbmRleCsnXCI+JyArSXRlbVtrZXldWzBdLnZhbHVlKyAnPC9kaXY+Jyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMuSW5pdGlhdGVDYXJvdXNlbChQYXJlbnQpO1xyXG5cdFx0XHR0aGlzLkhlaWdodE1hbmFnZW1lbnQoUGFyZW50KTtcclxuXHRcdFx0XHJcblx0XHR9LFxyXG5cdFx0SGVpZ2h0TWFuYWdlbWVudDogZnVuY3Rpb24oUGFyZW50KSB7XHJcblx0XHRcdHZhciBIZWFkaW5nSXRlbXMgPSBQYXJlbnQuZmluZCgnLnllYXJfaGVhZGluZycpLFxyXG5cdFx0XHRcdE1heEhlYWRpbmdIZWlnaHQgPSAwO1xyXG5cclxuXHRcdFx0UGFyZW50LmZpbmQoJy5zdGF0ZXNfaGVhZGluZyAuUkIxNicpLmVhY2goZnVuY3Rpb24oa2V5KXtcclxuXHRcdFx0XHR2YXIgSGVpZ2h0ID0gJCh0aGlzKS5oZWlnaHQoKSxcclxuXHRcdFx0XHRcdEl0ZW0gPSBbXTtcclxuXHJcblx0XHRcdFx0XHQkKCcuYXJ0aWNsZScpLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdHZhciBDdXJyZW50SXRlbSA9ICQodGhpcykuZmluZCgnLlIxNicpW2tleV07XHJcblx0XHRcdFx0XHRcdEl0ZW0ucHVzaChDdXJyZW50SXRlbSk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHJcblxyXG5cdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBJdGVtLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0XHQkKEl0ZW1baV0pLmhlaWdodChIZWlnaHQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdC8vIEhlYWRpbmdJdGVtcy5oZWlnaHQoMCk7XHJcblx0XHRcdEhlYWRpbmdJdGVtcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciB0aGlzSGVpZ2h0ID0gJCh0aGlzKS5oZWlnaHQoKTtcclxuXHRcdFx0XHRpZih0aGlzSGVpZ2h0ID4gTWF4SGVhZGluZ0hlaWdodCkge1xyXG5cdFx0XHRcdFx0TWF4SGVhZGluZ0hlaWdodCA9IHRoaXNIZWlnaHQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0JChIZWFkaW5nSXRlbXMpLmZpbmQoJ3NwYW4nKS5oZWlnaHQoTWF4SGVhZGluZ0hlaWdodCk7XHJcblx0XHR9LFxyXG5cdFx0SW5pdGlhdGVDYXJvdXNlbDogZnVuY3Rpb24oUGFyZW50KSB7XHJcblxyXG5cdFx0XHRcclxuXHRcdFx0UGFyZW50LmZpbmQoJy5vd2wtY2Fyb3VzZWwnKS5vd2xDYXJvdXNlbCh7XHJcbiAgICAgICAgICAgICAgIGxvb3A6dHJ1ZSxcclxuICAgICAgICAgICAgICAgbWFyZ2luOjEwLFxyXG4gICAgICAgICAgICAgICBtZXJnZTp0cnVlLFxyXG4gICAgICAgICAgICAgICBuYXY6dHJ1ZSxcclxuICAgICAgICAgICAgICAgbmF2VGV4dDogW1xyXG4gICAgICAgICAgICAgICBcdCAgXCI8aW1nIHNyYz0nL2Rpc3QvaW1nL2xlc3N0aGFuLnBuZycvPlwiLFxyXG4gICAgICAgICAgICAgICBcdCAgXCI8aW1nIHNyYz0nL2Rpc3QvaW1nL2dyZWF0ZXJ0aGFuLnBuZycvPlwiXHJcbiAgICAgICAgICAgICAgIFx0ICBdLFxyXG5cdFx0XHQgICBzbGlkZUJ5OiAzLCAgXHJcbiAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6e1xyXG4gICAgICAgICAgICAgICAwOntcclxuICAgICAgICAgICAgICAgaXRlbXM6M1xyXG4gICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICA2Nzg6e1xyXG4gICAgICAgICAgICAgICBpdGVtczozXHJcbiAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgIDMyMDp7XHJcbiAgICAgICAgICAgICAgICBpdGVtczoyXHJcbiAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgIDQ4MDp7XHJcbiAgICAgICAgICAgICAgICBpdGVtczoyXHJcbiAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgIDEwMDA6e1xyXG4gICAgICAgICAgICAgICBpdGVtczozXHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIE1vZGFsRXZlbnRzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBcdCQoZG9jdW1lbnQpLm9uKCdjbGljaycsICdhW2RhdGEtdG9nZ2xlPVwibW9kYWwtYW5udWFscmVzdWx0c1wiXScsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIFx0XHQkKCcjbW9kYWwtYW5udWFscmVzdWx0cycpLnNob3coKTtcclxuICAgICAgICBcdH0pO1xyXG4gICAgICAgIFx0JChkb2N1bWVudCkub24oJ2NsaWNrJywgJyNtb2RhbC1hbm51YWxyZXN1bHRzIC50YWJsZV9jbG9zZScsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIFx0XHQkKHRoaXMpLnBhcmVudHMoJy5JRC1yZXNwb25zaXZlLXRhYmxlLW1vZGFsJykuaGlkZSgpO1xyXG4gICAgICAgIFx0fSk7XHJcbiAgICAgICAgXHQkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLklELXJlc3BvbnNpdmUtdGFibGUtbW9kYWwnLCBmdW5jdGlvbihlKSB7XHJcbiAgICBcdFx0XHRpZigkKGUudGFyZ2V0KS5wYXJlbnRzKCcuY29udGFpbmVyJykubGVuZ3RoID4gMCB8fCAkKGUudGFyZ2V0KS5oYXNDbGFzcygnLmNvbnRhaW5lcicpKSB7XHJcbiAgICBcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuICAgIFx0XHRcdH0gZWxzZSB7XHJcbiAgICBcdFx0XHRcdCQodGhpcykuaGlkZSgpO1xyXG4gICAgXHRcdFx0fVxyXG4gICAgICAgIFx0fSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBTb3J0aW5nTW9kYWw6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgXHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgIFx0JChkb2N1bWVudCkub24oJ2NsaWNrJywnI21vZGFsLXRhYmxlIC5zb3J0JywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgXHRcdHZhciBNYWluRGF0YSA9IHdpbmRvdy5SZXNwb25zaXZlSlNPTixcclxuICAgICAgICBcdFx0XHRJbmRleCA9ICQodGhpcykucGFyZW50cygnLnRhYmxlSGVhZCcpLmluZGV4KCksXHJcbiAgICAgICAgXHRcdFx0SXRlbXMgPSBbXSxcclxuICAgICAgICBcdFx0XHR0eXBlID0gJCh0aGlzKS5hdHRyKCd0eXBlJyksXHJcbiAgICAgICAgXHRcdFx0Q2F0ZWdvcnkgPSAkKHRoaXMpLmF0dHIoJ2NhdGVnb3J5JyksXHJcbiAgICAgICAgXHRcdFx0TW9kYWxEYXRhID0gd2luZG93LlJlc3BvbnNpdmVNb2RhbEpTT04sXHJcbiAgICAgICAgXHRcdFx0VXBkYXRlZEpzb24gPSBbXSxcclxuICAgICAgICBcdFx0XHRIZWFkaW5nVGV4dCA9ICQodGhpcykucGFyZW50cygnLnRhYmxlSGVhZCcpLmZpbmQoJ3N0cm9uZycpLnRleHQoKTtcclxuXHJcbiAgICAgICAgXHRcdCQoJyNtb2RhbC10YWJsZSAudGFibGVSb3cnKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIFx0XHRcdGlmKCQodGhpcykuZmluZCgnLnRhYmxlQ2VsbCcpLmxlbmd0aCA+IDApIHtcclxuXHQgICAgICAgIFx0XHRcdHZhciBUZXh0ID0gJCgkKHRoaXMpLmZpbmQoJy50YWJsZUNlbGwnKVtJbmRleF0pLnRleHQoKTtcclxuXHQgICAgICAgIFx0XHRcdGlmKEhlYWRpbmdUZXh0ID09ICdDb21wYW55Jykge1xyXG5cdFx0ICAgICAgICBcdFx0XHRJdGVtcy5wdXNoKFRleHQpO1xyXG5cdFx0ICAgICAgICBcdFx0fSBlbHNlIHtcclxuXHRcdCAgICAgICAgXHRcdFx0SXRlbXMucHVzaChwYXJzZUZsb2F0KFRleHQpKTtcclxuXHRcdCAgICAgICAgXHRcdH1cclxuXHQgICAgICAgIFx0XHRcdFxyXG5cdCAgICAgICAgXHRcdH1cclxuICAgICAgICBcdFx0fSk7XHJcblxyXG4gICAgICAgIFx0XHRpZihIZWFkaW5nVGV4dCA9PSAnQ29tcGFueScpIHtcclxuXHRcdFx0XHRcdGlmKHR5cGUgPT0gXCJkZXNjZW5kaW5nXCIpIHtcclxuXHRcdFx0XHRcdFx0SXRlbXMuc29ydCgpLnJldmVyc2UoKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdEl0ZW1zLnNvcnQoKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRmb3IodmFyIGtleSBpbiBJdGVtcykge1xyXG5cdFx0XHRcdFx0XHRmb3IodmFyIGpzb24gaW4gTW9kYWxEYXRhKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYoSXRlbXNba2V5XSA9PSBNb2RhbERhdGFbanNvbl0uQ29tcGFueSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0VXBkYXRlZEpzb24ucHVzaChNb2RhbERhdGFbanNvbl0pO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRpZih0eXBlID09IFwiZGVzY2VuZGluZ1wiKSB7XHJcblx0XHRcdFx0XHRcdEl0ZW1zLnNvcnQoZnVuY3Rpb24oYSwgYil7XHJcblx0XHRcdFx0XHRcdCAgcmV0dXJuIGIgLSBhO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdEl0ZW1zLnNvcnQoZnVuY3Rpb24oYSwgYil7XHJcblx0XHRcdFx0XHRcdCAgcmV0dXJuIGEgLSBiO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRmb3IodmFyIGtleSBpbiBJdGVtcykge1xyXG5cdFx0XHRcdFx0XHRmb3IodmFyIGpzb24gaW4gTW9kYWxEYXRhKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYoSXRlbXNba2V5XSA9PSBNb2RhbERhdGFbanNvbl1bSGVhZGluZ1RleHRdWzBdLnZhbHVlKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRVcGRhdGVkSnNvbi5wdXNoKE1vZGFsRGF0YVtqc29uXSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHdpbmRvdy5SZXNwb25zaXZlTW9kYWxKU09OID0gVXBkYXRlZEpzb247XHJcblxyXG5cdFx0XHRcdHNlbGYuUmVuZGVyTW9kYWwod2luZG93LlJlc3BvbnNpdmVNb2RhbEpTT04sIGlkKTtcclxuICAgICAgICBcdH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgU29ydGluZ0Z1bmN0aW9uYWxpdHk6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgXHQvL1NvcnRpbmcgRnVuY3Rpb25hbGl0eVxyXG4gICAgICAgIFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0XHQkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLnllYXJfaGVhZGluZyAuc29ydCcsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0dmFyIFBhcmVudCA9ICQodGhpcykucGFyZW50cygnLmFydGljbGUnKSxcclxuXHRcdFx0XHRcdFZhbHVlcyA9IFBhcmVudC5maW5kKCcuUjE2JyksXHJcblx0XHRcdFx0XHRDb250ZW50ID0gUGFyZW50LmF0dHIoJ2RhdGEtaGVhZCcpLFxyXG5cdFx0XHRcdFx0dHlwZSA9ICQodGhpcykuYXR0cigndHlwZScpLFxyXG5cdFx0XHRcdFx0Y2F0ZWdvcnkgPSAkKHRoaXMpLmF0dHIoJ2NhdGVnb3J5JyksXHJcblx0XHRcdFx0XHRJdGVtcyA9IFtdLFxyXG5cdFx0XHRcdFx0Q2Fyb3VzZWxDb250cm9sID0gJCh0aGlzKS5wYXJlbnRzKCcuSUQtUmVzcG9uc2l2ZS1UYWJsZScpLmZpbmQoJy5vd2wtY29udHJvbHMnKS5maW5kKCcub3dsLWRvdHMnKSxcclxuXHRcdFx0XHRcdENvbnRyb2xJbmRleCA9IENhcm91c2VsQ29udHJvbC5maW5kKCcuYWN0aXZlJykuaW5kZXgoKSxcclxuXHRcdFx0XHRcdENhcm91c2VsU3R5bGVzID0gJCgnI2FubnVhbHJlc3VsdHMgLm93bC1zdGFnZScpLmF0dHIoJ3N0eWxlJyksXHJcblx0XHRcdFx0XHRPd2xJdGVtcyA9ICQoJyNhbm51YWxyZXN1bHRzIC5vd2wtc3RhZ2UnKS5maW5kKCcub3dsLWl0ZW0nKSxcclxuXHRcdFx0XHRcdENsb25lZEl0ZW1zID0gW10sXHJcblx0XHRcdFx0XHRBY3RpdmVJdGVtcyA9IFtdO1xyXG5cclxuXHRcdFx0XHRPd2xJdGVtcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0aWYoJCh0aGlzKS5oYXNDbGFzcygnY2xvbmVkJykpIHtcclxuXHRcdFx0XHRcdFx0Q2xvbmVkSXRlbXMucHVzaCgkKHRoaXMpLmluZGV4KCkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYoJCh0aGlzKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcclxuXHRcdFx0XHRcdFx0QWN0aXZlSXRlbXMucHVzaCgkKHRoaXMpLmluZGV4KCkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdCQoJy55ZWFyX2hlYWRpbmcgLnNvcnQnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcblx0XHRcdFx0JCh0aGlzKS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcblxyXG5cdFx0XHRcdGlmKGNhdGVnb3J5ID09ICdjb21wYW5pZXMnKSB7XHJcblx0XHRcdFx0XHR2YXIgQ29tcGFueU5hbWVzID0gJCh0aGlzKS5wYXJlbnRzKCcuc3RhdGVzX2hlYWRpbmcnKS5maW5kKCcuUkIxNicpO1xyXG5cclxuXHRcdFx0XHRcdENvbXBhbnlOYW1lcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRJdGVtcy5wdXNoKCQodGhpcykudGV4dCgpKTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0aWYodHlwZSA9PSBcImRlc2NlbmRpbmdcIikge1xyXG5cdFx0XHRcdFx0XHRJdGVtcy5zb3J0KCkucmV2ZXJzZSgpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0SXRlbXMuc29ydCgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRWYWx1ZXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0aWYoJCh0aGlzKS5sZW5ndGggPiAwKSB7XHJcblx0XHRcdFx0XHRcdFx0SXRlbXMucHVzaChwYXJzZUZsb2F0KCQodGhpcykudGV4dCgpKSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0aWYodHlwZSA9PSBcImRlc2NlbmRpbmdcIikge1xyXG5cdFx0XHRcdFx0XHRJdGVtcy5zb3J0KGZ1bmN0aW9uKGEsIGIpe1xyXG5cdFx0XHRcdFx0XHQgIHJldHVybiBiIC0gYTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRJdGVtcy5zb3J0KGZ1bmN0aW9uKGEsIGIpe1xyXG5cdFx0XHRcdFx0XHQgIHJldHVybiBhIC0gYjtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdHNlbGYuUmVjcmVhdGVPYmplY3QoQ29udGVudCwgSXRlbXMsIHdpbmRvdy5SZXNwb25zaXZlSlNPTiwgaWQsIGNhdGVnb3J5KTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHQkKCcjYW5udWFscmVzdWx0cyAub3dsLXN0YWdlJykuYXR0cignc3R5bGUnLCBDYXJvdXNlbFN0eWxlcyk7XHJcblx0XHRcdFx0JCgnI2FubnVhbHJlc3VsdHMgLm93bC1zdGFnZSAub3dsLWl0ZW0nKS5yZW1vdmVDbGFzcygnY2xvbmVkJyk7XHJcblx0XHRcdFx0JCgnI2FubnVhbHJlc3VsdHMgLm93bC1zdGFnZSAub3dsLWl0ZW0nKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcblx0XHRcdFx0Zm9yKHZhciBrZXkgaW4gQ2xvbmVkSXRlbXMpIHtcclxuXHRcdFx0XHRcdCQoJCgnI2FubnVhbHJlc3VsdHMgLm93bC1zdGFnZSAub3dsLWl0ZW0nKVtDbG9uZWRJdGVtc1trZXldXSkuYWRkQ2xhc3MoJ2Nsb25lZCcpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Zm9yKHZhciBrZXkgaW4gQWN0aXZlSXRlbXMpIHtcclxuXHRcdFx0XHRcdCQoJCgnI2FubnVhbHJlc3VsdHMgLm93bC1zdGFnZSAub3dsLWl0ZW0nKVtBY3RpdmVJdGVtc1trZXldXSkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0JCgnI2FubnVhbHJlc3VsdHMgLm93bC1kb3QnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcblx0XHRcdFx0JCgkKCcjYW5udWFscmVzdWx0cyAub3dsLWRvdCcpW0NvbnRyb2xJbmRleF0pLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuXHRcdFx0XHQkKCcjYW5udWFscmVzdWx0cyAuYXJ0aWNsZVtkYXRhLWhlYWQ9XCInICsgQ29udGVudCArICdcIl0gLnNvcnRbdHlwZT1cIicgKyB0eXBlICsgJ1wiXScpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuXHRcdFx0fSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBSZWNyZWF0ZU9iamVjdDogZnVuY3Rpb24oQ29udGVudCwgU29ydGVkSXRlbSwgTWFpbkFycmF5LCBpZCwgY2F0ZWdvcnksIG1vZGFsKSB7XHJcbiAgICAgICAgXHR2YXIgc2VsZiA9IHRoaXMsIFJlY3JlYXRlZEFycmF5ID0gW107XHJcbiAgICAgICAgXHQvLyBpZC5maW5kKCcuUkIxNicpLnJlbW92ZSgpO1xyXG4gICAgICAgIFx0aWYoY2F0ZWdvcnkgPT09ICdjb21wYW5pZXMnKSB7XHJcbiAgICAgICAgXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBTb3J0ZWRJdGVtLmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgICBcdFx0Zm9yKHZhciBrZXkgaW4gTWFpbkFycmF5KSB7XHJcblx0ICAgICAgICBcdFx0XHR2YXIgTmFtZSA9IE1haW5BcnJheVtrZXldLkNvbXBhbnk7XHJcblx0ICAgICAgICBcdFx0XHRpZihOYW1lID09IFNvcnRlZEl0ZW1baV0pIHtcclxuXHQgICAgICAgIFx0XHRcdFx0UmVjcmVhdGVkQXJyYXkucHVzaChNYWluQXJyYXlba2V5XSk7XHJcblx0ICAgICAgICBcdFx0XHR9XHJcblx0ICAgICAgICBcdFx0fVxyXG5cdCAgICAgICAgXHR9XHJcbiAgICAgICAgXHR9IGVsc2Uge1xyXG5cdCAgICAgICAgXHRmb3IodmFyIGkgPSAwOyBpIDwgU29ydGVkSXRlbS5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgXHRcdGZvcih2YXIga2V5IGluIE1haW5BcnJheSkge1xyXG5cdCAgICAgICAgXHRcdFx0dmFyIF9PYmplY3QgPSBNYWluQXJyYXlba2V5XTtcclxuXHQgICAgICAgIFx0XHRcdGlmKF9PYmplY3RbQ29udGVudF1bMF0udmFsdWUgPT0gU29ydGVkSXRlbVtpXSkge1xyXG5cdCAgICAgICAgXHRcdFx0XHRSZWNyZWF0ZWRBcnJheS5wdXNoKF9PYmplY3QpO1xyXG5cdCAgICAgICAgXHRcdFx0fVxyXG5cdCAgICAgICAgXHRcdH1cclxuXHQgICAgICAgIFx0fVxyXG5cdCAgICAgICAgXHRmb3IodmFyIGtleSBpbiBNYWluQXJyYXkpIHtcclxuICAgICAgICBcdFx0XHR2YXIgX09iamVjdCA9IE1haW5BcnJheVtrZXldO1xyXG4gICAgICAgIFx0XHRcdGlmKF9PYmplY3RbQ29udGVudF1bMF0udmFsdWUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgXHRcdFx0XHRSZWNyZWF0ZWRBcnJheS5wdXNoKF9PYmplY3QpO1xyXG4gICAgICAgIFx0XHRcdH1cclxuICAgICAgICBcdFx0fVxyXG5cdCAgICAgICAgfVxyXG4gICAgICAgIFx0Ly8gJG93bC50cmlnZ2VyKCdkZXN0cm95Lm93bC5jYXJvdXNlbCcpO1xyXG4gICAgICAgIFx0XHJcbiAgICAgICAgXHRpZihtb2RhbCkge1xyXG4gICAgICAgIFx0XHR3aW5kb3cuUmVzcG9uc2l2ZU1vZGFsSlNPTiA9IFJlY3JlYXRlZEFycmF5O1xyXG4gICAgICAgIFx0XHRzZWxmLlJlbmRlck1vZGFsKHdpbmRvdy5SZXNwb25zaXZlTW9kYWxKU09OLCBpZCk7XHJcbiAgICAgICAgXHR9IGVsc2Uge1xyXG4gICAgICAgIFx0XHR3aW5kb3cuUmVzcG9uc2l2ZUpTT04gPSBSZWNyZWF0ZWRBcnJheTtcclxuXHQgICAgICAgIFx0c2VsZi5SZW5kZXJDYXJvdXNlbCh3aW5kb3cuUmVzcG9uc2l2ZUpTT04sIGlkKTtcclxuXHQgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cdFx0aW5pdDogZnVuY3Rpb24oZGF0YSwgaWQpIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0XHRzZWxmLkdldEFqYXhEYXRhKGRhdGEsIGlkKTtcclxuXHRcdFx0c2VsZi5Nb2RhbEV2ZW50cygpO1xyXG5cdFx0XHRzZWxmLlNvcnRpbmdGdW5jdGlvbmFsaXR5KGlkKTtcclxuXHRcdFx0c2VsZi5Tb3J0aW5nTW9kYWwoaWQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYoJCgnI2FubnVhbHJlc3VsdHMnKS5sZW5ndGggPiAwKSB7XHJcblx0XHRSZXNwb25zaXZlVGFibGUuaW5pdCh3aW5kb3cuanNvblJlc3VsdEFubnVhbCwgJCgnI2FubnVhbHJlc3VsdHMnKSk7XHRcclxuXHR9XHJcblx0XHJcblxyXG5cdFxyXG59KSgpOyIsIihmdW5jdGlvbiAoYXJndW1lbnQpIHtcclxuXHR2YXIgTGF0ZXN0Q2FzdWFsaXR5ID0ge1xyXG5cdFx0UmVuZGVyTGlua3M6IGZ1bmN0aW9uKGRhdGEsIFBhcmVudCkge1xyXG5cdFx0XHR2YXIgbGF0ZXN0Y2FzdWFsdGllcyA9IGRhdGFbMF0ubGF0ZXN0Y2FzdWFsdGllcyxcclxuXHRcdFx0XHRIdG1sID0gXCJcIjtcclxuXHJcblx0XHRcdGZvcih2YXIga2V5IGluIGxhdGVzdGNhc3VhbHRpZXMpIHtcclxuXHRcdFx0XHRIdG1sICs9ICc8bGkgY2xhc3M9XCJhcnRpY2xlLXRvcGljc19fbGlcIj48YSBocmVmPVwiJysgbGF0ZXN0Y2FzdWFsdGllc1trZXldLnVybCArJ1wiPjxzdHJvbmc+JyArbGF0ZXN0Y2FzdWFsdGllc1trZXldLnRpdGxlKyAnPC9zdHJvbmc+IC0gJysgbGF0ZXN0Y2FzdWFsdGllc1trZXldLmRhdGUgKycgPC9hPjwvbGk+JztcclxuXHRcdFx0fVxyXG5cdFx0XHRQYXJlbnQuZmluZCgndWwnKS5hcHBlbmQoSHRtbCk7XHJcblx0XHRcdC8vPGxpIGNsYXNzPVwiYXJ0aWNsZS10b3BpY3NfX2xpXCI+PGEgaHJlZj1cIiNcIj48c3Ryb25nPk1DQyBTaGFuZ2hhaTwvc3Ryb25nPiAtIDAxLjAxLjIwMTc8L2E+PC9saT5cclxuXHRcdH0sXHJcblx0XHRpbml0OiBmdW5jdGlvbihkYXRhLCBwYXJlbnQpIHtcclxuXHRcdFx0dGhpcy5SZW5kZXJMaW5rcyhkYXRhLCBwYXJlbnQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYoJCgnLmxsb3lkLXJlbGF0ZWQtbGlua3MnKS5sZW5ndGggPiAwKSB7XHJcblx0XHRMYXRlc3RDYXN1YWxpdHkuaW5pdCh3aW5kb3cuanNvbkxhdGVzdENhc3VhbHRpZXMsICQoJy5sbG95ZC1yZWxhdGVkLWxpbmtzJykpO1xyXG5cdH1cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG5cdHZhciBDYXN1YWxpdHlEZXRhaWwgPSB7XHJcblx0XHRSZW5kZXJUYWJsZTogZnVuY3Rpb24oZGF0YSwgUGFyZW50KSB7XHJcblx0XHRcdHZhciBEYXRhID0gZGF0YVswXS5jYXN1YWx0eURldGFpbDtcclxuXHJcblx0XHRcdFBhcmVudC5hcHBlbmQoJzx0aGVhZCBjbGFzcz1cInRhYmxlX2hlYWRcIj4nK1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQnPHRyPicrXHJcblx0XHRcdFx0XHRcdFx0XHRcdCAgJzx0aCBjb2xzcGFuPVwiMlwiIGNsYXNzPVwicGFkLTIwXCI+JytEYXRhLkhlYWRpbmcrJzwvdGg+JytcclxuXHRcdFx0XHRcdFx0XHRcdFx0JzwvdHI+JytcclxuXHRcdFx0XHRcdFx0XHRcdCc8L3RoZWFkPicpO1xyXG5cdFx0XHRQYXJlbnQuYXBwZW5kKCc8dGJvZHk+PC90Ym9keT4nKTtcclxuXHRcdFx0dmFyIEJvZHkgPSBQYXJlbnQuZmluZCgndGJvZHknKTtcclxuXHRcdFx0Zm9yKHZhciBrZXkgaW4gRGF0YSkge1xyXG5cdFx0XHRcdGlmKGtleSAhPSAnSGVhZGluZycpIHtcclxuXHRcdFx0XHRcdGlmKEFycmF5LmlzQXJyYXkoRGF0YVtrZXldKSkge1xyXG5cdFx0XHRcdFx0XHRpZihrZXkgPT0gJ01lc3NhZ2VzJykge1xyXG5cdFx0XHRcdFx0XHRcdHZhciBTdHJNc2cgPSBcIlwiLFxyXG5cdFx0XHRcdFx0XHRcdFx0TWVzc2FnZXMgPSBEYXRhW2tleV07XHJcblx0XHRcdFx0XHRcdFx0Zm9yKHZhciBpIGluIE1lc3NhZ2VzKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRTdHJNc2cgKz0gXCI8cD48c3Ryb25nPlwiICtNZXNzYWdlc1tpXS5kYXRlKyBcIjwvc3Ryb25nPlwiICtNZXNzYWdlc1tpXS5tZXNzYWdlKyBcIjwvcD5cIjtcclxuXHRcdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRCb2R5LmFwcGVuZCgnPHRyPicrXHJcblx0XHRcdFx0XHRcdFx0XHRcdCAgJzx0ZCBjbGFzcz1cIlIxNlwiPicra2V5Kyc8L3RkPicrXHJcblx0XHRcdFx0XHRcdFx0XHRcdCAgJzx0ZCBjbGFzcz1cIlIxNlwiPicrU3RyTXNnKyc8L3RkPicrXHJcblx0XHRcdFx0XHRcdFx0XHRcdCc8L3RyPicpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRCb2R5LmFwcGVuZCgnPHRyPicrXHJcblx0XHRcdFx0XHRcdFx0XHRcdCAgJzx0ZCBjbGFzcz1cIlIxNlwiPicra2V5Kyc8L3RkPicrXHJcblx0XHRcdFx0XHRcdFx0XHRcdCAgJzx0ZCBjbGFzcz1cIlIxNlwiPicrRGF0YVtrZXldKyc8L3RkPicrXHJcblx0XHRcdFx0XHRcdFx0XHRcdCc8L3RyPicpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGRhdGEsIFBhcmVudCkge1xyXG5cdFx0XHR0aGlzLlJlbmRlclRhYmxlKGRhdGEsIFBhcmVudCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdCQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYoJCgnI2Nhc3VhbHR5LWRldGFpbC10YWJsZScpLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0Q2FzdWFsaXR5RGV0YWlsLmluaXQod2luZG93Lmpzb25DYXN1YWx0eURldGFpbERhdGEsICQoJyNjYXN1YWx0eS1kZXRhaWwtdGFibGUnKSk7XHJcblx0XHR9XHJcblx0fSk7XHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuXHR2YXIgQ2FzdWFsaXR5TGlzdGluZyA9IHtcclxuXHRcdEhlYWRlckxpbmtzOiBbXSxcclxuXHRcdEp1bXBUb0FycmF5OiBbXSxcclxuXHRcdERlc2t0b3BWZXJzaW9uOiBmdW5jdGlvbihkYXRhLCBQYXJlbnQpIHtcclxuXHRcdFx0Ly9IZWFkZXJcclxuXHRcdFx0UGFyZW50LmFwcGVuZCgnPHRoZWFkIGNsYXNzPVwidGFibGVfaGVhZFwiPjwvdGhlYWQ+Jyk7XHJcblxyXG5cdFx0XHR2YXIgSGVhZGVyID0gUGFyZW50LmZpbmQoJ3RoZWFkLnRhYmxlX2hlYWQnKSxcclxuXHRcdFx0XHRIZWFkZXJJdGVtcyA9IHRoaXMuSGVhZGVyTGlua3MsXHJcblx0XHRcdFx0c2VsZiA9IHRoaXM7XHJcblx0XHRcdHNlbGYuSnVtcFRvQXJyYXkgPSBbXTtcclxuXHRcdFx0SGVhZGVyLmFwcGVuZCgnPHRyIGNsYXNzPVwidmlzaWJsZS1sZ1wiPjwvdHI+Jyk7XHJcblxyXG5cdFx0XHRmb3IodmFyIGhlYWRJdGVtIGluIEhlYWRlckl0ZW1zKSB7XHJcblx0XHRcdFx0SGVhZGVyLmZpbmQoJ3RyJykuYXBwZW5kKCc8dGggY2xhc3M9XCJwYWQtMTBcIj4nK0hlYWRlckl0ZW1zW2hlYWRJdGVtXSsnPC90aD4nKTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvL0JvZHlcclxuXHRcdFx0UGFyZW50LmFwcGVuZCgnPHRib2R5IGNsYXNzPVwidmlzaWJsZS1sZ1wiPjwvdGJvZHk+Jyk7XHJcblx0XHRcdFxyXG5cdFx0XHR2YXIgV3JhcHBlciA9IFBhcmVudC5maW5kKCd0Ym9keS52aXNpYmxlLWxnJyk7XHJcblx0XHRcdGZvcih2YXIga2V5IGluIGRhdGEpIHtcclxuXHRcdFx0XHQvL0FwcGVuZGluZyBIZWFkaW5nXHJcblx0XHRcdFx0JCgnI2p1bXBUbycpLmFwcGVuZCgnPG9wdGlvbiB2YWx1ZT1cIicrZGF0YVtrZXldLmNhc3VhbHR5dGl0bGUrJ1wiPicrZGF0YVtrZXldLmNhc3VhbHR5dGl0bGUrJzwvb3B0aW9uPicpO1xyXG5cdFx0XHRcdHNlbGYuSnVtcFRvQXJyYXkucHVzaChkYXRhW2tleV0uY2FzdWFsdHl0aXRsZSk7XHJcblx0XHRcdFx0V3JhcHBlci5hcHBlbmQoJzx0ciBkYXRhLWp1bXA9XCInK2RhdGFba2V5XS5jYXN1YWx0eXRpdGxlKydcIj48dGQgY29sc3Bhbj1cIjJcIiBjbGFzcz1cImdyYXliZyBSQjE4IHBhZC0xMFwiPiAnK2RhdGFba2V5XS5jYXN1YWx0eXRpdGxlKyc8L3RkPjx0ZCBjb2xzcGFuPVwiMVwiIGFsaWduPVwicmlnaHRcIiBjbGFzcz1cImdyYXliZyBSQjE4IHBhZC0xMFwiPjxhIGhyZWY9XCIjXCI+dG9wPC9hPjwvdGQ+PC90cj4nKTtcclxuXHJcblx0XHRcdFx0Ly9BcHBlbmRpbmcgQm9keVxyXG4gICAgICAgICAgICAgICAgdmFyIENhc3VhbGl0eURhdGEgPSBkYXRhW2tleV0uY2FzdWFsdHlEYXRhO1xyXG4gICAgICAgICAgICAgICAgZm9yKHZhciBpdGVtIGluIENhc3VhbGl0eURhdGEpIHtcclxuICAgICAgICAgICAgICAgIFx0V3JhcHBlci5hcHBlbmQoJzx0cj48dGQgY2xhc3M9XCJSQjE2IHBhZC0xMFwiPjxhIGhyZWY9XCInKyAkKCcjY2FzdWFsdHlEZXRhaWxVcmwnKS52YWwoKSsgJz9pbmNpZGVudElkPScrIENhc3VhbGl0eURhdGFbaXRlbV0uaW5jaWRlbnRJZCArJ1wiPicrQ2FzdWFsaXR5RGF0YVtpdGVtXS5UaXRsZSsnPC9hPjwvdGQ+PHRkIGNsYXNzPVwiUjE2IHBhZC0xMFwiPicrQ2FzdWFsaXR5RGF0YVtpdGVtXVtcIkRhdGUgb2YgSW5jaWRlbnRcIl0rJzwvdGQ+PHRkIGNsYXNzPVwiUjE2IHBhZC0xMFwiPicrQ2FzdWFsaXR5RGF0YVtpdGVtXVtcIkFyZWFcIl0rJzwvdGQ+PC90cj4nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0XHJcblxyXG5cdFx0XHRcclxuXHRcdH0sXHJcblx0XHRNb2JpbGVWZXJzaW9uOmZ1bmN0aW9uKGRhdGEsIFBhcmVudCkge1xyXG5cdFx0XHRQYXJlbnQuYXBwZW5kKCc8dGJvZHkgY2xhc3M9XCJ2aXNpYmxlLXNtXCI+PC90Ym9keT4nKTtcclxuXHJcblx0XHRcdHZhciBXcmFwcGVyID0gUGFyZW50LmZpbmQoJ3Rib2R5LnZpc2libGUtc20nKTtcclxuXHRcdFx0Zm9yKHZhciBrZXkgaW4gZGF0YSkge1xyXG5cdFx0XHRcdFdyYXBwZXIuYXBwZW5kKCc8dHI+PHRkIGNsYXNzPVwiZ3JheWJnIFJCMTggcGFkLWZ1bGwtMTBcIj4nK2RhdGFba2V5XS5jYXN1YWx0eXRpdGxlKyc8L3RkPjx0ZCBhbGlnbj1cInJpZ2h0XCIgY2xhc3M9XCJncmF5YmcgUkIxOCBwYWQtMTBcIj48YSBocmVmPVwiI1wiPnRvcDwvYT48L3RkPjwvdHI+Jyk7XHJcblxyXG5cdFx0XHRcdHZhciBIZWFkZXJJdGVtcyA9IHRoaXMuSGVhZGVyTGlua3M7XHJcblx0XHRcdFx0dmFyIENhc3VhbERhdGEgPSBkYXRhW2tleV0uY2FzdWFsdHlEYXRhO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGZvcih2YXIga2V5IGluIENhc3VhbERhdGEpIHtcclxuXHRcdFx0XHRcdGZvcih2YXIgaSBpbiBIZWFkZXJJdGVtcykge1xyXG5cdFx0XHRcdFx0XHRXcmFwcGVyLmFwcGVuZCgnPHRyPicrXHJcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHRkIGNsYXNzPVwicGFkLTEwIFIyMV9HcmF5Q29sb3JcIj4nK0hlYWRlckl0ZW1zW2ldKyc8L3RkPicrXHJcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHRkIGNsYXNzPVwicGFkLTEwIFIyMV9SZWRDb2xvclwiPicrQ2FzdWFsRGF0YVtrZXldW0hlYWRlckl0ZW1zW2ldXSsnPC90ZD4nK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0XHQnPC90cj4nKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdFJlbmRlclRhYmxlOiBmdW5jdGlvbihkYXRhLCBQYXJlbnQpIHtcclxuXHRcdFx0UGFyZW50LmVtcHR5KCk7XHJcblx0XHRcdHRoaXMuRGVza3RvcFZlcnNpb24oZGF0YSwgUGFyZW50KTtcclxuXHRcdFx0dGhpcy5Nb2JpbGVWZXJzaW9uKGRhdGEsIFBhcmVudCk7XHJcblx0XHR9LFxyXG5cdFx0RmluZEhlYWRlckxpbmtzOiBmdW5jdGlvbihkYXRhKSB7XHJcblx0XHRcdGZvcih2YXIga2V5IGluIGRhdGEpIHtcclxuXHRcdFx0XHR2YXIgQ2FzdWFsaXR5RGF0YSA9IGRhdGFba2V5XS5jYXN1YWx0eURhdGE7XHJcbiAgICAgICAgICAgICAgICBmb3IodmFyIGl0ZW0gaW4gQ2FzdWFsaXR5RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgXHR2YXIgTGlzdCA9IENhc3VhbGl0eURhdGFbaXRlbV07XHJcbiAgICAgICAgICAgICAgICBcdGZvcih2YXIgbGlzdCBpbiBMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICBcdFx0aWYobGlzdCAhPSBcImluY2lkZW50SWRcIikge1xyXG4gICAgICAgICAgICAgICAgXHRcdFx0dGhpcy5IZWFkZXJMaW5rcy5wdXNoKGxpc3QpO1xyXG4gICAgICAgICAgICAgICAgXHRcdH1cclxuICAgICAgICAgICAgICAgIFx0fVxyXG4gICAgICAgICAgICAgICAgXHRicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0Q2hhbmdlUmVwb3J0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0XHQkKGRvY3VtZW50KS5vbignY2hhbmdlJywnI3JlbERhdGUnLCBmdW5jdGlvbigpe1xyXG5cdFx0XHRcdHZhciBWYWx1ZSA9ICQodGhpcykuZmluZCgnLnNlbGVjdGl2aXR5LXNpbmdsZS1zZWxlY3RlZC1pdGVtJykuYXR0cignZGF0YS1pdGVtLWlkJyk7XHJcblx0XHRcdFx0aWYod2luZG93Lmpzb25DYXN1YWx0eUxpc3RpbmdbMF1bVmFsdWVdICE9IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdFx0c2VsZi5SZW5kZXJUYWJsZSh3aW5kb3cuanNvbkNhc3VhbHR5TGlzdGluZ1swXVtWYWx1ZV0sICQoJyNjYXN1YWx0eS1saXN0aW5nLXRhYmxlJykpO1xyXG5cdFx0XHRcdFx0JCgnI2Nhc3VhbHR5LWxpc3RpbmctdGFibGUnKS5zaG93KCk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdCQoJyNjYXN1YWx0eS1saXN0aW5nLXRhYmxlJykuaGlkZSgpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYoJCgnLmp1bXBUb1NlY3Rpb24gI2p1bXBUbycpKSB7XHJcblx0XHRcdFx0XHQkKCcuanVtcFRvU2VjdGlvbiAjanVtcFRvJykucmVtb3ZlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdCQoJy5qdW1wVG9TZWN0aW9uJykuYXBwZW5kKCc8c2VsZWN0IG5hbWU9XCJqdW1wVG9cIiBpZD1cImp1bXBUb1wiIGNsYXNzPVwiY29tbW9uLWZpZWxkIGlubGluZVwiPjwvc2VsZWN0PicpO1xyXG5cclxuXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2VsZi5KdW1wVG9BcnJheS5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdFx0JCgnI2p1bXBUbycpLmFwcGVuZCgnPG9wdGlvbiB2YWx1ZT1cIicrc2VsZi5KdW1wVG9BcnJheVtpXSsnXCI+JytzZWxmLkp1bXBUb0FycmF5W2ldKyc8L29wdGlvbj4nKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0JCgnI2p1bXBUbycpLnNlbGVjdGl2aXR5KHtcclxuXHRcdFx0XHRcdHNob3dTZWFyY2hJbnB1dEluRHJvcGRvd246IGZhbHNlXHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdCQoXCIuc2VsZWN0aXZpdHktaW5wdXQgLnNlbGVjdGl2aXR5LXNpbmdsZS1zZWxlY3RcIikuZWFjaChmdW5jdGlvbigpIHtcclxuXHQgXHRcdFx0ICAgJCh0aGlzKS5hcHBlbmQoJzxzcGFuIGNsYXNzPVwic2VsZWN0aXZpdHktYXJyb3dcIj48c3ZnIGNsYXNzPVwiYWxlcnRfX2ljb25cIj48dXNlIHhsaW5rOmhyZWY9XCIvZGlzdC9pbWcvc3ZnLXNwcml0ZS5zdmcjc29ydC1kb3duLWFycm93XCI+PC91c2U+PC9zdmc+PC9zcGFuPicpO1xyXG5cdCBcdFx0XHQgfSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHQkKGRvY3VtZW50KS5vbignY2hhbmdlJywnI2p1bXBUbycsIGZ1bmN0aW9uKCl7XHJcblx0XHRcdFx0dmFyIFZhbHVlID0gJCh0aGlzKS5maW5kKCcuc2VsZWN0aXZpdHktc2luZ2xlLXNlbGVjdGVkLWl0ZW0nKS5hdHRyKCdkYXRhLWl0ZW0taWQnKTtcclxuXHRcdFx0XHR2YXIgVG9wID0gJCgnI2Nhc3VhbHR5LWxpc3RpbmctdGFibGUgdHJbZGF0YS1qdW1wPScrVmFsdWUrJ10nKS5vZmZzZXQoKS50b3A7XHJcblxyXG5cdFx0XHRcdHdpbmRvdy5zY3JvbGxUbygwLCBUb3ApO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0sXHJcblx0XHRpbml0OiBmdW5jdGlvbihkYXRhLCBQYXJlbnQpIHtcclxuXHRcdFx0dmFyIEZpcnN0VmFsdWUgPSAkKCcjcmVsRGF0ZScpLnZhbCgpLFxyXG5cdFx0XHRcdEN1cnJlbnRPYmogPSBkYXRhWzBdW0ZpcnN0VmFsdWVdO1xyXG5cclxuXHRcdFx0dGhpcy5GaW5kSGVhZGVyTGlua3MoQ3VycmVudE9iaik7XHJcblx0XHRcdHRoaXMuUmVuZGVyVGFibGUoQ3VycmVudE9iaiwgUGFyZW50KTtcclxuXHRcdFx0dGhpcy5DaGFuZ2VSZXBvcnQoKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0JChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcblx0XHRpZigkKCcjY2FzdWFsdHktbGlzdGluZy10YWJsZScpLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0Q2FzdWFsaXR5TGlzdGluZy5pbml0KHdpbmRvdy5qc29uQ2FzdWFsdHlMaXN0aW5nLCAkKCcjY2FzdWFsdHktbGlzdGluZy10YWJsZScpKTtcclxuXHRcdH1cclxuXHR9KTtcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG5cdHZhciBtYXJrZXREYXRhVG9vbCA9IHtcclxuXHRcdHJlbmRlclNoaXBwaW5nRGF0YTogZnVuY3Rpb24oZGF0YSl7XHJcblx0XHRcdGlmKGRhdGFbMF1bJ0FyZWFzJ10gIT09IHVuZGVmaW5lZCl7XHJcblx0XHRcdFx0JCgnI2FyZWFDb2RlJykuaHRtbCh0aGlzLmxvYWREcm9wZG93bkRhdGEoZGF0YVswXVsnQXJlYXMnXSkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKGRhdGFbMF1bJ01vdmVtZW50VHlwZXMnXSAhPT0gdW5kZWZpbmVkKXtcclxuXHRcdFx0XHQkKCcjbW92ZW1lbnRUeXBlJykuaHRtbCh0aGlzLmxvYWREcm9wZG93bkRhdGEoZGF0YVswXVsnTW92ZW1lbnRUeXBlcyddKSk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRsb2FkRHJvcGRvd25EYXRhOiBmdW5jdGlvbihvcHRpb25zKXtcclxuXHRcdFx0dmFyIG9wdGlvblN0ciA9ICcnO1xyXG5cdFx0XHQkLmVhY2gob3B0aW9ucywgZnVuY3Rpb24oaWR4LCB2YWwpe1xyXG5cdFx0XHRcdGlmKGlkeCA9PSAwKXtcclxuXHRcdFx0XHRcdG9wdGlvblN0ciArPSAnPG9wdGlvbiB2YWx1ZT1cIicrdmFsLlZhbHVlKydcIiBzZWxlY3RlZD1cInNlbGVjdGVkXCI+Jyt2YWwuVGV4dCsnPC9vcHRpb24+JztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZXtcclxuXHRcdFx0XHRcdG9wdGlvblN0ciArPSAnPG9wdGlvbiB2YWx1ZT1cIicrdmFsLlZhbHVlKydcIj4nK3ZhbC5UZXh0Kyc8L29wdGlvbj4nO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdHJldHVybiBvcHRpb25TdHI7XHJcblx0XHR9LFxyXG5cdFx0cmVuZGVyVGFibGU6IGZ1bmN0aW9uKCl7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdFx0JCgnLnN1Ym1pdCcpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcblx0XHRcdFx0Ly92YXIgc2VhcmNoRGF0YSA9IHRhYmxlT2JqO1xyXG5cdFx0XHRcdCQuYWpheCh7XHJcblx0XHRcdFx0XHR1cmw6ICcvRG93bmxvYWQvSnNvbkRhdGFGcm9tRmVlZC9SZWFkSnNvblNoaXBwaW5nTW92ZW1lbnRzLyAnLFxyXG5cdFx0XHRcdFx0ZGF0YTogeydmZWVkJzogJCgnI1Jlc3VsdFRhYmxlRmVlZFVybCcpLnZhbCgpLCAnYXJlYUNvZGUnOiAkKCcjYXJlYUNvZGUgb3B0aW9uJykudmFsKCksICdtb3ZlbWVudFR5cGUnOiAkKCcjbW92ZW1lbnRUeXBlIG9wdGlvbicpLnZhbCgpfSxcclxuXHRcdFx0XHRcdGRhdGFUeXBlOiAnanNvbicsXHJcblx0XHRcdFx0XHR0eXBlOiAnR0VUJyxcclxuXHRcdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uIChzZWFyY2hEYXRhKSB7XHJcblx0XHRcdFx0XHRcdHNlbGYuc2VuZEhUVFBSZXF1ZXN0KHNlYXJjaERhdGEpO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7XHJcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKGVycikgIFxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdCQoJy5zaGlwcGluZ0RhdGEnKS5hZGRDbGFzcygnaGlkZScpO1xyXG5cdFx0XHRcdCQoJy5oaWRlTWFya2V0RGF0YScpLnJlbW92ZUNsYXNzKCdoaWRlJyk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRcclxuXHRcdFx0JChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5tb3ZlVG9wJywgZnVuY3Rpb24oKXtcclxuXHRcdFx0XHQkKHdpbmRvdykuc2Nyb2xsVG9wKDApO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0XHJcblx0XHRcdCQoJy5nb3RvbGlua3MnKS5vbignY2xpY2snLCAnbGkgYScsIGZ1bmN0aW9uKCl7XHJcblx0XHRcdFx0dmFyICR0aGlzID0gJCh0aGlzKSwgcmVkaXJlY3RMaW5rID0gJHRoaXMuYXR0cignZGF0YS1saW5rJyk7XHJcblx0XHRcdFx0aWYod2luZG93Lm1hdGNoTWVkaWEoXCIobWF4LXdpZHRoOiA2NDBweClcIikubWF0Y2hlcykge1xyXG5cdFx0XHRcdFx0JCh3aW5kb3cpLnNjcm9sbFRvcCgkKCcjbWFya2V0RGF0YVRhYmxlIHRyW2RhdGEtbW5hbWU9JytyZWRpcmVjdExpbmsrJ10nKS5vZmZzZXQoKS50b3AgLSA0MCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2V7XHJcblx0XHRcdFx0XHQkKHdpbmRvdykuc2Nyb2xsVG9wKCQoJyNtYXJrZXREYXRhVGFibGUgdHJbZGF0YS1uYW1lPScrcmVkaXJlY3RMaW5rKyddJykub2Zmc2V0KCkudG9wKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSxcclxuXHRcdHNlbmRIVFRQUmVxdWVzdDogZnVuY3Rpb24oc2VhcmNoRGF0YSl7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcywgbG9hZEhlYWQgPSB0cnVlLFxyXG5cdFx0XHRcdHRhYmxlU3RyID0gJzx0aGVhZCBjbGFzcz1cInRhYmxlX2hlYWRcIj4nO1xyXG5cdFx0XHRcdHRhYmxlU3RyICs9ICc8dHI+PHRoIGNvbHNwYW49XCI3XCIgY2xhc3M9XCJwYWQtZnVsbC0xMFwiPicrc2VhcmNoRGF0YVswXS5hcmVhbmFtZSsnPC90aD48L3RyPic7XHJcblx0XHRcdCQuZWFjaChzZWFyY2hEYXRhWzBdLCBmdW5jdGlvbihrZXksIHZhbCl7XHJcblx0XHRcdFx0aWYodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgbG9hZEhlYWQpe1xyXG5cdFx0XHRcdFx0bG9hZEhlYWQgPSBmYWxzZTtcclxuXHRcdFx0XHRcdHRhYmxlU3RyICs9ICc8dHIgY2xhc3M9XCJ2aXNpYmxlLWxnXCI+JztcclxuXHRcdFx0XHRcdCQuZWFjaCh2YWxbMF0sIGZ1bmN0aW9uKGssIHYpe1xyXG5cdFx0XHRcdFx0XHR0YWJsZVN0ciArPSAnPHRkIGNsYXNzPVwicGFkLTEwXCI+JytrKyc8L3RkPic7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdHRhYmxlU3RyICs9ICc8L3RyPic7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0dGFibGVTdHIgKz0gJzwvdGhlYWQ+JztcclxuXHRcdFx0XHJcblx0XHRcdHRhYmxlU3RyICs9IHNlbGYubG9hZERlc2t0b3BWaWV3KHNlYXJjaERhdGFbMF0pO1xyXG5cdFx0XHR0YWJsZVN0ciArPSBzZWxmLmxvYWRNb2JpbGVWaWV3KHNlYXJjaERhdGFbMF0pO1xyXG5cdFx0XHQgXHJcblx0XHRcdCQoJyNtYXJrZXREYXRhVGFibGUnKS5odG1sKHRhYmxlU3RyKTtcclxuXHRcdFx0XHJcblx0XHRcdHZhciBtYXJrZXRMaW5rcyA9ICc8dWw+JywgbGlua0lkeCA9IDA7XHJcblx0XHRcdCQuZWFjaChzZWFyY2hEYXRhWzBdLCBmdW5jdGlvbihrZXksIHZhbCl7XHJcblx0XHRcdFx0aWYodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpe1xyXG5cdFx0XHRcdFx0bGlua0lkeCsrO1xyXG5cdFx0XHRcdFx0bWFya2V0TGlua3MgKz0gJzxsaSBjbGFzcz1cImFydGljbGUtdG9waWNzX19saVwiPjxhIGhyZWY9XCJqYXZhc2NyaXB0OiB2b2lkKDApO1wiIGRhdGEtbGluaz1mb2N1c0RhdGFfJytsaW5rSWR4Kyc+JytrZXkrJzwvYT48L2xpPic7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0bWFya2V0TGlua3MgKz0gJzwvdWw+JztcclxuXHRcdFx0XHJcblx0XHRcdCQoJy5nb3RvbGlua3MnKS5odG1sKG1hcmtldExpbmtzKTtcclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdGxvYWREZXNrdG9wVmlldzogZnVuY3Rpb24odGFibGVEYXRhKXtcclxuXHRcdFx0dmFyIGRlc2t0b3BTdHIgPSAnPHRib2R5IGNsYXNzPVwidmlzaWJsZS1sZ1wiPicsIGRhdGFJZHggPSAwO1xyXG5cdFx0XHQkLmVhY2godGFibGVEYXRhLCBmdW5jdGlvbihrZXksIHZhbCl7XHJcblx0XHRcdFx0aWYodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpe1xyXG5cdFx0XHRcdFx0ZGF0YUlkeCsrO1xyXG5cdFx0XHRcdFx0ZGVza3RvcFN0ciArPSAnPHRyIGRhdGEtbmFtZT1cImZvY3VzRGF0YV8nK2RhdGFJZHgrJ1wiPic7XHJcblx0XHRcdFx0XHRkZXNrdG9wU3RyICs9ICc8dGQgY29sc3Bhbj1cIjZcIiBjbGFzcz1cImdyYXliZyBSQjE4IHBhZC0xMFwiPicra2V5Kyc8L3RkPic7XHJcblx0XHRcdFx0XHRkZXNrdG9wU3RyICs9ICc8dGQgY29sc3Bhbj1cIjFcIiBhbGlnbj1cInJpZ2h0XCIgY2xhc3M9XCJncmF5YmcgUkIxOCBwYWQtMTAgbW92ZVRvcFwiPjxhIGhyZWY9XCJqYXZhc2NyaXB0OiB2b2lkKDApO1wiPnRvcDwvYT48L3RkPic7XHJcblx0XHRcdFx0XHRkZXNrdG9wU3RyICs9ICc8L3RyPic7XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdCQuZWFjaCh2YWwsIGZ1bmN0aW9uKGksIHYpe1xyXG5cdFx0XHRcdFx0XHRkZXNrdG9wU3RyICs9ICc8dHI+JztcclxuXHRcdFx0XHRcdFx0ZGVza3RvcFN0ciArPSAnPHRkIGNsYXNzPVwiUjE2IHBhZC0xMFwiPicrdltcIk1vdmUgRGF0ZVwiXSsnPC90ZD4nO1xyXG5cdFx0XHRcdFx0XHRkZXNrdG9wU3RyICs9ICc8dGQgY2xhc3M9XCJSMTYgcGFkLTEwXCI+Jyt2W1wiVmVzc2VsIE5hbWVcIl0rJzwvdGQ+JztcclxuXHRcdFx0XHRcdFx0ZGVza3RvcFN0ciArPSAnPHRkIGNsYXNzPVwiUjE2IHBhZC0xMFwiPicrdltcIkZsYWdcIl0rJzwvdGQ+JztcclxuXHRcdFx0XHRcdFx0ZGVza3RvcFN0ciArPSAnPHRkIGNsYXNzPVwiUjE2IHBhZC0xMFwiPicrdltcIkdyb3NzXCJdKyc8L3RkPic7XHJcblx0XHRcdFx0XHRcdGRlc2t0b3BTdHIgKz0gJzx0ZCBjbGFzcz1cIlIxNiBwYWQtMTBcIj4nK3ZbXCJPcmlnaW5cIl0rJzwvdGQ+JztcclxuXHRcdFx0XHRcdFx0ZGVza3RvcFN0ciArPSAnPHRkIGNsYXNzPVwiUjE2IHBhZC0xMFwiPicrdltcIkRlc3RpbmF0aW9uXCJdKyc8L3RkPic7XHJcblx0XHRcdFx0XHRcdGRlc2t0b3BTdHIgKz0gJzx0ZCBjbGFzcz1cIlIxNiBwYWQtMTBcIj4nK3ZbXCJWZXNzZWwgVHlwZVwiXSsnPC90ZD4nO1xyXG5cdFx0XHRcdFx0XHRkZXNrdG9wU3RyICs9ICc8L3RyPic7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRkZXNrdG9wU3RyICs9ICc8L3Rib2R5Pic7XHJcblx0XHRcdHJldHVybiBkZXNrdG9wU3RyO1xyXG5cdFx0fSxcclxuXHRcdGxvYWRNb2JpbGVWaWV3OiBmdW5jdGlvbih0YWJsZURhdGEpe1xyXG5cdFx0XHR2YXIgbW9iaWxlU3RyID0gJzx0Ym9keSBjbGFzcz1cInZpc2libGUtc21cIj4nLCBkYXRhSWR4ID0gMDtcclxuXHRcdFx0JC5lYWNoKHRhYmxlRGF0YSwgZnVuY3Rpb24oa2V5LCB2YWwpe1xyXG5cdFx0XHRcdGlmKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKXtcclxuXHRcdFx0XHRcdGRhdGFJZHgrKztcclxuXHRcdFx0XHRcdG1vYmlsZVN0ciArPSAnPHRyIGRhdGEtbW5hbWU9XCJmb2N1c0RhdGFfJytkYXRhSWR4KydcIj4nO1xyXG5cdFx0XHRcdFx0bW9iaWxlU3RyICs9ICc8dGQgY29sc3Bhbj1cIjJcIiBjbGFzcz1cImdyYXliZyBSQjE4IHBhZC1mdWxsLTEwXCI+JytrZXkrJzwvdGQ+JztcclxuXHRcdFx0XHRcdG1vYmlsZVN0ciArPSAnPC90cj4nO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHQkLmVhY2godmFsLCBmdW5jdGlvbihpLCB2KXtcclxuXHRcdFx0XHRcdFx0JC5lYWNoKHYsIGZ1bmN0aW9uKGlkeCwgdmwpe1xyXG5cdFx0XHRcdFx0XHRcdG1vYmlsZVN0ciArPSAnPHRyPic7XHJcblx0XHRcdFx0XHRcdFx0bW9iaWxlU3RyICs9ICc8dGQgY2xhc3M9XCJwYWQtMTAgUjIxX0dyYXlDb2xvclwiPicraWR4Kyc8L3RkPic7XHJcblx0XHRcdFx0XHRcdFx0bW9iaWxlU3RyICs9ICc8dGQgY2xhc3M9XCJwYWQtMTAgUjIxX1JlZENvbG9yXCI+Jyt2bCsnPC90ZD4nO1xyXG5cdFx0XHRcdFx0XHRcdG1vYmlsZVN0ciArPSAnPC90cj4nO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdG1vYmlsZVN0ciArPSAnPC90Ym9keT4nO1xyXG5cdFx0XHRyZXR1cm4gbW9iaWxlU3RyO1xyXG5cdFx0fSxcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGRhdGEpIHtcclxuXHRcdFx0Ly90aGlzLnJlbmRlclNoaXBwaW5nRGF0YShkYXRhKTtcclxuXHRcdFx0dGhpcy5yZW5kZXJUYWJsZSgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHQkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuXHRcdGlmKCQoJyNtYXJrZXQtZGF0YS10b29sJykubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRtYXJrZXREYXRhVG9vbC5pbml0KHdpbmRvdy5zaGlwcGluZ01vdmVtZW50cyk7XHJcblx0XHR9XHJcblx0fSk7XHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuXHR2YXIgbWFya2V0RGF0YSA9IHtcclxuXHRcdHJlbmRlclRhYmxlOiBmdW5jdGlvbihkYXRhKXtcclxuXHRcdFx0dmFyIHRhYmxlU3RyID0gJyc7XHJcblx0XHRcdHRhYmxlU3RyICs9IHRoaXMubG9hZERlc2t0b3BWaWV3KGRhdGEpO1xyXG5cdFx0XHR0YWJsZVN0ciArPSB0aGlzLmxvYWRNb2JpbGVWaWV3KGRhdGEpO1xyXG5cdFx0XHRcclxuXHRcdFx0JCgnI21hcmtldERhdGFUYWJsZScpLmh0bWwodGFibGVTdHIpO1xyXG5cdFx0fSxcclxuXHRcdGxvYWREZXNrdG9wVmlldzogZnVuY3Rpb24odGFibGVEYXRhKXtcclxuXHRcdFx0dmFyIGhlYWRPYmogPSB0YWJsZURhdGFbMF0sIGluZHggPSAwLFxyXG5cdFx0XHRcdGRlc2t0b3BTdHIgPSAnPHRoZWFkIGNsYXNzPVwidGFibGVfaGVhZFwiPic7XHJcblx0XHRcdFx0ZGVza3RvcFN0ciArPSAnPHRyIGNsYXNzPVwidmlzaWJsZS1sZ1wiPic7XHJcblx0XHRcdFx0JC5lYWNoKGhlYWRPYmosIGZ1bmN0aW9uKGtleSwgdmFsKXtcclxuXHRcdFx0XHRcdGRlc2t0b3BTdHIgKz0gJzx0ZCBjbGFzcz1cIlIxNiBwYWQtMTBcIj4nK2tleSsnPC90ZD4nO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdGRlc2t0b3BTdHIgKz0gJzwvdGhlYWQ+JztcclxuXHRcdFx0XHRcdFx0ICAgXHJcblx0XHRcdFx0ZGVza3RvcFN0ciArPSAnPHRib2R5IGNsYXNzPVwidmlzaWJsZS1sZ1wiPic7XHJcblx0XHRcdFx0JC5lYWNoKHRhYmxlRGF0YSwgZnVuY3Rpb24oaWR4LCB2YWwpe1xyXG5cdFx0XHRcdFx0ZGVza3RvcFN0ciArPSAnPHRyPic7XHJcblx0XHRcdFx0XHQkLmVhY2godmFsLCBmdW5jdGlvbihrLCB2KXtcclxuXHRcdFx0XHRcdFx0dmFyIGNscyA9ICh2LnNwbGl0KCcgJylbMV0uaW5kZXhPZignLScpICE9PSAtMSkgPyAnZmFsbCcgOiAncmlzZSc7XHJcblx0XHRcdFx0XHRcdGlmKGluZHggPj0gMSl7XHJcblx0XHRcdFx0XHRcdFx0ZGVza3RvcFN0ciArPSAnPHRkIGNsYXNzPVwiUjE2IHBhZC0xMFwiPicrdi5zcGxpdCgnICcpWzBdKyc8c3BhbiBjbGFzcz1cIicrY2xzKydcIj4nK3Yuc3BsaXQoJyAnKVsxXSsnPC9zcGFuPjwvdGQ+JztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRlbHNle1xyXG5cdFx0XHRcdFx0XHRcdGRlc2t0b3BTdHIgKz0gJzx0ZCBjbGFzcz1cIlIxNiBwYWQtMTBcIj4nK3YrJzwvdGQ+JztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpbmR4Kys7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdGluZHggPSAwO1xyXG5cdFx0XHRcdFx0ZGVza3RvcFN0ciArPSAnPC90cj4nO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHQgXHJcblx0XHRcdGRlc2t0b3BTdHIgKz0gJzwvdGJvZHk+JztcclxuXHRcdFx0cmV0dXJuIGRlc2t0b3BTdHI7XHJcblx0XHR9LFxyXG5cdFx0bG9hZE1vYmlsZVZpZXc6IGZ1bmN0aW9uKHRhYmxlRGF0YSl7XHJcblx0XHRcdHZhciBtb2JpbGVTdHIgPSAnPHRib2R5IGNsYXNzPVwidmlzaWJsZS1zbVwiPicsIGluZHggPSAwO1xyXG5cdFx0XHQkLmVhY2godGFibGVEYXRhLCBmdW5jdGlvbihpZHgsIHZhbCl7XHJcblx0XHRcdFx0JC5lYWNoKHZhbCwgZnVuY3Rpb24oaywgdil7XHJcblx0XHRcdFx0XHRpbmR4Kys7XHJcblx0XHRcdFx0XHR2YXIgY2xzID0gKHYuc3BsaXQoJyAnKVsxXS5pbmRleE9mKCctJykgIT09IC0xKSA/ICdmYWxsJyA6ICdyaXNlJztcclxuXHRcdFx0XHRcdGlmKGluZHggPT09IDEpe1xyXG5cdFx0XHRcdFx0XHRtb2JpbGVTdHIgKz0gJzx0cj4nO1xyXG5cdFx0XHRcdFx0XHRtb2JpbGVTdHIgKz0gJzx0ZCBjbGFzcz1cInBhZC0xMCBSMjFfR3JheUNvbG9yXCI+JytrKyc8L3RkPic7XHJcblx0XHRcdFx0XHRcdG1vYmlsZVN0ciArPSAnPHRkIGNsYXNzPVwicGFkLTEwIFIyMV9HcmF5Q29sb3JcIj4nK3YrJzwvdGQ+JztcclxuXHRcdFx0XHRcdFx0bW9iaWxlU3RyICs9ICc8L3RyPic7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNle1xyXG5cdFx0XHRcdFx0XHRtb2JpbGVTdHIgKz0gJzx0cj4nO1xyXG5cdFx0XHRcdFx0XHRtb2JpbGVTdHIgKz0gJzx0ZCBjbGFzcz1cInBhZC0xMCBSMjFfR3JheUNvbG9yXCI+JytrKyc8L3RkPic7XHJcblx0XHRcdFx0XHRcdG1vYmlsZVN0ciArPSAnPHRkIGNsYXNzPVwicGFkLTEwIFIyMV9HcmF5Q29sb3JcIj4nK3Yuc3BsaXQoJyAnKVswXSsnPHNwYW4gY2xhc3M9XCInK2NscysnXCI+Jyt2LnNwbGl0KCcgJylbMV0rJzwvdGQ+JztcclxuXHRcdFx0XHRcdFx0bW9iaWxlU3RyICs9ICc8L3RyPic7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0aW5keCA9IDA7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRtb2JpbGVTdHIgKz0gJzwvdGJvZHk+JztcclxuXHRcdFx0cmV0dXJuIG1vYmlsZVN0cjtcclxuXHRcdH0sXHJcblx0XHRpbml0OiBmdW5jdGlvbihkYXRhKSB7XHJcblx0XHRcdHRoaXMucmVuZGVyVGFibGUoZGF0YSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdCQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYoJCgnI21hcmtldC1kYXRhJykubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRtYXJrZXREYXRhLmluaXQod2luZG93Lmpzb25CYWx0aWNJbmRpY2VzKTtcclxuXHRcdH1cclxuXHR9KTtcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG5cdHZhciB0YW5rZXJGaXh0dXJlcyA9IHtcclxuXHRcdHJlbmRlckRhdGVEYXRhOiBmdW5jdGlvbihkYXRhKXtcclxuXHRcdFx0aWYoZGF0YVswXVsnU2VsZWN0RGF0ZSddICE9PSB1bmRlZmluZWQpe1xyXG5cdFx0XHRcdCQoJyNzZWxlY3REYXknKS5odG1sKHRoaXMubG9hZERyb3Bkb3duRGF0YShkYXRhWzBdWydTZWxlY3REYXRlJ10pKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdGxvYWREcm9wZG93bkRhdGE6IGZ1bmN0aW9uKG9wdGlvbnMpe1xyXG5cdFx0XHR2YXIgb3B0aW9uU3RyID0gJyc7XHJcblx0XHRcdCQuZWFjaChvcHRpb25zLCBmdW5jdGlvbihpZHgsIHZhbCl7XHJcblx0XHRcdFx0aWYoaWR4ID09IDApe1xyXG5cdFx0XHRcdFx0b3B0aW9uU3RyICs9ICc8b3B0aW9uIHZhbHVlPVwiJyt2YWwuVmFsdWUrJ1wiIHNlbGVjdGVkPVwic2VsZWN0ZWRcIj4nK3ZhbC5UZXh0Kyc8L29wdGlvbj4nO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNle1xyXG5cdFx0XHRcdFx0b3B0aW9uU3RyICs9ICc8b3B0aW9uIHZhbHVlPVwiJyt2YWwuVmFsdWUrJ1wiPicrdmFsLlRleHQrJzwvb3B0aW9uPic7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0cmV0dXJuIG9wdGlvblN0cjtcclxuXHRcdH0sXHJcblx0XHRyZW5kZXJUYWJsZTogZnVuY3Rpb24odGFibGVEYXRhKXtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0XHQkKGRvY3VtZW50KS5vbignY2hhbmdlJywgJyNzZWxlY3REYXknLCBmdW5jdGlvbigpe1xyXG5cdFx0XHRcdHZhciBzZWFyY2hEYXRhID0gdGFibGVEYXRhO1xyXG5cdFx0XHRcdC8qJC5hamF4KHtcclxuXHRcdFx0XHRcdHVybDogJy9Eb3dubG9hZC9Kc29uRGF0YUZyb21GZWVkL1JlYWRKc29uU2hpcHBpbmdNb3ZlbWVudHMvICcsXHJcblx0XHRcdFx0XHRkYXRhOiB7J2ZlZWQnOiAkKCcjUmVzdWx0VGFibGVGZWVkVXJsJykudmFsKCksICdhcmVhQ29kZSc6ICQoJyNhcmVhQ29kZSBvcHRpb24nKS52YWwoKSwgJ21vdmVtZW50VHlwZSc6ICQoJyNtb3ZlbWVudFR5cGUgb3B0aW9uJykudmFsKCl9LFxyXG5cdFx0XHRcdFx0ZGF0YVR5cGU6ICdqc29uJyxcclxuXHRcdFx0XHRcdHR5cGU6ICdHRVQnLFxyXG5cdFx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24gKHNlYXJjaERhdGEpIHsqL1xyXG5cdFx0XHRcdFx0XHRzZWxmLnNlbmRIVFRQUmVxdWVzdChzZWFyY2hEYXRhKTtcclxuXHRcdFx0XHRcdC8qfSxcclxuXHRcdFx0XHRcdGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7XHJcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKGVycikgIFxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pOyovXHJcblx0XHRcdH0pO1xyXG5cdFx0fSxcclxuXHRcdHNlbmRIVFRQUmVxdWVzdDogZnVuY3Rpb24oc2VhcmNoRGF0YSl7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcywgbG9hZEhlYWQgPSB0cnVlLCB0YWJsZVN0ciA9ICcnO1xyXG5cdFx0XHRcclxuXHRcdFx0dGFibGVTdHIgKz0gc2VsZi5sb2FkRGVza3RvcFZpZXcoc2VhcmNoRGF0YSk7XHJcblx0XHRcdHRhYmxlU3RyICs9IHNlbGYubG9hZE1vYmlsZVZpZXcoc2VhcmNoRGF0YSk7XHJcblx0XHRcdCBcclxuXHRcdFx0JCgnI3RhbmtlckZpeHR1cmVzJykuaHRtbCh0YWJsZVN0cik7XHJcblx0XHR9LFxyXG5cdFx0bG9hZERlc2t0b3BWaWV3OiBmdW5jdGlvbih0YWJsZURhdGEpe1xyXG5cdFx0XHR2YXIgdGFibGVTdHIgPSAnJztcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRhYmxlRGF0YS5sZW5ndGg7IGkrKyl7XHJcblx0XHRcdFx0dmFyIHRoZWFkRmxhZyA9IHRydWUsIHRib2R5RmxhZyA9IHRydWUsIHRib2R5RmxhZ2VuZCA9IGZhbHNlLCBpZHggPSAwO1xyXG5cdFx0XHRcdFx0dGFibGVTdHIgKz0gJzx0YWJsZSBjbGFzcz1cInRhYmxlIGRlc2NWaWV3XCI+PHRoZWFkIGNsYXNzPVwidGFibGVfaGVhZFwiPic7XHJcblx0XHRcdFx0Zm9yKHZhciBwcm9wIGluIHRhYmxlRGF0YVtpXSl7XHJcblx0XHRcdFx0XHR0YWJsZVN0ciArPSAnPHRyPic7XHJcblx0XHRcdFx0XHR0YWJsZVN0ciArPSAnPHRoIGNvbHNwYW49XCI4XCIgY2xhc3M9XCJwYWQtZnVsbC0xMFwiPicrcHJvcCsnPC90aD4nO1xyXG5cdFx0XHRcdFx0dGFibGVTdHIgKz0gJzwvdHI+JztcclxuXHRcdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCB0YWJsZURhdGFbaV1bcHJvcF0ubGVuZ3RoOyBqKyspe1xyXG5cdFx0XHRcdFx0XHRpZHgrKztcclxuXHRcdFx0XHRcdFx0aWYodGFibGVEYXRhW2ldW3Byb3BdLmxlbmd0aCA9PSBpZHggLSAxKSB0Ym9keUZsYWdlbmQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHR2YXIgZWFjaE9iaiA9IHRhYmxlRGF0YVtpXVtwcm9wXTtcclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdGlmKHRoZWFkRmxhZyl7XHJcblx0XHRcdFx0XHRcdFx0dGhlYWRGbGFnID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdFx0dGFibGVTdHIgKz0gJzx0ciBjbGFzcz1cInZpc2libGUtbGdcIj4nO1xyXG5cdFx0XHRcdFx0XHRcdGZvcih2YXIgcCBpbiBlYWNoT2JqW2pdKXtcclxuXHRcdFx0XHRcdFx0XHRcdHRhYmxlU3RyICs9ICc8dGggY2xhc3M9XCJwYWQtMTBcIj4nK3ArJzwvdGg+JztcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0dGFibGVTdHIgKz0gJzwvdGhlYWQ+JztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZih0Ym9keUZsYWcpe1xyXG5cdFx0XHRcdFx0XHRcdHRib2R5RmxhZyA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdHRhYmxlU3RyICs9ICc8dGJvZHkgY2xhc3M9XCJ2aXNpYmxlLWxnXCI+JztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR0YWJsZVN0ciArPSAnPHRyPic7XHJcblx0XHRcdFx0XHRcdGZvcih2YXIgcCBpbiBlYWNoT2JqW2pdKXtcclxuXHRcdFx0XHRcdFx0XHR0YWJsZVN0ciArPSAnPHRkIGNsYXNzPVwiUjE2IHBhZC0xMFwiPicrZWFjaE9ialtqXVtwXSsnPC90ZD4nO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHRhYmxlU3RyICs9ICc8L3RyPic7XHJcblx0XHRcdFx0XHRcdGlmKHRib2R5RmxhZ2VuZCl7XHJcblx0XHRcdFx0XHRcdFx0dGJvZHlGbGFnZW5kID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdFx0dGFibGVTdHIgKz0gJzwvdGJvZHk+JztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR0YWJsZVN0ciArPSAnPC90YWJsZT4nO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0YWJsZVN0cjtcclxuXHRcdH0sXHJcblx0XHRsb2FkTW9iaWxlVmlldzogZnVuY3Rpb24odGFibGVEYXRhKXtcclxuXHRcdFx0dmFyIG1vYmlsZVN0ciA9ICcnLCBkYXRhSWR4ID0gMDtcclxuXHRcdFx0JC5lYWNoKHRhYmxlRGF0YSwgZnVuY3Rpb24oaW5kZXgsIHZhbHVlKXtcclxuXHRcdFx0XHRtb2JpbGVTdHIgKz0gJzx0YWJsZSBjbGFzcz1cInRhYmxlIG1vYlZpZXdcIj4nO1xyXG5cdFx0XHRcdCQuZWFjaCh2YWx1ZSwgZnVuY3Rpb24oa2V5LCB2YWwpe1xyXG5cdFx0XHRcdFx0bW9iaWxlU3RyICs9ICc8dGhlYWQgY2xhc3M9XCJ0YWJsZV9oZWFkXCI+JztcclxuXHRcdFx0XHRcdG1vYmlsZVN0ciArPSAnPHRyPic7XHJcblx0XHRcdFx0XHRtb2JpbGVTdHIgKz0gJzx0aCBjb2xzcGFuPVwiOFwiIGNsYXNzPVwicGFkLWZ1bGwtMTBcIj4nK2tleSsnPC90aD4nO1xyXG5cdFx0XHRcdFx0bW9iaWxlU3RyICs9ICc8L3RyPic7XHJcblx0XHRcdFx0XHRtb2JpbGVTdHIgKz0gJzwvdGhlYWQ+JztcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0bW9iaWxlU3RyICs9ICc8dGJvZHkgY2xhc3M9XCJ2aXNpYmxlLXNtXCI+JztcclxuXHRcdFx0XHRcdCQuZWFjaCh2YWwsIGZ1bmN0aW9uKGksIHYpe1xyXG5cdFx0XHRcdFx0XHRmb3IodmFyIHByb3AgaW4gdil7XHJcblx0XHRcdFx0XHRcdFx0bW9iaWxlU3RyICs9ICc8dHI+JztcclxuXHRcdFx0XHRcdFx0XHRtb2JpbGVTdHIgKz0gJzx0ZCBjbGFzcz1cInBhZC0xMCBSMjFfR3JheUNvbG9yXCI+Jytwcm9wKyc8L3RkPic7XHJcblx0XHRcdFx0XHRcdFx0bW9iaWxlU3RyICs9ICc8dGQgY2xhc3M9XCJwYWQtMTAgUjIxX0dyYXlDb2xvclZhbFwiPicrdltwcm9wXSsnPC90ZD4nO1xyXG5cdFx0XHRcdFx0XHRcdG1vYmlsZVN0ciArPSAnPC90cj4nO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdG1vYmlsZVN0ciArPSAnPC90Ym9keT4nO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdG1vYmlsZVN0ciArPSAnPC90YWJsZT4nO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0cmV0dXJuIG1vYmlsZVN0cjtcclxuXHRcdH0sXHJcblx0XHRpbml0OiBmdW5jdGlvbihkYXRlT2JqLCB0YWJsZURhdGFPYmopIHtcclxuXHRcdFx0dGhpcy5yZW5kZXJEYXRlRGF0YShkYXRlT2JqKTtcclxuXHRcdFx0dGhpcy5yZW5kZXJUYWJsZSh0YWJsZURhdGFPYmopO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHQkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuXHRcdGlmKCQoJyN0YW5rZXItZml4dHVyZXMnKS5sZW5ndGggPiAwKSB7XHJcblx0XHRcdHRhbmtlckZpeHR1cmVzLmluaXQod2luZG93LmRhdGVPcHRpb25zLCB3aW5kb3cudGFibGVPYmopO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59KSgpOyIsImltcG9ydCB7IGFuYWx5dGljc0V2ZW50IH0gZnJvbSAnLi4vY29udHJvbGxlcnMvYW5hbHl0aWNzLWNvbnRyb2xsZXInOyBcclxuXHJcbmZ1bmN0aW9uIHNldENsc2ZvckZsdyh0KSB7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgdGFibGVGbHdyb3cgPSAkKHRbaV0pLmZpbmQoJy5mb2xsb3dyb3cuZGlzYWJsZWQ6ZXEoMCknKTtcclxuICAgICAgICB0YWJsZUZsd3Jvdy5hZGRDbGFzcygnZnJvdycpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVKU09ORGF0YShhbGx0YWJsZXMsIFVzZXJQcmVmZXJlbmNlcykge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGx0YWJsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgY3VycmVudHRhYnRycyA9ICQoYWxsdGFibGVzW2ldKS5maW5kKCd0Ym9keSB0cicpLFxyXG5cdFx0XHRwdWJQYW5Qb3NpdGlvbiA9ICQoYWxsdGFibGVzW2ldKS5jbG9zZXN0KCcucHVibGljYXRpb25QYW4nKS5hdHRyKCdkYXRhLXJvdycpLFxyXG5cdFx0XHR0YWJsZUlkID0gJChhbGx0YWJsZXNbaV0pLmF0dHIoJ2lkJyksXHJcblx0XHRcdHB1YmxpY2F0aW9uTmFtZSA9ICQoYWxsdGFibGVzW2ldKS5maW5kKCdoMicpLmF0dHIoJ2RhdGEtcHVibGljYXRpb24nKSxcclxuXHRcdFx0c3Vic2NyaWJlU3RhdHVzID0gJChhbGx0YWJsZXNbaV0pLmZpbmQoJy5zdWJzY3JpYmVkJykuaHRtbCgpLFxyXG5cdFx0XHRjaGFubmVsSWQgPSAkKGFsbHRhYmxlc1tpXSkuZmluZCgnaDInKS5hdHRyKCdkYXRhLWl0ZW0taWQnKSxcclxuXHRcdGNoYW5uZWxTdGF0dXMgPSAkKGFsbHRhYmxlc1tpXSkuZmluZCgnaDInKS5hdHRyKCdkYXRhLWl0ZW0tc3RhdHVzJyk7XHJcbiAgICAgICAgdmFyIGFsbHRkYXRhID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjdXJyZW50dGFidHJzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgIHZhciBlYWNocm93QXR0ciA9ICQoY3VycmVudHRhYnRyc1tqXSkuZmluZCgnaW5wdXRbdHlwZT1oaWRkZW5dJykuYXR0cignZGF0YS1yb3ctdG9waWMnKSxcclxuXHRcdFx0XHR0b3BpY0lkID0gJChjdXJyZW50dGFidHJzW2pdKS5maW5kKCdpbnB1dFt0eXBlPWhpZGRlbl0nKS5hdHRyKCdkYXRhLXJvdy1pdGVtLWlkJyksXHJcblx0XHRcdFx0c2Vjb25kdGQgPSAkKGN1cnJlbnR0YWJ0cnNbal0pLmZpbmQoJ3RkLndkLTI1IHNwYW4nKS5odG1sKCksXHJcblx0XHRcdFx0ZGF0YXJvd05vID0gJChjdXJyZW50dGFidHJzW2pdKS5hdHRyKCdkYXRhLXJvdycpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGZvbGxvd1N0YXR1cyA9IChzZWNvbmR0ZCA9PSAkKCcjZm9sbG93aW5nQnV0dG9uVGV4dCcpLnZhbCgpKSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIHN1YnNjcmlwU3RhdHVzID0gKHN1YnNjcmliZVN0YXR1cy50b1VwcGVyQ2FzZSgpKSA9PSAnU1VCU0NSSUJFRCcgPyB0cnVlIDogZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBhbGx0ZGF0YS5wdXNoKHsgJ1RvcGljQ29kZSc6IGVhY2hyb3dBdHRyLCAnVG9waWNPcmRlcic6IGRhdGFyb3dObywgJ0lzRm9sbG93aW5nJzogZm9sbG93U3RhdHVzLCAnVG9waWNJZCc6IHRvcGljSWQgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFVzZXJQcmVmZXJlbmNlcy5QcmVmZXJyZWRDaGFubmVscy5wdXNoKHsgXCJDaGFubmVsQ29kZVwiOiBwdWJsaWNhdGlvbk5hbWUsIFwiQ2hhbm5lbE9yZGVyXCI6IHB1YlBhblBvc2l0aW9uLCBcIklzRm9sbG93aW5nXCI6IGNoYW5uZWxTdGF0dXMsIFwiQ2hhbm5lbElkXCI6IGNoYW5uZWxJZCwgVG9waWNzOiBhbGx0ZGF0YSB9KTtcclxuICAgIH1cclxuICAgIHNlbmRIdHRwUmVxdWVzdChVc2VyUHJlZmVyZW5jZXMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZW5kSHR0cFJlcXVlc3QoVXNlclByZWZlcmVuY2VzLCBzZXRGbGFnLCByZWRpcmVjdFVybCkge1xyXG4gICAgJC5hamF4KHtcclxuICAgICAgICB1cmw6ICcvQWNjb3VudC9hcGkvUGVyc29uYWxpemVVc2VyUHJlZmVyZW5jZXNBcGkvVXBkYXRlLycsXHJcbiAgICAgICAgZGF0YTogeyAnVXNlclByZWZlcmVuY2VzJzogSlNPTi5zdHJpbmdpZnkoVXNlclByZWZlcmVuY2VzKSB9LFxyXG4gICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgdHlwZTogJ1BPU1QnLFxyXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhICYmIGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgJCgnLmFsZXJ0LXN1Y2Nlc3MgcCcpLmh0bWwoZGF0YS5yZWFzb24pO1xyXG4gICAgICAgICAgICAgICAgJCgnLmFsZXJ0LXN1Y2Nlc3MnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoJCgnLmFsZXJ0LXN1Y2Nlc3MnKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh3aW5kb3cpLnNjcm9sbFRvcCgkKCcuaW5mb3JtYS1yaWJib24nKS5vZmZzZXQoKS50b3AgKyAkKCcuaW5mb3JtYS1yaWJib24nKS5oZWlnaHQoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoc2V0RmxhZyA9PSAncmVnaXN0ZXInICYmIHJlZGlyZWN0VXJsID09ICdocmVmJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJCgnLnJlZ2lzdHJhdGlvbkJ0bicpLmF0dHIoJ2hyZWYnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNldEZsYWcgPT0gJ3JlZ2lzdGVyJyAmJiByZWRpcmVjdFVybCA9PSAnbmFtZScpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICQoJy5yZWdpc3RyYXRpb25CdG4nKS5hdHRyKCduYW1lJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2V0RmxhZyA9PSAncmVnaXN0ZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0LWVycm9yLnJlZ2lzdGVyLWVycm9yIHAnKS5odG1sKGRhdGEucmVhc29uKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQtZXJyb3IucmVnaXN0ZXItZXJyb3InKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQtZXJyb3IubXl2aWV3LWVycm9yIHAnKS5odG1sKGRhdGEucmVhc29uKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcuYWxlcnQtZXJyb3IubXl2aWV3LWVycm9yJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICBpZiAoZXJyICYmICFlcnIuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNldEZsYWcgPT0gJ3JlZ2lzdGVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICQoJy5hbGVydC1lcnJvci5yZWdpc3Rlci1lcnJvciBwJykuaHRtbChkYXRhLnJlYXNvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0LWVycm9yLnJlZ2lzdGVyLWVycm9yJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0LWVycm9yLm15dmlldy1lcnJvciBwJykuaHRtbChkYXRhLnJlYXNvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLmFsZXJ0LWVycm9yLm15dmlldy1lcnJvcicpLnNob3coKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXREYXRhUm93KGFsbHB1YmxpY2F0aW9ucykge1xyXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBhbGxwdWJsaWNhdGlvbnMubGVuZ3RoOyBrKyspIHtcclxuICAgICAgICB2YXIgdGJvZHkgPSAkKGFsbHB1YmxpY2F0aW9uc1trXSkuZmluZCgndGJvZHknKSwgbmV3dHJzID0gdGJvZHkuZmluZCgndHInKTtcclxuICAgICAgICBuZXd0cnMucmVtb3ZlQXR0cignZGF0YS1yb3cnKTtcclxuICAgICAgICBmb3IgKHZhciB2ID0gMDsgdiA8IG5ld3Rycy5sZW5ndGg7IHYrKykge1xyXG4gICAgICAgICAgICAkKG5ld3Ryc1t2XSkuYXR0cignZGF0YS1yb3cnLCB2ICsgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93TW9kYWwoKSB7XHJcbiAgICAkKCcubW9kYWwtb3ZlcmxheScpLmFkZENsYXNzKCdpbicpO1xyXG4gICAgJCgnLm1vZGFsLXZpZXcnKS5zaG93KCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNlbmRSZWdpc3RlckRhdGEoYWxsdHJzLCBVc2VyUHJlZmVyZW5jZXMsIHJlZGlyZWN0VXJsKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbHRycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciBlYWNocm93QXR0ciA9ICQoYWxsdHJzW2ldKS5maW5kKCdpbnB1dFt0eXBlPWhpZGRlbl0nKS5hdHRyKCdkYXRhLXJvdy10b3BpYycpLFxyXG5cdFx0XHRjaGFubmVsSWQgPSAkKGFsbHRyc1tpXSkuZmluZCgnaW5wdXRbdHlwZT1oaWRkZW5dJykuYXR0cignZGF0YS1yb3ctaXRlbS1pZCcpLFxyXG5cdFx0XHRzZWNvbmR0ZCA9ICQoYWxsdHJzW2ldKS5maW5kKCd0ZC53ZC0yNSBzcGFuJykuaHRtbCgpLFxyXG5cdFx0XHRjaGFubmVsT3JkZXIgPSAkKGFsbHRyc1tpXSkuYXR0cignZGF0YS1yb3cnKSxcclxuXHRcdFx0Zm9sbG93U3RhdHVzID0gKHNlY29uZHRkID09ICQoJyNmb2xsb3dpbmdCdXR0b25UZXh0JykudmFsKCkpID8gdHJ1ZSA6IGZhbHNlO1xyXG5cclxuICAgICAgICBVc2VyUHJlZmVyZW5jZXMuUHJlZmVycmVkQ2hhbm5lbHMucHVzaCh7IFwiQ2hhbm5lbENvZGVcIjogZWFjaHJvd0F0dHIsIFwiQ2hhbm5lbE9yZGVyXCI6IGNoYW5uZWxPcmRlciwgXCJJc0ZvbGxvd2luZ1wiOiBmb2xsb3dTdGF0dXMsIFwiQ2hhbm5lbElkXCI6IGNoYW5uZWxJZCwgXCJUb3BpY3NcIjogW10gfSk7XHJcbiAgICB9XHJcbiAgICBzZW5kSHR0cFJlcXVlc3QoVXNlclByZWZlcmVuY2VzLCAncmVnaXN0ZXInLCByZWRpcmVjdFVybCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNvcnRfdGFibGUodGJvZHksIGNvbCwgYXNjLCBzb3J0c3RhdHVzKSB7XHJcbiAgICB2YXIgcm93cyA9IFtdO1xyXG4gICAgaWYgKHRib2R5WzBdICYmIHRib2R5WzBdLnJvd3MpIHtcclxuICAgICAgICB2YXIgYWxscm93cyA9IHRib2R5WzBdLnJvd3NcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChzb3J0c3RhdHVzID09PSAnZm9sbG93aW5nQnRuJykge1xyXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYWxscm93cy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICBpZiAoYWxscm93c1tqXS5jbGFzc05hbWUgPT0gJ2ZvbGxvd3JvdyBkaXNhYmxlZCcgfHwgYWxscm93c1tqXS5jbGFzc05hbWUgPT0gJ2ZvbGxvd3JvdyBkaXNhYmxlZCBmcm93Jykge1xyXG4gICAgICAgICAgICAgICAgcm93cy5wdXNoKGFsbHJvd3Nbal0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoc29ydHN0YXR1cyA9PT0gJ2ZvbGxvd2luZ3JvdycpIHtcclxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGFsbHJvd3MubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgaWYgKGFsbHJvd3Nbal0uY2xhc3NOYW1lID09ICdmb2xsb3dpbmdyb3cnKSB7XHJcbiAgICAgICAgICAgICAgICByb3dzLnB1c2goYWxscm93c1tqXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChzb3J0c3RhdHVzID09PSAnZm9sbG93cm93Jykge1xyXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYWxscm93cy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICBpZiAoYWxscm93c1tqXS5jbGFzc05hbWUgPT0gJ2ZvbGxvd3JvdyBkaXNhYmxlZCcgfHwgYWxscm93c1tqXS5jbGFzc05hbWUgPT0gJ2ZvbGxvd3JvdyBkaXNhYmxlZCBmcm93Jykge1xyXG4gICAgICAgICAgICAgICAgcm93cy5wdXNoKGFsbHJvd3Nbal0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBybGVuID0gcm93cy5sZW5ndGgsXHJcblx0YXJyID0gbmV3IEFycmF5KCksXHJcblx0aSwgaiwgY2VsbHMsIGNsZW47XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgcmxlbjsgaSsrKSB7XHJcbiAgICAgICAgY2VsbHMgPSByb3dzW2ldLmNlbGxzO1xyXG4gICAgICAgIGNsZW4gPSBjZWxscy5sZW5ndGg7XHJcbiAgICAgICAgYXJyW2ldID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGNsZW47IGorKykge1xyXG4gICAgICAgICAgICBhcnJbaV1bal0gPSBjZWxsc1tqXS5pbm5lckhUTUw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gc29ydCB0aGUgYXJyYXkgYnkgdGhlIHNwZWNpZmllZCBjb2x1bW4gbnVtYmVyIChjb2wpIGFuZCBvcmRlciAoYXNjKVxyXG4gICAgYXJyLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICByZXR1cm4gKGFbY29sXSA9PSBiW2NvbF0pID8gMCA6ICgoYVtjb2xdID4gYltjb2xdKSA/IGFzYyA6IC0xICogYXNjKTtcclxuICAgIH0pO1xyXG4gICAgLy8gcmVwbGFjZSBleGlzdGluZyByb3dzIHdpdGggbmV3IHJvd3MgY3JlYXRlZCBmcm9tIHRoZSBzb3J0ZWQgYXJyYXlcclxuICAgIGZvciAoaSA9IDA7IGkgPCBybGVuOyBpKyspIHtcclxuICAgICAgICAvL3Jvd3NbaV0uaW5uZXJIVE1MID0gXCI8dGQgY2xhc3M9J3dkLTU1Jz5cIiArIGFycltpXS5qb2luKFwiPC90ZD48dGQgY2xhc3M9J3dkLTI1Jz5cIikgKyBcIjwvdGQ+XCI7XHJcbiAgICAgICAgcm93c1tpXS5pbm5lckhUTUwgPSBcIjx0ZCBjbGFzcz0nd2QtNTUnPlwiICsgYXJyW2ldWzBdICsgXCI8L3RkPjx0ZCBjbGFzcz0nd2QtMjUnPlwiICsgYXJyW2ldWzFdICsgXCI8L3RkPjx0ZCBjbGFzcz0nd2QtMTUnPlwiICsgYXJyW2ldWzJdICsgXCI8L3RkPlwiO1xyXG4gICAgfVxyXG59XHJcblxyXG4kKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBjbGlja2VkVXJsID0gJyc7XHJcbiAgICAkKCdhJykuY2xpY2soZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBpZiAoJCgnI3ZhbGlkYXRlUHJpb3JpdHknKSAmJiAkKCcjdmFsaWRhdGVQcmlvcml0eScpLnZhbCgpID09IFwidHJ1ZVwiKSB7XHJcbiAgICAgICAgICAgIGlmICghJCh0aGlzKS5oYXNDbGFzcyhcInZhbGlkYXRpb25DaGtcIikpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIHNob3dNb2RhbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgkKCcjdmFsaWRhdGVNeVZpZXdQcmlvcml0eScpICYmICQoJyN2YWxpZGF0ZU15Vmlld1ByaW9yaXR5JykudmFsKCkgPT0gXCJ0cnVlXCIpIHtcclxuICAgICAgICAgICAgaWYgKCEkKHRoaXMpLmhhc0NsYXNzKFwidmFsaWRhdGlvbkNoa1wiKSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgc2hvd01vZGFsKCk7XHJcbiAgICAgICAgICAgICAgICBpZighJCh0aGlzKS5oYXNDbGFzcygnbXl2aWV3TGluaycpKXtcclxuXHRcdFx0XHRcdGNsaWNrZWRVcmwgPSAkKHRoaXMpLmF0dHIoJ2hyZWYnKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZXtcclxuXHRcdFx0XHRcdGNsaWNrZWRVcmwgPSAkKHRoaXMpLmF0dHIoJ2hyZWYnKSArICcjJyArICQodGhpcykuYXR0cignbmFtZScpO1xyXG5cdFx0XHRcdH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICQoJ2Zvcm0nKS5zdWJtaXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICgkKCcjdmFsaWRhdGVQcmlvcml0eScpICYmICQoJyN2YWxpZGF0ZVByaW9yaXR5JykudmFsKCkgPT0gXCJ0cnVlXCIpIHtcclxuICAgICAgICAgICAgc2hvd01vZGFsKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCQoJyN2YWxpZGF0ZU15Vmlld1ByaW9yaXR5JykgJiYgJCgnI3ZhbGlkYXRlTXlWaWV3UHJpb3JpdHknKS52YWwoKSA9PSBcInRydWVcIikge1xyXG4gICAgICAgICAgICBzaG93TW9kYWwoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICQoJyNhbGxQdWJsaWNhdGlvbnNQYW4nKS5vbignY2xpY2snLCAnLmZvbGxvd0FsbEJ0bicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpLCBjdXJwdWJsaWNQYW4gPSAkdGhpcy5jbG9zZXN0KCcucHVibGljYXRpb25QYW4nKSwgdGJvZHkgPSBjdXJwdWJsaWNQYW4uZmluZCgndGJvZHknKSwgZGl2ID0gJHRoaXMuY2xvc2VzdCgnZGl2JyksICRsZ2ZvbGxvdyA9IGN1cnB1YmxpY1Bhbi5maW5kKCcuZm9sbG93QnRuJyksIHRhYmxlID0gJCgnLnRhYmxlJyk7XHJcbiAgICAgICAgJHRoaXMuYWRkQ2xhc3MoJ2hpZGVCdG4nKTtcclxuICAgICAgICAkKCcjdmFsaWRhdGVQcmVmZXJlbmNlJykudmFsKDEpO1xyXG4gICAgICAgIGRpdi5maW5kKCcudW5mb2xsb3dBbGxCdG4nKS5yZW1vdmVDbGFzcygnaGlkZUJ0bicpO1xyXG4gICAgICAgIGN1cnB1YmxpY1Bhbi5maW5kKCcuZmlyc3Ryb3cgLmxhYmxlU3RhdHVzJykudmFsKCdmb2xsb3dpbmdsYmwnKTtcclxuICAgICAgICBjdXJwdWJsaWNQYW4uZmluZCgnLmFjY29yZGlvblN0YXR1cyAubGFibGVTdGF0dXMnKS52YWwoJ2ZvbGxvd2luZ2xibCcpO1xyXG4gICAgICAgICRsZ2ZvbGxvdy5hZGRDbGFzcygnZm9sbG93aW5nQnRuJykucmVtb3ZlQ2xhc3MoJ2ZvbGxvd0J0bicpLmh0bWwoJCgnI2ZvbGxvd2luZ0J1dHRvblRleHQnKS52YWwoKSk7XHJcbiAgICAgICAgJCgnI3ZhbGlkYXRlUHJpb3JpdHknKS52YWwodHJ1ZSk7XHJcbiAgICAgICAgJCgnI3ZhbGlkYXRlTXlWaWV3UHJpb3JpdHknKS52YWwodHJ1ZSk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0Ym9keS5maW5kKCcuZm9sbG93aW5nQnRuJykubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgJCh0Ym9keS5maW5kKCcuZm9sbG93cm93JylbaV0pLmF0dHIoJ2RyYWdnYWJsZScsIHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3VycHVibGljUGFuLmZpbmQoJy51bmZvbGxvd0FsbEJ0bicpLnJlbW92ZUNsYXNzKCdoaWRlQnRuJyk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkbGdmb2xsb3cubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgJCgkbGdmb2xsb3dbaV0sIGN1cnB1YmxpY1BhbikuY2xvc2VzdCgndHInKS5yZW1vdmVBdHRyKCdjbGFzcycpLmFkZENsYXNzKCdmb2xsb3dpbmdyb3cnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0Q2xzZm9yRmx3KHRhYmxlKTtcclxuICAgICAgICBzb3J0X3RhYmxlKHRib2R5LCAwLCAxLCAnZm9sbG93aW5ncm93Jyk7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgJCgnI2FsbFB1YmxpY2F0aW9uc1BhbicpLm9uKCdjbGljaycsICcudW5mb2xsb3dBbGxCdG4nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSwgY3VycHVibGljUGFuID0gJHRoaXMuY2xvc2VzdCgnLnB1YmxpY2F0aW9uUGFuJyksIHRib2R5ID0gY3VycHVibGljUGFuLmZpbmQoJ3Rib2R5JyksIGRpdiA9ICR0aGlzLmNsb3Nlc3QoJ2RpdicpLCAkbGdmb2xsb3dpbmcgPSBjdXJwdWJsaWNQYW4uZmluZCgnLmZvbGxvd2luZ0J0bicpO1xyXG4gICAgICAgICR0aGlzLmFkZENsYXNzKCdoaWRlQnRuJyk7XHJcbiAgICAgICAgJHRoaXMuY2xvc2VzdCgnLnNtZm9sbG93aW5nQnRuJykuZmluZCgnLmZvbGxvd0FsbEJ0bicpLmFkZENsYXNzKCdmcicpO1xyXG4gICAgICAgICQoJyN2YWxpZGF0ZVByZWZlcmVuY2UnKS52YWwoMSk7XHJcbiAgICAgICAgZGl2LmZpbmQoJy5mb2xsb3dBbGxCdG4nKS5yZW1vdmVDbGFzcygnaGlkZUJ0bicpO1xyXG4gICAgICAgIGN1cnB1YmxpY1Bhbi5maW5kKCcuZmlyc3Ryb3cgLmxhYmxlU3RhdHVzJykudmFsKCdmb2xsb3dsYmwnKTtcclxuICAgICAgICBjdXJwdWJsaWNQYW4uZmluZCgnLmFjY29yZGlvblN0YXR1cyAubGFibGVTdGF0dXMnKS52YWwoJ2ZvbGxvd2xibCcpO1xyXG4gICAgICAgICRsZ2ZvbGxvd2luZy5hZGRDbGFzcygnZm9sbG93QnRuJykucmVtb3ZlQ2xhc3MoJ2ZvbGxvd2luZ0J0bicpLmh0bWwoJCgnI2ZvbGxvd0J1dHRvblRleHQnKS52YWwoKSk7XHJcbiAgICAgICAgJCgnI3ZhbGlkYXRlUHJpb3JpdHknKS52YWwoZmFsc2UpO1xyXG4gICAgICAgICQoJyN2YWxpZGF0ZU15Vmlld1ByaW9yaXR5JykudmFsKHRydWUpO1xyXG5cclxuICAgICAgICBjdXJwdWJsaWNQYW4uZmluZCgndGJvZHkgLmZyb3cnKS5yZW1vdmVDbGFzcygnZnJvdycpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJGxnZm9sbG93aW5nLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICQoJGxnZm9sbG93aW5nW2ldLCBjdXJwdWJsaWNQYW4pLmNsb3Nlc3QoJ3RyJykucmVtb3ZlQXR0cignY2xhc3MnKS5hZGRDbGFzcygnZm9sbG93cm93IGRpc2FibGVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNvcnRfdGFibGUodGJvZHksIDAsIDEsICdmb2xsb3dyb3cnKTtcclxuICAgIH0pO1xyXG5cdFxyXG5cdCQoJyNhbGxQdWJsaWNhdGlvbnNQYW4gLmRvbmVzdWJzY3JpYmUnKS5vbignY2xpY2snLCAnLmZvbGxvd3JvdyAuZm9sbG93QnRuJywgZnVuY3Rpb24gKGUpIHtcclxuXHRcdHZhciAkdGhpcyA9ICQodGhpcyksIGN1cnJlbnR0ciA9ICR0aGlzLmNsb3Nlc3QoJ3RyJyksIGN1cnJlbnRUb3BpYyA9ICQudHJpbShjdXJyZW50dHIuZmluZCgnLndkLTU1JykuaHRtbCgpLnNwbGl0KCc8aW5wdXQnKVswXSksIGN1cnJlbnRDaGFubmVsID0gY3VycmVudHRyLmNsb3Nlc3QoJy50YWJsZScpLmZpbmQoJ3RoZWFkIGgyJykuaHRtbCgpLCBldmVudERldGFpbHM7XHJcblx0XHRpZigkKCcucmVnaXN0cmF0aW9uQnRuJykgJiYgJCgnLnJlZ2lzdHJhdGlvbkJ0bicpLmxlbmd0aCl7XHJcblx0XHRcdGV2ZW50RGV0YWlscyA9IHsgXCJldmVudF9uYW1lXCI6XCJjaGFubmVsX2ZvbGxvd1wiLFwicGFnZV9uYW1lXCI6XCJSZWdpc3RyYXRpb25cIixcImdhX2V2ZW50Q2F0ZWdvcnlcIjpcIkNoYW5uZWwgRm9sbG93XCIsXCJnYV9ldmVudEFjdGlvblwiOiBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdLCBcImdhX2V2ZW50TGFiZWxcIjogY3VycmVudFRvcGljLCBcImZvbGxvd19wdWJsaWNhdGlvblwiOmFuYWx5dGljc19kYXRhW1wicHVibGljYXRpb25cIl0sIFwiZm9sbG93X2NoYW5uZWxcIjogY3VycmVudFRvcGljIH07XHJcblx0XHR9XHJcblx0XHRlbHNle1xyXG5cdFx0XHRldmVudERldGFpbHMgPSB7IFwiZXZlbnRfbmFtZVwiOlwidG9waWNfZm9sbG93XCIsIFwicGFnZV9uYW1lXCI6XCJNeSB2aWV3IHNldHRpbmdzXCIsIFwiZ2FfZXZlbnRDYXRlZ29yeVwiOlwiVG9waWMgRm9sbG93XCIsXCJnYV9ldmVudEFjdGlvblwiOiBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdICsnOicrIGN1cnJlbnRDaGFubmVsLCBcImdhX2V2ZW50TGFiZWxcIjogY3VycmVudFRvcGljLCBcImZvbGxvd19wdWJsaWNhdGlvblwiOiBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdLCBcImZvbGxvd190b3BpY1wiOiBjdXJyZW50VG9waWMsIFwiZm9sbG93X2NoYW5uZWxcIjogY3VycmVudENoYW5uZWwgfTtcclxuXHRcdH1cclxuXHRcdGFuYWx5dGljc0V2ZW50KCBldmVudERldGFpbHMgKTtcclxuXHRcdFxyXG5cdFx0ZXZlbnREZXRhaWxzID0ge307XHJcblx0fSk7XHJcblx0XHJcblx0JCgnI2FsbFB1YmxpY2F0aW9uc1BhbiAuZG9uZXN1YnNjcmliZScpLm9uKCdjbGljaycsICcuZm9sbG93aW5ncm93IC5mb2xsb3dpbmdCdG4nLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0dmFyICR0aGlzID0gJCh0aGlzKSwgY3VycmVudHRyID0gJHRoaXMuY2xvc2VzdCgndHInKSwgY3VycmVudFRvcGljID0gJC50cmltKGN1cnJlbnR0ci5maW5kKCcud2QtNTUnKS5odG1sKCkuc3BsaXQoJzxpbnB1dCcpWzBdKSwgY3VycmVudENoYW5uZWwgPSBjdXJyZW50dHIuY2xvc2VzdCgnLnRhYmxlJykuZmluZCgndGhlYWQgaDInKS5odG1sKCksIGV2ZW50RGV0YWlscztcclxuXHRcdGlmKCQoJy5yZWdpc3RyYXRpb25CdG4nKSAmJiAkKCcucmVnaXN0cmF0aW9uQnRuJykubGVuZ3RoKXtcclxuXHRcdFx0ZXZlbnREZXRhaWxzID0geyBcImV2ZW50X25hbWVcIjogXCJjaGFubmVsX3VuZm9sbG93XCIsIFwicGFnZV9uYW1lXCI6IFwiUmVnaXN0cmF0aW9uXCIsIFwiZ2FfZXZlbnRDYXRlZ29yeVwiOlwiQ2hhbm5lbCBVbmZvbGxvd1wiLCBcImdhX2V2ZW50QWN0aW9uXCI6IGFuYWx5dGljc19kYXRhW1wicHVibGljYXRpb25cIl0sIFwiZ2FfZXZlbnRMYWJlbFwiOiBjdXJyZW50VG9waWMsIFwiZm9sbG93X3B1YmxpY2F0aW9uXCI6IGFuYWx5dGljc19kYXRhW1wicHVibGljYXRpb25cIl0sIFwiZm9sbG93X2NoYW5uZWxcIjogY3VycmVudFRvcGljIH07XHJcblx0XHR9XHJcblx0XHRlbHNle1xyXG5cdFx0XHRldmVudERldGFpbHMgPSB7XCJldmVudF9uYW1lXCI6IFwidG9waWNfdW5mb2xsb3dcIiwgXCJwYWdlX25hbWVcIjogXCJNeSB2aWV3IHNldHRpbmdzXCIsIFwiZ2FfZXZlbnRDYXRlZ29yeVwiOiBcIlRvcGljIFVuZm9sbG93XCIsXCJnYV9ldmVudEFjdGlvblwiOiBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdICsnOicrIGN1cnJlbnRDaGFubmVsLCBcImdhX2V2ZW50TGFiZWxcIjogY3VycmVudFRvcGljLFwiZm9sbG93X3B1YmxpY2F0aW9uXCI6IGFuYWx5dGljc19kYXRhW1wicHVibGljYXRpb25cIl0sIFwiZm9sbG93X3RvcGljXCI6IGN1cnJlbnRUb3BpYywgXCJmb2xsb3dfY2hhbm5lbFwiOmN1cnJlbnRDaGFubmVsIH07XHJcblx0XHR9XHJcblx0XHRhbmFseXRpY3NFdmVudCggZXZlbnREZXRhaWxzICk7XHJcblx0XHRcclxuXHRcdGV2ZW50RGV0YWlscyA9IHt9O1xyXG5cdH0pO1xyXG5cdFxyXG4gICAgJCgnI2FsbFB1YmxpY2F0aW9uc1BhbiAuZG9uZXN1YnNjcmliZScpLm9uKCdjbGljaycsICcuZm9sbG93cm93IC5mb2xsb3dCdG4nLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0dmFyICR0aGlzID0gJCh0aGlzKSwgZm9sbG93cm93ID0gJHRoaXMuY2xvc2VzdCgnLmZvbGxvd3JvdycpLCB0YWJsZSA9ICR0aGlzLmNsb3Nlc3QoJy50YWJsZScpLCBmb2xsb3dBbGxCdG4gPSB0YWJsZS5maW5kKCcuZm9sbG93QWxsQnRuJyksIHVuZm9sbG93QWxsQnRuID0gdGFibGUuZmluZCgnLnVuZm9sbG93QWxsQnRuJyksIHRycyA9ICR0aGlzLmNsb3Nlc3QoJ3Rib2R5JykuZmluZCgndHInKSwgdHJzZm9sbG93aW5nID0gJHRoaXMuY2xvc2VzdCgndGJvZHknKS5maW5kKCd0ci5mb2xsb3dpbmdyb3cnKTs7XHJcblx0XHRmb2xsb3dyb3cuYXR0cignZHJhZ2dhYmxlJywgdHJ1ZSk7XHJcblx0XHQkKCcjdmFsaWRhdGVQcmVmZXJlbmNlJykudmFsKDEpO1xyXG5cdFx0Zm9sbG93cm93LmFkZENsYXNzKCdmb2xsb3dpbmdyb3cnKS5yZW1vdmVDbGFzcygnZm9sbG93cm93IGRpc2FibGVkIGZyb3cnKTtcclxuXHRcdCR0aGlzLmFkZENsYXNzKCdmb2xsb3dpbmdCdG4nKS5yZW1vdmVDbGFzcygnZm9sbG93QnRuJykuaHRtbCgkKCcjZm9sbG93aW5nQnV0dG9uVGV4dCcpLnZhbCgpKTtcclxuXHRcdHNldENsc2ZvckZsdyh0YWJsZSk7XHJcblx0XHR0YWJsZS5maW5kKCcuZmlyc3Ryb3cgLmxhYmxlU3RhdHVzJykudmFsKCdmb2xsb3dpbmdsYmwnKTtcclxuXHRcdHRhYmxlLmZpbmQoJy5hY2NvcmRpb25TdGF0dXMgLmxhYmxlU3RhdHVzJykudmFsKCdmb2xsb3dpbmdsYmwnKTtcclxuXHRcdCQoJyN2YWxpZGF0ZU15Vmlld1ByaW9yaXR5JykudmFsKHRydWUpO1xyXG5cclxuXHRcdGlmICh0cnMuaGFzQ2xhc3MoJ2ZvbGxvd2luZ3JvdycpKSB7XHJcblx0XHRcdCQoJyN2YWxpZGF0ZVByaW9yaXR5JykudmFsKHRydWUpO1xyXG5cdFx0XHQvL3VuZm9sbG93QWxsQnRuLmFkZENsYXNzKCdoaWRlQnRuJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCQoJy5mb2xsb3dyb3cuZGlzYWJsZWQuZnJvdycsIHRhYmxlKS5sZW5ndGgpIHtcclxuXHRcdFx0Zm9sbG93cm93LmFwcGVuZFRvKGZvbGxvd3Jvdy5jbG9uZSgpLmluc2VydEJlZm9yZSh0YWJsZS5maW5kKCcuZm9sbG93cm93LmRpc2FibGVkLmZyb3cnKSkpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdGZvbGxvd3Jvdy5jbG9uZSgpLmFwcGVuZFRvKCR0aGlzLmNsb3Nlc3QoJ3Rib2R5JykpO1xyXG5cdFx0fVxyXG5cdFx0Zm9sbG93cm93LnJlbW92ZSgpO1xyXG5cdFx0aWYgKHRycy5sZW5ndGggPT09IHRyc2ZvbGxvd2luZy5sZW5ndGggKyAxKSB7XHJcblx0XHRcdGZvbGxvd0FsbEJ0bi5hZGRDbGFzcygnaGlkZUJ0bicpO1xyXG5cdFx0XHR1bmZvbGxvd0FsbEJ0bi5yZW1vdmVDbGFzcygnaGlkZUJ0bicpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdGZvbGxvd0FsbEJ0bi5yZW1vdmVDbGFzcygnaGlkZUJ0bicpO1xyXG5cdFx0XHR1bmZvbGxvd0FsbEJ0bi5yZW1vdmVDbGFzcygnaGlkZUJ0bicpO1xyXG5cdFx0fVxyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnI2FsbFB1YmxpY2F0aW9uc1BhbiAuZG9uZXN1YnNjcmliZScpLm9uKCdjbGljaycsICcuZm9sbG93aW5ncm93IC5mb2xsb3dpbmdCdG4nLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksIHRhYmxlID0gJHRoaXMuY2xvc2VzdCgndGFibGUnKSwgZm9sbG93QWxsQnRuID0gJHRoaXMuY2xvc2VzdCgndGFibGUnKS5maW5kKCcuZm9sbG93QWxsQnRuJyksIHVuZm9sbG93QWxsQnRuID0gJHRoaXMuY2xvc2VzdCgndGFibGUnKS5maW5kKCcudW5mb2xsb3dBbGxCdG4nKSwgZm9sbG93aW5ncm93ID0gJHRoaXMuY2xvc2VzdCgnLmZvbGxvd2luZ3JvdycpLCB0Ym9keSA9ICR0aGlzLmNsb3Nlc3QoJ3Rib2R5JyksIHRycyA9ICR0aGlzLmNsb3Nlc3QoJ3Rib2R5JykuZmluZCgndHInKSwgZGlzYWJsZWR0cnMgPSAkdGhpcy5jbG9zZXN0KCd0Ym9keScpLmZpbmQoJy5mb2xsb3dyb3cuZGlzYWJsZWQnKSwgdHJzZm9sbG93ID0gJHRoaXMuY2xvc2VzdCgndGJvZHknKS5maW5kKCd0ci5mb2xsb3dyb3cnKTtcclxuICAgICAgICBmb2xsb3dpbmdyb3cuYWRkQ2xhc3MoJ2ZvbGxvd3JvdyBkaXNhYmxlZCcpLnJlbW92ZUNsYXNzKCdmb2xsb3dpbmdyb3cnKTtcclxuICAgICAgICAkdGhpcy5hZGRDbGFzcygnZm9sbG93QnRuJykucmVtb3ZlQ2xhc3MoJ2ZvbGxvd2luZ0J0bicpLmh0bWwoJCgnI2ZvbGxvd0J1dHRvblRleHQnKS52YWwoKSk7XHJcbiAgICAgICAgZm9sbG93aW5ncm93LmNsb25lKCkuYXBwZW5kVG8oJHRoaXMuY2xvc2VzdCgndGJvZHknKSk7XHJcbiAgICAgICAgZm9sbG93aW5ncm93LnJlbW92ZSgpO1xyXG4gICAgICAgICQoJyN2YWxpZGF0ZVByZWZlcmVuY2UnKS52YWwoMSk7XHJcbiAgICAgICAgc29ydF90YWJsZSh0Ym9keSwgMCwgMSwgJ2ZvbGxvd2luZ0J0bicpO1xyXG4gICAgICAgICQoJyN2YWxpZGF0ZU15Vmlld1ByaW9yaXR5JykudmFsKHRydWUpO1xyXG5cclxuICAgICAgICBpZiAodHJzLmxlbmd0aCA9PT0gZGlzYWJsZWR0cnMubGVuZ3RoICsgMSkge1xyXG4gICAgICAgICAgICB0YWJsZS5maW5kKCcuZmlyc3Ryb3cgLmxhYmxlU3RhdHVzJykudmFsKCdmb2xsb3dsYmwnKTtcclxuICAgICAgICAgICAgdGFibGUuZmluZCgnLmFjY29yZGlvblN0YXR1cyAubGFibGVTdGF0dXMnKS52YWwoJ2ZvbGxvd2xibCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHJzLmxlbmd0aCA9PT0gdHJzZm9sbG93Lmxlbmd0aCArIDEpIHtcclxuICAgICAgICAgICAgdW5mb2xsb3dBbGxCdG4uYWRkQ2xhc3MoJ2hpZGVCdG4nKTtcclxuICAgICAgICAgICAgZm9sbG93QWxsQnRuLnJlbW92ZUNsYXNzKCdoaWRlQnRuJyk7XHJcblxyXG4gICAgICAgICAgICAkKCcjdmFsaWRhdGVQcmlvcml0eScpLnZhbChmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb2xsb3dBbGxCdG4ucmVtb3ZlQ2xhc3MoJ2hpZGVCdG4nKTtcclxuICAgICAgICAgICAgdW5mb2xsb3dBbGxCdG4ucmVtb3ZlQ2xhc3MoJ2hpZGVCdG4nKTtcclxuICAgICAgICB9IFxyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnLnB1YmxpY2F0aW9uUGFuJykub24oJ2NsaWNrJywgJy5hY2NvcmRpb25JbWcgLm1vYmlsZU1vZGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSwgYWxsUHVibGljYXRpb25zID0gJCgnI2FsbFB1YmxpY2F0aW9uc1BhbicpLCBwUGFuID0gJHRoaXMuY2xvc2VzdCgnLnB1YmxpY2F0aW9uUGFuJyksIHRoZWFkID0gcFBhbi5maW5kKCd0aGVhZCcpLCB0Ym9keSA9IHBQYW4uZmluZCgndGJvZHknKSwgdHJzID0gdGJvZHkuZmluZCgndHInKSwgZGlzYWJsZWR0cnMgPSB0Ym9keS5maW5kKCd0ci5kaXNhYmxlZCcpLCBmb2xsb3dsYmwgPSB0aGVhZC5maW5kKCcuZm9sbG93bGJsJyksIGZvbGxvd2luZ2xibCA9IHRoZWFkLmZpbmQoJy5mb2xsb3dpbmdsYmwnKSwgYWNjU3RhdHVzZmx3TGJsID0gdGhlYWQuZmluZCgnLmFjY29yZGlvblN0YXR1cy5mbHdMYmwnKSwgYWNjU3RhdHVzZmx3QnRuID0gdGhlYWQuZmluZCgnLmFjY29yZGlvblN0YXR1cy5mbHdCdG4nKSwgYWxscHVicGFucyA9IGFsbFB1YmxpY2F0aW9ucy5maW5kKCcucHVibGljYXRpb25QYW4nKSwgcGlja1R4dCA9IHRoZWFkLmZpbmQoJy5waWNrVHh0JyksIHNldEZsYWcgPSB0cnVlO1xyXG5cclxuICAgICAgICBpZiAoJHRoaXMuaGFzQ2xhc3MoJ2V4cGFuZGVkJykpIHtcclxuICAgICAgICAgICAgc2V0RmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0Ym9keS5hZGRDbGFzcygndGJvZHloaWRkZW4nKTtcclxuICAgICAgICAgICAgLy9wUGFuLmZpbmQoJy5zbWZvbGxvd2luZ0J0bicpLmhpZGUoKTsgIFxyXG4gICAgICAgICAgICBhY2NTdGF0dXNmbHdMYmwucmVtb3ZlQ2xhc3MoJ2hpZGVSb3cnKTtcclxuICAgICAgICAgICAgYWNjU3RhdHVzZmx3QnRuLmFkZENsYXNzKCdoaWRlUm93Jyk7XHJcbiAgICAgICAgICAgIHRoZWFkLmZpbmQoJy5tdHAnKS5hZGRDbGFzcygnaGlkZUJ0bicpO1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwaWNrVHh0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAkKHBpY2tUeHRbaV0pLmNsb3Nlc3QoJy5hY2NvcmRpb25TdGF0dXMnKS5hZGRDbGFzcygnaGlkZVJvdycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0cnMubGVuZ3RoID09PSBkaXNhYmxlZHRycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGZvbGxvd2xibC5yZW1vdmVDbGFzcygnaGlkZUJ0bicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZm9sbG93aW5nbGJsLnJlbW92ZUNsYXNzKCdoaWRlQnRuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gJHRoaXMuY2xvc2VzdCgnLnB1YmxpY2F0aW9uUGFuJykucG9zaXRpb24oKTtcclxuICAgICAgICAgICAgJCh3aW5kb3cpLnNjcm9sbFRvcChwb3NpdGlvbi50b3AgLSA0MCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhbGxQdWJsaWNhdGlvbnMuZmluZCgndGJvZHknKS5hZGRDbGFzcygndGJvZHloaWRkZW4nKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxwdWJwYW5zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWFjaFBpY2tUeHQgPSAkKGFsbHB1YnBhbnNbaV0pLmZpbmQoJ3RoZWFkIC5waWNrVHh0Jyk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGVhY2hQaWNrVHh0Lmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChlYWNoUGlja1R4dFtqXSkuY2xvc2VzdCgnLmFjY29yZGlvblN0YXR1cycpLmFkZENsYXNzKCdoaWRlUm93Jyk7O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoZWFkLmZpbmQoJ3RyJykucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICB0Ym9keS5yZW1vdmVDbGFzcygndGJvZHloaWRkZW4nKTtcclxuICAgICAgICAgICAgcFBhbi5maW5kKCcuc21mb2xsb3dpbmdCdG4nKS5zaG93KCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGlja1R4dC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgJChwaWNrVHh0W2ldKS5jbG9zZXN0KCcuYWNjb3JkaW9uU3RhdHVzJykucmVtb3ZlQ2xhc3MoJ2hpZGVSb3cnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc2V0RmxhZykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxwdWJwYW5zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChhbGxwdWJwYW5zW2ldKS5maW5kKCcuYWNjb3JkaW9uU3RhdHVzLmZsd0xibCcpLnJlbW92ZUNsYXNzKCdoaWRlUm93Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJChhbGxwdWJwYW5zW2ldKS5maW5kKCcuYWNjb3JkaW9uU3RhdHVzLmZsd0J0bicpLmFkZENsYXNzKCdoaWRlUm93Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWNjU3RhdHVzZmx3TGJsLmFkZENsYXNzKCdoaWRlUm93Jyk7XHJcbiAgICAgICAgICAgIGFjY1N0YXR1c2Zsd0J0bi5yZW1vdmVDbGFzcygnaGlkZVJvdycpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gJHRoaXMuY2xvc2VzdCgnLnB1YmxpY2F0aW9uUGFuJykucG9zaXRpb24oKTtcclxuICAgICAgICAgICAgJCh3aW5kb3cpLnNjcm9sbFRvcChwb3NpdGlvbi50b3AgLSA0MCk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbHB1YnBhbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBsYWJlbFZhbCA9ICQoYWxscHVicGFuc1tpXSkuZmluZCgnLmZpcnN0cm93IC5sYWJsZVN0YXR1cycpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgJCgnLicgKyBsYWJlbFZhbCwgYWxscHVicGFuc1tpXSkucmVtb3ZlQ2xhc3MoJ2hpZGVCdG4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGVhZC5maW5kKCcubXRwJykuYWRkQ2xhc3MoJ2hpZGVCdG4nKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkKCcucHVibGljYXRpb25QYW4nKS5vbignY2xpY2snLCAnLmFjY29yZGlvbkltZyAuZGVza3RvcE1vZGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSwgYWxsUHVibGljYXRpb25zID0gJCgnI2FsbFB1YmxpY2F0aW9uc1BhbicpLCBwUGFuID0gJHRoaXMuY2xvc2VzdCgnLnB1YmxpY2F0aW9uUGFuJyksIGFjY0NvbnQgPSBwUGFuLmZpbmQoJy5hY2NDb250JyksIHRoZWFkID0gcFBhbi5maW5kKCd0aGVhZCcpLCB0Ym9keSA9IHBQYW4uZmluZCgndGJvZHknKSwgdHJzID0gdGJvZHkuZmluZCgndHInKSwgZGlzYWJsZWR0cnMgPSB0Ym9keS5maW5kKCd0ci5kaXNhYmxlZCcpLCBmbHdsYmwgPSB0aGVhZC5maW5kKCcuZmx3TGJsJyksIGZsd0J0biA9IHRoZWFkLmZpbmQoJy5mbHdCdG4nKSwgZm9sbG93bGJsID0gdGhlYWQuZmluZCgnLmZvbGxvd2xibCcpLCBmb2xsb3dpbmdsYmwgPSB0aGVhZC5maW5kKCcuZm9sbG93aW5nbGJsJyksIGFsbHB1YnBhbnMgPSBhbGxQdWJsaWNhdGlvbnMuZmluZCgnLnB1YmxpY2F0aW9uUGFuJyk7XHJcblxyXG4gICAgICAgIGlmICgkdGhpcy5oYXNDbGFzcygnZXhwYW5kZWQnKSkge1xyXG4gICAgICAgICAgICAkdGhpcy5yZW1vdmVDbGFzcygnZXhwYW5kZWQnKTtcclxuICAgICAgICAgICAgdGJvZHkuYWRkQ2xhc3MoJ3Rib2R5aGlkZGVuJyk7XHJcbiAgICAgICAgICAgIHRoZWFkLmZpbmQoJy5tdHAnKS5hZGRDbGFzcygnaGlkZUJ0bicpO1xyXG4gICAgICAgICAgICBhY2NDb250LmFkZENsYXNzKCd0Ym9keWhpZGRlbicpO1xyXG4gICAgICAgICAgICBpZiAodHJzLmxlbmd0aCA9PT0gZGlzYWJsZWR0cnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBmb2xsb3dsYmwucmVtb3ZlQ2xhc3MoJ2hpZGVCdG4nKTtcclxuICAgICAgICAgICAgICAgIHRoZWFkLmZpbmQoJy5maXJzdHJvdyAubGFibGVTdGF0dXMnKS52YWwoJ2ZvbGxvd2xibCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZm9sbG93aW5nbGJsLnJlbW92ZUNsYXNzKCdoaWRlQnRuJyk7XHJcbiAgICAgICAgICAgICAgICB0aGVhZC5maW5kKCcuZmlyc3Ryb3cgLmxhYmxlU3RhdHVzJykudmFsKCdmb2xsb3dpbmdsYmwnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSAkdGhpcy5jbG9zZXN0KCcucHVibGljYXRpb25QYW4nKS5wb3NpdGlvbigpO1xyXG4gICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsVG9wKHBvc2l0aW9uLnRvcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhbGxQdWJsaWNhdGlvbnMuZmluZCgndGJvZHknKS5hZGRDbGFzcygndGJvZHloaWRkZW4nKTtcclxuICAgICAgICAgICAgYWxsUHVibGljYXRpb25zLmZpbmQoJy5wdWJsaWNhdGlvblBhbiAuYWNjb3JkaW9uSW1nIHNwYW4nKS5yZW1vdmVDbGFzcygnZXhwYW5kZWQnKTtcclxuICAgICAgICAgICAgYWxsUHVibGljYXRpb25zLmZpbmQoJy5wdWJsaWNhdGlvblBhbiB0aGVhZCB0cicpLm5vdCgnOm50aC1jaGlsZCgxKScpLmFkZENsYXNzKCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgYWxsUHVibGljYXRpb25zLmZpbmQoJy5wdWJsaWNhdGlvblBhbiB0aGVhZCB0ci5zaG93aW52aWV3JykucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICB0aGVhZC5maW5kKCd0cicpLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgJHRoaXMuYWRkQ2xhc3MoJ2V4cGFuZGVkJyk7XHJcbiAgICAgICAgICAgIGFjY0NvbnQucmVtb3ZlQ2xhc3MoJ3Rib2R5aGlkZGVuJyk7XHJcbiAgICAgICAgICAgIHRib2R5LnJlbW92ZUNsYXNzKCd0Ym9keWhpZGRlbicpO1xyXG4gICAgICAgICAgICBmbHdCdG4uYWRkQ2xhc3MoJ2hpZGVSb3cnKTtcclxuICAgICAgICAgICAgZmx3bGJsLnJlbW92ZUNsYXNzKCdoaWRlUm93Jyk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbHB1YnBhbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBsYWJlbFZhbCA9ICQoYWxscHVicGFuc1tpXSkuZmluZCgnLmZpcnN0cm93IC5sYWJsZVN0YXR1cycpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgJCgnLicgKyBsYWJlbFZhbCwgYWxscHVicGFuc1tpXSkucmVtb3ZlQ2xhc3MoJ2hpZGVCdG4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGVhZC5maW5kKCcubXRwJykuYWRkQ2xhc3MoJ2hpZGVCdG4nKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9ICR0aGlzLmNsb3Nlc3QoJy5wdWJsaWNhdGlvblBhbicpLnBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgICQod2luZG93KS5zY3JvbGxUb3AocG9zaXRpb24udG9wKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgdGFibGVzID0gJCgnLnB1YmxpY2F0aW9uUGFuIHRhYmxlJyk7XHJcbiAgICBzZXRDbHNmb3JGbHcodGFibGVzKTtcclxuXHJcbiAgICAkKCcuc2F2ZXZpZXcnKS5jbGljayhmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmICgkKCcubW9kYWwtb3ZlcmxheScpLmhhc0NsYXNzKCdpbicpKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gY2xpY2tlZFVybDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBhbGx0YWJsZXMgPSAkKCcudGFibGUnKSwgYWxscHVibGljYXRpb25zRWxlcyA9ICQoJy5wdWJsaWNhdGlvblBhbicpLFxyXG4gICAgICAgICAgICAgICAgaXNDaGFubmVsTGV2ZWwgPSAkKCcjaXNDaGFubmVsQmFzZWRSZWdpc3RyYXRpb24nKS52YWwoKSxcclxuICAgICAgICAgICAgVXNlclByZWZlcmVuY2VzID0geyBcIklzTmV3VXNlclwiOiBmYWxzZSwgXCJJc0NoYW5uZWxMZXZlbFwiOiBpc0NoYW5uZWxMZXZlbCB9LCBhbGxwdWJsaWNhdGlvbnMgPSAkKCcucHVibGljYXRpb25QYW4nLCAnI2FsbFB1YmxpY2F0aW9uc1BhbicpO1xyXG4gICAgICAgICAgICBVc2VyUHJlZmVyZW5jZXMuUHJlZmVycmVkQ2hhbm5lbHMgPSBbXTtcclxuICAgICAgICAgICAgJCgnI3ZhbGlkYXRlTXlWaWV3UHJpb3JpdHknKS52YWwoZmFsc2UpO1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHNldERhdGFSb3coYWxscHVibGljYXRpb25zKTtcclxuICAgICAgICAgICAgYWxscHVibGljYXRpb25zRWxlcy5yZW1vdmVBdHRyKCdkYXRhLXJvdycpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbHB1YmxpY2F0aW9uc0VsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBqID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAkKGFsbHB1YmxpY2F0aW9uc0VsZXNbaV0pLmF0dHIoJ2RhdGEtcm93Jywgaik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3JlYXRlSlNPTkRhdGEoYWxsdGFibGVzLCBVc2VyUHJlZmVyZW5jZXMpO1xyXG5cclxuICAgICAgICAgICAgJCgnI3ZhbGlkYXRlUHJlZmVyZW5jZScpLnZhbCgwKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnLnJlZ2lzdHJhdGlvbkJ0bicpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgdmFyIHRhYmxlID0gJCgnLnRhYmxlJywgJy5wdWJsaWNhdGlvblBhbicpLCBhbGx0cnMgPSB0YWJsZS5maW5kKCd0Ym9keSB0cicpLFxyXG4gICAgICAgICAgICBpc0NoYW5uZWxMZXZlbCA9ICQoJyNpc0NoYW5uZWxCYXNlZFJlZ2lzdHJhdGlvbicpLnZhbCgpLFxyXG5cdFx0ICAgIFVzZXJQcmVmZXJlbmNlcyA9IHsgXCJJc05ld1VzZXJcIjogdHJ1ZSwgXCJJc0NoYW5uZWxMZXZlbFwiOiBpc0NoYW5uZWxMZXZlbCB9LCBhbGxwdWJsaWNhdGlvbnMgPSAkKCcucHVibGljYXRpb25QYW4nLCAnI2FsbFB1YmxpY2F0aW9uc1BhbicpO1xyXG4gICAgICAgIFVzZXJQcmVmZXJlbmNlcy5QcmVmZXJyZWRDaGFubmVscyA9IFtdO1xyXG5cclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgaWYgKCQoJyN2YWxpZGF0ZVByaW9yaXR5JykudmFsKCkgPT0gXCJ0cnVlXCIgJiYgJCgnI2VuYWJsZVNhdmVQcmVmZXJlbmNlc0NoZWNrJykudmFsKCkgPT09IFwiZmFsc2VcIikge1xyXG4gICAgICAgICAgICBzZXREYXRhUm93KGFsbHB1YmxpY2F0aW9ucyk7XHJcbiAgICAgICAgICAgIHNlbmRSZWdpc3RlckRhdGEoYWxsdHJzLCBVc2VyUHJlZmVyZW5jZXMsICduYW1lJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCQoJyN2YWxpZGF0ZVByaW9yaXR5JykudmFsKCkgPT0gXCJmYWxzZVwiKSB7XHJcbiAgICAgICAgICAgIGlmICgkKCcjZW5hYmxlU2F2ZVByZWZlcmVuY2VzQ2hlY2snKS52YWwoKSA9PT0gXCJ0cnVlXCIgJiYgdGFibGUuZmluZCgnLmZvbGxvd2luZ3JvdycpLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuYWxlcnQtZXJyb3IucmVnaXN0ZXItbm90LXNlbGVjdGVkJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNldERhdGFSb3coYWxscHVibGljYXRpb25zKTtcclxuXHJcbiAgICAgICAgICAgIGlmICgkKCcjaXNDaGFubmVsQmFzZWRSZWdpc3RyYXRpb24nKS52YWwoKSA9PSBcInRydWVcIikge1xyXG4gICAgICAgICAgICAgICAgc2VuZFJlZ2lzdGVyRGF0YShhbGx0cnMsIFVzZXJQcmVmZXJlbmNlcywgJ2hyZWYnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNyZWF0ZUpTT05EYXRhKHRhYmxlLCBVc2VyUHJlZmVyZW5jZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzZXREYXRhUm93KGFsbHB1YmxpY2F0aW9ucyk7XHJcbiAgICAgICAgICAgIHNlbmRSZWdpc3RlckRhdGEoYWxsdHJzLCBVc2VyUHJlZmVyZW5jZXMsICdocmVmJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnLmdvdG92aWV3JykuY2xpY2soZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBpZiAoJCgnI3ZhbGlkYXRlUHJpb3JpdHknKSAmJiAkKCcjdmFsaWRhdGVQcmlvcml0eScpLnZhbCgpID09IFwidHJ1ZVwiKSB7XHJcbiAgICAgICAgICAgIHNob3dNb2RhbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCskKCcjdmFsaWRhdGVQcmVmZXJlbmNlJykudmFsKCkpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIHNob3dNb2RhbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnLmNsb3NlLW1vZGFsLCAuY2FuY2VsLW1vZGFsJykuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQoJy5tb2RhbC1vdmVybGF5JykucmVtb3ZlQ2xhc3MoJ2luJyk7XHJcbiAgICAgICAgJCgnLm1vZGFsLXZpZXcnKS5oaWRlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoJCgnLnB1YmxpY2F0aW9uUGFuJykgJiYgJCgnLnB1YmxpY2F0aW9uUGFuJykubGVuZ3RoKSB7XHJcbiAgICAgICAgJCgnLnB1YmxpY2F0aW9uUGFuLmRvbmVzdWJzY3JpYmUnKS5kcmFnc3dhcCh7XHJcbiAgICAgICAgICAgIGVsZW1lbnQ6ICcudGFibGUgdGJvZHkgdHInLFxyXG4gICAgICAgICAgICBkcm9wQW5pbWF0aW9uOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQoJyNhbGxQdWJsaWNhdGlvbnNQYW4nKS5kcmFnc3dhcCh7XHJcbiAgICAgICAgICAgIGVsZW1lbnQ6ICcucHVibGljYXRpb25QYW4uZG9uZXN1YnNjcmliZScsXHJcbiAgICAgICAgICAgIGRyb3BBbmltYXRpb246IHRydWVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHRcclxuXHQkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmVkaXRWaWV3JywgZnVuY3Rpb24oKXtcclxuXHRcdHZhciBldmVudERldGFpbHMgPSB7XCJldmVudF9uYW1lXCI6XCJteXZpZXdfZWRpdF9teV92aWV3XCIsXCJwYWdlX25hbWVcIjogYW5hbHl0aWNzX2RhdGFbXCJwYWdlX25hbWVcIl0sIFwiZ2FfZXZlbnRDYXRlZ29yeVwiOlwiTXkgVmlldyBQYWdlIExpbmtcIiwgXCJnYV9ldmVudEFjdGlvblwiOlwiTGluayBDbGlja1wiLCBcImdhX2V2ZW50TGFiZWxcIjpcIkVESVQgTVkgVklFV1wifTtcclxuXHRcdGFuYWx5dGljc0V2ZW50KCAkLmV4dGVuZChhbmFseXRpY3NfZGF0YSwgZXZlbnREZXRhaWxzKSApO1xyXG5cdFx0ZXZlbnREZXRhaWxzID0ge307XHJcblx0fSk7XHJcblx0XHJcblx0JCgnLnBlcnNvbmFsaXNhdGlvblBhbicpLm9uKCdjbGljaycsICcubG9hZG1vcmUnLCBmdW5jdGlvbigpe1xyXG5cdFx0dmFyIGlkID0gJCh0aGlzKS5jbG9zZXN0KCcuZWFjaHN0b3J5TXBhbicpLmZpbmQoJy5lYWNoc3RvcnknKS5hdHRyKCdpZCcpLCBnZXRJZHggPSAwO1xyXG5cdFx0Zm9yKHZhciBpPTA7IGk8bG9hZFByZWZlcmFuY2VJZFtcIlNlY3Rpb25zXCJdLmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0aWYobG9hZFByZWZlcmFuY2VJZFtcIlNlY3Rpb25zXCJdW2ldW1wiQ2hhbm5lbElkXCJdID09IGlkKXtcclxuXHRcdFx0XHRnZXRJZHggPSBpO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHR2YXIgZXZlbnREZXRhaWxzID0geyBcImV2ZW50X25hbWVcIjogXCJteXZpZXdfbG9hZF9tb3JlXCIsIFwicGFnZV9uYW1lXCI6IGFuYWx5dGljc19kYXRhW1wicGFnZV9uYW1lXCJdLCBcImdhX2V2ZW50Q2F0ZWdvcnlcIjogXCJNeSBWaWV3IFBhZ2UgUHVibGljYXRpb25zXCIsIFwiZ2FfZXZlbnRBY3Rpb25cIjogYW5hbHl0aWNzX2RhdGFbXCJwdWJsaWNhdGlvblwiXSwgXCJnYV9ldmVudExhYmVsXCI6IGxvYWRQcmVmZXJhbmNlSWRbXCJTZWN0aW9uc1wiXVtnZXRJZHhdW1wiQ2hhbm5lbE5hbWVcIl0sIFwicHVibGljYXRpb25fY2xpY2tcIjogYW5hbHl0aWNzX2RhdGFbXCJwdWJsaWNhdGlvblwiXSB9O1xyXG5cdFx0XHJcblx0XHRhbmFseXRpY3NFdmVudCggJC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsIGV2ZW50RGV0YWlscykgKTtcclxuXHRcdGV2ZW50RGV0YWlscyA9IHt9O1xyXG5cdH0pO1xyXG59KTtcclxuIiwid2luZG93LnBhZ2luYXRpb25kZWZhdWx0cyA9IHtcclxuXHR0b3RhbENhdGVnb3JpZXM6IDMwLFxyXG5cdGNhdGVnb3J5TGltaXQ6IDEwLFxyXG5cdGN1cnJlbnRQYWdlOiAxLFxyXG5cdHBhZ2luYXRpb25FbGU6ICd0YWJsZScsXHJcbn07IFxyXG4gXHJcbndpbmRvdy5zZXRQYWdpbmF0aW9uID0gZnVuY3Rpb24oc291cmNlKXtcclxuICAgICQuZXh0ZW5kKHdpbmRvdy5wYWdpbmF0aW9uZGVmYXVsdHMsIHNvdXJjZSk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBwYWdpbmF0aW9uQ3VyKGZ2LCB0dil7XHJcblx0XHRpZih3aW5kb3cucGFnaW5hdGlvbmRlZmF1bHRzLnBhZ2luYXRpb25FbGUgPT09ICd0YWJsZScpe1xyXG5cdFx0XHQkKCd0Ym9keS5oaWRkZW4teHMgdHInLCAnLnBhZ2UtYWNjb3VudF9fdGFibGUnKS5oaWRlKCk7XHJcblx0XHRcdCQoJ3Rib2R5LmhpZGRlbi1sZyB0cicsICcucGFnZS1hY2NvdW50X190YWJsZScpLmhpZGUoKTtcclxuXHRcdFx0Zm9yKHZhciBpID0gZnY7IGkgPCB0djsgaSsrKXtcclxuXHRcdFx0XHQkKCd0Ym9keS5oaWRkZW4teHMgdHInLCAnLnBhZ2UtYWNjb3VudF9fdGFibGUnKS5lcShpKS5zaG93KCk7XHJcblx0XHRcdFx0JCgndGJvZHkuaGlkZGVuLWxnIHRyJywgJy5wYWdlLWFjY291bnRfX3RhYmxlJykuZXEoaSkuc2hvdygpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNle1xyXG5cdFx0XHQkKHdpbmRvdy5wYWdpbmF0aW9uZGVmYXVsdHMucGFnaW5hdGlvbkVsZSkuaGlkZSgpO1xyXG5cdFx0XHRmb3IodmFyIGkgPSBmdjsgaSA8IHR2OyBpKyspe1xyXG5cdFx0XHRcdCQod2luZG93LnBhZ2luYXRpb25kZWZhdWx0cy5wYWdpbmF0aW9uRWxlKS5lcShpKS5zaG93KCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxufVxyXG5cclxud2luZG93LmxvYWRQYWdpbmF0aW9uTnVtcyA9IGZ1bmN0aW9uKCl7XHJcblx0dmFyIHNob3dQYWdlTGlua3MgPSBNYXRoLmNlaWwod2luZG93LnBhZ2luYXRpb25kZWZhdWx0cy50b3RhbENhdGVnb3JpZXMgLyB3aW5kb3cucGFnaW5hdGlvbmRlZmF1bHRzLmNhdGVnb3J5TGltaXQpLFxyXG5cdFx0bGlua1N0ciA9ICcnO1xyXG5cdFx0Zm9yKHZhciBpPTE7IGk8PXNob3dQYWdlTGlua3M7IGkrKyl7XHJcblx0XHRcdGxpbmtTdHIgKz0gJzxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMCk7XCI+JytpKyc8L2E+JztcclxuXHRcdH0gXHJcblx0XHRpZihzaG93UGFnZUxpbmtzID4gMSl7XHJcblx0XHRcdCQoJy5wYWdpbmF0aW9uIHNwYW4nKS5odG1sKGxpbmtTdHIpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZXtcclxuXHRcdFx0JCgnLnBhZ2luYXRpb24nKS5oaWRlKCk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdCQoJy5wYWdpbmF0aW9uIHNwYW4gYTplcSgwKScpLmNsaWNrKCk7XHJcblx0XHQkKCcucGFnaW5hdGlvbiBhOmVxKDApJykucmVtb3ZlQXR0cignaHJlZicpO1xyXG59XHJcblxyXG4kKGZ1bmN0aW9uKCl7XHJcblx0JCgnLnBhZ2luYXRpb24nKS5vbignY2xpY2snLCAnYScsIGZ1bmN0aW9uKCl7XHJcblx0XHR2YXIgJHRoaXMgPSAkKHRoaXMpLCAkdmFsID0gJHRoaXMuaHRtbCgpO1xyXG5cdFx0aWYoJHZhbC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ3ByZXYnKSA+PSAwKXtcclxuXHRcdFx0dmFyIGlkeCA9ICskKCcucGFnaW5hdGlvbiBzcGFuIGEuYWN0aXZlJykuaHRtbCgpIC0gMSwgdG9WYWwgPSBpZHggKiB3aW5kb3cucGFnaW5hdGlvbmRlZmF1bHRzLmNhdGVnb3J5TGltaXQsIGZyb21WYWwgPSB0b1ZhbCAtIHdpbmRvdy5wYWdpbmF0aW9uZGVmYXVsdHMuY2F0ZWdvcnlMaW1pdDtcclxuXHRcdFx0XHJcblx0XHRcdGlmKCQoJy5wYWdpbmF0aW9uIHNwYW4gYTpmaXJzdCcpLmhhc0NsYXNzKCdhY3RpdmUnKSkgcmV0dXJuO1xyXG5cdFx0XHRwYWdpbmF0aW9uQ3VyKGZyb21WYWwsIHRvVmFsKTtcclxuXHRcdFx0XHJcblx0XHRcdHZhciBjdXJpZHggPSAkKCcucGFnaW5hdGlvbiBzcGFuIGEuYWN0aXZlJykuaW5kZXgoKSwgcGFnZXNMZW4gPSAkKCcucGFnaW5hdGlvbiBsaSA+IHNwYW4gYScpLmxlbmd0aC0xO1xyXG5cdFx0XHQkKCcucGFnaW5hdGlvbiBzcGFuIGEnKS5lcShjdXJpZHgpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuXHRcdFx0JCgnLnBhZ2luYXRpb24gc3BhbiBhJykuZXEoY3VyaWR4KS5wcmV2KCdhJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cdFx0XHQkKCcucGFnaW5hdGlvbiBhOmxhc3QnKS5hdHRyKCdocmVmJywnamF2YXNjcmlwdDp2b2lkKDApOycpO1xyXG5cdFx0XHRpZihjdXJpZHggPT0gMCl7XHJcblx0XHRcdFx0JCgnLnBhZ2luYXRpb24gYTplcSgwKScpLnJlbW92ZUF0dHIoJ2hyZWYnKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZigkdmFsLnRvTG93ZXJDYXNlKCkuaW5kZXhPZignbmV4dCcpID49IDApe1xyXG5cdFx0XHR2YXIgaWR4ID0gKyQoJy5wYWdpbmF0aW9uIHNwYW4gYS5hY3RpdmUnKS5odG1sKCkgKyAxLCB0b1ZhbCA9IGlkeCAqIHdpbmRvdy5wYWdpbmF0aW9uZGVmYXVsdHMuY2F0ZWdvcnlMaW1pdCwgZnJvbVZhbCA9IHRvVmFsIC0gd2luZG93LnBhZ2luYXRpb25kZWZhdWx0cy5jYXRlZ29yeUxpbWl0O1xyXG5cdFx0XHRcclxuXHRcdFx0aWYoJCgnLnBhZ2luYXRpb24gc3BhbiBhOmxhc3QnKS5oYXNDbGFzcygnYWN0aXZlJykpIHJldHVybjtcclxuXHRcdFx0cGFnaW5hdGlvbkN1cihmcm9tVmFsLCB0b1ZhbCk7XHJcblx0XHRcdFxyXG5cdFx0XHR2YXIgY3VyaWR4ID0gJCgnLnBhZ2luYXRpb24gc3BhbiBhLmFjdGl2ZScpLmluZGV4KCksIHBhZ2VzTGVuID0gJCgnLnBhZ2luYXRpb24gbGkgPiBzcGFuIGEnKS5sZW5ndGgtMTtcclxuXHRcdFx0JCgnLnBhZ2luYXRpb24gc3BhbiBhJykuZXEoY3VyaWR4KS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcblx0XHRcdCQoJy5wYWdpbmF0aW9uIHNwYW4gYScpLmVxKGN1cmlkeCkubmV4dCgnYScpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuXHRcdFx0JCgnLnBhZ2luYXRpb24gYTpmaXJzdCcpLmF0dHIoJ2hyZWYnLCdqYXZhc2NyaXB0OnZvaWQoMCk7Jyk7XHJcblx0XHRcdGlmKGN1cmlkeCA9PSBwYWdlc0xlbil7XHJcblx0XHRcdFx0JCgnLnBhZ2luYXRpb24gYTpsYXN0JykucmVtb3ZlQXR0cignaHJlZicpO1xyXG5cdFx0XHR9IFxyXG5cdFx0fVxyXG5cdFx0ZWxzZXtcclxuXHRcdFx0aWYoISR0aGlzLmhhc0NsYXNzKCdhY3RpdmUnKSl7XHJcblx0XHRcdCQoJy5wYWdpbmF0aW9uIHNwYW4gYScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKS5hdHRyKCdocmVmJywnamF2YXNjcmlwdDp2b2lkKDApOycpO1xyXG5cdFx0XHQkdGhpcy5hZGRDbGFzcygnYWN0aXZlJykucmVtb3ZlQXR0cignaHJlZicpO1xyXG5cdFx0XHR0b1ZhbCA9IHdpbmRvdy5wYWdpbmF0aW9uZGVmYXVsdHMuY2F0ZWdvcnlMaW1pdCAqICR2YWw7XHJcblx0XHRcdGZyb21WYWwgPSB0b1ZhbCAtIHdpbmRvdy5wYWdpbmF0aW9uZGVmYXVsdHMuY2F0ZWdvcnlMaW1pdDtcclxuXHRcdFx0cGFnaW5hdGlvbkN1cihmcm9tVmFsLCB0b1ZhbCk7XHJcblx0XHRcdCQoJy5wYWdpbmF0aW9uIGE6bGFzdCcpLmF0dHIoJ2hyZWYnLCdqYXZhc2NyaXB0OnZvaWQoMCk7Jyk7XHJcblx0XHRcdCQoJy5wYWdpbmF0aW9uIGE6Zmlyc3QnKS5hdHRyKCdocmVmJywnamF2YXNjcmlwdDp2b2lkKDApOycpO1xyXG5cdFx0XHRpZigkKCcucGFnaW5hdGlvbiBzcGFuIGEuYWN0aXZlJykubmV4dCgnYScpLmxlbmd0aCA9PSAwKXtcclxuXHRcdFx0XHQkKCcucGFnaW5hdGlvbiBhOmxhc3QnKS5yZW1vdmVBdHRyKCdocmVmJyk7XHJcblx0XHRcdH0gXHJcblx0XHRcdGlmKCQoJy5wYWdpbmF0aW9uIHNwYW4gYS5hY3RpdmUnKS5wcmV2KCdhJykubGVuZ3RoID09IDApe1xyXG5cdFx0XHRcdCQoJy5wYWdpbmF0aW9uIGE6Zmlyc3QnKS5yZW1vdmVBdHRyKCdocmVmJyk7XHJcblx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0pOyBcclxuXHRcdFxyXG5cdCQoJy5zb3J0YWJsZS10YWJsZV9faGVhZGVyJykub24oJ2NsaWNrJywgJy5zb3J0YWJsZS10YWJsZV9fY29sJywgZnVuY3Rpb24oKXtcclxuXHRcdHZhciAkdGhpcyA9ICQodGhpcyksIHRhYmxlID0gJHRoaXMuY2xvc2VzdCgnLnNvcnRhYmxlLXRhYmxlJyksIHRib2R5dHJzID0gdGFibGUuZmluZCgndGJvZHkgdHInKTtcclxuXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuXHRcdFx0dGJvZHl0cnMucmVtb3ZlQXR0cignc3R5bGUnKTtcclxuXHRcdFx0aWYoISQoJy5wYWdpbmF0aW9uIHNwYW4gYTplcSgwKScpLmhhc0NsYXNzKCdhY3RpdmUnKSl7XHJcblx0XHRcdFx0JCgnLnBhZ2luYXRpb24gc3BhbiBhOmVxKDApJykuY2xpY2soKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNle1xyXG5cdFx0XHRcdHBhZ2luYXRpb25DdXIoMCwgd2luZG93LnBhZ2luYXRpb25kZWZhdWx0cy5jYXRlZ29yeUxpbWl0KTtcclxuXHRcdFx0fVxyXG5cdFx0fSwgMSk7XHJcblx0fSk7XHJcbn0pOyIsImZ1bmN0aW9uIGxvYWRMYXlvdXRPbmVEYXRhKGRhdGEsIGlkeCkge1xyXG5cdHZhciBlZGl0TXlWaWV3ID0gbG9hZFByZWZlcmFuY2VJZC5FZGl0TXlWaWV3QnV0dG9uTGFibGVUZXh0ID8gJzxhIGNsYXNzPVwiZWRpdFZpZXcgbW9idmlld1wiIGhyZWY9XCInICsgbG9hZFByZWZlcmFuY2VJZC5NeVZpZXdTZXR0aW5nc1BhZ2VMaW5rICsgJ1wiPicgKyBsb2FkUHJlZmVyYW5jZUlkLkVkaXRNeVZpZXdCdXR0b25MYWJsZVRleHQgKyAnPC9hPicgOiAnJztcclxuXHRcclxuXHR2YXIgbG9hZERhdGEgPSBsb2FkUHJlZmVyYW5jZUlkW1wiU2VjdGlvbnNcIl1baWR4XVtcIkNoYW5uZWxOYW1lXCJdID8gJzxkaXYgY2xhc3M9XCJsYXRlc3RTdWJqZWN0IGNsZWFyZml4XCIgaWQ9XCInICsgbG9hZFByZWZlcmFuY2VJZFtcIlNlY3Rpb25zXCJdW2lkeF0uQ2hhbm5lbElkICsgJ1wiPjxzcGFuIGNsYXNzPVwic3ViXCI+JyArIGRhdGEubG9hZE1vcmUubGF0ZXN0RnJvbVRleHQgKyAnICcgKyBsb2FkUHJlZmVyYW5jZUlkW1wiU2VjdGlvbnNcIl1baWR4XVtcIkNoYW5uZWxOYW1lXCJdICsgJzwvc3Bhbj4nK2VkaXRNeVZpZXcrJzwvZGl2PicgOiAnJyxcclxuXHRsb2FkbW9yZUxpbmsgPSBkYXRhLmxvYWRNb3JlICYmIGRhdGEubG9hZE1vcmUuZGlzcGxheUxvYWRNb3JlID8gZGF0YS5sb2FkTW9yZS5sb2FkTW9yZUxpbmtVcmwgOiAnIyc7XHJcblx0bG9hZERhdGEgKz0gJzxkaXYgY2xhc3M9XCJlYWNoc3RvcnlNcGFuXCI+JztcclxuXHRsb2FkRGF0YSArPSBsb2FkUHJlZmVyYW5jZUlkW1wiU2VjdGlvbnNcIl1baWR4XS5DaGFubmVsSWQgPyAnPGRpdiBjbGFzcz1cImVhY2hzdG9yeSBsYXlvdXQxXCI+JyA6ICcnO1xyXG5cdGxvYWREYXRhICs9IGNyZWF0ZUxheW91dElubmVyMShkYXRhKTtcclxuXHRsb2FkRGF0YSArPSAnPC9kaXY+JztcclxuXHRsb2FkRGF0YSArPSBkYXRhLmxvYWRNb3JlICYmIGRhdGEubG9hZE1vcmUuZGlzcGxheUxvYWRNb3JlID8gJzxkaXYgY2xhc3M9XCJsb2FkbW9yZVwiPjxzcGFuIGhyZWY9XCInICsgbG9hZG1vcmVMaW5rICsgJ1wiPicgKyBkYXRhLmxvYWRNb3JlLmxvYWRNb3JlTGlua1RleHQgKyAnICcgKyBsb2FkUHJlZmVyYW5jZUlkW1wiU2VjdGlvbnNcIl1baWR4XVtcIkNoYW5uZWxOYW1lXCJdICsgJzwvc3Bhbj48L2Rpdj4nIDogJyc7XHJcblx0bG9hZERhdGEgKz0gJzwvZGl2Pic7XHJcblx0XHJcblx0Ly9sb2FkRGF0YSArPSAnPGRpdiBjbGFzcz1cImdvb2dsZUFkZFwiPjxpbWcgc3JjPVwiL2Rpc3QvaW1nL2dvb2dsZS1hZGQuZ2lmXCI+PC9kaXY+JztcclxuXHRcclxuXHRyZXR1cm4gbG9hZERhdGE7XHJcbn0gXHJcblxyXG5mdW5jdGlvbiBjcmVhdGVMYXlvdXRJbm5lcjEoZGF0YSkge1xyXG5cdHZhciBpc0FydGljbGVCb29rbWFya2VkID0gZGF0YS5hcnRpY2xlc1swXS5pc0FydGljbGVCb29rbWFya2VkID8gZGF0YS5hcnRpY2xlc1swXS5ib29rbWFya2VkVGV4dCA6IGRhdGEuYXJ0aWNsZXNbMF0uYm9va21hcmtUZXh0LFxyXG5cdCAgICBib29rbWFya1R4dCA9IGRhdGEuYXJ0aWNsZXNbMF0uYm9va21hcmtUZXh0IHx8IGRhdGEuYXJ0aWNsZXNbMF0uYm9va21hcmtlZFRleHQgPyAnPHNwYW4gY2xhc3M9XCJhY3Rpb24tZmxhZ19fbGFiZWwganMtYm9va21hcmstbGFiZWxcIj4nICsgaXNBcnRpY2xlQm9va21hcmtlZCArICc8L3NwYW4+JyA6ICcnLFxyXG5cdCAgICBsaW5rYWJsZVVybDAgPSBkYXRhLmFydGljbGVzWzBdLmxpbmthYmxlVXJsID8gZGF0YS5hcnRpY2xlc1swXS5saW5rYWJsZVVybCA6ICcjJyxcclxuXHQgICAgbGlua2FibGVVcmwxID0gZGF0YS5hcnRpY2xlc1sxXS5saW5rYWJsZVVybCA/IGRhdGEuYXJ0aWNsZXNbMV0ubGlua2FibGVVcmwgOiAnIycsXHJcblx0ICAgIGxpbmthYmxlVXJsMiA9IGRhdGEuYXJ0aWNsZXNbMl0ubGlua2FibGVVcmwgPyBkYXRhLmFydGljbGVzWzJdLmxpbmthYmxlVXJsIDogJyMnLFxyXG5cdCAgICBsaW5rYWJsZVVybDMgPSBkYXRhLmFydGljbGVzWzNdLmxpbmthYmxlVXJsID8gZGF0YS5hcnRpY2xlc1szXS5saW5rYWJsZVVybCA6ICcjJyxcclxuXHQgICAgbGlua2FibGVVcmw0ID0gZGF0YS5hcnRpY2xlc1s0XS5saW5rYWJsZVVybCA/IGRhdGEuYXJ0aWNsZXNbNF0ubGlua2FibGVVcmwgOiAnIycsXHJcblx0ICAgIGxpbmthYmxlVXJsNSA9IGRhdGEuYXJ0aWNsZXNbNV0ubGlua2FibGVVcmwgPyBkYXRhLmFydGljbGVzWzVdLmxpbmthYmxlVXJsIDogJyMnLFxyXG5cdCAgICBsaW5rYWJsZVVybDYgPSBkYXRhLmFydGljbGVzWzZdLmxpbmthYmxlVXJsID8gZGF0YS5hcnRpY2xlc1s2XS5saW5rYWJsZVVybCA6ICcjJyxcclxuXHQgICAgbGlua2FibGVVcmw3ID0gZGF0YS5hcnRpY2xlc1s3XS5saW5rYWJsZVVybCA/IGRhdGEuYXJ0aWNsZXNbN10ubGlua2FibGVVcmwgOiAnIycsXHJcblx0ICAgIGxpbmthYmxlVXJsOCA9IGRhdGEuYXJ0aWNsZXNbOF0ubGlua2FibGVVcmwgPyBkYXRhLmFydGljbGVzWzhdLmxpbmthYmxlVXJsIDogJyMnLFxyXG5cdFx0Ym9va21hcmtJbmZvMCA9IGRhdGEuYXJ0aWNsZXNbMF0uaXNBcnRpY2xlQm9va21hcmtlZCA/IGRhdGEuYXJ0aWNsZXNbMF0uYm9va21hcmtlZFRleHQgOiBkYXRhLmFydGljbGVzWzBdLmJvb2ttYXJrVGV4dCxcclxuXHRcdGJvb2ttYXJrSW5mbzEgPSBkYXRhLmFydGljbGVzWzFdLmlzQXJ0aWNsZUJvb2ttYXJrZWQgPyBkYXRhLmFydGljbGVzWzFdLmJvb2ttYXJrZWRUZXh0IDogZGF0YS5hcnRpY2xlc1sxXS5ib29rbWFya1RleHQsXHJcblx0XHRib29rbWFya0luZm8yID0gZGF0YS5hcnRpY2xlc1syXS5pc0FydGljbGVCb29rbWFya2VkID8gZGF0YS5hcnRpY2xlc1syXS5ib29rbWFya2VkVGV4dCA6IGRhdGEuYXJ0aWNsZXNbMl0uYm9va21hcmtUZXh0LFxyXG5cdFx0Ym9va21hcmtJbmZvNiA9IGRhdGEuYXJ0aWNsZXNbNl0uaXNBcnRpY2xlQm9va21hcmtlZCA/IGRhdGEuYXJ0aWNsZXNbNl0uYm9va21hcmtlZFRleHQgOiBkYXRhLmFydGljbGVzWzZdLmJvb2ttYXJrVGV4dCxcclxuXHRcdGJvb2ttYXJrSW5mbzcgPSBkYXRhLmFydGljbGVzWzddLmlzQXJ0aWNsZUJvb2ttYXJrZWQgPyBkYXRhLmFydGljbGVzWzddLmJvb2ttYXJrZWRUZXh0IDogZGF0YS5hcnRpY2xlc1s3XS5ib29rbWFya1RleHQsXHJcblx0XHRib29rbWFya0luZm84ID0gZGF0YS5hcnRpY2xlc1s4XS5pc0FydGljbGVCb29rbWFya2VkID8gZGF0YS5hcnRpY2xlc1s4XS5ib29rbWFya2VkVGV4dCA6IGRhdGEuYXJ0aWNsZXNbOF0uYm9va21hcmtUZXh0LFxyXG5cdFx0XHJcblx0XHRmYm9va21hcmtJY29uMCA9IGRhdGEuYXJ0aWNsZXNbMF0uaXNBcnRpY2xlQm9va21hcmtlZCA/ICdpcy12aXNpYmxlJyA6ICcnLFxyXG5cdFx0c2Jvb2ttYXJrSWNvbjAgPSBkYXRhLmFydGljbGVzWzBdLmlzQXJ0aWNsZUJvb2ttYXJrZWQgPyAnJyA6ICdpcy12aXNpYmxlJyxcclxuXHRcdGZib29rbWFya0ljb24xID0gZGF0YS5hcnRpY2xlc1sxXS5pc0FydGljbGVCb29rbWFya2VkID8gJ2lzLXZpc2libGUnIDogJycsXHJcblx0XHRzYm9va21hcmtJY29uMSA9IGRhdGEuYXJ0aWNsZXNbMV0uaXNBcnRpY2xlQm9va21hcmtlZCA/ICcnIDogJ2lzLXZpc2libGUnLFxyXG5cdFx0ZmJvb2ttYXJrSWNvbjIgPSBkYXRhLmFydGljbGVzWzJdLmlzQXJ0aWNsZUJvb2ttYXJrZWQgPyAnaXMtdmlzaWJsZScgOiAnJyxcclxuXHRcdHNib29rbWFya0ljb24yID0gZGF0YS5hcnRpY2xlc1syXS5pc0FydGljbGVCb29rbWFya2VkID8gJycgOiAnaXMtdmlzaWJsZScsXHJcblx0XHRmYm9va21hcmtJY29uNiA9IGRhdGEuYXJ0aWNsZXNbNl0uaXNBcnRpY2xlQm9va21hcmtlZCA/ICdpcy12aXNpYmxlJyA6ICcnLFxyXG5cdFx0c2Jvb2ttYXJrSWNvbjYgPSBkYXRhLmFydGljbGVzWzZdLmlzQXJ0aWNsZUJvb2ttYXJrZWQgPyAnJyA6ICdpcy12aXNpYmxlJyxcclxuXHRcdGZib29rbWFya0ljb243ID0gZGF0YS5hcnRpY2xlc1s3XS5pc0FydGljbGVCb29rbWFya2VkID8gJ2lzLXZpc2libGUnIDogJycsXHJcblx0XHRzYm9va21hcmtJY29uNyA9IGRhdGEuYXJ0aWNsZXNbN10uaXNBcnRpY2xlQm9va21hcmtlZCA/ICcnIDogJ2lzLXZpc2libGUnLFxyXG5cdFx0ZmJvb2ttYXJrSWNvbjggPSBkYXRhLmFydGljbGVzWzhdLmlzQXJ0aWNsZUJvb2ttYXJrZWQgPyAnaXMtdmlzaWJsZScgOiAnJyxcclxuXHRcdHNib29rbWFya0ljb244ID0gZGF0YS5hcnRpY2xlc1s4XS5pc0FydGljbGVCb29rbWFya2VkID8gJycgOiAnaXMtdmlzaWJsZSc7XHJcblxyXG5cdHZhciBhcnRpY2xlRGF0YSA9ICcnO1xyXG5cdGFydGljbGVEYXRhID0gJzxzZWN0aW9uIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3IHRvcGljLWZlYXR1cmVkLWFydGljbGVcIj4nO1xyXG5cdGFydGljbGVEYXRhICs9IGRhdGEuYXJ0aWNsZXNbMF0ubGlzdGFibGVJbWFnZSA/ICc8aW1nIGNsYXNzPVwidG9waWMtZmVhdHVyZWQtYXJ0aWNsZV9faW1hZ2VcIiBzcmM9XCInICsgZGF0YS5hcnRpY2xlc1swXS5saXN0YWJsZUltYWdlICsgJ1wiPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFydGljbGUtbWV0YWRhdGFcIj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYWN0aW9uLWZsYWcgYXJ0aWNsZS1wcmV2aWV3X19ib29rbWFya2VyIHBvcC1vdXRfX3RyaWdnZXIganMtYm9va21hcmstYXJ0aWNsZVwiIGRhdGEtcG9wLW91dC10eXBlPVwic2lnbi1pblwiIGRhdGEtcG9wLW91dC1hbGlnbj1cInJpZ2h0XCIgZGF0YS1ib29rbWFyay1pZD1cIicgKyBkYXRhLmFydGljbGVzWzBdLmlkICsgJ1wiIGRhdGEtYW5hbHl0aWNzPVwie1wiYm9va21hcmtcIjogXCInICsgYm9va21hcmtJbmZvMCArICdcIiwgXCJib29rbWFya190aXRsZVwiOiBcIicgKyBkYXRhLmFydGljbGVzWzBdLmxpc3RhYmxlVGl0bGUgKyAnXCIsIFwiYm9va21hcmtfcHVibGljYXRpb25cIjogXCJDb21tb2RpdGllc1wifVwiIGRhdGEtaXMtYm9va21hcmtlZD1cIicgKyBkYXRhLmFydGljbGVzWzBdLmlzQXJ0aWNsZUJvb2ttYXJrZWQgKyAnXCI+PHNwYW4gY2xhc3M9XCJhY3Rpb24tZmxhZ19fbGFiZWwganMtYm9va21hcmstbGFiZWxcIiBkYXRhLWxhYmVsLWJvb2ttYXJrPVwiJyArIGRhdGEuYXJ0aWNsZXNbMF0uYm9va21hcmtUZXh0ICsgJ1wiIGRhdGEtbGFiZWwtYm9va21hcmtlZD1cIicgKyBkYXRhLmFydGljbGVzWzBdLmJvb2ttYXJrZWRUZXh0ICsgJ1wiPicgKyBib29rbWFya0luZm8wICsgJzwvc3Bhbj48c3ZnIGNsYXNzPVwiYWN0aW9uLWZsYWdfX2ljb24gYWN0aW9uLWZsYWdfX2ljb24tLWJvb2ttYXJrIGFydGljbGUtYm9va21hcmsgYXJ0aWNsZS1ib29rbWFya19fYm9va21hcmtlZCAnK2Zib29rbWFya0ljb24wKydcIj48dXNlIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHhsaW5rOmhyZWY9XCIvZGlzdC9pbWcvc3ZnLXNwcml0ZS5zdmcjYm9va21hcmtlZFwiPjwvdXNlPjwvc3ZnPjxzdmcgY2xhc3M9XCJhY3Rpb24tZmxhZ19faWNvbiBhY3Rpb24tZmxhZ19faWNvbi0tYm9va21hcmsgYXJ0aWNsZS1ib29rbWFyayAnK3Nib29rbWFya0ljb24wKydcIj48dXNlIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHhsaW5rOmhyZWY9XCIvZGlzdC9pbWcvc3ZnLXNwcml0ZS5zdmcjYm9va21hcmtcIj48L3VzZT48L3N2Zz48L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8dWw+JztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzBdLmxpc3RhYmxlRGF0ZSA/ICc8bGk+PHRpbWUgY2xhc3M9XCJhcnRpY2xlLW1ldGFkYXRhX19kYXRlXCI+JyArIGRhdGEuYXJ0aWNsZXNbMF0ubGlzdGFibGVEYXRlICsgJzwvdGltZT48L2xpPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzBdLmxpbmthYmxlVGV4dCA/ICc8bGk+PGg2PicgKyBkYXRhLmFydGljbGVzWzBdLmxpbmthYmxlVGV4dCArICc8L2g2PjwvbGk+JyA6ICcnO1xyXG5cdGFydGljbGVEYXRhICs9IGRhdGEuYXJ0aWNsZXNbMF0ubGlzdGFibGVUeXBlID8gJzxsaT48c3BhbiBjbGFzcz1cImpzLXRvZ2dsZS10b29sdGlwXCIgZGF0YS10b29sdGlwLXRleHQ9XCJUaGlzIGFydGljbGUgaW5jbHVkZXMgZGF0YS5cIj48c3ZnIGNsYXNzPVwiYXJ0aWNsZS1tZXRhZGF0YV9fbWVkaWEtdHlwZVwiPjx1c2UgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeGxpbms6aHJlZj1cIi9kaXN0L2ltZy9zdmctc3ByaXRlLnN2ZyNjaGFydFwiPjwvdXNlPjwvc3ZnPjwvc3Bhbj48L2xpPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC91bD4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwidG9waWMtZmVhdHVyZWQtYXJ0aWNsZV9faW5uZXItd3JhcHBlclwiPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1swXS5saXN0YWJsZVRpdGxlID8gJzxoMyBjbGFzcz1cInRvcGljLWZlYXR1cmVkLWFydGljbGVfX2hlYWRsaW5lXCI+PGEgaHJlZj1cIicgKyBsaW5rYWJsZVVybDAgKyAnXCIgY2xhc3M9XCJjbGljay11dGFnXCIgZGF0YS1pbmZvPVxcJ3tcImV2ZW50X25hbWVcIjpcImFydGljbGVfY2xpY2tfdGhyb3VnaFwiLFwicGFnZV9uYW1lXCI6XCInICsgYW5hbHl0aWNzX2RhdGFbXCJwYWdlX25hbWVcIl0gKyAnXCIsXCJjbGlja190aHJvdWdoX2Rlc3RpbmF0aW9uXCI6XCInICsgZGF0YS5hcnRpY2xlc1swXS5saXN0YWJsZVRpdGxlLnJlcGxhY2UoLycvZywgXCJcIikucmVwbGFjZSgvXCIvZywgJycpICsgJ1wiLFwiZ2FfZXZlbnRDYXRlZ29yeVwiOlwiTXkgVmlldyBQYWdlIEFydGljbGVzXCIsXCJnYV9ldmVudEFjdGlvblwiOlwiJyArIGFuYWx5dGljc19kYXRhW1wicHVibGljYXRpb25cIl0gKyAnXCIsXCJnYV9ldmVudExhYmVsXCI6XCInICsgZGF0YS5hcnRpY2xlc1swXS5saXN0YWJsZVRpdGxlLnJlcGxhY2UoLycvZywgXCJcIikucmVwbGFjZSgvXCIvZywgJycpICsgJ1wiLFwicHVibGljYXRpb25fY2xpY2tcIjpcIicgKyBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdICsgJ1wifVxcJz4nICsgZGF0YS5hcnRpY2xlc1swXS5saXN0YWJsZVRpdGxlICsgJzwvYT48L2gzPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzBdLmxpc3RhYmxlQXV0aG9yQnlMaW5lID8gJzxzcGFuIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19ieWxpbmVcIj4nICsgZGF0YS5hcnRpY2xlc1swXS5saXN0YWJsZUF1dGhvckJ5TGluZSArICc8L3NwYW4+JyA6ICcnO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYXJ0aWNsZS1zdW1tYXJ5XCI+JyArIGRhdGEuYXJ0aWNsZXNbMF0ubGlzdGFibGVTdW1tYXJ5ID8gZGF0YS5hcnRpY2xlc1swXS5saXN0YWJsZVN1bW1hcnkgOiAnJyArICc8L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X190YWdzIGJhci1zZXBhcmF0ZWQtbGluay1saXN0XCI+JztcclxuXHRpZiAoZGF0YS5hcnRpY2xlc1swXS5saXN0YWJsZVRvcGljcykge1xyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmFydGljbGVzWzBdLmxpc3RhYmxlVG9waWNzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBnZXRMaW5rOCA9IGRhdGEuYXJ0aWNsZXNbMF0ubGlzdGFibGVUb3BpY3NbaV0ubGlua2FibGVVcmwgPyBkYXRhLmFydGljbGVzWzBdLmxpc3RhYmxlVG9waWNzW2ldLmxpbmthYmxlVXJsIDogJyMnO1xyXG5cdFx0XHRhcnRpY2xlRGF0YSArPSAnPGEgaHJlZj1cIicgKyBnZXRMaW5rOCArICdcIj4nICsgZGF0YS5hcnRpY2xlc1swXS5saXN0YWJsZVRvcGljc1tpXS5saW5rYWJsZVRleHQgKyAnPC9hPic7XHJcblx0XHR9XHJcblx0fVxyXG5cdGFydGljbGVEYXRhICs9ICc8L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L3NlY3Rpb24+JztcclxuXHRcclxuXHRcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImxhdGVzdC1uZXdzX19hcnRpY2xlc1wiPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxzZWN0aW9uIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3IGFydGljbGUtcHJldmlldy0tc21hbGwgbW9idmlld1wiPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxkaXYgY2xhc3M9XCJhcnRpY2xlLW1ldGFkYXRhXCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFjdGlvbi1mbGFnIGFydGljbGUtcHJldmlld19fYm9va21hcmtlciBwb3Atb3V0X190cmlnZ2VyIGpzLWJvb2ttYXJrLWFydGljbGVcIiBkYXRhLXBvcC1vdXQtdHlwZT1cInNpZ24taW5cIiBkYXRhLXBvcC1vdXQtYWxpZ249XCJyaWdodFwiIGRhdGEtYm9va21hcmstaWQ9XCInICsgZGF0YS5hcnRpY2xlc1sxXS5pZCArICdcIiBkYXRhLWFuYWx5dGljcz1cIntcImJvb2ttYXJrXCI6IFwiJyArIGJvb2ttYXJrSW5mbzEgKyAnXCIsIFwiYm9va21hcmtfdGl0bGVcIjogXCInICsgZGF0YS5hcnRpY2xlc1sxXS5saXN0YWJsZVRpdGxlICsgJ1wiLCBcImJvb2ttYXJrX3B1YmxpY2F0aW9uXCI6IFwiQ29tbW9kaXRpZXNcIn1cIiBkYXRhLWlzLWJvb2ttYXJrZWQ9XCInICsgZGF0YS5hcnRpY2xlc1sxXS5pc0FydGljbGVCb29rbWFya2VkICsgJ1wiPjxzcGFuIGNsYXNzPVwiYWN0aW9uLWZsYWdfX2xhYmVsIGpzLWJvb2ttYXJrLWxhYmVsXCIgZGF0YS1sYWJlbC1ib29rbWFyaz1cIicgKyBkYXRhLmFydGljbGVzWzFdLmJvb2ttYXJrVGV4dCArICdcIiBkYXRhLWxhYmVsLWJvb2ttYXJrZWQ9XCInICsgZGF0YS5hcnRpY2xlc1sxXS5ib29rbWFya2VkVGV4dCArICdcIj4nICsgYm9va21hcmtJbmZvMSArICc8L3NwYW4+PHN2ZyBjbGFzcz1cImFjdGlvbi1mbGFnX19pY29uIGFjdGlvbi1mbGFnX19pY29uLS1ib29rbWFyayBhcnRpY2xlLWJvb2ttYXJrIGFydGljbGUtYm9va21hcmtfX2Jvb2ttYXJrZWQgJytmYm9va21hcmtJY29uMSsnXCI+PHVzZSB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bGluazpocmVmPVwiL2Rpc3QvaW1nL3N2Zy1zcHJpdGUuc3ZnI2Jvb2ttYXJrZWRcIj48L3VzZT48L3N2Zz48c3ZnIGNsYXNzPVwiYWN0aW9uLWZsYWdfX2ljb24gYWN0aW9uLWZsYWdfX2ljb24tLWJvb2ttYXJrIGFydGljbGUtYm9va21hcmsgJytzYm9va21hcmtJY29uMSsnXCI+PHVzZSB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bGluazpocmVmPVwiL2Rpc3QvaW1nL3N2Zy1zcHJpdGUuc3ZnI2Jvb2ttYXJrXCI+PC91c2U+PC9zdmc+PC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPHVsPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1sxXS5saXN0YWJsZURhdGUgPyAnPGxpPjx0aW1lIGNsYXNzPVwiYXJ0aWNsZS1tZXRhZGF0YV9fZGF0ZVwiPicgKyBkYXRhLmFydGljbGVzWzFdLmxpc3RhYmxlRGF0ZSArICc8L3RpbWU+PC9saT4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1sxXS5saW5rYWJsZVRleHQgPyAnPGxpPjxoNj4nICsgZGF0YS5hcnRpY2xlc1sxXS5saW5rYWJsZVRleHQgKyAnPC9oNj48L2xpPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzFdLmxpc3RhYmxlVHlwZSA/ICc8bGk+PHNwYW4gY2xhc3M9XCJqcy10b2dnbGUtdG9vbHRpcFwiIGRhdGEtdG9vbHRpcC10ZXh0PVwiVGhpcyBhcnRpY2xlIGluY2x1ZGVzIGRhdGEuXCI+PHN2ZyBjbGFzcz1cImFydGljbGUtbWV0YWRhdGFfX21lZGlhLXR5cGVcIj48dXNlIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHhsaW5rOmhyZWY9XCIvZGlzdC9pbWcvc3ZnLXNwcml0ZS5zdmcjY2hhcnRcIj48L3VzZT48L3N2Zz48L3NwYW4+PC9saT4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzwvdWw+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFydGljbGUtcHJldmlld19faW5uZXItd3JhcHBlclwiPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1sxXS5saXN0YWJsZVRpdGxlID8gJzxoMSBjbGFzcz1cImFydGljbGUtcHJldmlld19faGVhZGxpbmVcIj48YSBocmVmPVwiJyArIGxpbmthYmxlVXJsMSArICdcIiBjbGFzcz1cImNsaWNrLXV0YWdcIiBkYXRhLWluZm89XFwne1wiZXZlbnRfbmFtZVwiOlwiYXJ0aWNsZV9jbGlja190aHJvdWdoXCIsXCJwYWdlX25hbWVcIjpcIicgKyBhbmFseXRpY3NfZGF0YVtcInBhZ2VfbmFtZVwiXSArICdcIixcImNsaWNrX3Rocm91Z2hfZGVzdGluYXRpb25cIjpcIicgKyBkYXRhLmFydGljbGVzWzFdLmxpc3RhYmxlVGl0bGUucmVwbGFjZSgvJy9nLCBcIlwiKS5yZXBsYWNlKC9cIi9nLCAnJykgKyAnXCIsXCJnYV9ldmVudENhdGVnb3J5XCI6XCJNeSBWaWV3IFBhZ2UgQXJ0aWNsZXNcIixcImdhX2V2ZW50QWN0aW9uXCI6XCInICsgYW5hbHl0aWNzX2RhdGFbXCJwdWJsaWNhdGlvblwiXSArICdcIixcImdhX2V2ZW50TGFiZWxcIjpcIicgKyBkYXRhLmFydGljbGVzWzFdLmxpc3RhYmxlVGl0bGUucmVwbGFjZSgvJy9nLCBcIlwiKS5yZXBsYWNlKC9cIi9nLCAnJykgKyAnXCIsXCJwdWJsaWNhdGlvbl9jbGlja1wiOlwiJyArIGFuYWx5dGljc19kYXRhW1wicHVibGljYXRpb25cIl0gKyAnXCJ9XFwnPicgKyBkYXRhLmFydGljbGVzWzFdLmxpc3RhYmxlVGl0bGUgKyAnPC9hPjwvaDE+JyA6ICcnO1xyXG5cdGFydGljbGVEYXRhICs9IGRhdGEuYXJ0aWNsZXNbMV0ubGlzdGFibGVBdXRob3JCeUxpbmUgPyAnPHNwYW4gY2xhc3M9XCJhcnRpY2xlLXByZXZpZXdfX2J5bGluZVwiPicgKyBkYXRhLmFydGljbGVzWzFdLmxpc3RhYmxlQXV0aG9yQnlMaW5lICsgJzwvc3Bhbj4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxkaXYgY2xhc3M9XCJhcnRpY2xlLXN1bW1hcnlcIj4nO1xyXG5cdGFydGljbGVEYXRhICs9IGRhdGEuYXJ0aWNsZXNbMV0ubGlzdGFibGVTdW1tYXJ5ID8gZGF0YS5hcnRpY2xlc1sxXS5saXN0YWJsZVN1bW1hcnkgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC9kaXY+JztcdFxyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X190YWdzIGJhci1zZXBhcmF0ZWQtbGluay1saXN0XCI+JztcclxuXHRpZiAoZGF0YS5hcnRpY2xlc1sxXS5saXN0YWJsZVRvcGljcykge1xyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmFydGljbGVzWzFdLmxpc3RhYmxlVG9waWNzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBnZXRMaW5rMSA9IGRhdGEuYXJ0aWNsZXNbMV0ubGlzdGFibGVUb3BpY3NbaV0ubGlua2FibGVVcmwgPyBkYXRhLmFydGljbGVzWzFdLmxpc3RhYmxlVG9waWNzW2ldLmxpbmthYmxlVXJsIDogJyMnO1xyXG5cdFx0XHRhcnRpY2xlRGF0YSArPSAnPGEgaHJlZj1cIicgKyBnZXRMaW5rMSArICdcIj4nICsgZGF0YS5hcnRpY2xlc1sxXS5saXN0YWJsZVRvcGljc1tpXS5saW5rYWJsZVRleHQgKyAnPC9hPic7XHJcblx0XHR9XHJcblx0fVxyXG5cdGFydGljbGVEYXRhICs9ICc8L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L3NlY3Rpb24+JztcclxuXHRcclxuXHRcclxuXHRhcnRpY2xlRGF0YSArPSAnPHNlY3Rpb24gY2xhc3M9XCJhcnRpY2xlLXByZXZpZXcgYXJ0aWNsZS1wcmV2aWV3LS1zbWFsbCBtb2J2aWV3XCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFydGljbGUtbWV0YWRhdGFcIj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYWN0aW9uLWZsYWcgYXJ0aWNsZS1wcmV2aWV3X19ib29rbWFya2VyIHBvcC1vdXRfX3RyaWdnZXIganMtYm9va21hcmstYXJ0aWNsZVwiIGRhdGEtcG9wLW91dC10eXBlPVwic2lnbi1pblwiIGRhdGEtcG9wLW91dC1hbGlnbj1cInJpZ2h0XCIgZGF0YS1ib29rbWFyay1pZD1cIicgKyBkYXRhLmFydGljbGVzWzJdLmlkICsgJ1wiIGRhdGEtYW5hbHl0aWNzPVwie1wiYm9va21hcmtcIjogXCInICsgYm9va21hcmtJbmZvMiArICdcIiwgXCJib29rbWFya190aXRsZVwiOiBcIicgKyBkYXRhLmFydGljbGVzWzJdLmxpc3RhYmxlVGl0bGUgKyAnXCIsIFwiYm9va21hcmtfcHVibGljYXRpb25cIjogXCJDb21tb2RpdGllc1wifVwiIGRhdGEtaXMtYm9va21hcmtlZD1cIicgKyBkYXRhLmFydGljbGVzWzJdLmlzQXJ0aWNsZUJvb2ttYXJrZWQgKyAnXCI+PHNwYW4gY2xhc3M9XCJhY3Rpb24tZmxhZ19fbGFiZWwganMtYm9va21hcmstbGFiZWxcIiBkYXRhLWxhYmVsLWJvb2ttYXJrPVwiJyArIGRhdGEuYXJ0aWNsZXNbMl0uYm9va21hcmtUZXh0ICsgJ1wiIGRhdGEtbGFiZWwtYm9va21hcmtlZD1cIicgKyBkYXRhLmFydGljbGVzWzJdLmJvb2ttYXJrZWRUZXh0ICsgJ1wiPicgKyBib29rbWFya0luZm8yICsgJzwvc3Bhbj48c3ZnIGNsYXNzPVwiYWN0aW9uLWZsYWdfX2ljb24gYWN0aW9uLWZsYWdfX2ljb24tLWJvb2ttYXJrIGFydGljbGUtYm9va21hcmsgYXJ0aWNsZS1ib29rbWFya19fYm9va21hcmtlZCAnK2Zib29rbWFya0ljb24yKydcIj48dXNlIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHhsaW5rOmhyZWY9XCIvZGlzdC9pbWcvc3ZnLXNwcml0ZS5zdmcjYm9va21hcmtlZFwiPjwvdXNlPjwvc3ZnPjxzdmcgY2xhc3M9XCJhY3Rpb24tZmxhZ19faWNvbiBhY3Rpb24tZmxhZ19faWNvbi0tYm9va21hcmsgYXJ0aWNsZS1ib29rbWFyayAnK3Nib29rbWFya0ljb24yKydcIj48dXNlIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHhsaW5rOmhyZWY9XCIvZGlzdC9pbWcvc3ZnLXNwcml0ZS5zdmcjYm9va21hcmtcIj48L3VzZT48L3N2Zz48L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8dWw+JztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzJdLmxpc3RhYmxlRGF0ZSA/ICc8bGk+PHRpbWUgY2xhc3M9XCJhcnRpY2xlLW1ldGFkYXRhX19kYXRlXCI+JyArIGRhdGEuYXJ0aWNsZXNbMl0ubGlzdGFibGVEYXRlICsgJzwvdGltZT48L2xpPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzJdLmxpbmthYmxlVGV4dCA/ICc8bGk+PGg2PicgKyBkYXRhLmFydGljbGVzWzJdLmxpbmthYmxlVGV4dCArICc8L2g2PjwvbGk+JyA6ICcnO1xyXG5cdGFydGljbGVEYXRhICs9IGRhdGEuYXJ0aWNsZXNbMl0ubGlzdGFibGVUeXBlID8gJzxsaT48c3BhbiBjbGFzcz1cImpzLXRvZ2dsZS10b29sdGlwXCIgZGF0YS10b29sdGlwLXRleHQ9XCJUaGlzIGFydGljbGUgaW5jbHVkZXMgZGF0YS5cIj48c3ZnIGNsYXNzPVwiYXJ0aWNsZS1tZXRhZGF0YV9fbWVkaWEtdHlwZVwiPjx1c2UgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeGxpbms6aHJlZj1cIi9kaXN0L2ltZy9zdmctc3ByaXRlLnN2ZyNjaGFydFwiPjwvdXNlPjwvc3ZnPjwvc3Bhbj48L2xpPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC91bD4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19pbm5lci13cmFwcGVyXCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzJdLmxpc3RhYmxlVGl0bGUgPyAnPGgxIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19oZWFkbGluZVwiPjxhIGhyZWY9XCInICsgbGlua2FibGVVcmwyICsgJ1wiIGNsYXNzPVwiY2xpY2stdXRhZ1wiIGRhdGEtaW5mbz1cXCd7XCJldmVudF9uYW1lXCI6XCJhcnRpY2xlX2NsaWNrX3Rocm91Z2hcIixcInBhZ2VfbmFtZVwiOlwiJyArIGFuYWx5dGljc19kYXRhW1wicGFnZV9uYW1lXCJdICsgJ1wiLFwiY2xpY2tfdGhyb3VnaF9kZXN0aW5hdGlvblwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbMl0ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcImdhX2V2ZW50Q2F0ZWdvcnlcIjpcIk15IFZpZXcgUGFnZSBBcnRpY2xlc1wiLFwiZ2FfZXZlbnRBY3Rpb25cIjpcIicgKyBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdICsgJ1wiLFwiZ2FfZXZlbnRMYWJlbFwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbMl0ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcInB1YmxpY2F0aW9uX2NsaWNrXCI6XCInICsgYW5hbHl0aWNzX2RhdGFbXCJwdWJsaWNhdGlvblwiXSArICdcIn1cXCc+JyArIGRhdGEuYXJ0aWNsZXNbMl0ubGlzdGFibGVUaXRsZSArICc8L2E+PC9oMT4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1syXS5saXN0YWJsZUF1dGhvckJ5TGluZSA/ICc8c3BhbiBjbGFzcz1cImFydGljbGUtcHJldmlld19fYnlsaW5lXCI+JyArIGRhdGEuYXJ0aWNsZXNbMl0ubGlzdGFibGVBdXRob3JCeUxpbmUgKyAnPC9zcGFuPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFydGljbGUtc3VtbWFyeVwiPicgKyBkYXRhLmFydGljbGVzWzJdLmxpc3RhYmxlU3VtbWFyeSA/IGRhdGEuYXJ0aWNsZXNbMl0ubGlzdGFibGVTdW1tYXJ5IDogJycgKyAnPC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFydGljbGUtcHJldmlld19fdGFncyBiYXItc2VwYXJhdGVkLWxpbmstbGlzdFwiPic7XHJcblx0aWYgKGRhdGEuYXJ0aWNsZXNbMl0ubGlzdGFibGVUb3BpY3MpIHtcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5hcnRpY2xlc1syXS5saXN0YWJsZVRvcGljcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgZ2V0TGluazIgPSBkYXRhLmFydGljbGVzWzJdLmxpc3RhYmxlVG9waWNzW2ldLmxpbmthYmxlVXJsID8gZGF0YS5hcnRpY2xlc1syXS5saXN0YWJsZVRvcGljc1tpXS5saW5rYWJsZVVybCA6ICcjJztcclxuXHRcdFx0YXJ0aWNsZURhdGEgKz0gJzxhIGhyZWY9XCInICsgZ2V0TGluazIgKyAnXCI+JyArIGRhdGEuYXJ0aWNsZXNbMl0ubGlzdGFibGVUb3BpY3NbaV0ubGlua2FibGVUZXh0ICsgJzwvYT4nO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRhcnRpY2xlRGF0YSArPSAnPC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC9zZWN0aW9uPic7XHJcblx0XHJcblx0XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxzZWN0aW9uIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3IGFydGljbGUtcHJldmlldy0tc21hbGwgdG9waWNzXCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzNdLmxpbmthYmxlVGV4dCA/ICc8aDY+Jm5ic3A7PC9oNj4nIDogJyc7XHJcblxyXG5cdGFydGljbGVEYXRhICs9IGRhdGEuYXJ0aWNsZXNbM10ubGlzdGFibGVUaXRsZSA/ICc8aDEgY2xhc3M9XCJhcnRpY2xlLXByZXZpZXdfcmhlYWRsaW5lXCI+PGEgaHJlZj1cIicgKyBsaW5rYWJsZVVybDMgKyAnXCIgY2xhc3M9XCJjbGljay11dGFnXCIgZGF0YS1pbmZvPVxcJ3tcImV2ZW50X25hbWVcIjpcImFydGljbGVfY2xpY2tfdGhyb3VnaFwiLFwicGFnZV9uYW1lXCI6XCInICsgYW5hbHl0aWNzX2RhdGFbXCJwYWdlX25hbWVcIl0gKyAnXCIsXCJjbGlja190aHJvdWdoX2Rlc3RpbmF0aW9uXCI6XCInICsgZGF0YS5hcnRpY2xlc1szXS5saXN0YWJsZVRpdGxlLnJlcGxhY2UoLycvZywgXCJcIikucmVwbGFjZSgvXCIvZywgJycpICsgJ1wiLFwiZ2FfZXZlbnRDYXRlZ29yeVwiOlwiTXkgVmlldyBQYWdlIEFydGljbGVzXCIsXCJnYV9ldmVudEFjdGlvblwiOlwiJyArIGFuYWx5dGljc19kYXRhW1wicHVibGljYXRpb25cIl0gKyAnXCIsXCJnYV9ldmVudExhYmVsXCI6XCInICsgZGF0YS5hcnRpY2xlc1szXS5saXN0YWJsZVRpdGxlLnJlcGxhY2UoLycvZywgXCJcIikucmVwbGFjZSgvXCIvZywgJycpICsgJ1wiLFwicHVibGljYXRpb25fY2xpY2tcIjpcIicgKyBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdICsgJ1wifVxcJz4nICsgZGF0YS5hcnRpY2xlc1szXS5saXN0YWJsZVRpdGxlICsgJzwvYT48L2gxPicgOiAnJztcclxuXHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1s0XS5saXN0YWJsZVRpdGxlID8gJzxoMSBjbGFzcz1cImFydGljbGUtcHJldmlld19yaGVhZGxpbmVcIj48YSBocmVmPVwiJyArIGxpbmthYmxlVXJsNCArICdcIiBjbGFzcz1cImNsaWNrLXV0YWdcIiBkYXRhLWluZm89XFwne1wiZXZlbnRfbmFtZVwiOlwiYXJ0aWNsZV9jbGlja190aHJvdWdoXCIsXCJwYWdlX25hbWVcIjpcIicgKyBhbmFseXRpY3NfZGF0YVtcInBhZ2VfbmFtZVwiXSArICdcIixcImNsaWNrX3Rocm91Z2hfZGVzdGluYXRpb25cIjpcIicgKyBkYXRhLmFydGljbGVzWzRdLmxpc3RhYmxlVGl0bGUucmVwbGFjZSgvJy9nLCBcIlwiKS5yZXBsYWNlKC9cIi9nLCAnJykgKyAnXCIsXCJnYV9ldmVudENhdGVnb3J5XCI6XCJNeSBWaWV3IFBhZ2UgQXJ0aWNsZXNcIixcImdhX2V2ZW50QWN0aW9uXCI6XCInICsgYW5hbHl0aWNzX2RhdGFbXCJwdWJsaWNhdGlvblwiXSArICdcIixcImdhX2V2ZW50TGFiZWxcIjpcIicgKyBkYXRhLmFydGljbGVzWzRdLmxpc3RhYmxlVGl0bGUucmVwbGFjZSgvJy9nLCBcIlwiKS5yZXBsYWNlKC9cIi9nLCAnJykgKyAnXCIsXCJwdWJsaWNhdGlvbl9jbGlja1wiOlwiJyArIGFuYWx5dGljc19kYXRhW1wicHVibGljYXRpb25cIl0gKyAnXCJ9XFwnPicgKyBkYXRhLmFydGljbGVzWzRdLmxpc3RhYmxlVGl0bGUgKyAnPC9hPjwvaDE+JyA6ICcnO1xyXG5cclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzVdLmxpc3RhYmxlVGl0bGUgPyAnPGgxIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X3JoZWFkbGluZVwiPjxhIGhyZWY9XCInICsgbGlua2FibGVVcmw1ICsgJ1wiIGNsYXNzPVwiY2xpY2stdXRhZ1wiIGRhdGEtaW5mbz1cXCd7XCJldmVudF9uYW1lXCI6XCJhcnRpY2xlX2NsaWNrX3Rocm91Z2hcIixcInBhZ2VfbmFtZVwiOlwiJyArIGFuYWx5dGljc19kYXRhW1wicGFnZV9uYW1lXCJdICsgJ1wiLFwiY2xpY2tfdGhyb3VnaF9kZXN0aW5hdGlvblwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbNV0ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcImdhX2V2ZW50Q2F0ZWdvcnlcIjpcIk15IFZpZXcgUGFnZSBBcnRpY2xlc1wiLFwiZ2FfZXZlbnRBY3Rpb25cIjpcIicgKyBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdICsgJ1wiLFwiZ2FfZXZlbnRMYWJlbFwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbNV0ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcInB1YmxpY2F0aW9uX2NsaWNrXCI6XCInICsgYW5hbHl0aWNzX2RhdGFbXCJwdWJsaWNhdGlvblwiXSArICdcIn1cXCc+JyArIGRhdGEuYXJ0aWNsZXNbNV0ubGlzdGFibGVUaXRsZSArICc8L2E+PC9oMT4nIDogJyc7XHJcblxyXG5cdGFydGljbGVEYXRhICs9ICc8L3NlY3Rpb24+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC9kaXY+JztcclxuXHRcclxuXHRcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImxhdGVzdC1uZXdzX19hcnRpY2xlc1wiPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxzZWN0aW9uIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3IGFydGljbGUtc21hbGwtcHJldmlldyBtb2J2aWV3XCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFydGljbGUtbWV0YWRhdGFcIj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYWN0aW9uLWZsYWcgYXJ0aWNsZS1wcmV2aWV3X19ib29rbWFya2VyIHBvcC1vdXRfX3RyaWdnZXIganMtYm9va21hcmstYXJ0aWNsZVwiIGRhdGEtcG9wLW91dC10eXBlPVwic2lnbi1pblwiIGRhdGEtcG9wLW91dC1hbGlnbj1cInJpZ2h0XCIgZGF0YS1ib29rbWFyay1pZD1cIicgKyBkYXRhLmFydGljbGVzWzZdLmlkICsgJ1wiIGRhdGEtYW5hbHl0aWNzPVwie1wiYm9va21hcmtcIjogXCInICsgYm9va21hcmtJbmZvNiArICdcIiwgXCJib29rbWFya190aXRsZVwiOiBcIicgKyBkYXRhLmFydGljbGVzWzZdLmxpc3RhYmxlVGl0bGUgKyAnXCIsIFwiYm9va21hcmtfcHVibGljYXRpb25cIjogXCJDb21tb2RpdGllc1wifVwiIGRhdGEtaXMtYm9va21hcmtlZD1cIicgKyBkYXRhLmFydGljbGVzWzZdLmlzQXJ0aWNsZUJvb2ttYXJrZWQgKyAnXCI+PHNwYW4gY2xhc3M9XCJhY3Rpb24tZmxhZ19fbGFiZWwganMtYm9va21hcmstbGFiZWxcIiBkYXRhLWxhYmVsLWJvb2ttYXJrPVwiJyArIGRhdGEuYXJ0aWNsZXNbNl0uYm9va21hcmtUZXh0ICsgJ1wiIGRhdGEtbGFiZWwtYm9va21hcmtlZD1cIicgKyBkYXRhLmFydGljbGVzWzZdLmJvb2ttYXJrZWRUZXh0ICsgJ1wiPicgKyBib29rbWFya0luZm82ICsgJzwvc3Bhbj48c3ZnIGNsYXNzPVwiYWN0aW9uLWZsYWdfX2ljb24gYWN0aW9uLWZsYWdfX2ljb24tLWJvb2ttYXJrIGFydGljbGUtYm9va21hcmsgYXJ0aWNsZS1ib29rbWFya19fYm9va21hcmtlZCAgJytmYm9va21hcmtJY29uNisnXCI+PHVzZSB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bGluazpocmVmPVwiL2Rpc3QvaW1nL3N2Zy1zcHJpdGUuc3ZnI2Jvb2ttYXJrZWRcIj48L3VzZT48L3N2Zz48c3ZnIGNsYXNzPVwiYWN0aW9uLWZsYWdfX2ljb24gYWN0aW9uLWZsYWdfX2ljb24tLWJvb2ttYXJrIGFydGljbGUtYm9va21hcmsgJytzYm9va21hcmtJY29uNisnXCI+PHVzZSB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bGluazpocmVmPVwiL2Rpc3QvaW1nL3N2Zy1zcHJpdGUuc3ZnI2Jvb2ttYXJrXCI+PC91c2U+PC9zdmc+PC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPHVsPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1s2XS5saXN0YWJsZURhdGUgPyAnPGxpPjx0aW1lIGNsYXNzPVwiYXJ0aWNsZS1tZXRhZGF0YV9fZGF0ZVwiPicgKyBkYXRhLmFydGljbGVzWzZdLmxpc3RhYmxlRGF0ZSArICc8L3RpbWU+PC9saT4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1s2XS5saW5rYWJsZVRleHQgPyAnPGxpPjxoNj4nICsgZGF0YS5hcnRpY2xlc1s2XS5saW5rYWJsZVRleHQgKyAnPC9oNj48L2xpPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC91bD4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19pbm5lci13cmFwcGVyIHNob3dhcnRpY2xlXCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzZdLmxpc3RhYmxlVGl0bGUgPyAnPGgxIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19oZWFkbGluZVwiPjxhIGhyZWY9XCInICsgbGlua2FibGVVcmw2ICsgJ1wiIGNsYXNzPVwiY2xpY2stdXRhZ1wiIGRhdGEtaW5mbz1cXCd7XCJldmVudF9uYW1lXCI6XCJhcnRpY2xlX2NsaWNrX3Rocm91Z2hcIixcInBhZ2VfbmFtZVwiOlwiJyArIGFuYWx5dGljc19kYXRhW1wicGFnZV9uYW1lXCJdICsgJ1wiLFwiY2xpY2tfdGhyb3VnaF9kZXN0aW5hdGlvblwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbNl0ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcImdhX2V2ZW50Q2F0ZWdvcnlcIjpcIk15IFZpZXcgUGFnZSBBcnRpY2xlc1wiLFwiZ2FfZXZlbnRBY3Rpb25cIjpcIicgKyBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdICsgJ1wiLFwiZ2FfZXZlbnRMYWJlbFwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbNl0ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcInB1YmxpY2F0aW9uX2NsaWNrXCI6XCInICsgYW5hbHl0aWNzX2RhdGFbXCJwdWJsaWNhdGlvblwiXSArICdcIn1cXCc+JyArIGRhdGEuYXJ0aWNsZXNbNl0ubGlzdGFibGVUaXRsZSArICc8L2E+PC9oMT4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzwvZGl2Pic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxkaXYgY2xhc3M9XCJhcnRpY2xlLXByZXZpZXdfX3RhZ3MgYmFyLXNlcGFyYXRlZC1saW5rLWxpc3RcIj4nO1xyXG5cdGlmIChkYXRhLmFydGljbGVzWzZdLmxpc3RhYmxlVG9waWNzKSB7XHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEuYXJ0aWNsZXNbNl0ubGlzdGFibGVUb3BpY3MubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGdldExpbms2ID0gZGF0YS5hcnRpY2xlc1s2XS5saXN0YWJsZVRvcGljc1tpXS5saW5rYWJsZVVybCA/IGRhdGEuYXJ0aWNsZXNbNl0ubGlzdGFibGVUb3BpY3NbaV0ubGlua2FibGVVcmwgOiAnIyc7XHJcblx0XHRcdGFydGljbGVEYXRhICs9ICc8YSBocmVmPVwiJyArIGdldExpbms2ICsgJ1wiPicgKyBkYXRhLmFydGljbGVzWzZdLmxpc3RhYmxlVG9waWNzW2ldLmxpbmthYmxlVGV4dCArICc8L2E+JztcclxuXHRcdH1cclxuXHR9XHJcblx0YXJ0aWNsZURhdGEgKz0gJzwvZGl2Pic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzwvc2VjdGlvbj4nO1xyXG5cdFxyXG5cdFxyXG5cdGFydGljbGVEYXRhICs9ICc8c2VjdGlvbiBjbGFzcz1cImFydGljbGUtcHJldmlldyBhcnRpY2xlLXNtYWxsLXByZXZpZXcgbW9idmlld1wiPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxkaXYgY2xhc3M9XCJhcnRpY2xlLW1ldGFkYXRhXCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFjdGlvbi1mbGFnIGFydGljbGUtcHJldmlld19fYm9va21hcmtlciBwb3Atb3V0X190cmlnZ2VyIGpzLWJvb2ttYXJrLWFydGljbGVcIiBkYXRhLXBvcC1vdXQtdHlwZT1cInNpZ24taW5cIiBkYXRhLXBvcC1vdXQtYWxpZ249XCJyaWdodFwiIGRhdGEtYm9va21hcmstaWQ9XCInICsgZGF0YS5hcnRpY2xlc1s3XS5pZCArICdcIiBkYXRhLWFuYWx5dGljcz1cIntcImJvb2ttYXJrXCI6IFwiJyArIGJvb2ttYXJrSW5mbzcgKyAnXCIsIFwiYm9va21hcmtfdGl0bGVcIjogXCInICsgZGF0YS5hcnRpY2xlc1s3XS5saXN0YWJsZVRpdGxlICsgJ1wiLCBcImJvb2ttYXJrX3B1YmxpY2F0aW9uXCI6IFwiQ29tbW9kaXRpZXNcIn1cIiBkYXRhLWlzLWJvb2ttYXJrZWQ9XCInICsgZGF0YS5hcnRpY2xlc1s3XS5pc0FydGljbGVCb29rbWFya2VkICsgJ1wiPjxzcGFuIGNsYXNzPVwiYWN0aW9uLWZsYWdfX2xhYmVsIGpzLWJvb2ttYXJrLWxhYmVsXCIgZGF0YS1sYWJlbC1ib29rbWFyaz1cIicgKyBkYXRhLmFydGljbGVzWzddLmJvb2ttYXJrVGV4dCArICdcIiBkYXRhLWxhYmVsLWJvb2ttYXJrZWQ9XCInICsgZGF0YS5hcnRpY2xlc1s3XS5ib29rbWFya2VkVGV4dCArICdcIj4nICsgYm9va21hcmtJbmZvNyArICc8L3NwYW4+PHN2ZyBjbGFzcz1cImFjdGlvbi1mbGFnX19pY29uIGFjdGlvbi1mbGFnX19pY29uLS1ib29rbWFyayBhcnRpY2xlLWJvb2ttYXJrIGFydGljbGUtYm9va21hcmtfX2Jvb2ttYXJrZWQgJytmYm9va21hcmtJY29uNysnXCI+PHVzZSB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bGluazpocmVmPVwiL2Rpc3QvaW1nL3N2Zy1zcHJpdGUuc3ZnI2Jvb2ttYXJrZWRcIj48L3VzZT48L3N2Zz48c3ZnIGNsYXNzPVwiYWN0aW9uLWZsYWdfX2ljb24gYWN0aW9uLWZsYWdfX2ljb24tLWJvb2ttYXJrIGFydGljbGUtYm9va21hcmsgJytzYm9va21hcmtJY29uNysnXCI+PHVzZSB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bGluazpocmVmPVwiL2Rpc3QvaW1nL3N2Zy1zcHJpdGUuc3ZnI2Jvb2ttYXJrXCI+PC91c2U+PC9zdmc+PC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPHVsPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1s3XS5saXN0YWJsZURhdGUgPyAnPGxpPjx0aW1lIGNsYXNzPVwiYXJ0aWNsZS1tZXRhZGF0YV9fZGF0ZVwiPicgKyBkYXRhLmFydGljbGVzWzddLmxpc3RhYmxlRGF0ZSArICc8L3RpbWU+PC9saT4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1s3XS5saW5rYWJsZVRleHQgPyAnPGxpPjxoNj4nICsgZGF0YS5hcnRpY2xlc1s3XS5saW5rYWJsZVRleHQgKyAnPC9oNj48L2xpPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC91bD4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19pbm5lci13cmFwcGVyIHNob3dhcnRpY2xlXCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzddLmxpc3RhYmxlVGl0bGUgPyAnPGgxIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19oZWFkbGluZVwiPjxhIGhyZWY9XCInICsgbGlua2FibGVVcmw3ICsgJ1wiIGNsYXNzPVwiY2xpY2stdXRhZ1wiIGRhdGEtaW5mbz1cXCd7XCJldmVudF9uYW1lXCI6XCJhcnRpY2xlX2NsaWNrX3Rocm91Z2hcIixcInBhZ2VfbmFtZVwiOlwiJyArIGFuYWx5dGljc19kYXRhW1wicGFnZV9uYW1lXCJdICsgJ1wiLFwiY2xpY2tfdGhyb3VnaF9kZXN0aW5hdGlvblwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbN10ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcImdhX2V2ZW50Q2F0ZWdvcnlcIjpcIk15IFZpZXcgUGFnZSBBcnRpY2xlc1wiLFwiZ2FfZXZlbnRBY3Rpb25cIjpcIicgKyBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdICsgJ1wiLFwiZ2FfZXZlbnRMYWJlbFwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbN10ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcInB1YmxpY2F0aW9uX2NsaWNrXCI6XCInICsgYW5hbHl0aWNzX2RhdGFbXCJwdWJsaWNhdGlvblwiXSArICdcIn1cXCc+JyArIGRhdGEuYXJ0aWNsZXNbN10ubGlzdGFibGVUaXRsZSArICc8L2E+PC9oMT4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzwvZGl2Pic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxkaXYgY2xhc3M9XCJhcnRpY2xlLXByZXZpZXdfX3RhZ3MgYmFyLXNlcGFyYXRlZC1saW5rLWxpc3RcIj4nO1xyXG5cdGlmIChkYXRhLmFydGljbGVzWzddLmxpc3RhYmxlVG9waWNzKSB7XHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEuYXJ0aWNsZXNbN10ubGlzdGFibGVUb3BpY3MubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGdldExpbms3ID0gZGF0YS5hcnRpY2xlc1s3XS5saXN0YWJsZVRvcGljc1tpXS5saW5rYWJsZVVybCA/IGRhdGEuYXJ0aWNsZXNbN10ubGlzdGFibGVUb3BpY3NbaV0ubGlua2FibGVVcmwgOiAnIyc7XHJcblx0XHRcdGFydGljbGVEYXRhICs9ICc8YSBocmVmPVwiJyArIGdldExpbms3ICsgJ1wiPicgKyBkYXRhLmFydGljbGVzWzddLmxpc3RhYmxlVG9waWNzW2ldLmxpbmthYmxlVGV4dCArICc8L2E+JztcclxuXHRcdH1cclxuXHR9XHJcblx0YXJ0aWNsZURhdGEgKz0gJzwvZGl2Pic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzwvc2VjdGlvbj4nO1xyXG5cdFxyXG5cdFxyXG5cdGFydGljbGVEYXRhICs9ICc8c2VjdGlvbiBjbGFzcz1cImFydGljbGUtcHJldmlldyBhcnRpY2xlLXNtYWxsLXByZXZpZXcgbW9idmlld1wiPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxkaXYgY2xhc3M9XCJhcnRpY2xlLW1ldGFkYXRhXCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFjdGlvbi1mbGFnIGFydGljbGUtcHJldmlld19fYm9va21hcmtlciBwb3Atb3V0X190cmlnZ2VyIGpzLWJvb2ttYXJrLWFydGljbGVcIiBkYXRhLXBvcC1vdXQtdHlwZT1cInNpZ24taW5cIiBkYXRhLXBvcC1vdXQtYWxpZ249XCJyaWdodFwiIGRhdGEtYm9va21hcmstaWQ9XCInICsgZGF0YS5hcnRpY2xlc1s4XS5pZCArICdcIiBkYXRhLWFuYWx5dGljcz1cIntcImJvb2ttYXJrXCI6IFwiJyArIGJvb2ttYXJrSW5mbzggKyAnXCIsIFwiYm9va21hcmtfdGl0bGVcIjogXCInICsgZGF0YS5hcnRpY2xlc1s4XS5saXN0YWJsZVRpdGxlICsgJ1wiLCBcImJvb2ttYXJrX3B1YmxpY2F0aW9uXCI6IFwiQ29tbW9kaXRpZXNcIn1cIiBkYXRhLWlzLWJvb2ttYXJrZWQ9XCInICsgZGF0YS5hcnRpY2xlc1s4XS5pc0FydGljbGVCb29rbWFya2VkICsgJ1wiPjxzcGFuIGNsYXNzPVwiYWN0aW9uLWZsYWdfX2xhYmVsIGpzLWJvb2ttYXJrLWxhYmVsXCIgZGF0YS1sYWJlbC1ib29rbWFyaz1cIicgKyBkYXRhLmFydGljbGVzWzhdLmJvb2ttYXJrVGV4dCArICdcIiBkYXRhLWxhYmVsLWJvb2ttYXJrZWQ9XCInICsgZGF0YS5hcnRpY2xlc1s4XS5ib29rbWFya2VkVGV4dCArICdcIj4nICsgYm9va21hcmtJbmZvOCArICc8L3NwYW4+PHN2ZyBjbGFzcz1cImFjdGlvbi1mbGFnX19pY29uIGFjdGlvbi1mbGFnX19pY29uLS1ib29rbWFyayBhcnRpY2xlLWJvb2ttYXJrIGFydGljbGUtYm9va21hcmtfX2Jvb2ttYXJrZWQgJytmYm9va21hcmtJY29uOCsnXCI+PHVzZSB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bGluazpocmVmPVwiL2Rpc3QvaW1nL3N2Zy1zcHJpdGUuc3ZnI2Jvb2ttYXJrZWRcIj48L3VzZT48L3N2Zz48c3ZnIGNsYXNzPVwiYWN0aW9uLWZsYWdfX2ljb24gYWN0aW9uLWZsYWdfX2ljb24tLWJvb2ttYXJrIGFydGljbGUtYm9va21hcmsgJytzYm9va21hcmtJY29uOCsnXCI+PHVzZSB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bGluazpocmVmPVwiL2Rpc3QvaW1nL3N2Zy1zcHJpdGUuc3ZnI2Jvb2ttYXJrXCI+PC91c2U+PC9zdmc+PC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPHVsPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1s4XS5saXN0YWJsZURhdGUgPyAnPGxpPjx0aW1lIGNsYXNzPVwiYXJ0aWNsZS1tZXRhZGF0YV9fZGF0ZVwiPicgKyBkYXRhLmFydGljbGVzWzhdLmxpc3RhYmxlRGF0ZSArICc8L3RpbWU+PC9saT4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1s4XS5saW5rYWJsZVRleHQgPyAnPGxpPjxoNj4nICsgZGF0YS5hcnRpY2xlc1s4XS5saW5rYWJsZVRleHQgKyAnPC9oNj48L2xpPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC91bD4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19pbm5lci13cmFwcGVyIHNob3dhcnRpY2xlXCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzhdLmxpc3RhYmxlVGl0bGUgPyAnPGgxIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19oZWFkbGluZVwiPjxhIGhyZWY9XCInICsgbGlua2FibGVVcmw4ICsgJ1wiIGNsYXNzPVwiY2xpY2stdXRhZ1wiIGRhdGEtaW5mbz1cXCd7XCJldmVudF9uYW1lXCI6XCJhcnRpY2xlX2NsaWNrX3Rocm91Z2hcIixcInBhZ2VfbmFtZVwiOlwiJyArIGFuYWx5dGljc19kYXRhW1wicGFnZV9uYW1lXCJdICsgJ1wiLFwiY2xpY2tfdGhyb3VnaF9kZXN0aW5hdGlvblwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbOF0ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcImdhX2V2ZW50Q2F0ZWdvcnlcIjpcIk15IFZpZXcgUGFnZSBBcnRpY2xlc1wiLFwiZ2FfZXZlbnRBY3Rpb25cIjpcIicgKyBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdICsgJ1wiLFwiZ2FfZXZlbnRMYWJlbFwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbOF0ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcInB1YmxpY2F0aW9uX2NsaWNrXCI6XCInICsgYW5hbHl0aWNzX2RhdGFbXCJwdWJsaWNhdGlvblwiXSArICdcIn1cXCc+JyArIGRhdGEuYXJ0aWNsZXNbOF0ubGlzdGFibGVUaXRsZSArICc8L2E+PC9oMT4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1s4XS5saXN0YWJsZUF1dGhvckJ5TGluZSA/ICc8c3BhbiBjbGFzcz1cImFydGljbGUtcHJldmlld19fYnlsaW5lXCI+JyArIGRhdGEuYXJ0aWNsZXNbOF0ubGlzdGFibGVBdXRob3JCeUxpbmUgKyAnPC9zcGFuPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFydGljbGUtcHJldmlld19fdGFncyBiYXItc2VwYXJhdGVkLWxpbmstbGlzdFwiPic7XHJcblx0aWYgKGRhdGEuYXJ0aWNsZXNbOF0ubGlzdGFibGVUb3BpY3MpIHtcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5hcnRpY2xlc1s4XS5saXN0YWJsZVRvcGljcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgZ2V0TGluazggPSBkYXRhLmFydGljbGVzWzhdLmxpc3RhYmxlVG9waWNzW2ldLmxpbmthYmxlVXJsID8gZGF0YS5hcnRpY2xlc1s4XS5saXN0YWJsZVRvcGljc1tpXS5saW5rYWJsZVVybCA6ICcjJztcclxuXHRcdFx0YXJ0aWNsZURhdGEgKz0gJzxhIGhyZWY9XCInICsgZ2V0TGluazggKyAnXCI+JyArIGRhdGEuYXJ0aWNsZXNbOF0ubGlzdGFibGVUb3BpY3NbaV0ubGlua2FibGVUZXh0ICsgJzwvYT4nO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRhcnRpY2xlRGF0YSArPSAnPC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC9zZWN0aW9uPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzwvZGl2Pic7XHJcblx0XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgY2xhc3M9XCJnZXRQYWdpbmF0aW9uTnVtXCIgZGF0YS1wYWdlU2l6ZT1cIicrZGF0YS5sb2FkTW9yZS5wYWdlU2l6ZSsnXCIgZGF0YS1wYWdlTm89XCInK2RhdGEubG9hZE1vcmUucGFnZU5vKydcIiBkYXRhLWxvYWR1cmw9XCInK2RhdGEubG9hZE1vcmUubG9hZE1vcmVMaW5rVXJsKydcIiBkYXRhLXRheG9ub215SWRzPVwiJytkYXRhLmxvYWRNb3JlLnRheG9ub215SWRzKydcIiAvPic7XHJcblx0XHJcblx0cmV0dXJuIGFydGljbGVEYXRhO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsb2FkTGF5b3V0VHdvRGF0YShkYXRhLCBpZHgpIHtcclxuXHR2YXIgZWRpdE15VmlldyA9IGxvYWRQcmVmZXJhbmNlSWQuRWRpdE15Vmlld0J1dHRvbkxhYmxlVGV4dCA/ICc8YSBjbGFzcz1cImVkaXRWaWV3IG1vYnZpZXdcIiBocmVmPVwiJyArIGxvYWRQcmVmZXJhbmNlSWQuTXlWaWV3U2V0dGluZ3NQYWdlTGluayArICdcIj4nICsgbG9hZFByZWZlcmFuY2VJZC5FZGl0TXlWaWV3QnV0dG9uTGFibGVUZXh0ICsgJzwvYT4nIDogJyc7XHJcblx0XHJcblx0dmFyIGxvYWREYXRhID0gbG9hZFByZWZlcmFuY2VJZFtcIlNlY3Rpb25zXCJdW2lkeF1bXCJDaGFubmVsTmFtZVwiXSA/ICc8ZGl2IGNsYXNzPVwibGF0ZXN0U3ViamVjdCBjbGVhcmZpeFwiIGlkPVwiJyArIGxvYWRQcmVmZXJhbmNlSWRbXCJTZWN0aW9uc1wiXVtpZHhdLkNoYW5uZWxJZCArICdcIj48c3BhbiBjbGFzcz1cInN1YlwiPicgKyBkYXRhLmxvYWRNb3JlLmxhdGVzdEZyb21UZXh0ICsgJyAnICsgbG9hZFByZWZlcmFuY2VJZFtcIlNlY3Rpb25zXCJdW2lkeF1bXCJDaGFubmVsTmFtZVwiXSArICc8L3NwYW4+JytlZGl0TXlWaWV3Kyc8L2Rpdj4nIDogJycsXHJcblx0ICAgIGxvYWRtb3JlTGluayA9IGRhdGEubG9hZE1vcmUgJiYgZGF0YS5sb2FkTW9yZS5kaXNwbGF5TG9hZE1vcmUgJiYgZGF0YS5sb2FkTW9yZS5kaXNwbGF5TG9hZE1vcmUubG9hZE1vcmVMaW5rVXJsID8gZGF0YS5sb2FkTW9yZS5kaXNwbGF5TG9hZE1vcmUubG9hZE1vcmVMaW5rVXJsIDogJyMnO1xyXG5cdGxvYWREYXRhICs9ICc8ZGl2IGNsYXNzPVwiZWFjaHN0b3J5TXBhblwiPic7XHJcblx0bG9hZERhdGEgKz0gbG9hZFByZWZlcmFuY2VJZFtcIlNlY3Rpb25zXCJdW2lkeF0uQ2hhbm5lbElkID8gJzxkaXYgY2xhc3M9XCJlYWNoc3RvcnkgbGF5b3V0MlwiPicgOiAnJztcclxuXHRsb2FkRGF0YSArPSBjcmVhdGVMYXlvdXRJbm5lcjIoZGF0YSk7XHJcblx0bG9hZERhdGEgKz0gJzwvZGl2Pic7XHJcblxyXG5cdGxvYWREYXRhICs9IGRhdGEubG9hZE1vcmUgJiYgZGF0YS5sb2FkTW9yZS5kaXNwbGF5TG9hZE1vcmUgPyAnPGRpdiBjbGFzcz1cImxvYWRtb3JlXCI+PHNwYW4gaHJlZj1cIicgKyBsb2FkbW9yZUxpbmsgKyAnXCI+JyArIGRhdGEubG9hZE1vcmUubG9hZE1vcmVMaW5rVGV4dCArICcgJyArIGxvYWRQcmVmZXJhbmNlSWRbXCJTZWN0aW9uc1wiXVtpZHhdW1wiQ2hhbm5lbE5hbWVcIl0gKyAnPC9zcGFuPjwvZGl2PicgOiAnJztcclxuXHJcblx0bG9hZERhdGEgKz0gJzwvZGl2Pic7XHJcblx0XHJcblx0Ly9sb2FkRGF0YSArPSAnPGRpdiBjbGFzcz1cImdvb2dsZUFkZFwiPjxpbWcgc3JjPVwiL2Rpc3QvaW1nL2dvb2dsZS1hZGQuZ2lmXCI+PC9kaXY+JztcclxuXHRcclxuXHRyZXR1cm4gbG9hZERhdGE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUxheW91dElubmVyMihkYXRhKSB7XHJcblx0dmFyIGxpbmthYmxlVXJsMCA9IGRhdGEuYXJ0aWNsZXNbMF0ubGlua2FibGVVcmwgPyBkYXRhLmFydGljbGVzWzBdLmxpbmthYmxlVXJsIDogJyMnLFxyXG5cdCAgICBsaW5rYWJsZVVybDEgPSBkYXRhLmFydGljbGVzWzFdLmxpbmthYmxlVXJsID8gZGF0YS5hcnRpY2xlc1sxXS5saW5rYWJsZVVybCA6ICcjJyxcclxuXHQgICAgbGlua2FibGVVcmwyID0gZGF0YS5hcnRpY2xlc1syXS5saW5rYWJsZVVybCA/IGRhdGEuYXJ0aWNsZXNbMl0ubGlua2FibGVVcmwgOiAnIycsXHJcblx0ICAgIGxpbmthYmxlVXJsMyA9IGRhdGEuYXJ0aWNsZXNbM10ubGlua2FibGVVcmwgPyBkYXRhLmFydGljbGVzWzNdLmxpbmthYmxlVXJsIDogJyMnLFxyXG5cdCAgICBsaW5rYWJsZVVybDQgPSBkYXRhLmFydGljbGVzWzRdLmxpbmthYmxlVXJsID8gZGF0YS5hcnRpY2xlc1s0XS5saW5rYWJsZVVybCA6ICcjJyxcclxuXHQgICAgbGlua2FibGVVcmw1ID0gZGF0YS5hcnRpY2xlc1s1XS5saW5rYWJsZVVybCA/IGRhdGEuYXJ0aWNsZXNbNV0ubGlua2FibGVVcmwgOiAnIycsXHJcblx0ICAgIGxpbmthYmxlVXJsNiA9IGRhdGEuYXJ0aWNsZXNbNl0ubGlua2FibGVVcmwgPyBkYXRhLmFydGljbGVzWzZdLmxpbmthYmxlVXJsIDogJyMnLFxyXG5cdCAgICBsaW5rYWJsZVVybDcgPSBkYXRhLmFydGljbGVzWzddLmxpbmthYmxlVXJsID8gZGF0YS5hcnRpY2xlc1s3XS5saW5rYWJsZVVybCA6ICcjJyxcclxuXHQgICAgbGlua2FibGVVcmw4ID0gZGF0YS5hcnRpY2xlc1s4XS5saW5rYWJsZVVybCA/IGRhdGEuYXJ0aWNsZXNbOF0ubGlua2FibGVVcmwgOiAnIycsXHJcblx0ICAgIGJvb2ttYXJrSW5mbzAgPSBkYXRhLmFydGljbGVzWzBdLmlzQXJ0aWNsZUJvb2ttYXJrZWQgPyBkYXRhLmFydGljbGVzWzBdLmJvb2ttYXJrZWRUZXh0IDogZGF0YS5hcnRpY2xlc1swXS5ib29rbWFya1RleHQsXHJcblx0XHRib29rbWFya0luZm8xID0gZGF0YS5hcnRpY2xlc1sxXS5pc0FydGljbGVCb29rbWFya2VkID8gZGF0YS5hcnRpY2xlc1sxXS5ib29rbWFya2VkVGV4dCA6IGRhdGEuYXJ0aWNsZXNbMV0uYm9va21hcmtUZXh0LFxyXG5cdFx0Ym9va21hcmtJbmZvNSA9IGRhdGEuYXJ0aWNsZXNbNV0uaXNBcnRpY2xlQm9va21hcmtlZCA/IGRhdGEuYXJ0aWNsZXNbNV0uYm9va21hcmtlZFRleHQgOiBkYXRhLmFydGljbGVzWzVdLmJvb2ttYXJrVGV4dCxcclxuXHRcdGJvb2ttYXJrSW5mbzYgPSBkYXRhLmFydGljbGVzWzZdLmlzQXJ0aWNsZUJvb2ttYXJrZWQgPyBkYXRhLmFydGljbGVzWzZdLmJvb2ttYXJrZWRUZXh0IDogZGF0YS5hcnRpY2xlc1s2XS5ib29rbWFya1RleHQsXHJcblx0XHRib29rbWFya0luZm83ID0gZGF0YS5hcnRpY2xlc1s3XS5pc0FydGljbGVCb29rbWFya2VkID8gZGF0YS5hcnRpY2xlc1s3XS5ib29rbWFya2VkVGV4dCA6IGRhdGEuYXJ0aWNsZXNbN10uYm9va21hcmtUZXh0LFxyXG5cdFx0Ym9va21hcmtJbmZvOCA9IGRhdGEuYXJ0aWNsZXNbOF0uaXNBcnRpY2xlQm9va21hcmtlZCA/IGRhdGEuYXJ0aWNsZXNbOF0uYm9va21hcmtlZFRleHQgOiBkYXRhLmFydGljbGVzWzhdLmJvb2ttYXJrVGV4dCxcclxuXHRcdGZib29rbWFya0ljb24wID0gZGF0YS5hcnRpY2xlc1swXS5pc0FydGljbGVCb29rbWFya2VkID8gJ2lzLXZpc2libGUnIDogJycsXHJcblx0XHRzYm9va21hcmtJY29uMCA9IGRhdGEuYXJ0aWNsZXNbMF0uaXNBcnRpY2xlQm9va21hcmtlZCA/ICcnIDogJ2lzLXZpc2libGUnLFxyXG5cdFx0ZmJvb2ttYXJrSWNvbjEgPSBkYXRhLmFydGljbGVzWzFdLmlzQXJ0aWNsZUJvb2ttYXJrZWQgPyAnaXMtdmlzaWJsZScgOiAnJyxcclxuXHRcdHNib29rbWFya0ljb24xID0gZGF0YS5hcnRpY2xlc1sxXS5pc0FydGljbGVCb29rbWFya2VkID8gJycgOiAnaXMtdmlzaWJsZScsXHJcblx0XHRmYm9va21hcmtJY29uNSA9IGRhdGEuYXJ0aWNsZXNbNV0uaXNBcnRpY2xlQm9va21hcmtlZCA/ICdpcy12aXNpYmxlJyA6ICcnLFxyXG5cdFx0c2Jvb2ttYXJrSWNvbjUgPSBkYXRhLmFydGljbGVzWzVdLmlzQXJ0aWNsZUJvb2ttYXJrZWQgPyAnJyA6ICdpcy12aXNpYmxlJyxcclxuXHRcdGZib29rbWFya0ljb242ID0gZGF0YS5hcnRpY2xlc1s2XS5pc0FydGljbGVCb29rbWFya2VkID8gJ2lzLXZpc2libGUnIDogJycsXHJcblx0XHRzYm9va21hcmtJY29uNiA9IGRhdGEuYXJ0aWNsZXNbNl0uaXNBcnRpY2xlQm9va21hcmtlZCA/ICcnIDogJ2lzLXZpc2libGUnLFxyXG5cdFx0ZmJvb2ttYXJrSWNvbjcgPSBkYXRhLmFydGljbGVzWzddLmlzQXJ0aWNsZUJvb2ttYXJrZWQgPyAnaXMtdmlzaWJsZScgOiAnJyxcclxuXHRcdHNib29rbWFya0ljb243ID0gZGF0YS5hcnRpY2xlc1s3XS5pc0FydGljbGVCb29rbWFya2VkID8gJycgOiAnaXMtdmlzaWJsZScsXHJcblx0XHRmYm9va21hcmtJY29uOCA9IGRhdGEuYXJ0aWNsZXNbOF0uaXNBcnRpY2xlQm9va21hcmtlZCA/ICdpcy12aXNpYmxlJyA6ICcnLFxyXG5cdFx0c2Jvb2ttYXJrSWNvbjggPSBkYXRhLmFydGljbGVzWzhdLmlzQXJ0aWNsZUJvb2ttYXJrZWQgPyAnJyA6ICdpcy12aXNpYmxlJztcclxuXHJcblx0dmFyIGFydGljbGVEYXRhID0gJzxkaXYgY2xhc3M9XCJsYXRlc3QtbmV3c19fYXJ0aWNsZXNcIj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8c2VjdGlvbiBjbGFzcz1cImFydGljbGUtcHJldmlldyBhcnRpY2xlLXByZXZpZXctLXNtYWxsIHByZXZpZXcyXCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzBdLmxpc3RhYmxlSW1hZ2UgPyAnPGltZyBjbGFzcz1cInRvcGljLWZlYXR1cmVkLWFydGljbGVfX2ltYWdlMiBoaWRkZW4tbGdcIiBzcmM9XCInICsgZGF0YS5hcnRpY2xlc1swXS5saXN0YWJsZUltYWdlICsgJ1wiPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFydGljbGUtbWV0YWRhdGFcIj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYWN0aW9uLWZsYWcgYXJ0aWNsZS1wcmV2aWV3X19ib29rbWFya2VyIHBvcC1vdXRfX3RyaWdnZXIganMtYm9va21hcmstYXJ0aWNsZVwiIGRhdGEtcG9wLW91dC10eXBlPVwic2lnbi1pblwiIGRhdGEtcG9wLW91dC1hbGlnbj1cInJpZ2h0XCIgZGF0YS1ib29rbWFyay1pZD1cIicgKyBkYXRhLmFydGljbGVzWzBdLmlkICsgJ1wiIGRhdGEtYW5hbHl0aWNzPVwie1wiYm9va21hcmtcIjogXCInICsgYm9va21hcmtJbmZvMCArICdcIiwgXCJib29rbWFya190aXRsZVwiOiBcIicgKyBkYXRhLmFydGljbGVzWzBdLmxpc3RhYmxlVGl0bGUgKyAnXCIsIFwiYm9va21hcmtfcHVibGljYXRpb25cIjogXCJDb21tb2RpdGllc1wifVwiIGRhdGEtaXMtYm9va21hcmtlZD1cIicgKyBkYXRhLmFydGljbGVzWzBdLmlzQXJ0aWNsZUJvb2ttYXJrZWQgKyAnXCI+PHNwYW4gY2xhc3M9XCJhY3Rpb24tZmxhZ19fbGFiZWwganMtYm9va21hcmstbGFiZWxcIiBkYXRhLWxhYmVsLWJvb2ttYXJrPVwiJyArIGRhdGEuYXJ0aWNsZXNbMF0uYm9va21hcmtUZXh0ICsgJ1wiIGRhdGEtbGFiZWwtYm9va21hcmtlZD1cIicgKyBkYXRhLmFydGljbGVzWzBdLmJvb2ttYXJrZWRUZXh0ICsgJ1wiPicgKyBib29rbWFya0luZm8wICsgJzwvc3Bhbj48c3ZnIGNsYXNzPVwiYWN0aW9uLWZsYWdfX2ljb24gYWN0aW9uLWZsYWdfX2ljb24tLWJvb2ttYXJrIGFydGljbGUtYm9va21hcmsgYXJ0aWNsZS1ib29rbWFya19fYm9va21hcmtlZCAnK2Zib29rbWFya0ljb24wKydcIj48dXNlIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHhsaW5rOmhyZWY9XCIvZGlzdC9pbWcvc3ZnLXNwcml0ZS5zdmcjYm9va21hcmtlZFwiPjwvdXNlPjwvc3ZnPjxzdmcgY2xhc3M9XCJhY3Rpb24tZmxhZ19faWNvbiBhY3Rpb24tZmxhZ19faWNvbi0tYm9va21hcmsgYXJ0aWNsZS1ib29rbWFyayAnK3Nib29rbWFya0ljb24wKydcIj48dXNlIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHhsaW5rOmhyZWY9XCIvZGlzdC9pbWcvc3ZnLXNwcml0ZS5zdmcjYm9va21hcmtcIj48L3VzZT48L3N2Zz48L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8dWw+JztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzBdLmxpc3RhYmxlRGF0ZSA/ICc8bGk+PHRpbWUgY2xhc3M9XCJhcnRpY2xlLW1ldGFkYXRhX19kYXRlXCI+JyArIGRhdGEuYXJ0aWNsZXNbMF0ubGlzdGFibGVEYXRlICsgJzwvdGltZT48L2xpPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzBdLmxpbmthYmxlVGV4dCA/ICc8bGk+PGg2PicgKyBkYXRhLmFydGljbGVzWzBdLmxpbmthYmxlVGV4dCArICc8L2g2PjwvbGk+JyA6ICcnO1xyXG5cdGFydGljbGVEYXRhICs9IGRhdGEuYXJ0aWNsZXNbMF0ubGlzdGFibGVUeXBlID8gJzxsaT48c3BhbiBjbGFzcz1cImpzLXRvZ2dsZS10b29sdGlwXCIgZGF0YS10b29sdGlwLXRleHQ9XCJUaGlzIGFydGljbGUgaW5jbHVkZXMgZGF0YS5cIj48c3ZnIGNsYXNzPVwiYXJ0aWNsZS1tZXRhZGF0YV9fbWVkaWEtdHlwZVwiPjx1c2UgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeGxpbms6aHJlZj1cIi9kaXN0L2ltZy9zdmctc3ByaXRlLnN2ZyNjaGFydFwiPjwvdXNlPjwvc3ZnPjwvc3Bhbj48L2xpPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC91bD4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9IGRhdGEuYXJ0aWNsZXNbMF0ubGlzdGFibGVJbWFnZSA/ICc8aW1nIGNsYXNzPVwidG9waWMtZmVhdHVyZWQtYXJ0aWNsZV9faW1hZ2UyIGhpZGRlbi14c1wiIHNyYz1cIicgKyBkYXRhLmFydGljbGVzWzBdLmxpc3RhYmxlSW1hZ2UgKyAnXCI+JyA6ICcnO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19pbm5lci13cmFwcGVyXCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzBdLmxpc3RhYmxlVGl0bGUgPyAnPGgxIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19oZWFkbGluZVwiPjxhIGhyZWY9XCInICsgbGlua2FibGVVcmwwICsgJ1wiIGNsYXNzPVwiY2xpY2stdXRhZ1wiIGRhdGEtaW5mbz1cXCd7XCJldmVudF9uYW1lXCI6XCJhcnRpY2xlX2NsaWNrX3Rocm91Z2hcIixcInBhZ2VfbmFtZVwiOlwiJyArIGFuYWx5dGljc19kYXRhW1wicGFnZV9uYW1lXCJdICsgJ1wiLFwiY2xpY2tfdGhyb3VnaF9kZXN0aW5hdGlvblwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbMF0ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcImdhX2V2ZW50Q2F0ZWdvcnlcIjpcIk15IFZpZXcgUGFnZSBBcnRpY2xlc1wiLFwiZ2FfZXZlbnRBY3Rpb25cIjpcIicgKyBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdICsgJ1wiLFwiZ2FfZXZlbnRMYWJlbFwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbMF0ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcInB1YmxpY2F0aW9uX2NsaWNrXCI6XCInICsgYW5hbHl0aWNzX2RhdGFbXCJwdWJsaWNhdGlvblwiXSArICdcIn1cXCc+JyArIGRhdGEuYXJ0aWNsZXNbMF0ubGlzdGFibGVUaXRsZSArICc8L2E+PC9oMT4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1swXS5saXN0YWJsZUF1dGhvckJ5TGluZSA/ICc8c3BhbiBjbGFzcz1cImFydGljbGUtcHJldmlld19fYnlsaW5lXCI+JyArIGRhdGEuYXJ0aWNsZXNbMF0ubGlzdGFibGVBdXRob3JCeUxpbmUgKyAnPC9zcGFuPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFydGljbGUtc3VtbWFyeVwiPicgKyBkYXRhLmFydGljbGVzWzBdLmxpc3RhYmxlU3VtbWFyeSA/IGRhdGEuYXJ0aWNsZXNbMF0ubGlzdGFibGVTdW1tYXJ5IDogJycgKyAnPC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFydGljbGUtcHJldmlld19fdGFncyBiYXItc2VwYXJhdGVkLWxpbmstbGlzdFwiPic7XHJcblx0aWYgKGRhdGEuYXJ0aWNsZXNbMF0ubGlzdGFibGVUb3BpY3MpIHtcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5hcnRpY2xlc1swXS5saXN0YWJsZVRvcGljcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgZ2V0TGluazAgPSBkYXRhLmFydGljbGVzWzBdLmxpc3RhYmxlVG9waWNzW2ldLmxpbmthYmxlVXJsID8gZGF0YS5hcnRpY2xlc1swXS5saXN0YWJsZVRvcGljc1tpXS5saW5rYWJsZVVybCA6ICcjJztcclxuXHRcdFx0YXJ0aWNsZURhdGEgKz0gJzxhIGhyZWY9XCInICsgZ2V0TGluazAgKyAnXCI+JyArIGRhdGEuYXJ0aWNsZXNbMF0ubGlzdGFibGVUb3BpY3NbaV0ubGlua2FibGVUZXh0ICsgJzwvYT4nO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRhcnRpY2xlRGF0YSArPSAnPC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC9zZWN0aW9uPic7XHJcblx0XHJcblx0XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxzZWN0aW9uIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3IGFydGljbGUtcHJldmlldy0tc21hbGwgbW9idmlldyBhcnRoZWlnaHRcIj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYXJ0aWNsZS1tZXRhZGF0YVwiPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxkaXYgY2xhc3M9XCJhY3Rpb24tZmxhZyBhcnRpY2xlLXByZXZpZXdfX2Jvb2ttYXJrZXIgcG9wLW91dF9fdHJpZ2dlciBqcy1ib29rbWFyay1hcnRpY2xlXCIgZGF0YS1wb3Atb3V0LXR5cGU9XCJzaWduLWluXCIgZGF0YS1wb3Atb3V0LWFsaWduPVwicmlnaHRcIiBkYXRhLWJvb2ttYXJrLWlkPVwiJyArIGRhdGEuYXJ0aWNsZXNbMV0uaWQgKyAnXCIgZGF0YS1hbmFseXRpY3M9XCJ7XCJib29rbWFya1wiOiBcIicgKyBib29rbWFya0luZm8xICsgJ1wiLCBcImJvb2ttYXJrX3RpdGxlXCI6IFwiJyArIGRhdGEuYXJ0aWNsZXNbMV0ubGlzdGFibGVUaXRsZSArICdcIiwgXCJib29rbWFya19wdWJsaWNhdGlvblwiOiBcIkNvbW1vZGl0aWVzXCJ9XCIgZGF0YS1pcy1ib29rbWFya2VkPVwiJyArIGRhdGEuYXJ0aWNsZXNbMV0uaXNBcnRpY2xlQm9va21hcmtlZCArICdcIj48c3BhbiBjbGFzcz1cImFjdGlvbi1mbGFnX19sYWJlbCBqcy1ib29rbWFyay1sYWJlbFwiIGRhdGEtbGFiZWwtYm9va21hcms9XCInICsgZGF0YS5hcnRpY2xlc1sxXS5ib29rbWFya1RleHQgKyAnXCIgZGF0YS1sYWJlbC1ib29rbWFya2VkPVwiJyArIGRhdGEuYXJ0aWNsZXNbMV0uYm9va21hcmtlZFRleHQgKyAnXCI+JyArIGJvb2ttYXJrSW5mbzEgKyAnPC9zcGFuPjxzdmcgY2xhc3M9XCJhY3Rpb24tZmxhZ19faWNvbiBhY3Rpb24tZmxhZ19faWNvbi0tYm9va21hcmsgYXJ0aWNsZS1ib29rbWFyayBhcnRpY2xlLWJvb2ttYXJrX19ib29rbWFya2VkICcrZmJvb2ttYXJrSWNvbjErJ1wiPjx1c2UgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeGxpbms6aHJlZj1cIi9kaXN0L2ltZy9zdmctc3ByaXRlLnN2ZyNib29rbWFya2VkXCI+PC91c2U+PC9zdmc+PHN2ZyBjbGFzcz1cImFjdGlvbi1mbGFnX19pY29uIGFjdGlvbi1mbGFnX19pY29uLS1ib29rbWFyayBhcnRpY2xlLWJvb2ttYXJrICcrc2Jvb2ttYXJrSWNvbjErJ1wiPjx1c2UgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeGxpbms6aHJlZj1cIi9kaXN0L2ltZy9zdmctc3ByaXRlLnN2ZyNib29rbWFya1wiPjwvdXNlPjwvc3ZnPjwvZGl2Pic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzx1bD4nO1xyXG5cdGFydGljbGVEYXRhICs9IGRhdGEuYXJ0aWNsZXNbMV0ubGlzdGFibGVEYXRlID8gJzxsaT48dGltZSBjbGFzcz1cImFydGljbGUtbWV0YWRhdGFfX2RhdGVcIj4nICsgZGF0YS5hcnRpY2xlc1sxXS5saXN0YWJsZURhdGUgKyAnPC90aW1lPjwvbGk+JyA6ICcnO1xyXG5cdGFydGljbGVEYXRhICs9IGRhdGEuYXJ0aWNsZXNbMV0ubGlua2FibGVUZXh0ID8gJzxsaT48aDY+JyArIGRhdGEuYXJ0aWNsZXNbMV0ubGlua2FibGVUZXh0ICsgJzwvaDY+PC9saT4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1sxXS5saXN0YWJsZVR5cGUgPyAnPGxpPjxzcGFuIGNsYXNzPVwianMtdG9nZ2xlLXRvb2x0aXBcIiBkYXRhLXRvb2x0aXAtdGV4dD1cIlRoaXMgYXJ0aWNsZSBpbmNsdWRlcyBkYXRhLlwiPjxzdmcgY2xhc3M9XCJhcnRpY2xlLW1ldGFkYXRhX19tZWRpYS10eXBlXCI+PHVzZSB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bGluazpocmVmPVwiL2Rpc3QvaW1nL3N2Zy1zcHJpdGUuc3ZnI2NoYXJ0XCI+PC91c2U+PC9zdmc+PC9zcGFuPjwvbGk+JyA6ICcnO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L3VsPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzwvZGl2Pic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxkaXYgY2xhc3M9XCJhcnRpY2xlLXByZXZpZXdfX2lubmVyLXdyYXBwZXJcIj4nO1xyXG5cdGFydGljbGVEYXRhICs9IGRhdGEuYXJ0aWNsZXNbMV0ubGlzdGFibGVUaXRsZSA/ICc8aDEgY2xhc3M9XCJhcnRpY2xlLXByZXZpZXdfX2hlYWRsaW5lXCI+PGEgaHJlZj1cIicgKyBsaW5rYWJsZVVybDEgKyAnXCIgY2xhc3M9XCJjbGljay11dGFnXCIgZGF0YS1pbmZvPVxcJ3tcImV2ZW50X25hbWVcIjpcImFydGljbGVfY2xpY2tfdGhyb3VnaFwiLFwicGFnZV9uYW1lXCI6XCInICsgYW5hbHl0aWNzX2RhdGFbXCJwYWdlX25hbWVcIl0gKyAnXCIsXCJjbGlja190aHJvdWdoX2Rlc3RpbmF0aW9uXCI6XCInICsgZGF0YS5hcnRpY2xlc1sxXS5saXN0YWJsZVRpdGxlLnJlcGxhY2UoLycvZywgXCJcIikucmVwbGFjZSgvXCIvZywgJycpICsgJ1wiLFwiZ2FfZXZlbnRDYXRlZ29yeVwiOlwiTXkgVmlldyBQYWdlIEFydGljbGVzXCIsXCJnYV9ldmVudEFjdGlvblwiOlwiJyArIGFuYWx5dGljc19kYXRhW1wicHVibGljYXRpb25cIl0gKyAnXCIsXCJnYV9ldmVudExhYmVsXCI6XCInICsgZGF0YS5hcnRpY2xlc1sxXS5saXN0YWJsZVRpdGxlLnJlcGxhY2UoLycvZywgXCJcIikucmVwbGFjZSgvXCIvZywgJycpICsgJ1wiLFwicHVibGljYXRpb25fY2xpY2tcIjpcIicgKyBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdICsgJ1wifVxcJz4nICsgZGF0YS5hcnRpY2xlc1sxXS5saXN0YWJsZVRpdGxlICsgJzwvYT48L2gxPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzFdLmxpc3RhYmxlQXV0aG9yQnlMaW5lID8gJzxzcGFuIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19ieWxpbmVcIj4nICsgZGF0YS5hcnRpY2xlc1sxXS5saXN0YWJsZUF1dGhvckJ5TGluZSArICc8L3NwYW4+JyA6ICcnO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYXJ0aWNsZS1zdW1tYXJ5XCI+JyArIGRhdGEuYXJ0aWNsZXNbMV0ubGlzdGFibGVTdW1tYXJ5ID8gZGF0YS5hcnRpY2xlc1sxXS5saXN0YWJsZVN1bW1hcnkgOiAnJyArICc8L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X190YWdzIGJhci1zZXBhcmF0ZWQtbGluay1saXN0XCI+JztcclxuXHRpZiAoZGF0YS5hcnRpY2xlc1sxXS5saXN0YWJsZVRvcGljcykge1xyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmFydGljbGVzWzFdLmxpc3RhYmxlVG9waWNzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBnZXRMaW5rMSA9IGRhdGEuYXJ0aWNsZXNbMV0ubGlzdGFibGVUb3BpY3NbaV0ubGlua2FibGVVcmwgPyBkYXRhLmFydGljbGVzWzFdLmxpc3RhYmxlVG9waWNzW2ldLmxpbmthYmxlVXJsIDogJyMnO1xyXG5cdFx0XHRhcnRpY2xlRGF0YSArPSAnPGEgaHJlZj1cIicgKyBnZXRMaW5rMSArICdcIj4nICsgZGF0YS5hcnRpY2xlc1sxXS5saXN0YWJsZVRvcGljc1tpXS5saW5rYWJsZVRleHQgKyAnPC9hPic7XHJcblx0XHR9XHJcblx0fVxyXG5cdGFydGljbGVEYXRhICs9ICc8L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L3NlY3Rpb24+JztcclxuXHRcclxuXHRcclxuXHRhcnRpY2xlRGF0YSArPSAnPHNlY3Rpb24gY2xhc3M9XCJhcnRpY2xlLXByZXZpZXcgYXJ0aWNsZS1wcmV2aWV3LS1zbWFsbCBhcnRoZWlnaHQgdG9waWNzXCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzJdLmxpbmthYmxlVGV4dCA/ICc8aDY+Jm5ic3A7PC9oNj4nIDogJyc7XHJcblxyXG5cdGFydGljbGVEYXRhICs9IGRhdGEuYXJ0aWNsZXNbMl0ubGlzdGFibGVUaXRsZSA/ICc8aDEgY2xhc3M9XCJhcnRpY2xlLXByZXZpZXdfcmhlYWRsaW5lXCI+PGEgaHJlZj1cIicgKyBsaW5rYWJsZVVybDIgKyAnXCIgY2xhc3M9XCJjbGljay11dGFnXCIgZGF0YS1pbmZvPVxcJ3tcImV2ZW50X25hbWVcIjpcImFydGljbGVfY2xpY2tfdGhyb3VnaFwiLFwicGFnZV9uYW1lXCI6XCInICsgYW5hbHl0aWNzX2RhdGFbXCJwYWdlX25hbWVcIl0gKyAnXCIsXCJjbGlja190aHJvdWdoX2Rlc3RpbmF0aW9uXCI6XCInICsgZGF0YS5hcnRpY2xlc1syXS5saXN0YWJsZVRpdGxlLnJlcGxhY2UoLycvZywgXCJcIikucmVwbGFjZSgvXCIvZywgJycpICsgJ1wiLFwiZ2FfZXZlbnRDYXRlZ29yeVwiOlwiTXkgVmlldyBQYWdlIEFydGljbGVzXCIsXCJnYV9ldmVudEFjdGlvblwiOlwiJyArIGFuYWx5dGljc19kYXRhW1wicHVibGljYXRpb25cIl0gKyAnXCIsXCJnYV9ldmVudExhYmVsXCI6XCInICsgZGF0YS5hcnRpY2xlc1syXS5saXN0YWJsZVRpdGxlLnJlcGxhY2UoLycvZywgXCJcIikucmVwbGFjZSgvXCIvZywgJycpICsgJ1wiLFwicHVibGljYXRpb25fY2xpY2tcIjpcIicgKyBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdICsgJ1wifVxcJz4nICsgZGF0YS5hcnRpY2xlc1syXS5saXN0YWJsZVRpdGxlICsgJzwvYT48L2gxPicgOiAnJztcclxuXHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1szXS5saXN0YWJsZVRpdGxlID8gJzxoMSBjbGFzcz1cImFydGljbGUtcHJldmlld19yaGVhZGxpbmVcIj48YSBocmVmPVwiJyArIGxpbmthYmxlVXJsMyArICdcIiBjbGFzcz1cImNsaWNrLXV0YWdcIiBkYXRhLWluZm89XFwne1wiZXZlbnRfbmFtZVwiOlwiYXJ0aWNsZV9jbGlja190aHJvdWdoXCIsXCJwYWdlX25hbWVcIjpcIicgKyBhbmFseXRpY3NfZGF0YVtcInBhZ2VfbmFtZVwiXSArICdcIixcImNsaWNrX3Rocm91Z2hfZGVzdGluYXRpb25cIjpcIicgKyBkYXRhLmFydGljbGVzWzNdLmxpc3RhYmxlVGl0bGUucmVwbGFjZSgvJy9nLCBcIlwiKS5yZXBsYWNlKC9cIi9nLCAnJykgKyAnXCIsXCJnYV9ldmVudENhdGVnb3J5XCI6XCJNeSBWaWV3IFBhZ2UgQXJ0aWNsZXNcIixcImdhX2V2ZW50QWN0aW9uXCI6XCInICsgYW5hbHl0aWNzX2RhdGFbXCJwdWJsaWNhdGlvblwiXSArICdcIixcImdhX2V2ZW50TGFiZWxcIjpcIicgKyBkYXRhLmFydGljbGVzWzNdLmxpc3RhYmxlVGl0bGUucmVwbGFjZSgvJy9nLCBcIlwiKS5yZXBsYWNlKC9cIi9nLCAnJykgKyAnXCIsXCJwdWJsaWNhdGlvbl9jbGlja1wiOlwiJyArIGFuYWx5dGljc19kYXRhW1wicHVibGljYXRpb25cIl0gKyAnXCJ9XFwnPicgKyBkYXRhLmFydGljbGVzWzNdLmxpc3RhYmxlVGl0bGUgKyAnPC9hPjwvaDE+JyA6ICcnO1xyXG5cclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzRdLmxpc3RhYmxlVGl0bGUgPyAnPGgxIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X3JoZWFkbGluZVwiPjxhIGhyZWY9XCInICsgbGlua2FibGVVcmw0ICsgJ1wiIGNsYXNzPVwiY2xpY2stdXRhZ1wiIGRhdGEtaW5mbz1cXCd7XCJldmVudF9uYW1lXCI6XCJhcnRpY2xlX2NsaWNrX3Rocm91Z2hcIixcInBhZ2VfbmFtZVwiOlwiJyArIGFuYWx5dGljc19kYXRhW1wicGFnZV9uYW1lXCJdICsgJ1wiLFwiY2xpY2tfdGhyb3VnaF9kZXN0aW5hdGlvblwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbNF0ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcImdhX2V2ZW50Q2F0ZWdvcnlcIjpcIk15IFZpZXcgUGFnZSBBcnRpY2xlc1wiLFwiZ2FfZXZlbnRBY3Rpb25cIjpcIicgKyBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdICsgJ1wiLFwiZ2FfZXZlbnRMYWJlbFwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbNF0ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcInB1YmxpY2F0aW9uX2NsaWNrXCI6XCInICsgYW5hbHl0aWNzX2RhdGFbXCJwdWJsaWNhdGlvblwiXSArICdcIn1cXCc+JyArIGRhdGEuYXJ0aWNsZXNbNF0ubGlzdGFibGVUaXRsZSArICc8L2E+PC9oMT4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzwvc2VjdGlvbj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L2Rpdj4nO1xyXG5cdFxyXG5cdFxyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwibGF0ZXN0LW5ld3NfX2FydGljbGVzXCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPHNlY3Rpb24gY2xhc3M9XCJhcnRpY2xlLXByZXZpZXcgYXJ0aWNsZS1zbWFsbC1wcmV2aWV3IG1vYnZpZXdcIj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYXJ0aWNsZS1tZXRhZGF0YVwiPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxkaXYgY2xhc3M9XCJhY3Rpb24tZmxhZyBhcnRpY2xlLXByZXZpZXdfX2Jvb2ttYXJrZXIgcG9wLW91dF9fdHJpZ2dlciBqcy1ib29rbWFyay1hcnRpY2xlXCIgZGF0YS1wb3Atb3V0LXR5cGU9XCJzaWduLWluXCIgZGF0YS1wb3Atb3V0LWFsaWduPVwicmlnaHRcIiBkYXRhLWJvb2ttYXJrLWlkPVwiJyArIGRhdGEuYXJ0aWNsZXNbNV0uaWQgKyAnXCIgZGF0YS1hbmFseXRpY3M9XCJ7XCJib29rbWFya1wiOiBcIicgKyBib29rbWFya0luZm81ICsgJ1wiLCBcImJvb2ttYXJrX3RpdGxlXCI6IFwiJyArIGRhdGEuYXJ0aWNsZXNbNV0ubGlzdGFibGVUaXRsZSArICdcIiwgXCJib29rbWFya19wdWJsaWNhdGlvblwiOiBcIkNvbW1vZGl0aWVzXCJ9XCIgZGF0YS1pcy1ib29rbWFya2VkPVwiJyArIGRhdGEuYXJ0aWNsZXNbNV0uaXNBcnRpY2xlQm9va21hcmtlZCArICdcIj48c3BhbiBjbGFzcz1cImFjdGlvbi1mbGFnX19sYWJlbCBqcy1ib29rbWFyay1sYWJlbFwiIGRhdGEtbGFiZWwtYm9va21hcms9XCInICsgZGF0YS5hcnRpY2xlc1s1XS5ib29rbWFya1RleHQgKyAnXCIgZGF0YS1sYWJlbC1ib29rbWFya2VkPVwiJyArIGRhdGEuYXJ0aWNsZXNbNV0uYm9va21hcmtlZFRleHQgKyAnXCI+JyArIGJvb2ttYXJrSW5mbzUgKyAnPC9zcGFuPjxzdmcgY2xhc3M9XCJhY3Rpb24tZmxhZ19faWNvbiBhY3Rpb24tZmxhZ19faWNvbi0tYm9va21hcmsgYXJ0aWNsZS1ib29rbWFyayBhcnRpY2xlLWJvb2ttYXJrX19ib29rbWFya2VkICcrZmJvb2ttYXJrSWNvbjUrJ1wiPjx1c2UgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeGxpbms6aHJlZj1cIi9kaXN0L2ltZy9zdmctc3ByaXRlLnN2ZyNib29rbWFya2VkXCI+PC91c2U+PC9zdmc+PHN2ZyBjbGFzcz1cImFjdGlvbi1mbGFnX19pY29uIGFjdGlvbi1mbGFnX19pY29uLS1ib29rbWFyayBhcnRpY2xlLWJvb2ttYXJrICcrc2Jvb2ttYXJrSWNvbjUrJ1wiPjx1c2UgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeGxpbms6aHJlZj1cIi9kaXN0L2ltZy9zdmctc3ByaXRlLnN2ZyNib29rbWFya1wiPjwvdXNlPjwvc3ZnPjwvZGl2Pic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzx1bD4nO1xyXG5cdGFydGljbGVEYXRhICs9IGRhdGEuYXJ0aWNsZXNbNV0ubGlzdGFibGVEYXRlID8gJzxsaT48dGltZSBjbGFzcz1cImFydGljbGUtbWV0YWRhdGFfX2RhdGVcIj4nICsgZGF0YS5hcnRpY2xlc1s1XS5saXN0YWJsZURhdGUgKyAnPC90aW1lPjwvbGk+JyA6ICcnO1xyXG5cdGFydGljbGVEYXRhICs9IGRhdGEuYXJ0aWNsZXNbNV0ubGlua2FibGVUZXh0ID8gJzxsaT48aDY+JyArIGRhdGEuYXJ0aWNsZXNbNV0ubGlua2FibGVUZXh0ICsgJzwvaDY+PC9saT4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzwvdWw+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC9kaXY+JztcdFxyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19pbm5lci13cmFwcGVyIHNob3dhcnRpY2xlXCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzVdLmxpc3RhYmxlVGl0bGUgPyAnPGgxIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19oZWFkbGluZVwiPjxhIGhyZWY9XCInICsgbGlua2FibGVVcmw1ICsgJ1wiIGNsYXNzPVwiY2xpY2stdXRhZ1wiIGRhdGEtaW5mbz1cXCd7XCJldmVudF9uYW1lXCI6XCJhcnRpY2xlX2NsaWNrX3Rocm91Z2hcIixcInBhZ2VfbmFtZVwiOlwiJyArIGFuYWx5dGljc19kYXRhW1wicGFnZV9uYW1lXCJdICsgJ1wiLFwiY2xpY2tfdGhyb3VnaF9kZXN0aW5hdGlvblwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbNV0ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcImdhX2V2ZW50Q2F0ZWdvcnlcIjpcIk15IFZpZXcgUGFnZSBBcnRpY2xlc1wiLFwiZ2FfZXZlbnRBY3Rpb25cIjpcIicgKyBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdICsgJ1wiLFwiZ2FfZXZlbnRMYWJlbFwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbNV0ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcInB1YmxpY2F0aW9uX2NsaWNrXCI6XCInICsgYW5hbHl0aWNzX2RhdGFbXCJwdWJsaWNhdGlvblwiXSArICdcIn1cXCc+JyArIGRhdGEuYXJ0aWNsZXNbNV0ubGlzdGFibGVUaXRsZSArICc8L2E+PC9oMT4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1sxXS5saXN0YWJsZUF1dGhvckJ5TGluZSA/ICc8c3BhbiBjbGFzcz1cImFydGljbGUtcHJldmlld19fYnlsaW5lXCI+JyArIGRhdGEuYXJ0aWNsZXNbMV0ubGlzdGFibGVBdXRob3JCeUxpbmUgKyAnPC9zcGFuPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFydGljbGUtcHJldmlld19fdGFncyBiYXItc2VwYXJhdGVkLWxpbmstbGlzdFwiPic7XHJcblx0aWYgKGRhdGEuYXJ0aWNsZXNbNV0ubGlzdGFibGVUb3BpY3MpIHtcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5hcnRpY2xlc1s1XS5saXN0YWJsZVRvcGljcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgZ2V0TGluazUgPSBkYXRhLmFydGljbGVzWzVdLmxpc3RhYmxlVG9waWNzW2ldLmxpbmthYmxlVXJsID8gZGF0YS5hcnRpY2xlc1s1XS5saXN0YWJsZVRvcGljc1tpXS5saW5rYWJsZVVybCA6ICcjJztcclxuXHRcdFx0YXJ0aWNsZURhdGEgKz0gJzxhIGhyZWY9XCInICsgZ2V0TGluazUgKyAnXCI+JyArIGRhdGEuYXJ0aWNsZXNbNV0ubGlzdGFibGVUb3BpY3NbaV0ubGlua2FibGVUZXh0ICsgJzwvYT4nO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRhcnRpY2xlRGF0YSArPSAnPC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC9zZWN0aW9uPic7XHJcblx0XHJcblx0XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxzZWN0aW9uIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3IGFydGljbGUtcHJldmlldy0tc21hbGwgYXJ0aGVpZ2h0IG1vYnZpZXcgbXRvcFwiPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxkaXYgY2xhc3M9XCJhcnRpY2xlLW1ldGFkYXRhXCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFjdGlvbi1mbGFnIGFydGljbGUtcHJldmlld19fYm9va21hcmtlciBwb3Atb3V0X190cmlnZ2VyIGpzLWJvb2ttYXJrLWFydGljbGVcIiBkYXRhLXBvcC1vdXQtdHlwZT1cInNpZ24taW5cIiBkYXRhLXBvcC1vdXQtYWxpZ249XCJyaWdodFwiIGRhdGEtYm9va21hcmstaWQ9XCInICsgZGF0YS5hcnRpY2xlc1s2XS5pZCArICdcIiBkYXRhLWFuYWx5dGljcz1cIntcImJvb2ttYXJrXCI6IFwiJyArIGJvb2ttYXJrSW5mbzYgKyAnXCIsIFwiYm9va21hcmtfdGl0bGVcIjogXCInICsgZGF0YS5hcnRpY2xlc1s2XS5saXN0YWJsZVRpdGxlICsgJ1wiLCBcImJvb2ttYXJrX3B1YmxpY2F0aW9uXCI6IFwiQ29tbW9kaXRpZXNcIn1cIiBkYXRhLWlzLWJvb2ttYXJrZWQ9XCInICsgZGF0YS5hcnRpY2xlc1s2XS5pc0FydGljbGVCb29rbWFya2VkICsgJ1wiPjxzcGFuIGNsYXNzPVwiYWN0aW9uLWZsYWdfX2xhYmVsIGpzLWJvb2ttYXJrLWxhYmVsXCIgZGF0YS1sYWJlbC1ib29rbWFyaz1cIicgKyBkYXRhLmFydGljbGVzWzZdLmJvb2ttYXJrVGV4dCArICdcIiBkYXRhLWxhYmVsLWJvb2ttYXJrZWQ9XCInICsgZGF0YS5hcnRpY2xlc1s2XS5ib29rbWFya2VkVGV4dCArICdcIj4nICsgYm9va21hcmtJbmZvNiArICc8L3NwYW4+PHN2ZyBjbGFzcz1cImFjdGlvbi1mbGFnX19pY29uIGFjdGlvbi1mbGFnX19pY29uLS1ib29rbWFyayBhcnRpY2xlLWJvb2ttYXJrIGFydGljbGUtYm9va21hcmtfX2Jvb2ttYXJrZWQgJytmYm9va21hcmtJY29uNisnXCI+PHVzZSB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bGluazpocmVmPVwiL2Rpc3QvaW1nL3N2Zy1zcHJpdGUuc3ZnI2Jvb2ttYXJrZWRcIj48L3VzZT48L3N2Zz48c3ZnIGNsYXNzPVwiYWN0aW9uLWZsYWdfX2ljb24gYWN0aW9uLWZsYWdfX2ljb24tLWJvb2ttYXJrIGFydGljbGUtYm9va21hcmsgJytzYm9va21hcmtJY29uNisnXCI+PHVzZSB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bGluazpocmVmPVwiL2Rpc3QvaW1nL3N2Zy1zcHJpdGUuc3ZnI2Jvb2ttYXJrXCI+PC91c2U+PC9zdmc+PC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPHVsPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1s2XS5saXN0YWJsZURhdGUgPyAnPGxpPjx0aW1lIGNsYXNzPVwiYXJ0aWNsZS1tZXRhZGF0YV9fZGF0ZVwiPicgKyBkYXRhLmFydGljbGVzWzZdLmxpc3RhYmxlRGF0ZSArICc8L3RpbWU+PC9saT4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1s2XS5saW5rYWJsZVRleHQgPyAnPGxpPjxoNj4nICsgZGF0YS5hcnRpY2xlc1s2XS5saW5rYWJsZVRleHQgKyAnPC9oNj48L2xpPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC91bD4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19pbm5lci13cmFwcGVyXCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzZdLmxpc3RhYmxlVGl0bGUgPyAnPGgxIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19oZWFkbGluZVwiPjxhIGhyZWY9XCInICsgbGlua2FibGVVcmw2ICsgJ1wiIGNsYXNzPVwiY2xpY2stdXRhZ1wiIGRhdGEtaW5mbz1cXCd7XCJldmVudF9uYW1lXCI6XCJhcnRpY2xlX2NsaWNrX3Rocm91Z2hcIixcInBhZ2VfbmFtZVwiOlwiJyArIGFuYWx5dGljc19kYXRhW1wicGFnZV9uYW1lXCJdICsgJ1wiLFwiY2xpY2tfdGhyb3VnaF9kZXN0aW5hdGlvblwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbNl0ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcImdhX2V2ZW50Q2F0ZWdvcnlcIjpcIk15IFZpZXcgUGFnZSBBcnRpY2xlc1wiLFwiZ2FfZXZlbnRBY3Rpb25cIjpcIicgKyBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdICsgJ1wiLFwiZ2FfZXZlbnRMYWJlbFwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbNl0ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcInB1YmxpY2F0aW9uX2NsaWNrXCI6XCInICsgYW5hbHl0aWNzX2RhdGFbXCJwdWJsaWNhdGlvblwiXSArICdcIn1cXCc+JyArIGRhdGEuYXJ0aWNsZXNbNl0ubGlzdGFibGVUaXRsZSArICc8L2E+PC9oMT4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1s2XS5saXN0YWJsZUF1dGhvckJ5TGluZSA/ICc8c3BhbiBjbGFzcz1cImFydGljbGUtcHJldmlld19fYnlsaW5lXCI+JyArIGRhdGEuYXJ0aWNsZXNbNl0ubGlzdGFibGVBdXRob3JCeUxpbmUgKyAnPC9zcGFuPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFydGljbGUtc3VtbWFyeVwiPicgKyBkYXRhLmFydGljbGVzWzZdLmxpc3RhYmxlU3VtbWFyeSA/IGRhdGEuYXJ0aWNsZXNbNl0ubGlzdGFibGVTdW1tYXJ5IDogJycgKyAnPC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFydGljbGUtcHJldmlld19fdGFncyBiYXItc2VwYXJhdGVkLWxpbmstbGlzdFwiPic7XHJcblx0aWYgKGRhdGEuYXJ0aWNsZXNbNl0ubGlzdGFibGVUb3BpY3MpIHtcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5hcnRpY2xlc1s2XS5saXN0YWJsZVRvcGljcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgZ2V0TGluazYgPSBkYXRhLmFydGljbGVzWzZdLmxpc3RhYmxlVG9waWNzW2ldLmxpbmthYmxlVXJsID8gZGF0YS5hcnRpY2xlc1s2XS5saXN0YWJsZVRvcGljc1tpXS5saW5rYWJsZVVybCA6ICcjJztcclxuXHRcdFx0YXJ0aWNsZURhdGEgKz0gJzxhIGhyZWY9XCInICsgZ2V0TGluazYgKyAnXCI+JyArIGRhdGEuYXJ0aWNsZXNbNl0ubGlzdGFibGVUb3BpY3NbaV0ubGlua2FibGVUZXh0ICsgJzwvYT4nO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRhcnRpY2xlRGF0YSArPSAnPC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC9zZWN0aW9uPic7XHJcblx0XHJcblx0XHRcdFx0XHRcdFx0XHRcclxuXHRhcnRpY2xlRGF0YSArPSAnPHNlY3Rpb24gY2xhc3M9XCJhcnRpY2xlLXByZXZpZXcgYXJ0aWNsZS1zbWFsbC1wcmV2aWV3IHNtLWFydGljbGUgc20tYXJ0aWNsZXMgbXRvcFwiPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxzZWN0aW9uIGNsYXNzPVwic20tYXJ0aWNsZSBtb2J2aWV3XCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFydGljbGUtbWV0YWRhdGFcIj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYWN0aW9uLWZsYWcgYXJ0aWNsZS1wcmV2aWV3X19ib29rbWFya2VyIHBvcC1vdXRfX3RyaWdnZXIganMtYm9va21hcmstYXJ0aWNsZVwiIGRhdGEtcG9wLW91dC10eXBlPVwic2lnbi1pblwiIGRhdGEtcG9wLW91dC1hbGlnbj1cInJpZ2h0XCIgZGF0YS1ib29rbWFyay1pZD1cIicgKyBkYXRhLmFydGljbGVzWzddLmlkICsgJ1wiIGRhdGEtYW5hbHl0aWNzPVwie1wiYm9va21hcmtcIjogXCInICsgYm9va21hcmtJbmZvNyArICdcIiwgXCJib29rbWFya190aXRsZVwiOiBcIicgKyBkYXRhLmFydGljbGVzWzddLmxpc3RhYmxlVGl0bGUgKyAnXCIsIFwiYm9va21hcmtfcHVibGljYXRpb25cIjogXCJDb21tb2RpdGllc1wifVwiIGRhdGEtaXMtYm9va21hcmtlZD1cIicgKyBkYXRhLmFydGljbGVzWzddLmlzQXJ0aWNsZUJvb2ttYXJrZWQgKyAnXCI+PHNwYW4gY2xhc3M9XCJhY3Rpb24tZmxhZ19fbGFiZWwganMtYm9va21hcmstbGFiZWxcIiBkYXRhLWxhYmVsLWJvb2ttYXJrPVwiJyArIGRhdGEuYXJ0aWNsZXNbN10uYm9va21hcmtUZXh0ICsgJ1wiIGRhdGEtbGFiZWwtYm9va21hcmtlZD1cIicgKyBkYXRhLmFydGljbGVzWzddLmJvb2ttYXJrZWRUZXh0ICsgJ1wiPicgKyBib29rbWFya0luZm83ICsgJzwvc3Bhbj48c3ZnIGNsYXNzPVwiYWN0aW9uLWZsYWdfX2ljb24gYWN0aW9uLWZsYWdfX2ljb24tLWJvb2ttYXJrIGFydGljbGUtYm9va21hcmsgYXJ0aWNsZS1ib29rbWFya19fYm9va21hcmtlZCAnK2Zib29rbWFya0ljb243KydcIj48dXNlIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHhsaW5rOmhyZWY9XCIvZGlzdC9pbWcvc3ZnLXNwcml0ZS5zdmcjYm9va21hcmtlZFwiPjwvdXNlPjwvc3ZnPjxzdmcgY2xhc3M9XCJhY3Rpb24tZmxhZ19faWNvbiBhY3Rpb24tZmxhZ19faWNvbi0tYm9va21hcmsgYXJ0aWNsZS1ib29rbWFyayAnK3Nib29rbWFya0ljb243KydcIj48dXNlIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHhsaW5rOmhyZWY9XCIvZGlzdC9pbWcvc3ZnLXNwcml0ZS5zdmcjYm9va21hcmtcIj48L3VzZT48L3N2Zz48L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8dWw+JztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzddLmxpc3RhYmxlRGF0ZSA/ICc8bGk+PHRpbWUgY2xhc3M9XCJhcnRpY2xlLW1ldGFkYXRhX19kYXRlXCI+JyArIGRhdGEuYXJ0aWNsZXNbN10ubGlzdGFibGVEYXRlICsgJzwvdGltZT48L2xpPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzddLmxpbmthYmxlVGV4dCA/ICc8bGk+PGg2PicgKyBkYXRhLmFydGljbGVzWzddLmxpbmthYmxlVGV4dCArICc8L2g2PjwvbGk+JyA6ICcnO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L3VsPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzwvZGl2Pic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxkaXYgY2xhc3M9XCJhcnRpY2xlLXByZXZpZXdfX2lubmVyLXdyYXBwZXIgc2hvd2FydGljbGVcIj4nO1xyXG5cdGFydGljbGVEYXRhICs9IGRhdGEuYXJ0aWNsZXNbN10ubGlzdGFibGVUaXRsZSA/ICc8aDEgY2xhc3M9XCJhcnRpY2xlLXByZXZpZXdfX2hlYWRsaW5lXCI+PGEgaHJlZj1cIicgKyBsaW5rYWJsZVVybDcgKyAnXCIgY2xhc3M9XCJjbGljay11dGFnXCIgZGF0YS1pbmZvPVxcJ3tcImV2ZW50X25hbWVcIjpcImFydGljbGVfY2xpY2tfdGhyb3VnaFwiLFwicGFnZV9uYW1lXCI6XCInICsgYW5hbHl0aWNzX2RhdGFbXCJwYWdlX25hbWVcIl0gKyAnXCIsXCJjbGlja190aHJvdWdoX2Rlc3RpbmF0aW9uXCI6XCInICsgZGF0YS5hcnRpY2xlc1s3XS5saXN0YWJsZVRpdGxlLnJlcGxhY2UoLycvZywgXCJcIikucmVwbGFjZSgvXCIvZywgJycpICsgJ1wiLFwiZ2FfZXZlbnRDYXRlZ29yeVwiOlwiTXkgVmlldyBQYWdlIEFydGljbGVzXCIsXCJnYV9ldmVudEFjdGlvblwiOlwiJyArIGFuYWx5dGljc19kYXRhW1wicHVibGljYXRpb25cIl0gKyAnXCIsXCJnYV9ldmVudExhYmVsXCI6XCInICsgZGF0YS5hcnRpY2xlc1s3XS5saXN0YWJsZVRpdGxlLnJlcGxhY2UoLycvZywgXCJcIikucmVwbGFjZSgvXCIvZywgJycpICsgJ1wiLFwicHVibGljYXRpb25fY2xpY2tcIjpcIicgKyBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdICsgJ1wifVxcJz4nICsgZGF0YS5hcnRpY2xlc1s3XS5saXN0YWJsZVRpdGxlICsgJzwvYT48L2gxPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzFdLmxpc3RhYmxlQXV0aG9yQnlMaW5lID8gJzxzcGFuIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19ieWxpbmVcIj4nICsgZGF0YS5hcnRpY2xlc1sxXS5saXN0YWJsZUF1dGhvckJ5TGluZSArICc8L3NwYW4+JyA6ICcnO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X190YWdzIGJhci1zZXBhcmF0ZWQtbGluay1saXN0XCI+JztcclxuXHRpZiAoZGF0YS5hcnRpY2xlc1s3XS5saXN0YWJsZVRvcGljcykge1xyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmFydGljbGVzWzddLmxpc3RhYmxlVG9waWNzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBnZXRMaW5rNyA9IGRhdGEuYXJ0aWNsZXNbN10ubGlzdGFibGVUb3BpY3NbaV0ubGlua2FibGVVcmwgPyBkYXRhLmFydGljbGVzWzddLmxpc3RhYmxlVG9waWNzW2ldLmxpbmthYmxlVXJsIDogJyMnO1xyXG5cdFx0XHRhcnRpY2xlRGF0YSArPSAnPGEgaHJlZj1cIicgKyBnZXRMaW5rNyArICdcIj4nICsgZGF0YS5hcnRpY2xlc1s3XS5saXN0YWJsZVRvcGljc1tpXS5saW5rYWJsZVRleHQgKyAnPC9hPic7XHJcblx0XHR9XHJcblx0fVxyXG5cdGFydGljbGVEYXRhICs9ICc8L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L3NlY3Rpb24+JztcclxuXHJcblxyXG5cdGFydGljbGVEYXRhICs9ICc8c2VjdGlvbiBjbGFzcz1cInNtLWFydGljbGUgbW9idmlld1wiPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gJzxkaXYgY2xhc3M9XCJhcnRpY2xlLW1ldGFkYXRhXCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFjdGlvbi1mbGFnIGFydGljbGUtcHJldmlld19fYm9va21hcmtlciBwb3Atb3V0X190cmlnZ2VyIGpzLWJvb2ttYXJrLWFydGljbGVcIiBkYXRhLXBvcC1vdXQtdHlwZT1cInNpZ24taW5cIiBkYXRhLXBvcC1vdXQtYWxpZ249XCJyaWdodFwiIGRhdGEtYm9va21hcmstaWQ9XCInICsgZGF0YS5hcnRpY2xlc1s4XS5pZCArICdcIiBkYXRhLWFuYWx5dGljcz1cIntcImJvb2ttYXJrXCI6IFwiJyArIGJvb2ttYXJrSW5mbzggKyAnXCIsIFwiYm9va21hcmtfdGl0bGVcIjogXCInICsgZGF0YS5hcnRpY2xlc1s4XS5saXN0YWJsZVRpdGxlICsgJ1wiLCBcImJvb2ttYXJrX3B1YmxpY2F0aW9uXCI6IFwiQ29tbW9kaXRpZXNcIn1cIiBkYXRhLWlzLWJvb2ttYXJrZWQ9XCInICsgZGF0YS5hcnRpY2xlc1s4XS5pc0FydGljbGVCb29rbWFya2VkICsgJ1wiPjxzcGFuIGNsYXNzPVwiYWN0aW9uLWZsYWdfX2xhYmVsIGpzLWJvb2ttYXJrLWxhYmVsXCIgZGF0YS1sYWJlbC1ib29rbWFyaz1cIicgKyBkYXRhLmFydGljbGVzWzhdLmJvb2ttYXJrVGV4dCArICdcIiBkYXRhLWxhYmVsLWJvb2ttYXJrZWQ9XCInICsgZGF0YS5hcnRpY2xlc1s4XS5ib29rbWFya2VkVGV4dCArICdcIj4nICsgYm9va21hcmtJbmZvOCArICc8L3NwYW4+PHN2ZyBjbGFzcz1cImFjdGlvbi1mbGFnX19pY29uIGFjdGlvbi1mbGFnX19pY29uLS1ib29rbWFyayBhcnRpY2xlLWJvb2ttYXJrIGFydGljbGUtYm9va21hcmtfX2Jvb2ttYXJrZWQgJytmYm9va21hcmtJY29uOCsnXCI+PHVzZSB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bGluazpocmVmPVwiL2Rpc3QvaW1nL3N2Zy1zcHJpdGUuc3ZnI2Jvb2ttYXJrZWRcIj48L3VzZT48L3N2Zz48c3ZnIGNsYXNzPVwiYWN0aW9uLWZsYWdfX2ljb24gYWN0aW9uLWZsYWdfX2ljb24tLWJvb2ttYXJrIGFydGljbGUtYm9va21hcmsgJytzYm9va21hcmtJY29uOCsnXCI+PHVzZSB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4bGluazpocmVmPVwiL2Rpc3QvaW1nL3N2Zy1zcHJpdGUuc3ZnI2Jvb2ttYXJrXCI+PC91c2U+PC9zdmc+PC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPHVsPic7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1s4XS5saXN0YWJsZURhdGUgPyAnPGxpPjx0aW1lIGNsYXNzPVwiYXJ0aWNsZS1tZXRhZGF0YV9fZGF0ZVwiPicgKyBkYXRhLmFydGljbGVzWzhdLmxpc3RhYmxlRGF0ZSArICc8L3RpbWU+PC9saT4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1s4XS5saW5rYWJsZVRleHQgPyAnPGxpPjxoNj4nICsgZGF0YS5hcnRpY2xlc1s4XS5saW5rYWJsZVRleHQgKyAnPC9oNj48L2xpPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC91bD4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L2Rpdj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8ZGl2IGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19pbm5lci13cmFwcGVyIHNob3dhcnRpY2xlXCI+JztcclxuXHRhcnRpY2xlRGF0YSArPSBkYXRhLmFydGljbGVzWzhdLmxpc3RhYmxlVGl0bGUgPyAnPGgxIGNsYXNzPVwiYXJ0aWNsZS1wcmV2aWV3X19oZWFkbGluZVwiPjxhIGhyZWY9XCInICsgbGlua2FibGVVcmw4ICsgJ1wiIGNsYXNzPVwiY2xpY2stdXRhZ1wiIGRhdGEtaW5mbz1cXCd7XCJldmVudF9uYW1lXCI6XCJhcnRpY2xlX2NsaWNrX3Rocm91Z2hcIixcInBhZ2VfbmFtZVwiOlwiJyArIGFuYWx5dGljc19kYXRhW1wicGFnZV9uYW1lXCJdICsgJ1wiLFwiY2xpY2tfdGhyb3VnaF9kZXN0aW5hdGlvblwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbOF0ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcImdhX2V2ZW50Q2F0ZWdvcnlcIjpcIk15IFZpZXcgUGFnZSBBcnRpY2xlc1wiLFwiZ2FfZXZlbnRBY3Rpb25cIjpcIicgKyBhbmFseXRpY3NfZGF0YVtcInB1YmxpY2F0aW9uXCJdICsgJ1wiLFwiZ2FfZXZlbnRMYWJlbFwiOlwiJyArIGRhdGEuYXJ0aWNsZXNbOF0ubGlzdGFibGVUaXRsZS5yZXBsYWNlKC8nL2csIFwiXCIpLnJlcGxhY2UoL1wiL2csICcnKSArICdcIixcInB1YmxpY2F0aW9uX2NsaWNrXCI6XCInICsgYW5hbHl0aWNzX2RhdGFbXCJwdWJsaWNhdGlvblwiXSArICdcIn1cXCc+JyArIGRhdGEuYXJ0aWNsZXNbOF0ubGlzdGFibGVUaXRsZSArICc8L2E+PC9oMT4nIDogJyc7XHJcblx0YXJ0aWNsZURhdGEgKz0gZGF0YS5hcnRpY2xlc1sxXS5saXN0YWJsZUF1dGhvckJ5TGluZSA/ICc8c3BhbiBjbGFzcz1cImFydGljbGUtcHJldmlld19fYnlsaW5lXCI+JyArIGRhdGEuYXJ0aWNsZXNbMV0ubGlzdGFibGVBdXRob3JCeUxpbmUgKyAnPC9zcGFuPicgOiAnJztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPGRpdiBjbGFzcz1cImFydGljbGUtcHJldmlld19fdGFncyBiYXItc2VwYXJhdGVkLWxpbmstbGlzdFwiPic7XHJcblx0aWYgKGRhdGEuYXJ0aWNsZXNbOF0ubGlzdGFibGVUb3BpY3MpIHtcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5hcnRpY2xlc1s4XS5saXN0YWJsZVRvcGljcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgZ2V0TGluazggPSBkYXRhLmFydGljbGVzWzhdLmxpc3RhYmxlVG9waWNzW2ldLmxpbmthYmxlVXJsID8gZGF0YS5hcnRpY2xlc1s4XS5saXN0YWJsZVRvcGljc1tpXS5saW5rYWJsZVVybCA6ICcjJztcclxuXHRcdFx0YXJ0aWNsZURhdGEgKz0gJzxhIGhyZWY9XCInICsgZ2V0TGluazggKyAnXCI+JyArIGRhdGEuYXJ0aWNsZXNbOF0ubGlzdGFibGVUb3BpY3NbaV0ubGlua2FibGVUZXh0ICsgJzwvYT4nO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRhcnRpY2xlRGF0YSArPSAnPC9kaXY+JztcclxuXHRhcnRpY2xlRGF0YSArPSAnPC9zZWN0aW9uPic7XHJcblx0XHJcblx0YXJ0aWNsZURhdGEgKz0gJzwvc2VjdGlvbj4nO1xyXG5cdGFydGljbGVEYXRhICs9ICc8L2Rpdj4nO1xyXG5cdFxyXG5cdGFydGljbGVEYXRhICs9ICc8aW5wdXQgdHlwZT1cImhpZGRlblwiIGNsYXNzPVwiZ2V0UGFnaW5hdGlvbk51bVwiIGRhdGEtcGFnZVNpemU9XCInK2RhdGEubG9hZE1vcmUucGFnZVNpemUrJ1wiIGRhdGEtcGFnZU5vPVwiJytkYXRhLmxvYWRNb3JlLnBhZ2VObysnXCIgZGF0YS1sb2FkdXJsPVwiJytkYXRhLmxvYWRNb3JlLmxvYWRNb3JlTGlua1VybCsnXCIgZGF0YS10YXhvbm9teUlkcz1cIicrZGF0YS5sb2FkTW9yZS50YXhvbm9teUlkcysnXCIgLz4nO1xyXG5cdFxyXG5cdHJldHVybiBhcnRpY2xlRGF0YTtcclxufVxyXG5cclxuJChmdW5jdGlvbigpe1xyXG5cdHZhciBnZXRMYXlvdXRJbmZvID0gJCgnI2dldExheW91dEluZm8nKS52YWwoKSxcclxuXHQgICAgbGF5b3V0MSA9IHRydWUsXHJcblx0ICAgIGxvYWRMYXlvdXREYXRhID0gJycsXHJcblx0ICAgIGdldExpSWR4LCBnZXRBcnRpY2xlSWR4O1xyXG5cdGlmICh0eXBlb2YgbG9hZFByZWZlcmFuY2VJZCAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG5cdFx0dmFyIGxvYWREeW5EYXRhID0gbG9hZFByZWZlcmFuY2VJZFtcIlNlY3Rpb25zXCJdLmxlbmd0aCA8IGxvYWRQcmVmZXJhbmNlSWQuRGVmYXVsdFNlY3Rpb25Mb2FkQ291bnQgPyBsb2FkUHJlZmVyYW5jZUlkW1wiU2VjdGlvbnNcIl0ubGVuZ3RoIDogbG9hZFByZWZlcmFuY2VJZC5EZWZhdWx0U2VjdGlvbkxvYWRDb3VudCxcclxuXHRcdGdldEFydGljYWxJZHggPSAwLCBwb3N0ZWRJZCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KCcjJylbMV07XHJcblx0XHRcclxuXHRcdGlmKHBvc3RlZElkICE9ICcnICYmIHBvc3RlZElkICE9IHVuZGVmaW5lZCl7XHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbG9hZFByZWZlcmFuY2VJZFtcIlNlY3Rpb25zXCJdLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0aWYgKGxvYWRQcmVmZXJhbmNlSWRbXCJTZWN0aW9uc1wiXVtpXVtcIkNoYW5uZWxJZFwiXSA9PSBwb3N0ZWRJZCkge1xyXG5cdFx0XHRcdFx0Z2V0QXJ0aWNhbElkeCA9IGkgKyAxO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGxvYWREeW5EYXRhID0gZ2V0QXJ0aWNhbElkeDtcclxuXHRcdH1cclxuXHRcdGdldExpSWR4ID0gbG9hZER5bkRhdGE7XHJcblx0XHRnZXRBcnRpY2xlSWR4ID0gbG9hZER5bkRhdGE7XHJcblx0XHRmb3IodmFyIGk9MDsgaTxsb2FkRHluRGF0YTsgaSsrKXtcclxuXHRcdFx0dmFyIHNldElkID0gbG9hZFByZWZlcmFuY2VJZFtcIlNlY3Rpb25zXCJdO1xyXG5cdFx0XHRpZiAoc2V0SWQubGVuZ3RoKSB7XHJcblx0XHRcdFx0KGZ1bmN0aW9uIChpZHgpIHtcclxuXHRcdFx0XHRcdGlmIChpZHggPCBsb2FkRHluRGF0YSkge1xyXG5cdFx0XHRcdFx0XHQkLmFqYXgoe1xyXG5cdFx0XHRcdFx0XHRcdHVybDogJy9hcGkvYXJ0aWNsZXNlYXJjaCcsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YTogSlNPTi5zdHJpbmdpZnkoeydUYXhvbm9teUlkcyc6IHNldElkW2lkeF1bXCJUYXhvbm9teUlkc1wiXSwgJ1BhZ2VObyc6IDEsICdQYWdlU2l6ZSc6IDkgfSksXHJcblx0XHRcdFx0XHRcdFx0ZGF0YVR5cGU6ICdqc29uJyxcclxuXHRcdFx0XHRcdFx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcblx0XHRcdFx0XHRcdFx0dHlwZTogJ1BPU1QnLFxyXG5cdFx0XHRcdFx0XHRcdGNhY2hlOiBmYWxzZSxcclxuXHRcdFx0XHRcdFx0XHRhc3luYzogZmFsc2UsXHJcblx0XHRcdFx0XHRcdFx0YmVmb3JlU2VuZDogZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRcdFx0XHRcdCQoJy5zcGlubmVySWNvbicpLnJlbW92ZUNsYXNzKCdoaWRlc3BpbicpO1xyXG5cdFx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24oZGF0YSl7XHJcblx0XHRcdFx0XHRcdFx0XHRpZihkYXRhLmFydGljbGVzICYmIHR5cGVvZiBkYXRhLmFydGljbGVzID09PSBcIm9iamVjdFwiICYmIGRhdGEuYXJ0aWNsZXMubGVuZ3RoID49IDkpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZihsYXlvdXQxKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRsYXlvdXQxID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0bG9hZExheW91dERhdGEgPSBsb2FkTGF5b3V0T25lRGF0YShkYXRhLCBpZHgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCQoJy5zcGlubmVySWNvbicpLmFkZENsYXNzKCdoaWRlc3BpbicpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCQoJy5wZXJzb25hbGlzYXRpb25QYW4nKS5hcHBlbmQobG9hZExheW91dERhdGEpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5maW5kVG9vbHRpcHMoKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRlbHNle1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGxheW91dDEgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGxvYWRMYXlvdXREYXRhID0gbG9hZExheW91dFR3b0RhdGEoZGF0YSwgaWR4KTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQkKCcuc3Bpbm5lckljb24nKS5hZGRDbGFzcygnaGlkZXNwaW4nKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQkKCcucGVyc29uYWxpc2F0aW9uUGFuJykuYXBwZW5kKGxvYWRMYXlvdXREYXRhKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuZmluZFRvb2x0aXBzKCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHRcdGVycm9yOiBmdW5jdGlvbiBlcnJvcih4aHIsIGVycm9yVHlwZSwgX2Vycm9yKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZygnZXJyICcgKyBfZXJyb3IpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSkoaSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0JCgnLnBlcnNvbmFsaXNhdGlvblBhbicpLm9uKCdjbGljaycsICcubG9hZG1vcmUnLCBmdW5jdGlvbigpe1xyXG5cdFx0dmFyICR0aGlzID0gJCh0aGlzKSxcclxuXHRcdCAgICBlYWNoc3RvcnlNcGFuID0gJHRoaXMuY2xvc2VzdCgnLmVhY2hzdG9yeU1wYW4nKSxcclxuXHRcdCAgICBlYWNoc3RvcnkgPSBlYWNoc3RvcnlNcGFuLmZpbmQoJy5lYWNoc3RvcnknKSxcclxuXHRcdCAgICBlYWNoc3RvcnlJZCA9IGVhY2hzdG9yeS5hdHRyKCdpZCcpLFxyXG5cdFx0ICAgIGxheW91dENscyA9IGVhY2hzdG9yeS5hdHRyKCdjbGFzcycpLFxyXG5cdFx0ICAgIGxvYWRMYXlvdXREYXRhO1xyXG5cclxuXHRcdHZhciBsYXlvdXQgPSBsYXlvdXRDbHMuaW5kZXhPZignbGF5b3V0MScpICE9PSAtMSA/ICdsYXlvdXQxJyA6ICdsYXlvdXQyJztcclxuXHRcdHZhciBzZXRJZCA9IGxvYWRQcmVmZXJhbmNlSWRbXCJTZWN0aW9uc1wiXSwgXHJcblx0XHRzZW5kdGF4b25vbXlJZHNBcnIgID0gJHRoaXMuY2xvc2VzdCgnLmVhY2hzdG9yeU1wYW4nKS5maW5kKCcuZ2V0UGFnaW5hdGlvbk51bScpLmF0dHIoJ2RhdGEtdGF4b25vbXlJZHMnKS5zcGxpdCgnLCcpO1xyXG5cclxuXHRcdCQuYWpheCh7XHJcblx0XHRcdHVybDogJHRoaXMuY2xvc2VzdCgnLmVhY2hzdG9yeU1wYW4nKS5maW5kKCcuZ2V0UGFnaW5hdGlvbk51bScpLmF0dHIoJ2RhdGEtbG9hZHVybCcpLFxyXG5cdFx0XHRkYXRhVHlwZTogJ2pzb24nLFxyXG5cdFx0XHR0eXBlOiAnUE9TVCcsXHJcblx0XHRcdGRhdGE6IEpTT04uc3RyaW5naWZ5KHsnVGF4b25vbXlJZHMnOiBzZW5kdGF4b25vbXlJZHNBcnIsICdQYWdlTm8nOiAkdGhpcy5jbG9zZXN0KCcuZWFjaHN0b3J5TXBhbicpLmZpbmQoJy5nZXRQYWdpbmF0aW9uTnVtJykuYXR0cignZGF0YS1wYWdlTm8nKSwgJ1BhZ2VTaXplJzogJHRoaXMuY2xvc2VzdCgnLmVhY2hzdG9yeU1wYW4nKS5maW5kKCcuZ2V0UGFnaW5hdGlvbk51bScpLmF0dHIoJ2RhdGEtcGFnZVNpemUnKSB9KSxcclxuXHRcdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG5cdFx0XHRzdWNjZXNzOiBmdW5jdGlvbihkYXRhKXtcclxuXHRcdFx0XHRpZihkYXRhLmFydGljbGVzICYmIHR5cGVvZiBkYXRhLmFydGljbGVzID09PSBcIm9iamVjdFwiICYmIGRhdGEuYXJ0aWNsZXMubGVuZ3RoID49IDkpe1xyXG5cdFx0XHRcdFx0JHRoaXMuY2xvc2VzdCgnLmVhY2hzdG9yeU1wYW4nKS5maW5kKCcuZ2V0UGFnaW5hdGlvbk51bScpLmF0dHIoeydkYXRhLXRheG9ub215SWRzJzogZGF0YS5sb2FkTW9yZS50YXhvbm9teUlkcywgJ2RhdGEtbG9hZHVybCc6IGRhdGEubG9hZE1vcmUubG9hZE1vcmVMaW5rVXJsLCAnZGF0YS1wYWdlTm8nOiBkYXRhLmxvYWRNb3JlLnBhZ2VObywgJ2RhdGEtcGFnZVNpemUnOiBkYXRhLmxvYWRNb3JlLnBhZ2VTaXplfSk7XHJcblx0XHRcdFx0XHRpZihsYXlvdXQgPT0gJ2xheW91dDEnKXtcclxuXHRcdFx0XHRcdFx0bG9hZExheW91dERhdGEgPSBjcmVhdGVMYXlvdXRJbm5lcjEoZGF0YSk7XHJcblx0XHRcdFx0XHRcdCQoZWFjaHN0b3J5KS5hcHBlbmQobG9hZExheW91dERhdGEpO1xyXG5cdFx0XHRcdFx0XHR3aW5kb3cuZmluZFRvb2x0aXBzKCk7XHJcblx0XHRcdFx0XHRcdGlmKGRhdGEubG9hZE1vcmUgJiYgIWRhdGEubG9hZE1vcmUuZGlzcGxheUxvYWRNb3JlKXtcclxuXHRcdFx0XHRcdFx0XHQkdGhpcy5jbG9zZXN0KCcuZWFjaHN0b3J5TXBhbicpLmZpbmQoJy5sb2FkbW9yZScpLmNzcygnZGlzcGxheScsICdub25lJyk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2V7XHJcblx0XHRcdFx0XHRcdGxvYWRMYXlvdXREYXRhID0gY3JlYXRlTGF5b3V0SW5uZXIyKGRhdGEpO1xyXG5cdFx0XHRcdFx0XHQkKGVhY2hzdG9yeSkuYXBwZW5kKGxvYWRMYXlvdXREYXRhKTtcclxuXHRcdFx0XHRcdFx0d2luZG93LmZpbmRUb29sdGlwcygpO1xyXG5cdFx0XHRcdFx0XHRpZihkYXRhLmxvYWRNb3JlICYmICFkYXRhLmxvYWRNb3JlLmRpc3BsYXlMb2FkTW9yZSl7XHJcblx0XHRcdFx0XHRcdFx0JHRoaXMuY2xvc2VzdCgnLmVhY2hzdG9yeU1wYW4nKS5maW5kKCcubG9hZG1vcmUnKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRlcnJvcjogZnVuY3Rpb24oeGhyLCBlcnJvclR5cGUsIGVycm9yKXtcclxuXHRcdFx0XHRjb25zb2xlLmxvZygnZXJyICcgKyBlcnJvcik7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0pO1xyXG5cdFxyXG5cdHZhciBlYWNoc3RvcnlMZW5ndGggPSB0eXBlb2YgbG9hZFByZWZlcmFuY2VJZCAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9hZFByZWZlcmFuY2VJZC5EZWZhdWx0U2VjdGlvbkxvYWRDb3VudCA/IGxvYWRQcmVmZXJhbmNlSWQuRGVmYXVsdFNlY3Rpb25Mb2FkQ291bnQgOiAwO1xyXG5cdCQod2luZG93KS5zY3JvbGwoZnVuY3Rpb24oKXtcclxuXHRcdHZhciBlYWNoc3RvcnlNcGFuID0gJCgnLnBlcnNvbmFsaXNhdGlvblBhbiAuZWFjaHN0b3J5TXBhbicpLFxyXG5cdFx0ICAgIGVhY2hzdG9yeU1wYW5MYXN0ID0gZWFjaHN0b3J5TXBhbi5sYXN0KCksXHJcblx0XHQgICAgbGF5b3V0Q2xzID0gZWFjaHN0b3J5TXBhbi5maW5kKCcuZWFjaHN0b3J5JykuYXR0cignY2xhc3MnKSxcclxuXHRcdCAgICBjb250ZW50SGVpID0gJCgnLnBlcnNvbmFsaXNhdGlvblBhbicpLmhlaWdodCgpLFxyXG5cdFx0ICAgIGxvYWRzZWN0aW9uLFxyXG5cdFx0ICAgIHRleG9ub215SWQ7XHJcblx0XHQgXHJcblx0XHRpZigkKHdpbmRvdykuc2Nyb2xsVG9wKCkgPiBjb250ZW50SGVpIC0gNDAwKXtcclxuXHRcdFx0dmFyIGdldHNjcm9sbERhdGE7XHJcblx0XHRcdFxyXG5cdFx0XHRpZih0eXBlb2YgbG9hZFByZWZlcmFuY2VJZCAhPT0gXCJ1bmRlZmluZWRcIil7XHJcblx0XHRcdFx0aWYoZ2V0QXJ0aWNsZUlkeCA8IGxvYWRQcmVmZXJhbmNlSWRbXCJTZWN0aW9uc1wiXS5sZW5ndGgpe1xyXG5cdFx0XHRcdFx0Z2V0TGlJZHggPSBnZXRBcnRpY2xlSWR4O1xyXG5cdFx0XHRcdFx0bG9hZHNlY3Rpb24gPSBnZXRBcnRpY2xlSWR4O1xyXG5cdFx0XHRcdFx0dGV4b25vbXlJZCA9IGxvYWRQcmVmZXJhbmNlSWRbXCJTZWN0aW9uc1wiXVtsb2Fkc2VjdGlvbl1bXCJUYXhvbm9teUlkc1wiXTtcclxuXHRcdFx0XHRcdGdldEFydGljbGVJZHgrKztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZXtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZXtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdCQuYWpheCh7XHJcblx0XHRcdFx0dXJsOiAnL2FwaS9hcnRpY2xlc2VhcmNoJywgXHJcblx0XHRcdFx0ZGF0YTogSlNPTi5zdHJpbmdpZnkoeydUYXhvbm9teUlkcyc6IHRleG9ub215SWQsICdQYWdlTm8nOiAxLCAnUGFnZVNpemUnOiA5IH0pLFxyXG5cdFx0XHRcdHR5cGU6ICdQT1NUJyxcclxuXHRcdFx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcblx0XHRcdFx0Y2FjaGU6IGZhbHNlLFxyXG5cdFx0XHRcdGFzeW5jOiBmYWxzZSxcclxuXHRcdFx0XHRkYXRhVHlwZTogJ2pzb24nLFxyXG5cdFx0XHRcdGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKCl7XHJcblx0XHRcdFx0XHQkKCcuc3Bpbm5lckljb24nKS5yZW1vdmVDbGFzcygnaGlkZXNwaW4nKTtcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpe1xyXG5cdFx0XHRcdFx0aWYoZGF0YS5hcnRpY2xlcyAmJiB0eXBlb2YgZGF0YS5hcnRpY2xlcyA9PT0gXCJvYmplY3RcIiAmJiBkYXRhLmFydGljbGVzLmxlbmd0aCA+PSA5KXtcclxuXHRcdFx0XHRcdFx0aWYoJCgnLmVhY2hzdG9yeU1wYW4nLCAnLnBlcnNvbmFsaXNhdGlvblBhbicpLmxlbmd0aCAlIDIgPT0gMCl7XHJcblx0XHRcdFx0XHRcdFx0Z2V0c2Nyb2xsRGF0YSA9IGxvYWRMYXlvdXRPbmVEYXRhKGRhdGEsIGxvYWRzZWN0aW9uKTtcclxuXHRcdFx0XHRcdFx0XHQkKCcuc3Bpbm5lckljb24nKS5hZGRDbGFzcygnaGlkZXNwaW4nKTtcclxuXHRcdFx0XHRcdFx0XHQkKCcucGVyc29uYWxpc2F0aW9uUGFuJykuYXBwZW5kKGdldHNjcm9sbERhdGEpO1xyXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5maW5kVG9vbHRpcHMoKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRlbHNleyBcclxuXHRcdFx0XHRcdFx0XHRnZXRzY3JvbGxEYXRhID0gbG9hZExheW91dFR3b0RhdGEoZGF0YSwgbG9hZHNlY3Rpb24pO1xyXG5cdFx0XHRcdFx0XHRcdCQoJy5zcGlubmVySWNvbicpLmFkZENsYXNzKCdoaWRlc3BpbicpO1xyXG5cdFx0XHRcdFx0XHRcdCQoJy5wZXJzb25hbGlzYXRpb25QYW4nKS5hcHBlbmQoZ2V0c2Nyb2xsRGF0YSk7XHJcblx0XHRcdFx0XHRcdFx0d2luZG93LmZpbmRUb29sdGlwcygpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRlcnJvcjogZnVuY3Rpb24oeGhyLCBlcnJvclR5cGUsIGVycm9yKXtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCd4aHIgJyArIHhociArICcgZXJyb3JUeXBlICcgKyBlcnJvclR5cGUgKyAnIGVycm9yICcgKyBlcnJvcik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHRcclxuXHQkKCcubWFpbi1tZW51X19ob3ZlcmFibGUgYS5teXZpZXdMaW5rJykuY2xpY2soZnVuY3Rpb24gKGUpIHtcclxuXHRcdGlmKCQoJyNoZG5NeVZpZXdQYWdlJykgJiYgJCgnI2hkbk15Vmlld1BhZ2UnKS52YWwoKSA9PSBcInRydWVcIil7XHJcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0dmFyICR0aGlzID0gJCh0aGlzKSxcclxuXHRcdFx0XHRuYW1lID0gJHRoaXMuYXR0cignbmFtZScpLFxyXG5cdFx0XHRcdGdldFBvcyA9ICQoJyMnICsgbmFtZSkucG9zaXRpb24oKSxcclxuXHRcdFx0XHRsYXRlc3RTdWJqZWN0ID0gJCgnIycgKyBuYW1lKS5jbG9zZXN0KCcuZWFjaHN0b3J5TXBhbicpLnByZXYoJy5sYXRlc3RTdWJqZWN0JyksXHJcblx0XHRcdFx0c3ViamVjdEhlaSA9IGxhdGVzdFN1YmplY3QuaGVpZ2h0KCksXHJcblx0XHRcdFx0YWxsc3Rvcmllc0xlbiA9ICQoJy5wZXJzb25hbGlzYXRpb25QYW4gLmVhY2hzdG9yeU1wYW4nKS5sZW5ndGgsXHJcblx0XHRcdFx0bGlJZHggPSAkdGhpcy5jbG9zZXN0KCdsaScpLmluZGV4KCk7XHJcblx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRpZigkKCcuanMtbWVudS10b2dnbGUtYnV0dG9uLCAuanMtZnVsbC1tZW51LXRvZ2dsZScpLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSl7XHJcblx0XHRcdFx0XHQkKCcuanMtbWVudS10b2dnbGUtYnV0dG9uLCAuanMtZnVsbC1tZW51LXRvZ2dsZScpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuXHRcdFx0XHR9IFxyXG5cdFx0XHR9LCA1KTsgXHJcblx0XHRcdFxyXG5cdFx0XHRpZiAodHlwZW9mIGxvYWRQcmVmZXJhbmNlSWQgIT09ICd1bmRlZmluZWQnICYmICQoJyMnICsgbmFtZSkgJiYgJCgnIycgKyBuYW1lKS5sZW5ndGgpe1xyXG5cdFx0XHRcdCQod2luZG93KS5zY3JvbGxUb3AoZ2V0UG9zLnRvcCAtIHN1YmplY3RIZWkgKiAzKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRpZiAodHlwZW9mIGxvYWRQcmVmZXJhbmNlSWQgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuXHRcdFx0XHRcdGdldExpSWR4ID0gZ2V0QXJ0aWNsZUlkeDtcclxuXHRcdFx0XHRcdGZvciAodmFyIGkgPSBnZXRMaUlkeDsgaSA8PSBsaUlkeDsgaSsrKSB7XHJcblx0XHRcdFx0XHRcdHZhciBzZXRJZCA9IGxvYWRQcmVmZXJhbmNlSWRbXCJTZWN0aW9uc1wiXTtcclxuXHRcdFx0XHRcdFx0Z2V0QXJ0aWNsZUlkeCsrO1xyXG5cdFx0XHRcdFx0XHQoZnVuY3Rpb24gKGlkeCkge1xyXG5cdFx0XHRcdFx0XHRcdCQuYWpheCh7XHJcblx0XHRcdFx0XHRcdFx0XHR1cmw6ICcvYXBpL2FydGljbGVzZWFyY2gnLFxyXG5cdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGU6ICdqc29uJyxcclxuXHRcdFx0XHRcdFx0XHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuXHRcdFx0XHRcdFx0XHRcdGRhdGE6IEpTT04uc3RyaW5naWZ5KHsgJ1RheG9ub215SWRzJzogbG9hZFByZWZlcmFuY2VJZFtcIlNlY3Rpb25zXCJdW2lkeF1bXCJUYXhvbm9teUlkc1wiXSwgJ1BhZ2VObyc6IDEsICdQYWdlU2l6ZSc6IDkgfSksXHJcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiAnUE9TVCcsXHJcblx0XHRcdFx0XHRcdFx0XHRjYWNoZTogZmFsc2UsXHJcblx0XHRcdFx0XHRcdFx0XHRhc3luYzogZmFsc2UsXHJcblx0XHRcdFx0XHRcdFx0XHRiZWZvcmVTZW5kOiBmdW5jdGlvbiBiZWZvcmVTZW5kKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQkKCcuc3Bpbm5lckljb24nKS5yZW1vdmVDbGFzcygnaGlkZXNwaW4nKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiBzdWNjZXNzKGRhdGEpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYoZGF0YS5hcnRpY2xlcyAmJiB0eXBlb2YgZGF0YS5hcnRpY2xlcyA9PT0gXCJvYmplY3RcIiAmJiBkYXRhLmFydGljbGVzLmxlbmd0aCA+PSA5KXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoJCgnLmVhY2hzdG9yeU1wYW4nLCAnLnBlcnNvbmFsaXNhdGlvblBhbicpLmxlbmd0aCAlIDIgPT0gMCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bG9hZExheW91dERhdGEgPSBsb2FkTGF5b3V0T25lRGF0YShkYXRhLCBpZHgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0JCgnLnBlcnNvbmFsaXNhdGlvblBhbicpLmFwcGVuZChsb2FkTGF5b3V0RGF0YSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuZmluZFRvb2x0aXBzKCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGxvYWRMYXlvdXREYXRhID0gbG9hZExheW91dFR3b0RhdGEoZGF0YSwgaWR4KTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCQoJy5wZXJzb25hbGlzYXRpb25QYW4nKS5hcHBlbmQobG9hZExheW91dERhdGEpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0d2luZG93LmZpbmRUb29sdGlwcygpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBmdW5jdGlvbiBlcnJvcih4aHIsIGVycm9yVHlwZSwgX2Vycm9yNCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZygnZXJyICcgKyBfZXJyb3I0KTtcclxuXHRcdFx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoeGhyLCBzdGF0dXMpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKHN0YXR1cyA9PSBcInN1Y2Nlc3NcIiAmJiAkKCcjJyArIG5hbWUpLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIGdldGxhdGVzdFBvcyA9ICQoJyMnICsgbmFtZSkucG9zaXRpb24oKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChnZXRsYXRlc3RQb3MpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0JCgnLnNwaW5uZXJJY29uJykuYWRkQ2xhc3MoJ2hpZGVzcGluJyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCQod2luZG93KS5zY3JvbGxUb3AoZ2V0bGF0ZXN0UG9zLnRvcCAtIDEyMCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSwgNSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0fSkoaSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNle1xyXG5cdFx0XHRpZigkKCcjdmFsaWRhdGVQcmVmZXJlbmNlJykudmFsKCkgIT0gMSl7XHJcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdHZhciAkdGhpcyA9ICQodGhpcyksIGhyZWYgPSAkdGhpcy5hdHRyKCdocmVmJyksIGlkID0gJHRoaXMuYXR0cignbmFtZScpO1xyXG5cdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZiArICcjJyArIGlkO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSk7XHJcbn0pOyIsIi8qIGdsb2JhbCBhbmFseXRpY3NFdmVudCwgYW5hbHl0aWNzX2RhdGEsIGFuZ3VsYXIgKi9cclxuaW1wb3J0IEZvcm1Db250cm9sbGVyIGZyb20gJy4uL2NvbnRyb2xsZXJzL2Zvcm0tY29udHJvbGxlcic7XHJcbmltcG9ydCBDb29raWVzIGZyb20gJy4uL2pzY29va2llJztcclxuaW1wb3J0IHsgYW5hbHl0aWNzRXZlbnQgfSBmcm9tICcuLi9jb250cm9sbGVycy9hbmFseXRpY3MtY29udHJvbGxlcic7XHJcblxyXG4vKiAqICpcclxuU0FWRSBTRUFSQ0hcclxuVGhpcyBjb21wb25lbnQgaGFuZGxlcyBzYXZpbmcgc2VhcmNoZXMgZnJvbSB0aGUgU2VhcmNoIHBhZ2UsIGFzIHdlbGwgYXMgc2V0dGluZyBhbGVydHNcclxuZm9yIHRvcGljcyBmcm9tIEhvbWUvVG9waWMgcGFnZXMuIERpc3BpdGUgdGhlIG5hbWluZyBkaWZmZXJlbmNlcywgdGhlIGJhY2stZW5kIGZ1bmN0aW9uYWxpdHlcclxuaXMgdGhlIHNhbWUgLSB0b3BpYyBhbGVydHMgYXJlIGFjdHVhbGx5IGp1c3Qgc2F2ZWQgc2VhcmNoZXMgZm9yIHRoZSB0b3BpYyxcclxucGx1cyBhbiBlbWFpbCBhbGVydCBmb3IgbmV3IGFydGljbGVzLlxyXG4qICogKi9cclxuXHJcbmZ1bmN0aW9uIGdldFBhcmFtZXRlckJ5TmFtZShuYW1lLCB1cmwpIHtcclxuICAgIGlmICghdXJsKSB7XHJcbiAgICAgICAgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XHJcbiAgICB9XHJcbiAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXFxdXS9nLCBcIlxcXFwkJlwiKTtcclxuICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoXCJbPyZdXCIgKyBuYW1lICsgXCIoPShbXiYjXSopfCZ8I3wkKVwiKSxcclxuICAgICAgICByZXN1bHRzID0gcmVnZXguZXhlYyh1cmwpO1xyXG4gICAgaWYgKCFyZXN1bHRzKSByZXR1cm4gbnVsbDtcclxuICAgIGlmICghcmVzdWx0c1syXSkgcmV0dXJuICcnO1xyXG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzJdLnJlcGxhY2UoL1xcKy9nLCBcIiBcIikpO1xyXG59XHJcblxyXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuXHJcblx0Ly8gV2hlbiB0aGUgU2F2ZSBTZWFyY2ggcG9wLW91dCBpcyB0b2dnbGVkLCBuZWVkIHRvIHVwZGF0ZSBzb21lIGZvcm0gZmllbGRzXHJcblx0Ly8gd2l0aCB0aGUgbW9zdCByZWNlbnQgZGF0YS4gVXNlZCB0byB1c2UgQW5ndWxhciBmb3IgdGhpcywgYnV0IGZvciBzaXRlLXdpZGVcclxuXHQvLyByZXVzYWJpbGl0eSB3ZSBuZWVkIHRvIGRvIGl0IGluIFplcHRvLlxyXG5cdCQoJy5qcy1zYXZlLXNlYXJjaCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdCQoJy5qcy1zYXZlLXNlYXJjaC11cmwnKS52YWwod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLmhhc2gpO1xyXG5cdFx0JCgnLmpzLXNhdmUtc2VhcmNoLXRpdGxlJykudmFsKCQoJyNqcy1zZWFyY2gtZmllbGQnKS52YWwoKSk7XHJcblx0fSk7XHJcblxyXG5cdC8vIFBvcHVsYXRlcyB0b3BpYyBhbGVydCBkYXRhIHdoZW4gYSB1c2VyIGlzIGxvZ2dpbmcgaW4gYW5kIHNhdmluZyBzaW11bHRhbmVvdXNseVxyXG5cdCQoJy5qcy11cGRhdGUtdG9waWMtYWxlcnQnKS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcblx0XHQkKCcuanMtc2F2ZS1zZWFyY2gtdXJsJykudmFsKCQodGhpcykuZGF0YSgndG9waWMtYWxlcnQtdXJsJykpO1xyXG5cdFx0Ly8gU2VhcmNoL1RvcGljIHRpdGxlIGV4aXN0cyBhcyA8aW5wdXQ+IGFuZCA8c3Bhbj4sIG5lZWRzIHR3byB0ZWNobmlxdWVzIHRvIHByb3Blcmx5XHJcblx0XHQvLyB1cGRhdGUgdGhlIHZhbHVlcy5cclxuXHRcdCQoJy5qcy1zYXZlLXNlYXJjaC10aXRsZScpLnZhbCgkKHRoaXMpLmRhdGEoJ3RvcGljLWFsZXJ0LXRpdGxlJykpLmh0bWwoJCh0aGlzKS5kYXRhKCd0b3BpYy1hbGVydC10aXRsZScpKTtcclxuXHR9KTtcclxuXHJcblx0JCgnLmpzLXNldC10b3BpYy1hbGVydCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuXHJcblx0XHR2YXIgaXNTZXR0aW5nQWxlcnQgPSAhJCh0aGlzKS5kYXRhKCdoYXMtdG9waWMtYWxlcnQnKTtcclxuXHRcdHZhciB0b3BpY0xhYmVsID0gJCh0aGlzKS5maW5kKCcuanMtc2V0LXRvcGljLWxhYmVsJyk7XHJcblxyXG5cdFx0JCgnLmpzLXNhdmUtc2VhcmNoLXVybCcpLnZhbCgkKHRoaXMpLmRhdGEoJ3RvcGljLWFsZXJ0LXVybCcpKTtcclxuXHRcdCQoJy5qcy1zYXZlLXNlYXJjaC10aXRsZScpLnZhbCgkKHRoaXMpLmRhdGEoJ3RvcGljLWFsZXJ0LXRpdGxlJykpO1xyXG5cclxuXHRcdGlmKGlzU2V0dGluZ0FsZXJ0KSB7XHJcblx0XHRcdCQoJy5mb3JtLXNhdmUtc2VhcmNoJykuZmluZCgnYnV0dG9uW3R5cGU9c3VibWl0XScpLmNsaWNrKCk7XHJcblx0XHRcdHRvcGljTGFiZWwuaHRtbCh0b3BpY0xhYmVsLmRhdGEoJ2xhYmVsLWlzLXNldCcpKTtcclxuXHRcdFx0JCh0aGlzKS5kYXRhKCdoYXMtdG9waWMtYWxlcnQnLCAndHJ1ZScpO1xyXG5cdFx0XHQkKHRoaXMpLmZpbmQoJy5qcy10b3BpYy1pY29uLXVuc2V0JykucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG5cdFx0XHQkKHRoaXMpLmZpbmQoJy5qcy10b3BpYy1pY29uLXNldCcpLmFkZENsYXNzKCdpcy1hY3RpdmUnKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHdpbmRvdy5saWdodGJveENvbnRyb2xsZXIuc2hvd0xpZ2h0Ym94KCQodGhpcykpO1xyXG5cdFx0fVxyXG5cclxuXHR9KTtcclxuXHJcblx0dmFyIHNhdmVkU2VhcmNoID0gZ2V0UGFyYW1ldGVyQnlOYW1lKFwic3NcIik7XHJcblx0aWYgKHNhdmVkU2VhcmNoICE9IG51bGwgJiYgc2F2ZWRTZWFyY2ggPT0gXCJ0cnVlXCIpIHtcclxuXHQgICAgJCgnLmpzLXNhdmVkLXNlYXJjaC1zdWNjZXNzLWFsZXJ0JylcclxuXHRcdFx0XHQuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpXHJcblx0XHRcdFx0Lm9uKCdhbmltYXRpb25lbmQnLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdCAgICAkKGUudGFyZ2V0KS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XHJcblx0XHRcdFx0fSkuYWRkQ2xhc3MoJ2EtZmFkZS1hbGVydCcpO1xyXG5cdH1cclxuXHJcblx0dmFyIHJlbW92ZVRvcGljQWxlcnQgPSBuZXcgRm9ybUNvbnRyb2xsZXIoe1xyXG5cdFx0b2JzZXJ2ZTogJy5mb3JtLXJlbW92ZS10b3BpYy1hbGVydCcsXHJcblx0XHRzdWNjZXNzQ2FsbGJhY2s6IGZ1bmN0aW9uKGZvcm0sIGNvbnRleHQsIGV2ZW50KSB7XHJcblx0XHRcdCQoZm9ybSkuZmluZCgnLmpzLXNldC10b3BpYy1sYWJlbCcpLmh0bWwoJChmb3JtKS5maW5kKCcuanMtc2V0LXRvcGljLWxhYmVsJykuZGF0YSgnbGFiZWwtbm90LXNldCcpKTtcclxuXHRcdFx0JChmb3JtKS5maW5kKCcuanMtc2V0LXRvcGljLWFsZXJ0JykuZGF0YSgnaGFzLXRvcGljLWFsZXJ0JywgbnVsbCk7XHJcblx0XHRcdCQoZm9ybSkuZmluZCgnLmpzLXRvcGljLWljb24tdW5zZXQnKS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XHJcblx0XHRcdCQoZm9ybSkuZmluZCgnLmpzLXRvcGljLWljb24tc2V0JykucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG5cclxuXHRcdFx0YW5hbHl0aWNzRXZlbnQoXHQkLmV4dGVuZChhbmFseXRpY3NfZGF0YSwgJChmb3JtKS5kYXRhKCdhbmFseXRpY3MnKSkgKTtcclxuXHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdHZhciBzYXZlU2VhcmNoQ29udHJvbGxlciA9IG5ldyBGb3JtQ29udHJvbGxlcih7XHJcblx0XHRvYnNlcnZlOiAnLmZvcm0tc2F2ZS1zZWFyY2gnLFxyXG5cdFx0c3VjY2Vzc0NhbGxiYWNrOiBmdW5jdGlvbihmb3JtLCBjb250ZXh0LCBldmVudCkge1xyXG5cclxuXHRcdFx0Ly8gSWYgdGhlcmUncyBhIHN0YXNoZWQgc2VhcmNoLCByZW1vdmUgaXQuXHJcblx0XHRcdENvb2tpZXMucmVtb3ZlKCdzYXZlU3Rhc2hlZFNlYXJjaCcpO1xyXG5cclxuXHRcdFx0d2luZG93LmNvbnRyb2xQb3BPdXRzLmNsb3NlUG9wT3V0KCQoZm9ybSkuY2xvc2VzdCgnLnBvcC1vdXQnKSk7XHJcblx0XHRcdCQoJy5qcy1zYXZlZC1zZWFyY2gtc3VjY2Vzcy1hbGVydCcpXHJcblx0XHRcdFx0LmFkZENsYXNzKCdpcy1hY3RpdmUnKVxyXG5cdFx0XHRcdC5vbignYW5pbWF0aW9uZW5kJywgZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdFx0JChlLnRhcmdldCkucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG5cdFx0XHRcdH0pLmFkZENsYXNzKCdhLWZhZGUtYWxlcnQnKTtcclxuXHJcblx0XHRcdHdpbmRvdy5saWdodGJveENvbnRyb2xsZXIuY2xvc2VMaWdodGJveE1vZGFsKCk7XHJcblxyXG5cdFx0XHRpZih0eXBlb2YgYW5ndWxhciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRhbmd1bGFyLmVsZW1lbnQoJCgnLmpzLXNhdmVkLXNlYXJjaC1jb250cm9sbGVyJylbMF0pLmNvbnRyb2xsZXIoKS5zZWFyY2hJc1NhdmVkKCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciBldmVudF9kYXRhID0ge307XHJcblxyXG5cdFx0XHRpZigkKGZvcm0pLmRhdGEoJ2lzLXNlYXJjaCcpID09PSB0cnVlKSB7XHJcblx0XHRcdFx0ZXZlbnRfZGF0YS5ldmVudF9uYW1lID0gXCJ0b29sYmFyX3VzZVwiO1xyXG5cdFx0XHRcdGV2ZW50X2RhdGEudG9vbGJhcl90b29sID0gXCJzYXZlX3NlYXJjaFwiO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGV2ZW50X2RhdGEuZXZlbnRfbmFtZSA9IFwic2V0X2FsZXJ0XCI7XHJcblx0XHRcdFx0ZXZlbnRfZGF0YS5hbGVydF90b3BpYyA9ICQoZm9ybSkuZmluZCgnLmpzLXNhdmUtc2VhcmNoLXRpdGxlJykudmFsKCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGFuYWx5dGljc0V2ZW50KFx0JC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsIGV2ZW50X2RhdGEpICk7XHJcblxyXG5cdFx0fSxcclxuXHRcdGJlZm9yZVJlcXVlc3Q6IGZ1bmN0aW9uKGZvcm0pIHtcclxuXHRcdFx0aWYoISQoZm9ybSkuZmluZCgnLmpzLXNhdmUtc2VhcmNoLXRpdGxlJykudmFsKCkudHJpbSgpKSB7XHJcblx0XHRcdFx0JCgnLmpzLWZvcm0tZXJyb3ItRW1wdHlUaXRsZScpLnNob3coKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0pO1xyXG5cclxuXHR2YXIgc2F2ZVNlYXJjaExvZ2luQ29udHJvbGxlciA9IG5ldyBGb3JtQ29udHJvbGxlcih7XHJcblx0XHRvYnNlcnZlOiAnLmZvcm0tc2F2ZS1zZWFyY2gtbG9naW4nLFxyXG5cdFx0c3VjY2Vzc0NhbGxiYWNrOiBmdW5jdGlvbihmb3JtLCBjb250ZXh0LCBldmVudCkge1xyXG5cdFx0XHRDb29raWVzLnNldCgnc2F2ZVN0YXNoZWRTZWFyY2gnLCB7XHJcblx0XHRcdFx0J1RpdGxlJzogJCgnLmpzLXNhdmUtc2VhcmNoLXRpdGxlJykudmFsKCksXHJcblx0XHRcdFx0J1VybCc6ICQoJy5qcy1zYXZlLXNlYXJjaC11cmwnKS52YWwoKSxcclxuXHRcdFx0XHQnQWxlcnRFbmFibGVkJzogJCgnI0FsZXJ0RW5hYmxlZCcpLnByb3AoJ2NoZWNrZWQnKVxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdCQuYWpheCh7XHJcblx0XHRcdCAgICB0eXBlOiBcIlBPU1RcIixcclxuXHRcdFx0ICAgIHVybDogXCIvYXBpL1NhdmVkU2VhcmNoZXNcIixcclxuXHRcdFx0ICAgIGRhdGE6IHtcclxuXHRcdFx0ICAgICAgICB1cmw6ICQoJy5qcy1zYXZlLXNlYXJjaC11cmwnKS52YWwoKSxcclxuXHRcdFx0ICAgICAgICB0aXRsZTogJCgnLmpzLXNhdmUtc2VhcmNoLXRpdGxlJykudmFsKCksXHJcblx0XHRcdCAgICAgICAgYWxlcnRFbmFibGVkOiAkKCcjQWxlcnRFbmFibGVkJykucHJvcCgnY2hlY2tlZCcpXHJcblx0XHRcdCAgICB9XHJcblx0XHRcdH0pO1xyXG4gICAgICAgICAgICBcclxuXHRcdFx0dmFyIGxvZ2luQW5hbHl0aWNzID0gIHtcclxuXHRcdFx0XHRldmVudF9uYW1lOiAnbG9naW4nLFxyXG5cdFx0XHRcdGxvZ2luX3N0YXRlOiAnc3VjY2Vzc2Z1bCcsXHJcblx0XHRcdFx0dXNlck5hbWU6ICdcIicgKyAkKGZvcm0pLmZpbmQoJ2lucHV0W25hbWU9dXNlcm5hbWVdJykudmFsKCkgKyAnXCInXHJcblx0XHRcdH07XHJcblx0XHRcdGFuYWx5dGljc0V2ZW50KFx0JC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsIGxvZ2luQW5hbHl0aWNzKSApO1xyXG5cclxuXHRcdFx0dmFyIHNzUGFyYW0gPSBnZXRQYXJhbWV0ZXJCeU5hbWUoXCJzc1wiKTtcclxuXHRcdFx0dmFyIHNlYXJjaFZhbCA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XHJcblx0XHRcdGlmIChzc1BhcmFtID09IG51bGwpIHtcclxuXHRcdFx0ICAgIHNlYXJjaFZhbCA9IChzZWFyY2hWYWwubGVuZ3RoIDwgMSkgXHJcblx0XHRcdCAgICAgICAgPyBcIj9zcz10cnVlXCJcclxuICAgICAgICAgICAgICAgICAgICA6IHNlYXJjaFZhbCArIFwiJnNzPXRydWVcIjtcclxuXHRcdFx0fSAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgXHJcblx0XHRcdGlmIChzc1BhcmFtID09IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpXHJcblx0XHRcdCAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKHRydWUpO1xyXG5cdFx0XHRlbHNlIFxyXG5cdFx0XHQgICAgd2luZG93LmxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgc2VhcmNoVmFsICsgd2luZG93LmxvY2F0aW9uLmhhc2g7XHRcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0dmFyIHRvZ2dsZVNhdmVkU2VhcmNoQWxlcnRDb250cm9sbGVyID0gbmV3IEZvcm1Db250cm9sbGVyKHtcclxuXHRcdG9ic2VydmU6ICcuZm9ybS10b2dnbGUtc2F2ZWQtc2VhcmNoLWFsZXJ0JyxcclxuXHRcdHN1Y2Nlc3NDYWxsYmFjazogZnVuY3Rpb24oZm9ybSwgY29udGV4dCwgZSkge1xyXG5cdFx0XHR2YXIgYWxlcnRUb2dnbGUgPSAkKGZvcm0pLmZpbmQoJy5qcy1zYXZlZC1zZWFyY2gtYWxlcnQtdG9nZ2xlJyk7XHJcblx0XHRcdHZhciB2YWwgPSBhbGVydFRvZ2dsZS52YWwoKTtcclxuXHRcdFx0dmFyIGV2ZW50X2RhdGEgPSB7XHJcblx0XHRcdFx0c2F2ZWRfc2VhcmNoX2FsZXJ0X3RpdGxlOiAkKGZvcm0pLmRhdGEoJ2FuYWx5dGljcy10aXRsZScpLFxyXG5cdFx0XHRcdHNhdmVkX3NlYXJjaF9hbGVydF9wdWJsaWNhdGlvbjogJChmb3JtKS5kYXRhKCdhbmFseXRpY3MtcHVibGljYXRpb24nKVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0aWYgKHZhbCA9PT0gXCJvblwiKSB7XHJcblx0XHRcdFx0ZXZlbnRfZGF0YS5ldmVudF9uYW1lID0gJ3NhdmVkX3NlYXJjaF9hbGVydF9vZmYnO1xyXG5cdFx0XHRcdGFsZXJ0VG9nZ2xlLnZhbCgnb2ZmJyk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZXZlbnRfZGF0YS5ldmVudF9uYW1lID0gJ3NhdmVkX3NlYXJjaF9hbGVydF9vbic7XHJcblx0XHRcdFx0YWxlcnRUb2dnbGUudmFsKCdvbicpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRhbmFseXRpY3NFdmVudCggJC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsIGV2ZW50X2RhdGEpICk7XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdCQoJy5qcy1zYXZlZC1zZWFyY2gtYWxlcnQtdG9nZ2xlJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG5cdFx0JChlLnRhcmdldC5mb3JtKS5maW5kKCdidXR0b25bdHlwZT1zdWJtaXRdJykuY2xpY2soKTtcclxuXHR9KTtcclxuXHJcblx0Ly8gT24gcGFnZSBsb2FkLCBjaGVjayBmb3IgYW55IHN0YXNoZWQgc2VhcmNoZXMgdGhhdCBuZWVkIHRvIGJlIHNhdmVkXHJcblx0dmFyIHNhdmVTdGFzaGVkU2VhcmNoID0gQ29va2llcy5nZXRKU09OKCdzYXZlU3Rhc2hlZFNlYXJjaCcpO1xyXG5cclxuXHRpZihzYXZlU3Rhc2hlZFNlYXJjaCkge1xyXG5cdFx0Ly8gU2V0IGBTYXZlIFNlYXJjaGAgdmFsdWVzIGZyb20gc3Rhc2hlZCBzZWFyY2ggZGF0YVxyXG5cdFx0JCgnLmpzLXNhdmUtc2VhcmNoLXRpdGxlJykudmFsKHNhdmVTdGFzaGVkU2VhcmNoWydUaXRsZSddKTtcclxuXHRcdCQoJy5qcy1zYXZlLXNlYXJjaC11cmwnKS52YWwoc2F2ZVN0YXNoZWRTZWFyY2hbJ1VybCddKTtcclxuXHRcdCQoJyNBbGVydEVuYWJsZWQnKS5wcm9wKCdjaGVja2VkJywgc2F2ZVN0YXNoZWRTZWFyY2hbJ0FsZXJ0RW5hYmxlZCddKTtcclxuXHJcblx0XHQvLyBTYXZlIHRoZSBzdGFzaGVkIHNlYXJjaCBpZiBTZWFyY2ggKEFuZ3VsYXIpIHBhZ2VcclxuXHRcdGlmKHR5cGVvZiBhbmd1bGFyICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHQkKCcuZm9ybS1zYXZlLXNlYXJjaCcpLmZpbmQoJ2J1dHRvblt0eXBlPXN1Ym1pdF0nKS5jbGljaygpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0JCgnLmpzLXNldC10b3BpYy1hbGVydCcpLmVhY2goZnVuY3Rpb24oaW5kZXgsIGl0ZW0pIHtcclxuXHRcdFx0XHRpZigkKGl0ZW0pLmRhdGEoJ3RvcGljLWFsZXJ0LXVybCcpID09PSBzYXZlU3Rhc2hlZFNlYXJjaFsnVXJsJ10pIHtcclxuXHRcdFx0XHRcdCQoaXRlbSkuY2xpY2soKTtcclxuXHRcdFx0XHRcdC8vIElmIHRoZXJlJ3MgYSBzdGFzaGVkIHNlYXJjaCwgcmVtb3ZlIGl0LlxyXG5cdFx0XHRcdFx0Q29va2llcy5yZW1vdmUoJ3NhdmVTdGFzaGVkU2VhcmNoJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cclxuXHR2YXIgcmVtb3ZlU2F2ZWRTZWFyY2ggPSBuZXcgRm9ybUNvbnRyb2xsZXIoe1xyXG4gICAgICAgIG9ic2VydmU6ICcuZm9ybS1yZW1vdmUtc2F2ZWQtc2VhcmNoJyxcclxuICAgICAgICBzdWNjZXNzQ2FsbGJhY2s6IGZ1bmN0aW9uKGZvcm0sIGNvbnRleHQsIGV2dCkge1xyXG4gICAgICAgICAgICAkKGV2dC50YXJnZXQpLmNsb3Nlc3QoJ3RyJykucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICB3aW5kb3cuY29udHJvbFBvcE91dHMuY2xvc2VQb3BPdXQoJChmb3JtKS5jbG9zZXN0KCcucG9wLW91dCcpKTtcclxuICAgICAgICAgICAgJCgnLmpzLXNhdmVkLXNlYXJjaC1zdWNjZXNzLWFsZXJ0JylcclxuXHRcdFx0XHQuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpXHJcblx0XHRcdFx0Lm9uKCdhbmltYXRpb25lbmQnLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdCAgICBjb25zb2xlLmxvZyhcInNhdmUgc2VhcmNoIGNvbXBvbmVudDo2XCIpO1xyXG5cdFx0XHRcdCAgICAkKGUudGFyZ2V0KS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XHJcblx0XHRcdFx0fSkuYWRkQ2xhc3MoJ2EtZmFkZS1hbGVydCcpO1xyXG5cclxuICAgICAgICAgICAgd2luZG93LmxpZ2h0Ym94Q29udHJvbGxlci5jbG9zZUxpZ2h0Ym94TW9kYWwoKTtcclxuXHJcblx0XHRcdHZhciBldmVudF9kYXRhID0ge1xyXG5cdFx0XHRcdGV2ZW50X25hbWU6ICdzYXZlZF9zZWFyY2hfYWxlcnRfcmVtb3ZhbCcsXHJcblx0XHRcdFx0c2F2ZWRfc2VhcmNoX2FsZXJ0X3RpdGxlOiAkKGZvcm0pLmRhdGEoJ2FuYWx5dGljcy10aXRsZScpLFxyXG5cdFx0XHRcdHNhdmVkX3NlYXJjaF9hbGVydF9wdWJsaWNhdGlvbjogJChmb3JtKS5kYXRhKCdhbmFseXRpY3MtcHVibGljYXRpb24nKVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0YW5hbHl0aWNzRXZlbnQoICQuZXh0ZW5kKGFuYWx5dGljc19kYXRhLCBldmVudF9kYXRhKSApO1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSk7XHJcbiIsInZhciBJTkZPUk1BID0gd2luZG93LklORk9STUEgfHwge307XHJcbklORk9STUEudmlkZW9NaW5pID0gKGZ1bmN0aW9uKHdpbmRvdywgJCwgbmFtZXNwYWNlKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICAvL3ZhcmlhYmxlc1xyXG4gICAgdmFyIF92aWRlb01pbmlJbWdXcmFwcGVyID0gJCgnLnZpZGVvLW1pbmktY29udGFpbmVyIC52aWRlby1pbWcnKSxcclxuICAgICAgICBfdmlkZW9NaW5pUGxheUJ0bldyYXBwZXIgPSAkKCcudmlkZW8tbWluaS1jb250YWluZXIgLnBsYXktaWNvbicpLFxyXG4gICAgICAgIF92aWRlb01pbmlQbGF5ZXJNb2RhbCA9ICQoJyN2aWRlb01pbmlNb2RhbCcpLFxyXG4gICAgICAgIF92aWRlb01pbmlNb2RhbENsb3NlID0gJCgnLnZpZGVvLW1pbmktY2xvc2UnKSxcclxuICAgICAgICB2aWRlbyxcclxuICAgICAgICAvLyBtZXRob2RzXHJcbiAgICAgICAgaW5pdCxcclxuICAgICAgICBfcGxheVZpZGVvTWluaUltZ1dyYXBwZXIsXHJcbiAgICAgICAgX3BsYXlWaWRlb01pbmlCdG5XcmFwcGVyLFxyXG4gICAgICAgIF92aWRlb01pbmlTaG93UGxheUljb247XHJcblxyXG4gICAgX3BsYXlWaWRlb01pbmlCdG5XcmFwcGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgX3ZpZGVvTWluaVBsYXlCdG5XcmFwcGVyLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgdmlkZW9JbWcgPSAkKHRoaXMpLnBhcmVudCgpLmZpbmQoJ2ltZycpO1xyXG4gICAgICAgICAgICBpZiAodmlkZW9JbWcuYXR0cignZGF0YS12aWRlb3R5cGUnKSA9PSBcInlvdXR1YmVcIikge1xyXG4gICAgICAgICAgICAgICAgdmlkZW8gPSAnPGlmcmFtZSB3aWR0aD1cIjEwMCVcIiBzcmM9XCInICsgdmlkZW9JbWcuYXR0cignZGF0YS12aWRlb3VybCcpICsgJ1wiIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT4nO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZpZGVvSW1nLmF0dHIoJ2RhdGEtdmlkZW90eXBlJykgPT0gXCJ2aW1lb1wiKSB7XHJcbiAgICAgICAgICAgICAgICB2aWRlbyA9ICc8aWZyYW1lIHdpZHRoPVwiMTAwJVwiIHNyYz1cIicgKyB2aWRlb0ltZy5hdHRyKCdkYXRhLXZpZGVvdXJsJykgKyAnXCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPic7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmlkZW9JbWcuYXR0cignZGF0YS12aWRlb3R5cGUnKSA9PSBcIndpc3RpYVwiKSB7XHJcbiAgICAgICAgICAgICAgICB2aWRlbyA9ICc8aWZyYW1lIHdpZHRoPVwiMTAwJVwiIHNyYz1cIicgKyB2aWRlb0ltZy5hdHRyKCdkYXRhLXZpZGVvdXJsJykgKyAnXCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3ZpZGVvTWluaVBsYXllck1vZGFsLmZpbmQoJy5tb2RhbC1ib2R5IC52aWRlby1taW5pLXBsYXllcicpLmh0bWwodmlkZW8pXHJcbiAgICAgICAgICAgIF92aWRlb01pbmlQbGF5ZXJNb2RhbC5tb2RhbCgnc2hvdycpO1xyXG4gICAgICAgICAgICAvLyAkKHRoaXMpLnBhcmVudHMoJy52aWRlby1taW5pLWNvbnRhaW5lcicpLmZpbmQoJy5wbGF5LWljb24nKS5oaWRlKCk7XHJcbiAgICAgICAgICAvLyAgaW1nQ29udGFpbmVyLmZpbmQoX3ZpZGVvTWluaVBsYXlCdG5XcmFwcGVyKS5oaWRlKCk7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIF9wbGF5VmlkZW9NaW5pSW1nV3JhcHBlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIF92aWRlb01pbmlJbWdXcmFwcGVyLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoJCh0aGlzKS5hdHRyKCdkYXRhLXZpZGVvdHlwZScpID09IFwieW91dHViZVwiKSB7XHJcbiAgICAgICAgICAgICAgICB2aWRlbyA9ICc8aWZyYW1lIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIicgKyAkKHRoaXMpLmF0dHIoJ2hlaWdodCcpICsgJ1wiIHNyYz1cIicgKyAkKHRoaXMpLmF0dHIoJ2RhdGEtdmlkZW91cmwnKSArICdcIiBmcmFtZWJvcmRlcj1cIjBcIiBhbGxvd2Z1bGxzY3JlZW4+PC9pZnJhbWU+JztcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkKHRoaXMpLmF0dHIoJ2RhdGEtdmlkZW90eXBlJykgPT0gXCJ2aW1lb1wiKSB7XHJcbiAgICAgICAgICAgICAgICB2aWRlbyA9ICc8aWZyYW1lIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIicgKyAkKHRoaXMpLmF0dHIoJ2hlaWdodCcpICsgJ1wiIHNyYz1cIicgKyAkKHRoaXMpLmF0dHIoJ2RhdGEtdmlkZW91cmwnKSArICdcIiBmcmFtZWJvcmRlcj1cIjBcIiBhbGxvd2Z1bGxzY3JlZW4+PC9pZnJhbWU+JztcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkKHRoaXMpLmF0dHIoJ2RhdGEtdmlkZW90eXBlJykgPT0gXCJ3aXN0aWFcIikge1xyXG4gICAgICAgICAgICAgICAgdmlkZW8gPSAnPGlmcmFtZSB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCInICsgJCh0aGlzKS5hdHRyKCdoZWlnaHQnKSArICdcIiBzcmM9XCInICsgJCh0aGlzKS5hdHRyKCdkYXRhLXZpZGVvdXJsJykgKyAnXCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3ZpZGVvTWluaVBsYXllck1vZGFsLmZpbmQoJy5tb2RhbC1ib2R5IC52aWRlby1taW5pLXBsYXllcicpLmh0bWwodmlkZW8pXHJcbiAgICAgICAgICAgIF92aWRlb01pbmlQbGF5ZXJNb2RhbC5tb2RhbCgnc2hvdycpO1xyXG4gICAgICAgICAgICAvLyBfdmlkZW9NaW5pUGxheUJ0bldyYXBwZXIuaGlkZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgX3ZpZGVvTWluaVNob3dQbGF5SWNvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIF92aWRlb01pbmlNb2RhbENsb3NlLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBfdmlkZW9NaW5pUGxheUJ0bldyYXBwZXIuc2hvdygpO1xyXG4gICAgICAgICAgICAkKHRoaXMpLnBhcmVudHMoJy52aWRlby1taW5pLW1vZGFsJykuZmluZCgnaWZyYW1lJykucmVtb3ZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIF9wbGF5VmlkZW9NaW5pSW1nV3JhcHBlcigpO1xyXG4gICAgICAgIF9wbGF5VmlkZW9NaW5pQnRuV3JhcHBlcigpO1xyXG4gICAgICAgIF92aWRlb01pbmlTaG93UGxheUljb24oKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbml0OiBpbml0XHJcbiAgICB9O1xyXG59KHRoaXMsIFplcHRvLCAnSU5GT1JNQScpKTtcclxuWmVwdG8oSU5GT1JNQS52aWRlb01pbmkuaW5pdCgpKTtcclxuIiwiLy8gKiAqICpcclxuLy8gIEFOQUxZVElDUyBDT05UUk9MTEVSXHJcbi8vICBGb3IgZWFzZS1vZi11c2UsIGJldHRlciBEUlksIGJldHRlciBwcmV2ZW50aW9uIG9mIEpTIGVycm9ycyB3aGVuIGFkcyBhcmUgYmxvY2tlZFxyXG4vLyAqICogKlxyXG5cclxuZnVuY3Rpb24gYW5hbHl0aWNzRXZlbnQoZGF0YU9iaikge1xyXG4gICAgaWYodHlwZW9mIHV0YWcgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgdXRhZy5saW5rKGRhdGFPYmopO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IHsgYW5hbHl0aWNzRXZlbnQgfTtcclxuIiwiLyogZ2xvYmFscyBhbmFseXRpY3NfZGF0YSAqL1xyXG5pbXBvcnQgeyBhbmFseXRpY3NFdmVudCB9IGZyb20gJy4vYW5hbHl0aWNzLWNvbnRyb2xsZXInO1xyXG5cclxuZnVuY3Rpb24gYm9va21hcmtDb250cm9sbGVyKCkge1xyXG5cclxuICAgIC8vICogKiAqXHJcbiAgICAvLyAgQXJ0aWNsZSBib29rbWFya2luZyBsb2dpYyBnb2VzIGhlcmVcclxuICAgIC8vICogKiAqXHJcbiAgICB0aGlzLnRvZ2dsZSA9IGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICAgICAgdmFyIGJvb2ttYXJrID0ge1xyXG4gICAgICAgICAgICBlbG06ICQoZSlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBJRCBvZiB0aGUgYXJ0aWNsZSB3ZSdyZSBib29rbWFya2luZyBvciB1bi1ib29rbWFya2luZ1xyXG4gICAgICAgIGJvb2ttYXJrLmlkID0gYm9va21hcmsuZWxtLmNsb3Nlc3QoJy5qcy1ib29rbWFyay1hcnRpY2xlJykuZGF0YSgnYm9va21hcmstaWQnKTtcclxuXHJcbiAgICAgICAgLy8gU3Rhc2ggdGhlIGJvb2ttYXJrIGxhYmVsIGRhdGEgbm93LCBzd2FwIGxhYmVsIHRleHQgbGF0ZXJcclxuICAgICAgICBib29rbWFyay5sYWJlbCA9IHtcclxuICAgICAgICAgICAgZWxtOiBib29rbWFyay5lbG0uZmluZCgnLmpzLWJvb2ttYXJrLWxhYmVsJylcclxuICAgICAgICB9O1xyXG4gICAgICAgIGJvb2ttYXJrLmxhYmVsLmJvb2ttYXJrID0gYm9va21hcmsubGFiZWwuZWxtLmRhdGEoJ2xhYmVsLWJvb2ttYXJrJyk7XHJcbiAgICAgICAgYm9va21hcmsubGFiZWwuYm9va21hcmtlZCA9IGJvb2ttYXJrLmxhYmVsLmVsbS5kYXRhKCdsYWJlbC1ib29rbWFya2VkJyk7XHJcblxyXG4gICAgICAgIC8vIEFyZSB3ZSBib29rbWFya2luZyBhbiBhcnRpY2xlLCBvciB1bi1ib29rbWFya2luZz9cclxuICAgICAgICAvLyBVc2VkIGxhdGVyIHRvIGtub3cgd2hhdCBBUEkgZW5kcG9pbnQgdG8gaGl0LCBhbmQgd2hhdCBET00gY2hhbmdlcyBhcmUgcmVxdWlyZWRcclxuICAgICAgICBib29rbWFyay5pc0Jvb2ttYXJraW5nID0gYm9va21hcmsuZWxtLmRhdGEoJ2lzLWJvb2ttYXJrZWQnKSA/IGZhbHNlIDogdHJ1ZTtcclxuXHJcbiAgICAgICAgdmFyIGFwaUVuZHBvaW50ID0gYm9va21hcmsuaXNCb29rbWFya2luZyA/XHJcbiAgICAgICAgICAgICcvQWNjb3VudC9hcGkvU2F2ZWREb2N1bWVudEFwaS9TYXZlSXRlbS8nIDpcclxuICAgICAgICAgICAgJy9BY2NvdW50L2FwaS9TYXZlZERvY3VtZW50QXBpL1JlbW92ZUl0ZW0vJztcclxuXHJcbiAgICAgICAgaWYoYm9va21hcmsuaWQpIHtcclxuICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgIHVybDogYXBpRW5kcG9pbnQsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgRG9jdW1lbnRJRDogYm9va21hcmsuaWRcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjb250ZXh0OiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcclxuXHJcblx0XHRcdFx0XHRcdGlmKGJvb2ttYXJrLmlzQm9va21hcmtpbmcpIHtcclxuXHRcdFx0XHRcdFx0XHRhbmFseXRpY3NFdmVudCggJC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsICQoYm9va21hcmsuZWxtKS5kYXRhKCdhbmFseXRpY3MnKSkgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mbGlwSWNvbihib29rbWFyayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5mbGlwSWNvbiA9IGZ1bmN0aW9uKGJvb2ttYXJrKSB7XHJcblxyXG5cdFx0aWYoIWJvb2ttYXJrLmVsbS5oYXNDbGFzcygnanMtYW5ndWxhci1ib29rbWFyaycpKSB7XHJcblx0XHRcdCQoYm9va21hcmsuZWxtKS5maW5kKCcuYXJ0aWNsZS1ib29rbWFyaycpLnJlbW92ZUNsYXNzKCdpcy12aXNpYmxlJyk7XHJcblx0XHR9XHJcblxyXG4gICAgICAgIGlmKGJvb2ttYXJrLmlzQm9va21hcmtpbmcpIHtcclxuICAgICAgICAgICAgaWYoIWJvb2ttYXJrLmVsbS5oYXNDbGFzcygnanMtYW5ndWxhci1ib29rbWFyaycpKSB7XHJcbiAgICAgICAgICAgICAgICAkKGJvb2ttYXJrLmVsbSkuZmluZCgnLmFydGljbGUtYm9va21hcmtfX2Jvb2ttYXJrZWQnKS5hZGRDbGFzcygnaXMtdmlzaWJsZScpO1xyXG4gICAgICAgICAgICAgICAgYm9va21hcmsuZWxtLmRhdGEoJ2lzLWJvb2ttYXJrZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBib29rbWFyay5sYWJlbC5lbG0uaHRtbChib29rbWFyay5sYWJlbC5ib29rbWFya2VkKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYoIWJvb2ttYXJrLmVsbS5oYXNDbGFzcygnanMtYW5ndWxhci1ib29rbWFyaycpKSB7XHJcbiAgICAgICAgICAgICAgICAkKGJvb2ttYXJrLmVsbSkuZmluZCgnLmFydGljbGUtYm9va21hcmsnKS5ub3QoJy5hcnRpY2xlLWJvb2ttYXJrX19ib29rbWFya2VkJykuYWRkQ2xhc3MoJ2lzLXZpc2libGUnKTtcclxuICAgICAgICAgICAgICAgIGJvb2ttYXJrLmVsbS5kYXRhKCdpcy1ib29rbWFya2VkJywgbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYm9va21hcmsubGFiZWwuZWxtLmh0bWwoYm9va21hcmsubGFiZWwuYm9va21hcmspO1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBib29rbWFya0NvbnRyb2xsZXI7XHJcbiIsIi8qXHJcblxyXG5vcHRzLm9ic2VydmUg4oCUIEZvcm0gZWxlbWVudChzKSB0byBvYnNlcnZlXHJcbm9wdHMuYmVmb3JlUmVxdWVzdCDigJQgRnVuY3Rpb24gdG8gZXhlY3V0ZSBiZWZvcmUgbWFraW5nIEFqYXggcmVxdWVzdFxyXG5vcHRzLnN1Y2Nlc3NDYWxsYmFjayDigJQgSWYgQWpheCByZXF1ZXN0IGlzIHN1Y2Nlc3NmdWwsIGNhbGxiYWNrXHJcbm9wdHMuZmFpbHVyZUNhbGxiYWNrIOKAlCBJZiBBamF4IHJlcXVlc3QgZmFpbHMgLyByZXR1cm5zIGZhbHNlLCBjYWxsYmFja1xyXG5cclxuKi9cclxuXHJcbmZ1bmN0aW9uIGZvcm1Db250cm9sbGVyKG9wdHMpIHtcclxuXHJcblx0dmFyIHNob3dTdWNjZXNzTWVzc2FnZSA9IGZ1bmN0aW9uKGZvcm0pIHtcclxuXHRcdCQoZm9ybSkuZmluZCgnLmpzLWZvcm0tc3VjY2VzcycpLnNob3coKTtcclxuXHR9O1xyXG5cclxuXHR2YXIgc2hvd0Vycm9yID0gZnVuY3Rpb24oZm9ybSwgZXJyb3IpIHtcclxuXHRcdGlmKCQoZm9ybSkuZmluZChlcnJvcikpIHtcclxuXHRcdFx0JChmb3JtKS5maW5kKGVycm9yKS5zaG93KCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0dmFyIGhpZGVFcnJvcnMgPSBmdW5jdGlvbihmb3JtKSB7XHJcblx0XHQkKGZvcm0pLmZpbmQoJy5qcy1mb3JtLWVycm9yJykuaGlkZSgpO1xyXG5cdH07XHJcblxyXG5cdChmdW5jdGlvbiBpbml0KCkge1xyXG5cclxuXHRcdHZhciBmb3JtID0gb3B0cy5vYnNlcnZlO1xyXG5cclxuXHRcdGlmICghZm9ybSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdHZhciBmb3JtU3VibWl0ID0gJChmb3JtKS5maW5kKCdidXR0b25bdHlwZT1zdWJtaXRdJyk7XHJcblxyXG5cdFx0JChmb3JtU3VibWl0KS5vbignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xyXG5cclxuXHRcdFx0Ly8gU29tZSBmb3JtcyB3aWxsIHJlcXVpcmUgdXNlciBjb25maXJtYXRpb24gYmVmb3JlIGFjdGlvbiBpcyB0YWtlblxyXG5cdFx0XHQvLyBEZWZhdWx0IHRvIHRydWUgKGNvbmZpcm1lZCksIHNldCB0byBmYWxzZSBsYXRlciBpZiBjb25maXJtYXRpb24gaXNcclxuXHRcdFx0Ly8gcmVxdWlyZWQgYW5kIHVzZXIgY2FuY2VscyBhY3Rpb25cclxuXHRcdFx0dmFyIGFjdGlvbkNvbmZpcm1lZCA9IHRydWU7XHJcblxyXG5cdFx0XHR2YXIgY3VycmVudEZvcm07XHJcblx0XHRcdGlmKGV2ZW50LnRhcmdldC5mb3JtKSB7XHJcblx0XHRcdFx0Y3VycmVudEZvcm0gPSBldmVudC50YXJnZXQuZm9ybTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRjdXJyZW50Rm9ybSA9ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCdmb3JtJyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmKCQoY3VycmVudEZvcm0pLmRhdGEoJ2ZvcmNlLWNvbmZpcm0nKSkge1xyXG5cdFx0XHRcdGFjdGlvbkNvbmZpcm1lZCA9IHdpbmRvdy5jb25maXJtKCQoY3VycmVudEZvcm0pLmRhdGEoJ2ZvcmNlLWNvbmZpcm0nKSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmKGFjdGlvbkNvbmZpcm1lZCkge1xyXG5cclxuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBQcmV2ZW50IGZvcm0gc3VibWl0dGluZ1xyXG5cclxuXHRcdFx0XHRoaWRlRXJyb3JzKGN1cnJlbnRGb3JtKTsgLy8gUmVzZXQgYW55IHZpc2libGUgZXJyb3JzXHJcblxyXG5cdFx0XHRcdGlmKG9wdHMuYmVmb3JlUmVxdWVzdCkge1xyXG5cdFx0XHRcdFx0b3B0cy5iZWZvcmVSZXF1ZXN0KGN1cnJlbnRGb3JtKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFByZXZlbnQgdXNlciBmcm9tIHJlLXN1Ym1pdHRpbmcgZm9ybSwgdW5sZXNzIGV4cGxpY2l0bHkgYWxsb3dlZFxyXG5cdFx0XHRcdGlmKCEkKGN1cnJlbnRGb3JtKS5kYXRhKCdwcmV2ZW50LWRpc2FibGluZycpKSB7XHJcblx0XHRcdFx0XHQkKGZvcm1TdWJtaXQpLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR2YXIgaW5wdXREYXRhID0ge307XHJcblx0XHRcdFx0dmFyIElzVmFsaWQgPSB0cnVlOy8vU2tpcCBWYWxpZGF0aW9uIGlmIHRoZSBmb3JtIGlzIG5vdCBVcGRhdGUgQ29udGFjdCBJbmZvcm1hdGluIEZvcm1cclxuXHRcdFx0XHRpZigkKGN1cnJlbnRGb3JtKS5oYXNDbGFzcygnZm9ybS11cGRhdGUtYWNjb3VudC1jb250YWN0JykpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0SXNWYWxpZCA9IFZhbGlkYXRlQ29udGFjdEluZm9yRm9ybSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZihJc1ZhbGlkKXtcclxuXHRcdFx0XHRcdCQoY3VycmVudEZvcm0pLmZpbmQoJ2lucHV0LCBzZWxlY3QsIHRleHRhcmVhJykuZWFjaChmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdFx0XHRcdHZhciB2YWx1ZSA9ICcnO1xyXG5cdFx0XHRcdFx0XHR2YXIgZmllbGQgPSAkKHRoaXMpO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKGZpZWxkLmRhdGEoJ2NoZWNrYm94LXR5cGUnKSA9PT0gJ2Jvb2xlYW4nKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFsdWUgPSB0aGlzLmNoZWNrZWQ7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmIChmaWVsZC5kYXRhKCdjaGVja2JveC1ib29sZWFuLXR5cGUnKSA9PT0gJ3JldmVyc2UnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9ICF2YWx1ZTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoZmllbGQuZGF0YSgnY2hlY2tib3gtdHlwZScpID09PSAndmFsdWUnKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFsdWUgPSB0aGlzLmNoZWNrZWQgPyBmaWVsZC52YWwoKSA6IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHR2YWx1ZSA9IGZpZWxkLnZhbCgpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChpbnB1dERhdGFbZmllbGQuYXR0cignbmFtZScpXSA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpbnB1dERhdGFbZmllbGQuYXR0cignbmFtZScpXSA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRlbHNlIGlmICgkLmlzQXJyYXkoaW5wdXREYXRhW2ZpZWxkLmF0dHIoJ25hbWUnKV0pKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpbnB1dERhdGFbZmllbGQuYXR0cignbmFtZScpXS5wdXNoKHZhbHVlKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpbnB1dERhdGFbZmllbGQuYXR0cignbmFtZScpXSA9IFsgaW5wdXREYXRhW2ZpZWxkLmF0dHIoJ25hbWUnKV0gXTtcclxuXHRcdFx0XHRcdFx0XHRcdGlucHV0RGF0YVtmaWVsZC5hdHRyKCduYW1lJyldLnB1c2godmFsdWUpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0ICAgIC8vLy8gMjUvMTAvMjAxNiBDb21tZW50ZWQgY2FwdGNoYSBjb2RlIHRvIGZpeCB0aGUganMgY29uc29sZSBlcnJvci4gUmFqdS9Tb25pYSB3aWxsIHByb3ZpZGUgZml4IG9mIHRoaXMuXHJcblx0XHRcdFx0XHQvLyBhZGQgcmVjYXB0Y2hhIGlmIGl0IGV4aXN0cyBpbiB0aGUgZm9ybVxyXG5cdFx0XHRcdFx0dmFyIGNhcHRjaGFSZXNwb25zZSA9IChncmVjYXB0Y2hhID09IG51bGwpID8gdW5kZWZpbmVkIDogZ3JlY2FwdGNoYS5nZXRSZXNwb25zZSgpO1xyXG5cdFx0XHRcdFx0aWYgKGNhcHRjaGFSZXNwb25zZSAhPT0gdW5kZWZpbmVkKVxyXG5cdFx0XHRcdFx0XHRpbnB1dERhdGFbJ1JlY2FwdGNoYVJlc3BvbnNlJ10gPSBjYXB0Y2hhUmVzcG9uc2U7XHJcblxyXG5cdFx0XHRcdFx0aWYoISQoY3VycmVudEZvcm0pLmRhdGEoJ29uLXN1Ym1pdCcpKSB7XHJcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybignTm8gc3VibWl0IGxpbmsgZm9yIGZvcm0nKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHQgICAgdHJ5e1xyXG5cdFx0XHRcdCAgICAgICAgZm9yKHZhciBpbmRleCBpbiBpbnB1dERhdGEpXHJcblx0XHRcdFx0ICAgICAgICB7XHJcblx0XHRcdFx0ICAgICAgICAgICAgaWYoaW5wdXREYXRhW2luZGV4XSA9PSBcIi0gU2VsZWN0IE9uZSAtXCIpXHJcblx0XHRcdFx0ICAgICAgICAgICAge1xyXG5cdFx0XHRcdCAgICAgICAgICAgICAgICBpbnB1dERhdGFbaW5kZXhdID0gXCJcIjtcclxuXHRcdFx0XHQgICAgICAgICAgICB9XHJcblx0XHRcdFx0ICAgICAgICB9XHJcblx0XHRcdFx0ICAgIH1jYXRjaChleCl7Y29uc29sZS5sb2coZXgpO31cclxuXHJcblx0XHRcdFx0XHQkLmFqYXgoe1xyXG5cdFx0XHRcdFx0XHR1cmw6ICQoY3VycmVudEZvcm0pLmRhdGEoJ29uLXN1Ym1pdCcpLFxyXG5cdFx0XHRcdFx0XHR0eXBlOiAkKGN1cnJlbnRGb3JtKS5kYXRhKCdzdWJtaXQtdHlwZScpIHx8ICdQT1NUJyxcclxuXHRcdFx0XHRcdFx0ZGF0YTogaW5wdXREYXRhLFxyXG5cdFx0XHRcdFx0XHRjb250ZXh0OiB0aGlzLFxyXG5cdFx0XHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdHNob3dTdWNjZXNzTWVzc2FnZShjdXJyZW50Rm9ybSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUGFzc2VzIHRoZSBmb3JtIHJlc3BvbnNlIHRocm91Z2ggd2l0aCB0aGUgXCJjb250ZXh0XCJcclxuXHRcdFx0XHRcdFx0XHRcdC8vIHN1Y2Nlc3NDYWxsYmFjayBpcyByaXBlIGZvciByZWZhY3RvcmluZywgaW1wcm92aW5nIHBhcmFtZXRlcnNcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAob3B0cy5zdWNjZXNzQ2FsbGJhY2spIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0b3B0cy5zdWNjZXNzQ2FsbGJhY2soY3VycmVudEZvcm0sIHRoaXMsIGV2ZW50KTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHRpZigkKGZvcm0pLmRhdGEoJ29uLXN1Y2Nlc3MnKSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR3aW5kb3cubG9jYXRpb24uaHJlZiA9ICQoY3VycmVudEZvcm0pLmRhdGEoJ29uLXN1Y2Nlc3MnKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdGlmKHJlc3BvbnNlLnJlZGlyZWN0UmVxdWlyZWQgIT09IHVuZGVmaW5lZCAmJiByZXNwb25zZS5yZWRpcmVjdFJlcXVpcmVkKXtcclxuXHRcdFx0XHRcdFx0XHRcdCAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHJlc3BvbnNlLnJlZGlyZWN0VXJsO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChyZXNwb25zZS5yZWFzb25zICYmIHJlc3BvbnNlLnJlYXNvbnMubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRmb3IgKHZhciByZWFzb24gaW4gcmVzcG9uc2UucmVhc29ucykge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHNob3dFcnJvcihmb3JtLCAnLmpzLWZvcm0tZXJyb3ItJyArIHJlc3BvbnNlLnJlYXNvbnNbcmVhc29uXSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHNob3dFcnJvcihjdXJyZW50Rm9ybSwgJy5qcy1mb3JtLWVycm9yLWdlbmVyYWwnKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAob3B0cy5mYWlsdXJlQ2FsbGJhY2spIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0b3B0cy5mYWlsdXJlQ2FsbGJhY2soY3VycmVudEZvcm0scmVzcG9uc2UpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0ZXJyb3I6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHNob3dFcnJvcihjdXJyZW50Rm9ybSwgJy5qcy1mb3JtLWVycm9yLWdlbmVyYWwnKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKG9wdHMuZmFpbHVyZUNhbGxiYWNrKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRvcHRzLmZhaWx1cmVDYWxsYmFjayhjdXJyZW50Rm9ybSxyZXNwb25zZSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHRjb21wbGV0ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0c2V0VGltZW91dCgoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQkKGZvcm1TdWJtaXQpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XHJcblx0XHRcdFx0XHRcdFx0fSksIDI1MCk7XHRcdFx0XHRcdFx0XHRcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gcmVzZXQgY2FwdGNoYSBpZiBhdmFpbGFibGVcclxuXHRcdFx0XHRcdFx0XHRncmVjYXB0Y2hhLnJlc2V0KCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHJcblx0XHRcdFx0fSAvLyBpZiBhY3Rpb25Db25maXJtZWRcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0fSk7XHJcblx0fSkoKTtcclxufVxyXG5mdW5jdGlvbiBWYWxpZGF0ZUNvbnRhY3RJbmZvckZvcm0oKSB7XHJcblx0dmFyIGVycm9ySHRtbCA9ICQoJyNlcnJvck1lc3NhZ2UnKS5odG1sKCk7XHJcblx0dmFyIGVycm9ycyA9IDA7XHJcblx0dmFyIHJlc3VsdCA9IGZhbHNlO1xyXG5cdHZhciBzY3JvbGxUbyA9ICcnO1xyXG5cdCQoJy5yZXF1aXJlZCcpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoJCh0aGlzKS52YWwoKSA9PSAnJyB8fCAkKHRoaXMpLnRleHQoKS5pbmRleE9mKFwiLSBTZWxlY3QgT25lIC1cIikgPj0gMCkge1xyXG5cdFx0XHQkKHRoaXMpLnBhcmVudCgpLmFwcGVuZChlcnJvckh0bWwpO1xyXG5cdFx0XHRlcnJvcnMrKztcclxuXHRcdFx0aWYoZXJyb3JzPT0xKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c2Nyb2xsVG8gPSAkKHRoaXMpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0JCh0aGlzKS5wYXJlbnQoKS5maW5kKCcuanMtZm9ybS1lcnJvcicpLnJlbW92ZSgpO1xyXG5cdFx0fVxyXG5cclxuXHR9KTtcclxuXHRpZiAoZXJyb3JzID4gMCkge1xyXG5cdFx0d2luZG93LnNjcm9sbFRvKDAsc2Nyb2xsVG8ub2Zmc2V0KCkudG9wLTMwKTtcclxuXHRcdHJlc3VsdCA9IGZhbHNlO1xyXG5cdH1cclxuXHRlbHNlIHtcclxuXHRcdHJlc3VsdCA9IHRydWU7XHJcblx0fVxyXG5cdHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZvcm1Db250cm9sbGVyO1xyXG4iLCIvKiBnbG9iYWwgYW5ndWxhciAqL1xyXG5mdW5jdGlvbiBsaWdodGJveE1vZGFsQ29udHJvbGxlcigpIHtcclxuXHJcbiAgICB0aGlzLmNsb3NlTGlnaHRib3hNb2RhbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnbGlnaHRib3hlZCcpO1xyXG4gICAgICAgICQoJy5saWdodGJveC1tb2RhbF9fYmFja2Ryb3AnKS5yZW1vdmUoKTtcclxuICAgICAgICAkKCcubGlnaHRib3gtbW9kYWwnKS5oaWRlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBjbG9zZUxpZ2h0Ym94TW9kYWwgPSB0aGlzLmNsb3NlTGlnaHRib3hNb2RhbDtcclxuXHJcbiAgICB0aGlzLnNob3dMaWdodGJveCA9IGZ1bmN0aW9uKGxpZ2h0Ym94KSB7XHJcbiAgICAgICAgLy8gRnJlZXplIHRoZSBwYWdlIGFuZCBhZGQgdGhlIGRhcmsgb3ZlcmxheVxyXG4gICAgICAgICQoJ2JvZHknKVxyXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2xpZ2h0Ym94ZWQnKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCc8ZGl2IGNsYXNzPVwibGlnaHRib3gtbW9kYWxfX2JhY2tkcm9wXCI+PC9kaXY+Jyk7XHJcblxyXG4gICAgICAgIC8vIEZpbmQgdGhlIHNwZWNpZmljIG1vZGFsIGZvciB0aGlzIHRyaWdnZXIsIGFuZCB0aGUgYXNzb2NpYXRlZCBmb3JtXHJcbiAgICAgICAgdmFyIHRhcmdldE1vZGFsID0gJChsaWdodGJveCkuZGF0YSgnbGlnaHRib3gtbW9kYWwnKTtcclxuICAgICAgICB2YXIgc3VjY2Vzc0Zvcm0gPSAkKGxpZ2h0Ym94KS5jbG9zZXN0KCcuJyArICQobGlnaHRib3gpLmRhdGEoJ2xpZ2h0Ym94LW1vZGFsLXN1Y2Nlc3MtdGFyZ2V0JykpO1xyXG5cclxuICAgICAgICAvLyBTaG93IHRoZSBtb2RhbCwgYWRkIGFuIG9uLWNsaWNrIGxpc3RlbmVyIGZvciB0aGUgXCJzdWNjZXNzXCIgYnV0dG9uXHJcbiAgICAgICAgJCgnLicgKyB0YXJnZXRNb2RhbClcclxuICAgICAgICAgICAgLnNob3coKVxyXG4gICAgICAgICAgICAuZmluZCgnLmpzLWxpZ2h0Ym94LW1vZGFsLXN1Ym1pdCcpXHJcbiAgICAgICAgICAgIC8vIC5vbmUsIG5vdCAub24sIHRvIHByZXZlbnQgc3RhY2tpbmcgZXZlbnQgbGlzdG5lcnNcclxuICAgICAgICAgICAgLm9uZSgnY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzRm9ybS5maW5kKCdidXR0b25bdHlwZT1zdWJtaXRdJykuY2xpY2soKTtcclxuICAgICAgICAgICAgICAgIGNsb3NlTGlnaHRib3hNb2RhbCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgc2hvd0xpZ2h0Ym94ID0gdGhpcy5zaG93TGlnaHRib3g7XHJcblxyXG4gICAgdGhpcy5idWlsZExpZ2h0Ym94ZXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAkKCcuanMtbGlnaHRib3gtbW9kYWwtdHJpZ2dlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzaG93TGlnaHRib3goZS50YXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgLy8gRG9uJ3Qgc3VibWl0IGFueSBmb3JtcyBmb3IgcmVhbC5cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBXaGVuIHRoZSBEaXNtaXNzIGJ1dHRvbiBpcyBjbGlja2VkLi4uXHJcbiAgICAkKCcuanMtY2xvc2UtbGlnaHRib3gtbW9kYWwnKS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgY2xvc2VMaWdodGJveE1vZGFsKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmJ1aWxkTGlnaHRib3hlcygpO1xyXG5cclxuXHR0aGlzLmNsZWFyTGlnaHRib3hlcyA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0JCgnLmpzLWxpZ2h0Ym94LW1vZGFsLXRyaWdnZXInKS5vZmYoKTtcclxuXHR9O1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbGlnaHRib3hNb2RhbENvbnRyb2xsZXI7XHJcbiIsImZ1bmN0aW9uIHBvcE91dENvbnRyb2xsZXIodHJpZ2dlckVsbSkge1xyXG5cclxuXHQvLyBUb2dnbGUgcG9wLW91dCB3aGVuIHRyaWdnZXIgaXMgY2xpY2tlZFxyXG4gICAgaWYodHJpZ2dlckVsbSkge1xyXG4gICAgICAgICQodHJpZ2dlckVsbSkub2ZmKCk7XHJcblx0XHQkKHRyaWdnZXJFbG0pLm9uKCdjbGljaycsIChldmVudCkgPT4ge1xyXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHR0aGlzLnRvZ2dsZVBvcE91dCgkKGV2ZW50LnRhcmdldCkpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHQvLyBSZXBvc2l0aW9uIHBvcC1vdXQgd2hlbiBicm93c2VyIHdpbmRvdyByZXNpemVzXHJcblx0JCh3aW5kb3cpLm9uKCdyZXNpemUnLCAoZXZlbnQpID0+IHtcclxuXHRcdHRoaXMudXBkYXRlUG9wT3V0KCk7XHJcblx0fSk7XHJcblxyXG5cdC8vIFNpbXVsYXRlIENTUyBgcmVtYCAoMTZweClcclxuXHQvLyBUT0RPOiBjaGFuZ2UgdGhpcyBmcm9tIGByZW1gIHRvIHRhYiBwYWRkaW5nIHZhbHVlIGZvciBjbGFyaXR5XHJcblx0dmFyIHJlbSA9IDE2O1xyXG5cclxuXHQvLyBLZWVwIHRyYWNrIG9mIHRoZSBhY3RpdmUgcG9wLW91dCBlbGVtZW50XHJcblx0Ly8gVGhpcyBpcyBhbiBvYmplY3QgaW5zdGVhZCBvZiBhIHZhciBiZWNhdXNlIHRoZXJlIG1pZ2h0IGJlIG1vcmUgXCJnbG9iYWxcIlxyXG5cdC8vIHN0YXRlIGF0dHJpYnV0ZXMgdG8gdHJhY2sgaW4gdGhlIGZ1dHVyZS5cclxuXHR2YXIgc3RhdGUgPSB7XHJcblx0XHRhY3RpdmVFbG06IG51bGwsXHJcblx0XHRjdXN0b21pemVkOiB7XHJcblxyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8vIFBVQkxJQ1xyXG5cdC8vIEdldCB0aGUgY3VycmVudCBwb3Atb3V0IGVsZW1lbnQsIGlmIHRoZXJlIGlzIG9uZS5cclxuXHQvLyBMZXRzIG90aGVyIEpTIGtub3cgd2hhdCdzIHVwIHdpdGggdGhlIHBvcC1vdXQuXHJcblx0dGhpcy5nZXRQb3BPdXRFbGVtZW50ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gc3RhdGUuYWN0aXZlRWxtO1xyXG5cdH07XHJcblxyXG5cdC8vIFBVQkxJQ1xyXG5cdC8vIENsb3NlcyB0aGUgcG9wLW91dC5cclxuXHR0aGlzLmNsb3NlUG9wT3V0ID0gZnVuY3Rpb24oZWxtKSB7XHJcblx0XHQvLyBSZXNldCBhbGwgei1pbmRleGVzIHNvIG5ldyBwb3Atb3V0cyBhcmUgc3RhY2tlZCBvbiB0b3AgcHJvcGVybHlcclxuXHRcdCQoJy5wb3Atb3V0JykucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpLmNzcyhcInotaW5kZXhcIiwgXCJcIik7XHJcblx0XHQkKCcuanMtcG9wLW91dC10cmlnZ2VyJykuY3NzKFwiei1pbmRleFwiLCBcIlwiKTtcclxuXHR9O1xyXG5cclxuXHQvLyBQVUJMSUNcclxuXHQvLyBUb2dnbGVzIHRoZSBwb3Atb3V0XHJcblx0dGhpcy50b2dnbGVQb3BPdXQgPSBmdW5jdGlvbihlKSB7XHJcblx0XHQvLyBDaGVjayBpZiBjbGlja2VkIGVsZW1lbnQgaXMgdGhlIHRvZ2dsZSBpdHNlbGZcclxuXHRcdC8vIE90aGVyd2lzZSwgY2xpbWIgdXAgRE9NIHRyZWUgYW5kIGZpbmQgaXRcclxuXHRcdHZhciBwb1BhcmVudCA9IGUuaGFzQ2xhc3MoJ2pzLXBvcC1vdXQtdHJpZ2dlcicpID8gZSA6IGUuY2xvc2VzdCgnLmpzLXBvcC1vdXQtdHJpZ2dlcicpO1xyXG5cclxuXHRcdC8qICBUaGlzIGlzIGEgbGl0dGxlIGhhY2t5LCBidXQgaWYgYSB1c2VyIGlzIHRyeWluZyB0byBib29rbWFyayBhbiBhcnRpY2xlXHJcblx0XHRcdGJ1dCBuZWVkcyB0byBzaWduIGluIGZpcnN0LCB3ZSBuZWVkIHRvIGNhcHR1cmUgYW5kIHBhc3MgdGhlIGFydGljbGVcclxuXHRcdFx0SUQgYXMgYSBVUkwgcGFyYW0gYWZ0ZXIgYSBzdWNjZXNzZnVsIHNpZ24gaW4gYXR0ZW1wdC4gVGhhdCBhbGxvd3NcclxuXHRcdFx0dXMgdG8gYXV0b21hdGljYWxseSBib29rbWFyayB0aGUgYXJ0aWNsZSBvbiBwYWdlIHJlZnJlc2guICovXHJcblxyXG5cdFx0aWYocG9QYXJlbnQuZGF0YSgncG9wLW91dC10eXBlJykgPT09ICdzaWduLWluJyAmJiBwb1BhcmVudC5kYXRhKCdib29rbWFyay1pZCcpKSB7XHJcblx0XHRcdCQoJy5zaWduLWluX19zdWJtaXQnKS5kYXRhKCdwYXNzLWFydGljbGUtaWQnLCBwb1BhcmVudC5kYXRhKCdib29rbWFyay1pZCcpKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHBvUGFyZW50LmRhdGEoJ2Jvb2ttYXJrLWlkJywgbnVsbCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2xvc2UgYWxsIHBvcC1vdXRzXHJcblx0XHR0aGlzLmNsb3NlUG9wT3V0KCk7XHJcblxyXG5cdFx0aWYocG9QYXJlbnRbMF0gIT09IHN0YXRlLmFjdGl2ZUVsbSkge1xyXG5cdFx0XHQvLyBVcGRhdGUgdGhlIGNvbnRyb2xsZXIgc3RhdGUgYW5kIG9wZW4gaXRcclxuXHRcdFx0c3RhdGUuYWN0aXZlRWxtID0gcG9QYXJlbnRbMF07XHJcblx0XHRcdHVwZGF0ZVBvc2l0aW9uKCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzdGF0ZS5hY3RpdmVFbG0gPSBudWxsO1xyXG5cdFx0fVxyXG5cclxuXHR9O1xyXG5cclxuXHJcblx0Ly8gUFVCTElDXHJcblx0Ly8gU3RvcmVzIHBvcC1vdXQgY3VzdG9taXphdGlvbiBkZXRhaWxzIGZvciByZWZlcmVuY2Ugd2hlbiByZW5kZXJpbmdcclxuXHR0aGlzLmN1c3RvbWl6ZSA9IGZ1bmN0aW9uKG9iaikge1xyXG5cdFx0c3RhdGUuY3VzdG9taXplZFtvYmouaWRdID0gb2JqO1xyXG5cdH07XHJcblxyXG5cclxuXHQvLyBQUklWQVRFXHJcblx0Ly8gVXBkYXRlIHRoZSB2aXNpYmlsaXR5IGFuZCBwb3NpdGlvbiBvZiB0aGUgcG9wLW91dCBib3ggYW5kIHRhYi5cclxuXHR2YXIgdXBkYXRlUG9zaXRpb24gPSBmdW5jdGlvbigpIHtcclxuXHJcblx0XHR2YXIgdHJnciA9IHsgLy8gVGhlIHBvcC1vdXQgdHJpZ2dlclxyXG5cdFx0XHRlOiAkKHN0YXRlLmFjdGl2ZUVsbSlcclxuXHRcdH07XHJcblx0XHQvLyBHZXQgdHJpZ2dlciBoZWlnaHQsIHdpZHRoLCBvZmZzZXRUb3AsIG9mZnNldFdpZHRoXHJcblx0XHR0cmdyLm9mZnNldCA9IHRyZ3IuZS5vZmZzZXQoKTtcclxuXHJcblx0XHR0cmdyLmhhc1N0eWxlcyA9IHN0YXRlLmN1c3RvbWl6ZWRbdHJnci5lLmRhdGEoJ3BvcC1vdXQtaWQnKV07XHJcblxyXG5cdFx0Ly8gRGV0ZXJtaW5lIHdoaWNoIHBvcC1vdXQgdGVtcGxhdGUgdG8gdXNlXHJcblx0XHQvLyBUT0RPOiBNYWtlIHRoaXMgdXNlci1jb25maWd1cmFibGVcclxuXHRcdC8vIExldCB1c2VycyBhc3NpZ24gYSBuYW1lIHRvIGEgdGVtcGxhdGUgY2xhc3NcclxuXHRcdHZhciBwb3BPdXQ7XHJcblx0XHRzd2l0Y2ggKHRyZ3IuZS5kYXRhKCdwb3Atb3V0LXR5cGUnKSkge1xyXG5cdFx0XHQvLyBTSUdOIElOXHJcblx0XHRcdC8vIChHbG9iYWwgc2lnbi1pbiwgYm9va21hcmtpbmcgd2hlbiBub3Qgc2lnbmVkIGluKVxyXG5cdFx0XHRjYXNlICdzaWduLWluJzpcclxuXHRcdFx0XHRwb3BPdXQgPSAkKCcuanMtcG9wLW91dF9fc2lnbi1pbicpO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHQvLyBNYWluIFNpZ24gSW4gYnV0dG9uIG9uIHRvcCByaWdodFxyXG5cdFx0ICAgIGNhc2UgJ3NpZ24taW4taGVhZGVyJzpcclxuXHRcdCAgICAgICAgcG9wT3V0ID0gJCgnLmpzLXBvcC1vdXRfX3NpZ24taW4taGVhZGVyJyk7XHJcblx0XHQgICAgICAgIGJyZWFrO1xyXG5cdFx0XHQvLyBFTUFJTCBBUlRJQ0xFXHJcblx0XHRcdGNhc2UgJ2VtYWlsLWFydGljbGUnOlxyXG5cdFx0XHRcdHBvcE91dCA9ICQoJy5qcy1wb3Atb3V0X19lbWFpbC1hcnRpY2xlJyk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdC8vIEVNQUlMIEFSVElDTEVcclxuXHRcdFx0Y2FzZSAnZW1haWwtc2VhcmNoJzpcclxuXHRcdFx0XHRwb3BPdXQgPSAkKCcuanMtcG9wLW91dF9fZW1haWwtc2VhcmNoJyk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdC8vIEVNQUlMIEFVVEhPUlxyXG5cdFx0XHRjYXNlICdlbWFpbC1hdXRob3InOlxyXG5cdFx0XHRcdHBvcE91dCA9ICQoJy5qcy1wb3Atb3V0X19lbWFpbC1hdXRob3InKTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdCAgICAvLyBFTUFJTCBDT01QQU55XHJcblx0XHQgICAgY2FzZSAnZW1haWwtY29tcGFueSc6XHJcblx0XHQgICAgICAgIHBvcE91dCA9ICQoJy5qcy1wb3Atb3V0X19lbWFpbC1jb21wYW55Jyk7XHJcblx0XHQgICAgICAgIGJyZWFrO1xyXG5cdFx0ICAgIC8vIEVNQUlMIERFQUxcclxuXHRcdCAgICBjYXNlICdlbWFpbC1kZWFsJzpcclxuXHRcdCAgICAgICAgcG9wT3V0ID0gJCgnLmpzLXBvcC1vdXRfX2VtYWlsLWRlYWwnKTtcclxuXHRcdCAgICAgICAgYnJlYWs7XHJcblx0XHRcdC8vIEdMT0JBTCBIRUFERVIgUkVHSVNUUkFUSU9OXHJcblx0XHRcdGNhc2UgJ3JlZ2lzdGVyJzpcclxuXHRcdFx0XHRwb3BPdXQgPSAkKCcuanMtcG9wLW91dF9fcmVnaXN0ZXInKTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0Ly8gR0xPQkFMIEhFQURFUiBSRUdJU1RSQVRJT05cclxuXHRcdFx0Y2FzZSAnbXlWaWV3cmVnaXN0ZXInOlxyXG5cdFx0XHRcdHBvcE91dCA9ICQoJy5qcy1wb3Atb3V0X19teVZpZXdyZWdpc3RlcicpO1xyXG5cdFx0XHRcdGJyZWFrO1x0XHJcblx0XHRcdC8vIFNFQVJDSCBQQUdFIC0gU0FWRSBTRUFSQ0hcclxuXHRcdFx0Y2FzZSAnc2F2ZS1zZWFyY2gnOlxyXG5cdFx0XHRcdHBvcE91dCA9ICQoJy5qcy1wb3Atb3V0X19zYXZlLXNlYXJjaCcpO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdGNvbnNvbGUud2FybignQXR0ZW1wdGluZyB0byBmaXJlIHVuaWRlbnRpZmllZCBwb3Atb3V0LicpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblxyXG5cdFx0Ly8gTWFrZSBwb3Atb3V0IHZpc2libGUgc28gd2UgY2FuIHF1ZXJ5IGZvciBpdHMgd2lkdGhcclxuXHRcdHBvcE91dC5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XHJcblxyXG5cdFx0Ly8gQ2hlY2sgaWYgYnJvd3NlciBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYHNtYWxsYCBDU1MgYnJlYWtwb2ludFxyXG5cclxuXHRcdHZhciBpc05hcnJvdyA9ICQod2luZG93KS53aWR0aCgpIDw9IDQ4MDtcclxuXHRcdHZhciBpc1RhYmxldCA9ICQod2luZG93KS53aWR0aCgpIDw9IDgwMDtcclxuXHJcblx0XHQvLyBTZXQgc2VwYXJhdGUgdmVydGljYWwvaG9yaXpvbnRhbCBwYWRkaW5nIG9uIG1vYmlsZSB2cy4gZGVza3RvcFxyXG5cdFx0dmFyIHZQYWQgPSBpc05hcnJvdyA/IDEwIDogcmVtO1xyXG5cdFx0dmFyIGhQYWQgPSBpc05hcnJvdyA/IDE0IDogcmVtO1xyXG5cclxuXHRcdC8vIFN0b3JlIG91dHB1dCB2YWx1ZXMgYWZ0ZXIgY2FsY3VsYXRpb25zLCBldGMuXHJcblx0XHR2YXIgcmVzID0ge1xyXG5cdFx0XHRvZmZzZXQ6IHtcclxuXHRcdFx0XHRib3g6IHt9LFxyXG5cdFx0XHRcdHRhYjoge31cclxuXHRcdFx0fSxcclxuXHRcdFx0Y3NzOiB7XHJcblx0XHRcdFx0Ym94OiB7fSxcclxuXHRcdFx0XHR0YWI6IHt9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gQm94IG9mZnNldCB0b3AgaXMgb2Zmc2V0VG9wIG9mIHRyaWdnZXIsIHBsdXMgdHJpZ2dlciBoZWlnaHQsXHJcblx0XHQvLyBwbHVzIHBhZGRpbmcsIG1pbnVzIDFweCBmb3IgYm9yZGVyIHBvc2l0aW9uaW5nXHJcblx0XHRyZXMub2Zmc2V0LmJveC50b3AgPSBNYXRoLmZsb29yKHRyZ3Iub2Zmc2V0LnRvcCArIHRyZ3Iub2Zmc2V0LmhlaWdodCArICh2UGFkIC0gMSkpO1xyXG5cclxuXHRcdC8vIENoZWNrIGlmIHBvcC1vdXQgd2lsbCBibGVlZCBvZmYtc2NyZWVuLCBjYXVzaW5nIGhvcml6b250YWwgc2Nyb2xsIGJhclxyXG5cdFx0Ly8gSWYgaXQgd2lsbCwgZm9yY2UgcmlnaHQtYWxpZ24gdG8ga2VlcCBpdCBvbi1zY3JlZW5cclxuXHRcdGlmKHBvcE91dC53aWR0aCgpICsgdHJnci5vZmZzZXQubGVmdCA+ICQod2luZG93KS53aWR0aCgpKSB7XHJcblx0XHRcdHRyZ3IuZS5kYXRhKCdwb3Atb3V0LWFsaWduJywgJ3JpZ2h0Jyk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2hlY2sgZm9yIHBvcC1vdXQgYWxpZ25tZW50XHJcblx0XHRpZih0cmdyLmUuZGF0YSgncG9wLW91dC1hbGlnbicpID09PSAncmlnaHQnICYmICFpc05hcnJvdykge1xyXG5cdFx0XHQvLyBQb3Atb3V0IGJveCBpcyBmbHVzaCByaWdodCB3aXRoIHRyaWdnZXIgZWxlbWVudFxyXG5cdFx0XHQvLyBUbyBmbHVzaCByaWdodCwgZmlyc3QgYWRkIHRyaWdnZXIgb2Zmc2V0IHBsdXMgdHJpZ2dlciB3aWR0aFxyXG5cdFx0XHQvLyBUaGlzIHBvc2l0aW9ucyBsZWZ0IGVkZ2Ugb2YgcG9wLW91dCB3aXRoIHJpZ2h0IGVkZ2Ugb2YgdHJpZ2dlclxyXG5cdFx0XHQvLyBUaGVuIHN1YnRyYWN0IHBvcC1vdXQgd2lkdGggYW5kIHBhZGRpbmcgdG8gYWxpZ24gYm90aCByaWdodCBlZGdlc1xyXG5cdFx0XHQvLyAoRmx1c2gtbGVmdCBhdXRvbWF0aWNhbGx5IGlmIG5hcnJvdyB3aW5kb3cpXHJcblx0XHRcdHJlcy5vZmZzZXQuYm94LmxlZnQgPSBpc05hcnJvdyA/IDAgOiBNYXRoLmZsb29yKHRyZ3Iub2Zmc2V0LmxlZnQgKyB0cmdyLm9mZnNldC53aWR0aCAtIHBvcE91dC5vZmZzZXQoKS53aWR0aCArIChoUGFkIC0gMSkpO1xyXG5cdFx0XHQvLyBUYWIgbGVmdCBtYXJnaW4gY2FuIGJlIGlnbm9yZWQsIHJpZ2h0IG1hcmdpbiAwIGRvZXMgd2hhdCB3ZSBuZWVkXHJcblx0XHRcdHJlcy5vZmZzZXQudGFiLmxlZnQgPSAnYXV0byc7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBQb3Atb3V0IGJveCBpcyBjZW50ZXJlZCB3aXRoIHRyaWdnZXIgZWxlbWVudFxyXG5cdFx0XHQvLyBCb3ggb2Zmc2V0IGxlZnQgaXMgZGV0ZXJtaW5lZCBieSBzdWJ0cmFjdGluZyB0aGUgdHJpZ2dlciB3aWR0aFxyXG5cdFx0XHQvLyBmcm9tIHRoZSBwb3Atb3V0IHdpZHRoLCBkaXZpZGluZyBieSAyIHRvIGZpbmQgdGhlIGhhbGZ3YXkgcG9pbnQsXHJcblx0XHRcdC8vIHRoZW4gc3VidHJhY3RpbmcgdGhhdCBmcm9tIHRoZSB0cmlnZ2VyIGxlZnQgb2Zmc2V0LlxyXG5cdFx0XHQvLyAoRmx1c2gtbGVmdCBhdXRvbWF0aWNhbGx5IGlmIG5hcnJvdyB3aW5kb3cpXHJcblx0XHRcdHJlcy5vZmZzZXQuYm94LmxlZnQgPSBpc05hcnJvdyA/IDAgOiBNYXRoLmZsb29yKHRyZ3Iub2Zmc2V0LmxlZnQgLSAoKHBvcE91dC5vZmZzZXQoKS53aWR0aCAtIHRyZ3Iub2Zmc2V0LndpZHRoKSAvIDIpKTtcclxuXHRcdFx0Ly8gUG9wLW91dCB0YWIgaXMgYWxpZ25lZCB3aXRoIHRyaWdnZXIgbGVmdCBlZGdlLCBhZGp1c3RlZCBmb3IgcGFkZGluZ1xyXG5cdFx0XHQvLyBUYWIgd2lkdGggaXMgc2V0IHRvIHRyaWdnZXIgd2lkdGggYmVsb3csIHNvIHRoaXMgY2VudGVycyB0aGUgdGFiXHJcblx0XHRcdHJlcy5vZmZzZXQudGFiLmxlZnQgPSBpc05hcnJvdyA/IE1hdGguZmxvb3IodHJnci5vZmZzZXQubGVmdCAtIGhQYWQpIDogMDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBCbG93IHVwIHotaW5kZXggdG8gYXBwZWFyIGFib3ZlIG90aGVyIHRyaWdnZXJzXHJcblx0XHR0cmdyLmUuY3NzKCd6LWluZGV4JywgJzk5OTknKTtcclxuXHJcblx0XHQvLyBCb3ggei1pbmRleCBzZXQgdG8gMiBsb3dlciB0aGFuIHRyaWdnZXIgZWxlbWVudFxyXG5cdFx0Ly8gQm94IHNob3VsZCByZW5kZXIgYmVsb3cgdHJpZ2dlciwgdW5kZXIgdGFiLCBhYm92ZSBldmVyeXRoaW5nIGVsc2VcclxuXHRcdHJlcy5jc3MuYm94LnpJbmRleCA9IHRyZ3IuZS5jc3MoJ3otaW5kZXgnKSAtIDI7XHJcblxyXG5cdFx0Ly8gVGFiIGhlaWdodCBlcXVhbHMgdHJpZ2dlciBoZWlnaHQgcGx1cyBwYWRkaW5nICgxcmVtIHRvcCBhbmQgYm90dG9tKVxyXG5cclxuXHRcdC8vIENoZWNrIGZvciBjdXN0b20gdGFiIHN0eWxlc1xyXG5cdFx0dmFyIHRTID0gdHJnci5oYXNTdHlsZXMgPyB0cmdyLmhhc1N0eWxlcy50YWJTdHlsZXMgOiB1bmRlZmluZWQ7XHJcblxyXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGN1c3RvbSBzdHlsZXMsIGFuZCBicm93c2VyIGlzIGRlc2t0b3Atd2lkdGguLi5cclxuXHRcdGlmKHRTICYmICFpc05hcnJvdyAmJiAhaXNUYWJsZXQpIHtcclxuXHJcblx0XHRcdHJlcy5jc3MudGFiLmhlaWdodCA9IHRTLmRlc2tIZWlnaHQgfHwgdHJnci5vZmZzZXQuaGVpZ2h0ICsgKHZQYWQgKiAyKSArIFwicHhcIjtcclxuXHJcblx0XHRcdHRTLmRlc2tIZWlnaHRcclxuXHRcdFx0XHQ/IHJlcy5vZmZzZXQuYm94LnRvcCArPSB0Uy5kZXNrSGVpZ2h0IC0gdHJnci5vZmZzZXQuaGVpZ2h0IC0gKHZQYWQgKiAyKVxyXG5cdFx0XHRcdDogbnVsbDtcclxuXHJcblx0XHRcdHJlcy5jc3MudGFiLnRvcCA9IHRTLmRlc2tIZWlnaHRcclxuXHRcdFx0XHQ/ICctJyArICh0Uy5kZXNrSGVpZ2h0IC0gMSkgKyAncHgnXHJcblx0XHRcdFx0OiAnLScgKyAodHJnci5vZmZzZXQuaGVpZ2h0ICsgKHZQYWQgKiAyKSAtIDEpICsgJ3B4JztcclxuXHJcblx0XHQvLyBJZiB0aGVyZSBhcmUgY3VzdG9tIHN0eWxlcywgYW5kIGJyb3dzZXIgaXMgdGFibGV0LXdpZHRoLi4uXHJcblx0XHR9IGVsc2UgaWYodFMgJiYgIWlzTmFycm93ICYmIGlzVGFibGV0KSB7XHJcblxyXG5cdFx0XHRyZXMuY3NzLnRhYi5oZWlnaHQgPSB0Uy50YWJsZXRIZWlnaHQgfHwgdHJnci5vZmZzZXQuaGVpZ2h0ICsgKHZQYWQgKiAyKSArIFwicHhcIjtcclxuXHJcblx0XHRcdHRTLnRhYmxldEhlaWdodFxyXG5cdFx0XHRcdD8gcmVzLm9mZnNldC5ib3gudG9wICs9IHRTLnRhYmxldEhlaWdodCAtIHRyZ3Iub2Zmc2V0LmhlaWdodCAtICh2UGFkICogMilcclxuXHRcdFx0XHQ6IG51bGw7XHJcblxyXG5cdFx0XHRyZXMuY3NzLnRhYi50b3AgPSB0Uy50YWJsZXRIZWlnaHRcclxuXHRcdFx0XHQ/ICctJyArICh0Uy50YWJsZXRIZWlnaHQgLSAxKSArICdweCdcclxuXHRcdFx0XHQ6ICctJyArICh0cmdyLm9mZnNldC5oZWlnaHQgKyAodlBhZCAqIDIpIC0gMSkgKyAncHgnO1xyXG5cclxuXHRcdC8vIElmIHRoZXJlIGFyZSBjdXN0b20gc3R5bGVzLCBhbmQgYnJvd3NlciBpcyBwaG9uZS13aWR0aC4uLlxyXG5cdFx0fSBlbHNlIGlmKHRTICYmIGlzTmFycm93KSB7XHJcblxyXG5cdFx0XHRyZXMuY3NzLnRhYi5oZWlnaHQgPSB0Uy5waG9uZUhlaWdodCB8fCB0cmdyLm9mZnNldC5oZWlnaHQgKyAodlBhZCAqIDIpICsgXCJweFwiO1xyXG5cclxuXHRcdFx0dFMucGhvbmVIZWlnaHRcclxuXHRcdFx0XHQ/IHJlcy5vZmZzZXQuYm94LnRvcCArPSB0Uy5waG9uZUhlaWdodCAtIHRyZ3Iub2Zmc2V0LmhlaWdodCAtICh2UGFkICogMilcclxuXHRcdFx0XHQ6IG51bGw7XHJcblxyXG5cdFx0XHRyZXMuY3NzLnRhYi50b3AgPSB0Uy5waG9uZUhlaWdodFxyXG5cdFx0XHRcdD8gJy0nICsgKHRTLnBob25lSGVpZ2h0IC0gMSkgKyAncHgnXHJcblx0XHRcdFx0OiAnLScgKyAodHJnci5vZmZzZXQuaGVpZ2h0ICsgKHZQYWQgKiAyKSAtIDEpICsgJ3B4JztcclxuXHJcblx0XHQvLyBEZWZhdWx0IHBhZGRpbmcvcG9zaXRpb25pbmdcclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRyZXMuY3NzLnRhYi5oZWlnaHQgPSB0cmdyLm9mZnNldC5oZWlnaHQgKyAodlBhZCAqIDIpICsgXCJweFwiO1xyXG5cclxuXHRcdFx0Ly8gTW92ZSB0aGUgdGFiIHVwd2FyZHMsIGVxdWFsIHRvIHRoZSB0cmlnZ2VyIGhlaWdodCBwbHVzIHBhZGRpbmdcclxuXHRcdFx0Ly8gbWludXMgMXB4IHRvIGFjY291bnQgZm9yIGJvcmRlciBhbmQgdmlzdWFsbHkgb3ZlcmxhcHBpbmcgYm94XHJcblx0XHRcdHJlcy5jc3MudGFiLnRvcCA9ICctJyArICh0cmdyLm9mZnNldC5oZWlnaHQgKyAodlBhZCAqIDIpIC0gMSkgKyBcInB4XCI7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVGFiIHdpZHRoIGVxdWFscyB0cmlnZ2VyIHdpZHRoIHBsdXMgcGFkZGluZyAoMXJlbSBsZWZ0IGFuZCByaWdodClcclxuXHRcdHJlcy5jc3MudGFiLndpZHRoID0gdHJnci5vZmZzZXQud2lkdGggKyAoaFBhZCAqIDIpICsgXCJweFwiO1xyXG5cclxuXHRcdC8vIFRhYiB6LWluZGV4IGlzIDEgbGVzcyB0aGFuIHRyaWdnZXI7IGFib3ZlIGJveCwgYmVsb3cgdHJpZ2dlclxyXG5cdFx0cmVzLmNzcy50YWIuekluZGV4ID0gdHJnci5lLmNzcygnei1pbmRleCcpIC0gMTtcclxuXHJcblx0XHQvLyBgdHJhbnNmb3JtYCB0byBxdWlja2x5IHBvc2l0aW9uIGJveCwgcmVsYXRpdmUgdG8gdG9wIGxlZnQgY29ybmVyXHJcblx0XHRyZXMuY3NzLmJveC50cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoJyArIHJlcy5vZmZzZXQuYm94LmxlZnQgKydweCwgJyArIHJlcy5vZmZzZXQuYm94LnRvcCArICdweCwgMCknO1xyXG5cclxuXHRcdC8vIEFwcGx5IHRoYXQgZ2lhbnQgYmxvYiBvZiBDU1NcclxuXHRcdHBvcE91dC5jc3Moe1xyXG5cdFx0XHR6SW5kZXg6IHJlcy5jc3MuYm94LnpJbmRleCxcclxuXHRcdFx0dHJhbnNmb3JtOiByZXMuY3NzLmJveC50cmFuc2Zvcm1cclxuXHRcdH0pLmZpbmQoJy5wb3Atb3V0X190YWInKS5jc3MoeyAvLyBmaW5kIHRoaXMgcG9wLW91dCdzIGNoaWxkIHRhYlxyXG5cdFx0XHRoZWlnaHQ6IHJlcy5jc3MudGFiLmhlaWdodCxcclxuXHRcdFx0d2lkdGg6IHJlcy5jc3MudGFiLndpZHRoLFxyXG5cdFx0XHRsZWZ0OiByZXMub2Zmc2V0LnRhYi5sZWZ0LFxyXG5cdFx0XHRyaWdodDogMCwgLy8gVGhpcyBpcyBhbHdheXMgMFxyXG5cdFx0XHR0b3A6IHJlcy5jc3MudGFiLnRvcCxcclxuXHRcdFx0ekluZGV4OiByZXMuY3NzLnRhYi56SW5kZXhcclxuXHRcdH0pO1xyXG5cdFx0Ly8gVWdseSBoYWNrIGZvciBTYWZhcmkgOCwgYm9vb1xyXG5cdFx0cG9wT3V0LmNzcygnLXdlYmtpdC10cmFuc2Zvcm0nLCByZXMuY3NzLmJveC50cmFuc2Zvcm0pO1xyXG5cclxuXHR9O1xyXG5cclxuXHQvLyBJZiB0aGVyZSBpcyBhbiBhY3RpdmUgcG9wLW91dCwgdXBkYXRlIGl0cyBwb3NpdGlvblxyXG5cdC8vIE1vc3RseSB1c2VmdWwgZm9yIHdoZW4gdGhlIGJyb3dzZXIgd2luZG93IHJlc2l6ZXNcclxuXHR0aGlzLnVwZGF0ZVBvcE91dCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYoc3RhdGUuYWN0aXZlRWxtKSB7XHJcblx0XHRcdHVwZGF0ZVBvc2l0aW9uKCk7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgcG9wT3V0Q29udHJvbGxlcjtcclxuIiwiaW1wb3J0IHsgYW5hbHl0aWNzRXZlbnQgfSBmcm9tICcuL2FuYWx5dGljcy1jb250cm9sbGVyJztcclxuXHJcbmZ1bmN0aW9uIGxvZ2luQ29udHJvbGxlcihyZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW4pIHtcclxuXHR0aGlzLmFkZFJlZ2lzdGVyVXNlckNvbnRyb2wgPSBmdW5jdGlvbih0cmlnZ2VyRWxlbWVudCwgc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spIHtcclxuXHRcdGlmICh0cmlnZ2VyRWxlbWVudCkge1xyXG5cdFx0XHQkKHRyaWdnZXJFbGVtZW50KS5vbignY2xpY2snLCAoZXZlbnQpID0+IHtcclxuXHRcdFx0XHR0aGlzLmhpZGVFcnJvcnModHJpZ2dlckVsZW1lbnQpO1xyXG5cdFx0XHRcdCQodHJpZ2dlckVsZW1lbnQpLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XHJcblxyXG5cdFx0XHRcdHZhciBpbnB1dERhdGEgPSB7fTtcclxuXHRcdFx0XHR2YXIgdXJsID0gJCh0cmlnZ2VyRWxlbWVudCkuZGF0YSgncmVnaXN0ZXItdXNlci11cmwnKTtcclxuXHJcblx0XHRcdFx0JCh0cmlnZ2VyRWxlbWVudCkucGFyZW50cygnLmpzLXJlZ2lzdGVyLXVzZXItY29udGFpbmVyJykuZmluZCgnaW5wdXQnKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gJyc7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCQodGhpcykuZGF0YSgnY2hlY2tib3gtdHlwZScpID09PSAnYm9vbGVhbicpIHtcclxuXHRcdFx0XHRcdFx0dmFsdWUgPSB0aGlzLmNoZWNrZWQ7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoJCh0aGlzKS5kYXRhKCdjaGVja2JveC1ib29sZWFuLXR5cGUnKSA9PT0gJ3JldmVyc2UnKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFsdWUgPSAhdmFsdWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0XHR2YWx1ZSA9ICQodGhpcykudmFsKCk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0aW5wdXREYXRhWyQodGhpcykuYXR0cignbmFtZScpXSA9IHZhbHVlO1xyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHQkLmFqYXgoe1xyXG5cdFx0XHRcdFx0dXJsOiB1cmwsXHJcblx0XHRcdFx0XHR0eXBlOiAnUE9TVCcsXHJcblx0XHRcdFx0XHRkYXRhOiBpbnB1dERhdGEsXHJcblx0XHRcdFx0XHRjb250ZXh0OiB0aGlzLFxyXG5cdFx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHRcdGlmIChyZXNwb25zZS5zdWNjZXNzKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHZhciByZWdpc3RlckFuYWx5dGljcyA9IHtcclxuXHRcdFx0XHRcdFx0XHRcdGV2ZW50X25hbWU6ICdyZWdpc3Rlci1zdGVwLTEnLFxyXG5cdFx0XHRcdFx0XHRcdFx0cmVnaXN0cmF0aW9uX3N0YXRlOiAnc3VjY2Vzc2Z1bCcsXHJcblx0XHRcdFx0XHRcdFx0XHR1c2VyTmFtZTogJ1wiJyArIGlucHV0RGF0YS51c2VybmFtZSArICdcIidcclxuXHRcdFx0XHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRcdFx0XHRhbmFseXRpY3NFdmVudCggJC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsIHJlZ2lzdGVyQW5hbHl0aWNzKSApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoc3VjY2Vzc0NhbGxiYWNrKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRzdWNjZXNzQ2FsbGJhY2sodHJpZ2dlckVsZW1lbnQpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0dmFyIG5leHRTdGVwVXJsID0gJCh0cmlnZ2VyRWxlbWVudCkuZGF0YSgnbmV4dC1zdGVwLXVybCcpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAobmV4dFN0ZXBVcmwpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gbmV4dFN0ZXBVcmw7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHR0aGlzLnNob3dTdWNjZXNzTWVzc2FnZSh0cmlnZ2VyRWxlbWVudCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0JCh0cmlnZ2VyRWxlbWVudCkucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcclxuXHJcblxyXG5cclxuXHRcdFx0XHRcdFx0XHR2YXIgc3BlY2lmaWNFcnJvckRpc3BsYXllZCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAocmVzcG9uc2UucmVhc29ucyAmJiByZXNwb25zZS5yZWFzb25zLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGZvciAodmFyIHJlYXNvbiBpbiByZXNwb25zZS5yZWFzb25zKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuc2hvd0Vycm9yKHRyaWdnZXJFbGVtZW50LCAnLmpzLXJlZ2lzdGVyLXVzZXItZXJyb3ItJyArIHJlc3BvbnNlLnJlYXNvbnNbcmVhc29uXSk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0c3BlY2lmaWNFcnJvckRpc3BsYXllZCA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoIXNwZWNpZmljRXJyb3JEaXNwbGF5ZWQpXHJcblx0XHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5zaG93RXJyb3IodHJpZ2dlckVsZW1lbnQsICcuanMtcmVnaXN0ZXItdXNlci1lcnJvci1nZW5lcmFsJyk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHR2YXIgcmVnaXN0ZXJBbmFseXRpY3MgPSB7XHJcblx0XHRcdFx0XHRcdFx0XHRldmVudF9uYW1lOiBcInJlZ2lzdHJhdGlvbiBmYWlsdXJlXCIsXHJcblx0XHRcdFx0XHRcdFx0XHRyZWdpc3RyYXRpb25fZXJyb3JzOiByZXNwb25zZS5yZWFzb25zXHJcblx0XHRcdFx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0XHRcdFx0YW5hbHl0aWNzRXZlbnQoICQuZXh0ZW5kKGFuYWx5dGljc19kYXRhLCByZWdpc3RlckFuYWx5dGljcykgKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKGZhaWx1cmVDYWxsYmFjaykge1xyXG5cdFx0XHRcdFx0XHRcdFx0ZmFpbHVyZUNhbGxiYWNrKHRyaWdnZXJFbGVtZW50KTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRlcnJvcjogZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdFx0JCh0cmlnZ2VyRWxlbWVudCkucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcclxuXHJcblx0XHRcdFx0XHRcdHRoaXMuc2hvd0Vycm9yKHRyaWdnZXJFbGVtZW50LCAnLmpzLXJlZ2lzdGVyLXVzZXItZXJyb3ItZ2VuZXJhbCcpO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKGZhaWx1cmVDYWxsYmFjaykge1xyXG5cdFx0XHRcdFx0XHRcdGZhaWx1cmVDYWxsYmFjayh0cmlnZ2VyRWxlbWVudCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0dGhpcy5zaG93U3VjY2Vzc01lc3NhZ2UgPSBmdW5jdGlvbih0cmlnZ2VyRWxlbWVudCkge1xyXG5cdFx0JCh0cmlnZ2VyRWxlbWVudCkucGFyZW50cygnLmpzLXJlZ2lzdGVyLXVzZXItY29udGFpbmVyJykuZmluZCgnLmpzLXJlZ2lzdGVyLXVzZXItc3VjY2VzcycpLnNob3coKTtcclxuXHR9XHJcblxyXG5cdHRoaXMuc2hvd0Vycm9yID0gZnVuY3Rpb24odHJpZ2dlckVsZW1lbnQsIGVycm9yKSB7XHJcblx0XHQkKHRyaWdnZXJFbGVtZW50KS5wYXJlbnRzKCcuanMtcmVnaXN0ZXItdXNlci1jb250YWluZXInKS5maW5kKCcuanMtcmVnaXN0ZXItdXNlci1lcnJvci1jb250YWluZXInKS5zaG93KCk7XHJcblx0XHQkKHRyaWdnZXJFbGVtZW50KS5wYXJlbnRzKCcuanMtcmVnaXN0ZXItdXNlci1jb250YWluZXInKS5maW5kKGVycm9yKS5zaG93KCk7XHJcblx0fVxyXG5cclxuXHR0aGlzLmhpZGVFcnJvcnMgPSBmdW5jdGlvbih0cmlnZ2VyRWxlbWVudCkge1xyXG5cdFx0JCh0cmlnZ2VyRWxlbWVudCkucGFyZW50cygnLmpzLXJlZ2lzdGVyLXVzZXItY29udGFpbmVyJykuZmluZCgnLmpzLXJlZ2lzdGVyLXVzZXItZXJyb3ItY29udGFpbmVyJykuaGlkZSgpO1xyXG5cdFx0JCh0cmlnZ2VyRWxlbWVudCkucGFyZW50cygnLmpzLXJlZ2lzdGVyLXVzZXItY29udGFpbmVyJykuZmluZCgnLmpzLXJlZ2lzdGVyLXVzZXItZXJyb3InKS5oaWRlKCk7XHJcblx0fVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgbG9naW5Db250cm9sbGVyO1xyXG4iLCJpbXBvcnQgeyBhbmFseXRpY3NFdmVudCB9IGZyb20gJy4vYW5hbHl0aWNzLWNvbnRyb2xsZXInO1xyXG5cclxuZnVuY3Rpb24gbG9naW5Db250cm9sbGVyKHJlcXVlc3RWZXJpZmljYXRpb25Ub2tlbikge1xyXG5cdHRoaXMuYWRkUmVxdWVzdENvbnRyb2wgPSBmdW5jdGlvbih0cmlnZ2VyRWxlbWVudCwgc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spIHtcclxuXHRcdGlmICh0cmlnZ2VyRWxlbWVudCkge1xyXG5cdFx0XHQkKHRyaWdnZXJFbGVtZW50KS5vbignY2xpY2snLCAoZXZlbnQpID0+IHtcclxuXHRcdFx0XHR0aGlzLmhpZGVFcnJvcnModHJpZ2dlckVsZW1lbnQpO1xyXG5cdFx0XHRcdCQodHJpZ2dlckVsZW1lbnQpLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XHJcblxyXG5cdFx0XHRcdHZhciBpbnB1dERhdGEgPSB7fTtcclxuXHRcdFx0XHR2YXIgdXJsID0gJCh0cmlnZ2VyRWxlbWVudCkuZGF0YSgncmVzZXQtdXJsJyk7XHJcblxyXG5cdFx0XHRcdCQodHJpZ2dlckVsZW1lbnQpLnBhcmVudHMoJy5qcy1yZXNldC1wYXNzd29yZC1jb250YWluZXInKS5maW5kKCdpbnB1dCcpLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRpbnB1dERhdGFbJCh0aGlzKS5hdHRyKCduYW1lJyldID0gJCh0aGlzKS52YWwoKTtcclxuXHRcdFx0XHR9KVxyXG5cclxuXHRcdFx0XHQkLmFqYXgoe1xyXG5cdFx0XHRcdFx0dXJsOiB1cmwsXHJcblx0XHRcdFx0XHR0eXBlOiAnUE9TVCcsXHJcblx0XHRcdFx0XHRkYXRhOiBpbnB1dERhdGEsXHJcblx0XHRcdFx0XHRjb250ZXh0OiB0aGlzLFxyXG5cdFx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHRcdGlmIChyZXNwb25zZS5zdWNjZXNzKSB7XHJcblx0XHRcdFx0XHRcdCAgICB0aGlzLnNob3dTdWNjZXNzTWVzc2FnZSh0cmlnZ2VyRWxlbWVudCk7XHJcblx0XHRcdFx0XHRcdCAgXHJcblx0XHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdFx0aWYgKHN1Y2Nlc3NDYWxsYmFjaykge1xyXG5cdFx0XHRcdFx0XHRcdFx0c3VjY2Vzc0NhbGxiYWNrKHRyaWdnZXJFbGVtZW50KTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0JCh0cmlnZ2VyRWxlbWVudCkucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcclxuXHRcdFx0XHRcdFx0XHR2YXIgcmVzZXRQYXNzd29yZEFuYWx5dGljcyA9IHtcclxuXHRcdFx0XHRcdFx0XHQgICAgZXZlbnRfbmFtZTogXCJwYXNzd29yZCByZXNldCB1bnN1Y2Nlc3NmdWxcIlx0XHRcdFx0XHRcdCAgICAgICBcclxuXHRcdFx0XHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRcdFx0XHR2YXIgc3BlY2lmaWNFcnJvckRpc3BsYXllZCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoJC5pbkFycmF5KCdFbWFpbFJlcXVpcmVtZW50JywgcmVzcG9uc2UucmVhc29ucykgIT09IC0xKVxyXG5cdFx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuc2hvd0Vycm9yKHRyaWdnZXJFbGVtZW50LCAnLmpzLXJlc2V0LXBhc3N3b3JkLWVycm9yLWVtYWlsJyk7XHJcblx0XHRcdFx0XHRcdFx0XHRzcGVjaWZpY0Vycm9yRGlzcGxheWVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKCFzcGVjaWZpY0Vycm9yRGlzcGxheWVkKVxyXG5cdFx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuc2hvd0Vycm9yKHRyaWdnZXJFbGVtZW50LCAnLmpzLXJlc2V0LXBhc3N3b3JkLWVycm9yLWdlbmVyYWwnKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdFx0YW5hbHl0aWNzRXZlbnQoICQuZXh0ZW5kKGFuYWx5dGljc19kYXRhLCByZXNldFBhc3N3b3JkQW5hbHl0aWNzKSApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoZmFpbHVyZUNhbGxiYWNrKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRmYWlsdXJlQ2FsbGJhY2sodHJpZ2dlckVsZW1lbnQpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdGVycm9yOiBmdW5jdGlvbihyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0XHQkKHRyaWdnZXJFbGVtZW50KS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0dGhpcy5zaG93RXJyb3IodHJpZ2dlckVsZW1lbnQsICcuanMtcmVzZXQtcGFzc3dvcmQtZXJyb3ItZ2VuZXJhbCcpO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKGZhaWx1cmVDYWxsYmFjaykge1xyXG5cdFx0XHRcdFx0XHRcdGZhaWx1cmVDYWxsYmFjayh0cmlnZ2VyRWxlbWVudCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0dGhpcy5hZGRDaGFuZ2VDb250cm9sID0gZnVuY3Rpb24odHJpZ2dlckVsZW1lbnQsIHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKSB7XHJcblx0XHRpZiAodHJpZ2dlckVsZW1lbnQpIHtcclxuXHRcdFx0JCh0cmlnZ2VyRWxlbWVudCkub24oJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcblx0XHRcdFx0dGhpcy5oaWRlRXJyb3JzKHRyaWdnZXJFbGVtZW50KTtcclxuXHRcdFx0XHQkKHRyaWdnZXJFbGVtZW50KS5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xyXG5cclxuXHRcdFx0XHR2YXIgaW5wdXREYXRhID0ge307XHJcblx0XHRcdFx0dmFyIHVybCA9ICQodHJpZ2dlckVsZW1lbnQpLmRhdGEoJ3Jlc2V0LXVybCcpO1xyXG5cclxuXHRcdFx0XHQkKHRyaWdnZXJFbGVtZW50KS5wYXJlbnRzKCcuanMtcmVzZXQtcGFzc3dvcmQtY29udGFpbmVyJykuZmluZCgnaW5wdXQnKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0aW5wdXREYXRhWyQodGhpcykuYXR0cignbmFtZScpXSA9ICQodGhpcykudmFsKCk7XHJcblx0XHRcdFx0fSlcclxuXHJcblx0XHRcdFx0JC5hamF4KHtcclxuXHRcdFx0XHRcdHVybDogdXJsLFxyXG5cdFx0XHRcdFx0dHlwZTogJ1BPU1QnLFxyXG5cdFx0XHRcdFx0ZGF0YTogaW5wdXREYXRhLFxyXG5cdFx0XHRcdFx0Y29udGV4dDogdGhpcyxcclxuXHRcdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0XHRpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuc2hvd1N1Y2Nlc3NNZXNzYWdlKHRyaWdnZXJFbGVtZW50KTtcclxuXHRcdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0XHRpZiAoc3VjY2Vzc0NhbGxiYWNrKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRzdWNjZXNzQ2FsbGJhY2sodHJpZ2dlckVsZW1lbnQpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHQkKHRyaWdnZXJFbGVtZW50KS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xyXG5cdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdHZhciBzcGVjaWZpY0Vycm9yRGlzcGxheWVkID0gZmFsc2U7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICgkLmluQXJyYXkoJ1Bhc3N3b3JkTWlzbWF0Y2gnLCByZXNwb25zZS5yZWFzb25zKSAhPT0gLTEpXHJcblx0XHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5zaG93RXJyb3IodHJpZ2dlckVsZW1lbnQsICcuanMtcmVzZXQtcGFzc3dvcmQtZXJyb3ItbWlzbWF0Y2gnKTtcclxuXHRcdFx0XHRcdFx0XHRcdHNwZWNpZmljRXJyb3JEaXNwbGF5ZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRpZiAoJC5pbkFycmF5KCdQYXNzd29yZFJlcXVpcmVtZW50cycsIHJlc3BvbnNlLnJlYXNvbnMpICE9PSAtMSlcclxuXHRcdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnNob3dFcnJvcih0cmlnZ2VyRWxlbWVudCwgJy5qcy1yZXNldC1wYXNzd29yZC1lcnJvci1yZXF1aXJlbWVudHMnKTtcclxuXHRcdFx0XHRcdFx0XHRcdHNwZWNpZmljRXJyb3JEaXNwbGF5ZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKCFzcGVjaWZpY0Vycm9yRGlzcGxheWVkIHx8ICgkLmluQXJyYXkoJ01pc3NpbmdUb2tlbicsIHJlc3BvbnNlLnJlYXNvbnMpICE9PSAtMSkpXHJcblx0XHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5zaG93RXJyb3IodHJpZ2dlckVsZW1lbnQsICcuanMtcmVzZXQtcGFzc3dvcmQtZXJyb3ItZ2VuZXJhbCcpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKGZhaWx1cmVDYWxsYmFjaykge1xyXG5cdFx0XHRcdFx0XHRcdFx0ZmFpbHVyZUNhbGxiYWNrKHRyaWdnZXJFbGVtZW50KTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRlcnJvcjogZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdFx0JCh0cmlnZ2VyRWxlbWVudCkucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdHRoaXMuc2hvd0Vycm9yKHRyaWdnZXJFbGVtZW50LCAnLmpzLXJlc2V0LXBhc3N3b3JkLWVycm9yLWdlbmVyYWwnKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmIChmYWlsdXJlQ2FsbGJhY2spIHtcclxuXHRcdFx0XHRcdFx0XHRmYWlsdXJlQ2FsbGJhY2sodHJpZ2dlckVsZW1lbnQpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdHRoaXMuYWRkUmV0cnlDb250cm9sID0gZnVuY3Rpb24odHJpZ2dlckVsZW1lbnQsIHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKSB7XHJcblx0XHRpZiAodHJpZ2dlckVsZW1lbnQpIHtcclxuXHRcdFx0JCh0cmlnZ2VyRWxlbWVudCkub24oJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcblx0XHRcdFx0dGhpcy5oaWRlRXJyb3JzKHRyaWdnZXJFbGVtZW50KTtcclxuXHRcdFx0XHQkKHRyaWdnZXJFbGVtZW50KS5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xyXG5cclxuXHRcdFx0XHR2YXIgaW5wdXREYXRhID0ge307XHJcblx0XHRcdFx0dmFyIHVybCA9ICQodHJpZ2dlckVsZW1lbnQpLmRhdGEoJ3JldHJ5LXVybCcpO1xyXG5cclxuXHRcdFx0XHQkKHRyaWdnZXJFbGVtZW50KS5wYXJlbnRzKCcuanMtcmVzZXQtcGFzc3dvcmQtY29udGFpbmVyJykuZmluZCgnaW5wdXQnKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0aW5wdXREYXRhWyQodGhpcykuYXR0cignbmFtZScpXSA9ICQodGhpcykudmFsKCk7XHJcblx0XHRcdFx0fSlcclxuXHJcblx0XHRcdFx0JC5hamF4KHtcclxuXHRcdFx0XHRcdHVybDogdXJsLFxyXG5cdFx0XHRcdFx0dHlwZTogJ1BPU1QnLFxyXG5cdFx0XHRcdFx0ZGF0YTogaW5wdXREYXRhLFxyXG5cdFx0XHRcdFx0Y29udGV4dDogdGhpcyxcclxuXHRcdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0XHRpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuc2hvd1N1Y2Nlc3NNZXNzYWdlKHRyaWdnZXJFbGVtZW50KTtcclxuXHRcdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0XHRpZiAoc3VjY2Vzc0NhbGxiYWNrKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRzdWNjZXNzQ2FsbGJhY2sodHJpZ2dlckVsZW1lbnQpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHQkKHRyaWdnZXJFbGVtZW50KS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR0aGlzLnNob3dFcnJvcih0cmlnZ2VyRWxlbWVudCwgJy5qcy1yZXNldC1wYXNzd29yZC1lcnJvci1nZW5lcmFsJyk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmIChmYWlsdXJlQ2FsbGJhY2spIHtcclxuXHRcdFx0XHRcdFx0XHRcdGZhaWx1cmVDYWxsYmFjayh0cmlnZ2VyRWxlbWVudCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0ZXJyb3I6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHRcdCQodHJpZ2dlckVsZW1lbnQpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHR0aGlzLnNob3dFcnJvcih0cmlnZ2VyRWxlbWVudCwgJy5qcy1yZXNldC1wYXNzd29yZC1lcnJvci1nZW5lcmFsJyk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoZmFpbHVyZUNhbGxiYWNrKSB7XHJcblx0XHRcdFx0XHRcdFx0ZmFpbHVyZUNhbGxiYWNrKHRyaWdnZXJFbGVtZW50KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHR0aGlzLnNob3dTdWNjZXNzTWVzc2FnZSA9IGZ1bmN0aW9uKHRyaWdnZXJFbGVtZW50KSB7XHJcblx0ICAgICQodHJpZ2dlckVsZW1lbnQpLnBhcmVudHMoJy5qcy1yZXNldC1wYXNzd29yZC1jb250YWluZXInKS5maW5kKCcuanMtcmVzZXQtcGFzc3dvcmQtc3VjY2VzcycpLnNob3coKTtcclxuXHQgICAgdmFyIHJlc2V0UGFzc3dvcmRBbmFseXRpY3MgPSB7XHJcblx0ICAgICAgICBldmVudF9uYW1lOiBcInBhc3N3b3JkIHJlc2V0IHN1Y2Nlc3NcIlx0XHRcdFx0XHRcdCAgICAgICBcclxuXHQgICAgfTtcclxuXHJcblx0ICAgIGFuYWx5dGljc0V2ZW50KCAkLmV4dGVuZChhbmFseXRpY3NfZGF0YSwgcmVzZXRQYXNzd29yZEFuYWx5dGljcykgKTtcclxuXHR9XHJcblxyXG5cdHRoaXMuc2hvd0Vycm9yID0gZnVuY3Rpb24odHJpZ2dlckVsZW1lbnQsIGVycm9yKSB7XHJcblx0XHQkKHRyaWdnZXJFbGVtZW50KS5wYXJlbnRzKCcuanMtcmVzZXQtcGFzc3dvcmQtY29udGFpbmVyJykuZmluZCgnLmpzLXJlc2V0LXBhc3N3b3JkLWVycm9yLWNvbnRhaW5lcicpLnNob3coKTtcclxuXHRcdCQodHJpZ2dlckVsZW1lbnQpLnBhcmVudHMoJy5qcy1yZXNldC1wYXNzd29yZC1jb250YWluZXInKS5maW5kKGVycm9yKS5zaG93KCk7XHJcblx0XHR2YXIgcmVzZXRQYXNzd29yZEFuYWx5dGljcyA9IHtcclxuXHRcdCAgICBldmVudF9uYW1lOiBcInBhc3N3b3JkIHJlc2V0IHVuc3VjY2Vzc2Z1bFwiXHRcclxuICAgICAgICAgfTtcclxuXHJcblx0XHRhbmFseXRpY3NFdmVudCggJC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsIHJlc2V0UGFzc3dvcmRBbmFseXRpY3MpICk7XHJcblx0fVxyXG5cdFxyXG5cdHRoaXMuaGlkZUVycm9ycyA9IGZ1bmN0aW9uKHRyaWdnZXJFbGVtZW50KSB7XHJcblx0XHQkKHRyaWdnZXJFbGVtZW50KS5wYXJlbnRzKCcuanMtcmVzZXQtcGFzc3dvcmQtY29udGFpbmVyJykuZmluZCgnLmpzLXJlc2V0LXBhc3N3b3JkLWVycm9yLWNvbnRhaW5lcicpLmhpZGUoKTtcclxuXHRcdCQodHJpZ2dlckVsZW1lbnQpLnBhcmVudHMoJy5qcy1yZXNldC1wYXNzd29yZC1jb250YWluZXInKS5maW5kKCcuanMtcmVzZXQtcGFzc3dvcmQtZXJyb3InKS5oaWRlKCk7XHJcblx0fVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgbG9naW5Db250cm9sbGVyOyIsImZ1bmN0aW9uIHNvcnRhYmxlVGFibGVDb250cm9sbGVyKCkge1xyXG5cclxuXHQvKlxyXG5cdEJhc2VkIG9uIFNvcnRUYWJsZSB2ZXJzaW9uIDJcclxuXHQ3dGggQXByaWwgMjAwN1xyXG5cdFN0dWFydCBMYW5ncmlkZ2UsIGh0dHA6Ly93d3cua3J5b2dlbml4Lm9yZy9jb2RlL2Jyb3dzZXIvc29ydHRhYmxlL1xyXG5cdExpY2VuY2VkIGFzIFgxMTogaHR0cDovL3d3dy5rcnlvZ2VuaXgub3JnL2NvZGUvYnJvd3Nlci9saWNlbmNlLmh0bWxcclxuXHQqL1xyXG5cclxuXHR2YXIgaXNTb3J0ZWRUYWJsZSA9IGZhbHNlO1xyXG5cdHZhciB0Zm8sIG10Y2gsIHNvcnRmbiwgaGFzSW5wdXRzO1xyXG5cclxuXHR2YXIgc29ydHRhYmxlID0ge1xyXG5cclxuXHRcdGluaXQ6IGZ1bmN0aW9uIGluaXRpbmcoKSB7XHJcblx0XHRcdC8vIHF1aXQgaWYgdGhpcyBmdW5jdGlvbiBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZFxyXG5cdFx0XHRpZiAoaXNTb3J0ZWRUYWJsZSkgcmV0dXJuO1xyXG5cdFx0XHQvLyBmbGFnIHRoaXMgZnVuY3Rpb24gc28gd2UgZG9uJ3QgZG8gdGhlIHNhbWUgdGhpbmcgdHdpY2VcclxuXHRcdFx0aXNTb3J0ZWRUYWJsZSA9IHRydWU7XHJcblxyXG5cdFx0XHQkKCcuanMtc29ydGFibGUtdGFibGUnKS5lYWNoKGZ1bmN0aW9uIChpbmR4LCBpdGVtKSB7XHJcblx0XHRcdFx0c29ydHRhYmxlLm1ha2VTb3J0YWJsZShpdGVtKTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0fSxcclxuXHJcblx0XHRzb3J0Q29sdW1uOiBmdW5jdGlvbih0YWJsZSwgY29sKSB7XHJcblxyXG5cdFx0XHQvLyBidWlsZCBhbiBhcnJheSB0byBzb3J0LiBUaGlzIGlzIGEgU2Nod2FydHppYW4gdHJhbnNmb3JtIHRoaW5nLFxyXG5cdFx0XHQvLyBpLmUuLCB3ZSBcImRlY29yYXRlXCIgZWFjaCByb3cgd2l0aCB0aGUgYWN0dWFsIHNvcnQga2V5LFxyXG5cdFx0XHQvLyBzb3J0IGJhc2VkIG9uIHRoZSBzb3J0IGtleXMsIGFuZCB0aGVuIHB1dCB0aGUgcm93cyBiYWNrIGluIG9yZGVyXHJcblx0XHRcdC8vIHdoaWNoIGlzIGEgbG90IGZhc3RlciBiZWNhdXNlIHlvdSBvbmx5IGRvIGdldElubmVyVGV4dCBvbmNlIHBlciByb3dcclxuXHJcblx0XHRcdHZhciByb3dfYXJyYXkgPSBbXTtcclxuXHRcdFx0dmFyIGhlYWRyb3cgPSB0YWJsZS50SGVhZC5yb3dzWzBdLmNlbGxzO1xyXG5cdFx0XHR2YXIgcm93cyA9IFtdLnNsaWNlLmNhbGwodGFibGUudEJvZGllc1swXS5yb3dzKTtcclxuXHRcdFx0dmFyIGd1ZXNzdHlwZSA9IHNvcnR0YWJsZS5ndWVzc1R5cGUodGFibGUsIGNvbCk7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IHJvd3MubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0XHRyb3dfYXJyYXlbcm93X2FycmF5Lmxlbmd0aF0gPSBbJChyb3dzW2pdLmNlbGxzW2NvbF0pLCByb3dzW2pdXTtcclxuXHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdGlmKCQoaGVhZHJvd1tjb2xdKS5kYXRhKCdzb3J0YWJsZS10eXBlJykpIHtcclxuXHRcdFx0XHRyb3dfYXJyYXkuc29ydChzb3J0dGFibGVbJChoZWFkcm93W2NvbF0pLmRhdGEoJ3NvcnRhYmxlLXR5cGUnKV0pO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJvd19hcnJheS5zb3J0KGd1ZXNzdHlwZSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciB0YiA9IHRhYmxlLnRCb2RpZXNbMF07XHJcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgcm93X2FycmF5Lmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0dGIuYXBwZW5kQ2hpbGQocm93X2FycmF5W2pdWzFdKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cm93X2FycmF5ID0gdW5kZWZpbmVkO1xyXG5cdFx0fSxcclxuXHJcblx0XHRtYWtlU29ydGFibGU6IGZ1bmN0aW9uKHRhYmxlKSB7XHJcblxyXG5cdFx0XHQvLyBTb3J0dGFibGUgdjEgcHV0IHJvd3Mgd2l0aCBhIGNsYXNzIG9mIFwic29ydGJvdHRvbVwiIGF0IHRoZSBib3R0b20gKGFzXHJcblx0XHRcdC8vIFwidG90YWxcIiByb3dzLCBmb3IgZXhhbXBsZSkuIFRoaXMgaXMgQiZSLCBzaW5jZSB3aGF0IHlvdSdyZSBzdXBwb3NlZFxyXG5cdFx0XHQvLyB0byBkbyBpcyBwdXQgdGhlbSBpbiBhIHRmb290LiBTbywgaWYgdGhlcmUgYXJlIHNvcnRib3R0b20gcm93cyxcclxuXHRcdFx0Ly8gZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCBtb3ZlIHRoZW0gdG8gdGZvb3QgKGNyZWF0aW5nIGl0IGlmIG5lZWRlZCkuXHJcblx0XHRcdHZhciBzb3J0Ym90dG9tcm93cyA9IFtdO1xyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRhYmxlLnJvd3MubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRpZiAoJCh0YWJsZS5yb3dzW2ldKS5oYXNDbGFzcygnLnNvcnRib3R0b20nKSkge1xyXG5cdFx0XHRcdFx0c29ydGJvdHRvbXJvd3Nbc29ydGJvdHRvbXJvd3MubGVuZ3RoXSA9IHRhYmxlLnJvd3NbaV07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoc29ydGJvdHRvbXJvd3MpIHtcclxuXHRcdFx0XHRpZiAodGFibGUudEZvb3QgPT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0Ly8gdGFibGUgZG9lc24ndCBoYXZlIGEgdGZvb3QuIENyZWF0ZSBvbmUuXHJcblx0XHRcdFx0XHR0Zm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0Zm9vdCcpO1xyXG5cdFx0XHRcdFx0dGFibGUuYXBwZW5kQ2hpbGQodGZvKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBzb3J0Ym90dG9tcm93cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdFx0dGZvLmFwcGVuZENoaWxkKHNvcnRib3R0b21yb3dzW2pdKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c29ydGJvdHRvbXJvd3MgPSB1bmRlZmluZWQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIHdvcmsgdGhyb3VnaCBlYWNoIGNvbHVtbiBhbmQgY2FsY3VsYXRlIGl0cyB0eXBlXHJcblx0XHRcdHZhciBoZWFkcm93ID0gdGFibGUudEhlYWQucm93c1swXS5jZWxscztcclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBoZWFkcm93Lmxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdC8vIG1hbnVhbGx5IG92ZXJyaWRlIHRoZSB0eXBlIHdpdGggYSBzb3J0dGFibGVfdHlwZSBhdHRyaWJ1dGVcclxuXHRcdFx0XHRpZiAoIWhlYWRyb3dbaV0uY2xhc3NOYW1lLm1hdGNoKC9cXGJzb3J0dGFibGVfbm9zb3J0XFxiLykpIHsgLy8gc2tpcCB0aGlzIGNvbFxyXG5cdFx0XHRcdFx0aGVhZHJvd1tpXS5zb3J0dGFibGVfc29ydGZ1bmN0aW9uID0gc29ydHRhYmxlLmd1ZXNzVHlwZSh0YWJsZSxpKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0JCh0YWJsZSkuZmluZCgnLmpzLXNvcnRhYmxlLXRhYmxlLXNvcnRlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuXHJcblx0XHRcdFx0Ly8gSWYgY2hpbGQgZWxlbWVudCBpcyBjbGlja2VkLCByZWRpcmVjdCB0aGUgY2xpY2sgdG8gdGhlXHJcblx0XHRcdFx0Ly8gcHJvcGVyIGVsZW1lbnQ6IHRoZSBwYXJlbnQgaXRzZWxmLlxyXG5cdFx0XHRcdGlmKGUudGFyZ2V0ICE9PSB0aGlzKSB7XHJcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR2YXIgY29sTnVtID0gJChlLnRhcmdldCkuY2xvc2VzdCgnLmpzLXNvcnRhYmxlLXRhYmxlLXNvcnRlcicpLmRhdGEoJ3NvcnRhYmxlLXRhYmxlLWNvbCcpIC0gMTtcclxuXHJcblxyXG5cclxuXHRcdFx0XHRpZiAoJChlLnRhcmdldCkuaGFzQ2xhc3MoJ3NvcnR0YWJsZV9zb3J0ZWQnKSkge1xyXG5cdFx0XHRcdFx0Ly8gVGhpcyBjb2x1bW4gaXMgc29ydGVkIHRvcCB0byBib3R0b21cclxuXHRcdFx0XHRcdC8vIFJlLXNvcnQgdGhlIGNvbHVtbiB0byBjYXRjaCBhbnkgcm93IGNoYW5nZXMuLi5cclxuXHRcdFx0XHRcdHNvcnR0YWJsZS5zb3J0Q29sdW1uKHRhYmxlLCBjb2xOdW0pO1xyXG5cdFx0XHRcdFx0Ly8gLi4udGhlbiByZXZlcnNlIHRoZSBjb2x1bW4gYW5kIHVwZGF0ZSB0aGUgY2xhc3NlcyAoc3RhdGUpLlxyXG5cdFx0XHRcdFx0c29ydHRhYmxlLnJldmVyc2UodGFibGUudEJvZGllc1swXSk7XHJcblx0XHRcdFx0XHQkKGUudGFyZ2V0KS5yZW1vdmVDbGFzcygnc29ydHRhYmxlX3NvcnRlZCcpLmFkZENsYXNzKCdzb3J0dGFibGVfc29ydGVkX3JldmVyc2UnKTtcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCQoZS50YXJnZXQpLmhhc0NsYXNzKCdzb3J0dGFibGVfc29ydGVkX3JldmVyc2UnKSkge1xyXG5cdFx0XHRcdFx0Ly8gVGhpcyBjb2x1bW4gaXMgc29ydGVkIGJvdHRvbSB0byB0b3BcclxuXHRcdFx0XHRcdC8vIEZsaXAgdGhlIHRhYmxlIGJhY2sgdG8gdG9wLXRvLWJvdHRvbSAoZGVmYXVsdCkuLi5cclxuXHRcdFx0XHRcdHNvcnR0YWJsZS5yZXZlcnNlKHRhYmxlLnRCb2RpZXNbMF0pO1xyXG5cdFx0XHRcdFx0Ly8gLi4udGhlbiByZS1zb3J0IGl0IHRvIGNhdGNoIGFueSByb3cgY2hhbmdlcy5cclxuXHRcdFx0XHRcdHNvcnR0YWJsZS5zb3J0Q29sdW1uKHRhYmxlLCBjb2xOdW0pO1xyXG5cdFx0XHRcdFx0JChlLnRhcmdldCkucmVtb3ZlQ2xhc3MoJ3NvcnR0YWJsZV9zb3J0ZWRfcmV2ZXJzZScpLmFkZENsYXNzKCdzb3J0dGFibGVfc29ydGVkJyk7XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gcmVtb3ZlIHNvcnR0YWJsZV9zb3J0ZWQgY2xhc3Nlc1xyXG5cdFx0XHRcdHZhciB0aGVhZHJvdyA9IGUudGFyZ2V0LnBhcmVudE5vZGU7XHJcblx0XHRcdFx0Zm9yRWFjaCh0aGVhZHJvdy5jaGlsZE5vZGVzLCBmdW5jdGlvbihjZWxsKSB7XHJcblx0XHRcdFx0XHRpZiAoY2VsbC5ub2RlVHlwZSA9PSAxKSB7IC8vIGFuIGVsZW1lbnRcclxuXHRcdFx0XHRcdFx0JChjZWxsKS5yZW1vdmVDbGFzcygnc29ydHRhYmxlX3NvcnRlZF9yZXZlcnNlIHNvcnR0YWJsZV9zb3J0ZWQnKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0aWYgKCQoJy5zb3J0dGFibGVfc29ydGZ3ZGluZCcpKSB7XHJcblx0XHRcdFx0XHQkKCcuc29ydHRhYmxlX3NvcnRmd2RpbmQnKS5yZW1vdmUoKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICgkKCcuc29ydHRhYmxlX3NvcnRyZXZpbmQnKSkge1xyXG5cdFx0XHRcdFx0JCgnLnNvcnR0YWJsZV9zb3J0cmV2aW5kJykucmVtb3ZlKCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQkKGUudGFyZ2V0KS5hZGRDbGFzcygnc29ydHRhYmxlX3NvcnRlZCcpO1xyXG5cclxuXHRcdFx0XHRzb3J0dGFibGUuc29ydENvbHVtbih0YWJsZSwgY29sTnVtKTtcclxuXHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdH0sXHJcblxyXG5cdGd1ZXNzVHlwZTogZnVuY3Rpb24odGFibGUsIGNvbHVtbikge1xyXG5cclxuXHRcdC8vIGd1ZXNzIHRoZSB0eXBlIG9mIGEgY29sdW1uIGJhc2VkIG9uIGl0cyBmaXJzdCBub24tYmxhbmsgcm93XHJcblx0XHRzb3J0Zm4gPSBzb3J0dGFibGUuc29ydF9hbHBoYTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRhYmxlLnRCb2RpZXNbMF0ucm93cy5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIHRleHQgPSAkKHRhYmxlLnRCb2RpZXNbMF0ucm93c1tpXS5jZWxsc1tjb2x1bW5dKS50ZXh0KCkudHJpbSgpO1xyXG5cdFx0XHRpZiAodGV4dCAhPSAnJykge1xyXG5cdFx0XHRcdC8vIElmIGNvbHVtbiBpcyBudW1lcmljIG9yIGFwcGVhcnMgdG8gYmUgbW9uZXksIHNvcnQgbnVtZXJpY1xyXG5cdFx0XHRcdGlmICh0ZXh0Lm1hdGNoKC9eLT9bwqMkwqRdP1tcXGQsLl0rJT8kLykpIHtcclxuXHRcdFx0XHRcdHJldHVybiBzb3J0dGFibGUuc29ydF9udW1lcmljO1xyXG5cdFx0XHRcdH0gZWxzZSBpZihEYXRlLnBhcnNlKHRleHQpID4gMCkge1xyXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZm9yIHZhbGlkIGRhdGVcclxuXHRcdFx0XHRcdC8vIElmIGZvdW5kLCBhc3N1bWUgY29sdW1uIGlzIGZ1bGwgb2YgZGF0ZXMsIHNvcnQgYnkgZGF0ZSFcclxuXHRcdFx0XHRcdHJldHVybiBzb3J0dGFibGUuc29ydF9ieV9kYXRlO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gc29ydHRhYmxlLnNvcnRfYWxwaGE7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHNvcnRmbjtcclxuXHR9LFxyXG5cclxuXHRyZXZlcnNlOiBmdW5jdGlvbih0Ym9keSkge1xyXG5cdFx0Ly8gcmV2ZXJzZSB0aGUgcm93cyBpbiBhIHRib2R5XHJcblx0XHR2YXIgbmV3cm93cyA9IFtdO1xyXG5cdFx0Zm9yICh2YXIgaT0wOyBpPHRib2R5LnJvd3MubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0bmV3cm93c1tuZXdyb3dzLmxlbmd0aF0gPSB0Ym9keS5yb3dzW2ldO1xyXG5cdFx0fVxyXG5cdFx0Zm9yICh2YXIgaT1uZXdyb3dzLmxlbmd0aC0xOyBpPj0wOyBpLS0pIHtcclxuXHRcdFx0dGJvZHkuYXBwZW5kQ2hpbGQobmV3cm93c1tpXSk7XHJcblx0XHR9XHJcblx0XHRuZXdyb3dzID0gdW5kZWZpbmVkO1xyXG5cdH0sXHJcblxyXG5cdC8qIHNvcnQgZnVuY3Rpb25zXHJcblx0ZWFjaCBzb3J0IGZ1bmN0aW9uIHRha2VzIHR3byBwYXJhbWV0ZXJzLCBhIGFuZCBiXHJcblx0eW91IGFyZSBjb21wYXJpbmcgYVswXSBhbmQgYlswXSAqL1xyXG5cdHNvcnRfbnVtZXJpYzogZnVuY3Rpb24oYSxiKSB7XHJcblx0XHR2YXIgYWEgPSBwYXJzZUZsb2F0KGFbMF0ucmVwbGFjZSgvW14wLTkuLV0vZywnJykpO1xyXG5cdFx0aWYgKGlzTmFOKGFhKSkgYWEgPSAwO1xyXG5cdFx0dmFyIGJiID0gcGFyc2VGbG9hdChiWzBdLnJlcGxhY2UoL1teMC05Li1dL2csJycpKTtcclxuXHRcdGlmIChpc05hTihiYikpIGJiID0gMDtcclxuXHRcdHJldHVybiBhYSAtIGJiO1xyXG5cdH0sXHJcblx0c29ydF9hbHBoYTogZnVuY3Rpb24oYSxiKSB7XHJcblx0XHR2YXIgYUNsZWFuID0gYVswXS50ZXh0KCkudHJpbSgpLnRvVXBwZXJDYXNlKCk7XHJcblx0XHR2YXIgYkNsZWFuID0gYlswXS50ZXh0KCkudHJpbSgpLnRvVXBwZXJDYXNlKCk7XHJcblx0XHRpZiAoYUNsZWFuID09IGJDbGVhbikgcmV0dXJuIDA7XHJcblx0XHRpZiAoYUNsZWFuIDwgYkNsZWFuKSByZXR1cm4gLTE7XHJcblx0XHRyZXR1cm4gMTtcclxuXHR9LFxyXG5cclxuXHRzb3J0X2J5X2RhdGU6IGZ1bmN0aW9uKGEsIGIpIHtcclxuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTAxMjM5NTMvc29ydC1qYXZhc2NyaXB0LW9iamVjdC1hcnJheS1ieS1kYXRlXHJcblx0XHQvLyBUdXJuIHlvdXIgc3RyaW5ncyBpbnRvIGRhdGVzLCBhbmQgdGhlbiBzdWJ0cmFjdCB0aGVtXHJcblx0XHQvLyB0byBnZXQgYSB2YWx1ZSB0aGF0IGlzIGVpdGhlciBuZWdhdGl2ZSwgcG9zaXRpdmUsIG9yIHplcm8uXHJcblx0XHRyZXR1cm4gbmV3IERhdGUoYlswXS50ZXh0KCkudHJpbSgpKSAtIG5ldyBEYXRlKGFbMF0udGV4dCgpLnRyaW0oKSk7XHJcblx0fSxcclxuXHJcblx0c29ydF9jaGVja2JveDogZnVuY3Rpb24oYSwgYikge1xyXG5cdFx0dmFyIGFDaGVja2VkID0gYVswXS5maW5kKCdpbnB1dFt0eXBlPWNoZWNrYm94XScpLnByb3AoJ2NoZWNrZWQnKTtcclxuXHRcdHZhciBiQ2hlY2tlZCA9IGJbMF0uZmluZCgnaW5wdXRbdHlwZT1jaGVja2JveF0nKS5wcm9wKCdjaGVja2VkJyk7XHJcblx0ICAgIGlmKGFDaGVja2VkICYmICFiQ2hlY2tlZCkgcmV0dXJuIDE7XHJcblx0XHRpZighYUNoZWNrZWQgJiYgYkNoZWNrZWQpIHJldHVybiAtMTtcclxuXHJcblx0XHRyZXR1cm4gMDtcclxuXHR9LFxyXG5cclxuXHRzaGFrZXJfc29ydDogZnVuY3Rpb24obGlzdCwgY29tcF9mdW5jKSB7XHJcblx0XHQvLyBBIHN0YWJsZSBzb3J0IGZ1bmN0aW9uIHRvIGFsbG93IG11bHRpLWxldmVsIHNvcnRpbmcgb2YgZGF0YVxyXG5cdFx0Ly8gc2VlOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvY2t0YWlsX3NvcnRcclxuXHRcdC8vIHRoYW5rcyB0byBKb3NlcGggTmFobWlhc1xyXG5cdFx0dmFyIGIgPSAwO1xyXG5cdFx0dmFyIHQgPSBsaXN0Lmxlbmd0aCAtIDE7XHJcblx0XHR2YXIgc3dhcCA9IHRydWU7XHJcblxyXG5cdFx0d2hpbGUoc3dhcCkge1xyXG5cdFx0XHRzd2FwID0gZmFsc2U7XHJcblx0XHRcdGZvcih2YXIgaSA9IGI7IGkgPCB0OyArK2kpIHtcclxuXHRcdFx0XHRpZiAoIGNvbXBfZnVuYyhsaXN0W2ldLCBsaXN0W2krMV0pID4gMCApIHtcclxuXHRcdFx0XHRcdHZhciBxID0gbGlzdFtpXTsgbGlzdFtpXSA9IGxpc3RbaSsxXTsgbGlzdFtpKzFdID0gcTtcclxuXHRcdFx0XHRcdHN3YXAgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSAvLyBmb3JcclxuXHRcdFx0dC0tO1xyXG5cclxuXHRcdFx0aWYgKCFzd2FwKSBicmVhaztcclxuXHJcblx0XHRcdGZvcih2YXIgaSA9IHQ7IGkgPiBiOyAtLWkpIHtcclxuXHRcdFx0XHRpZiAoIGNvbXBfZnVuYyhsaXN0W2ldLCBsaXN0W2ktMV0pIDwgMCApIHtcclxuXHRcdFx0XHRcdHZhciBxID0gbGlzdFtpXTsgbGlzdFtpXSA9IGxpc3RbaS0xXTsgbGlzdFtpLTFdID0gcTtcclxuXHRcdFx0XHRcdHN3YXAgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSAvLyBmb3JcclxuXHRcdFx0YisrO1xyXG5cclxuXHRcdH0gLy8gd2hpbGUoc3dhcClcclxuXHR9XHJcbn1cclxuXHJcblx0Ly8vIEhFTFBFUiBGVU5DVElPTlNcclxuXHJcblx0Ly8gRGVhbidzIGZvckVhY2g6IGh0dHA6Ly9kZWFuLmVkd2FyZHMubmFtZS9iYXNlL2ZvckVhY2guanNcclxuXHQvKlxyXG5cdFx0Zm9yRWFjaCwgdmVyc2lvbiAxLjBcclxuXHRcdENvcHlyaWdodCAyMDA2LCBEZWFuIEVkd2FyZHNcclxuXHRcdExpY2Vuc2U6IGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXHJcblx0Ki9cclxuXHJcblx0Ly8gYXJyYXktbGlrZSBlbnVtZXJhdGlvblxyXG5cdGlmICghQXJyYXkuZm9yRWFjaCkgeyAvLyBtb3ppbGxhIGFscmVhZHkgc3VwcG9ydHMgdGhpc1xyXG5cdFx0QXJyYXkuZm9yRWFjaCA9IGZ1bmN0aW9uKGFycmF5LCBibG9jaywgY29udGV4dCkge1xyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0YmxvY2suY2FsbChjb250ZXh0LCBhcnJheVtpXSwgaSwgYXJyYXkpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0Ly8gZ2VuZXJpYyBlbnVtZXJhdGlvblxyXG5cdEZ1bmN0aW9uLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24ob2JqZWN0LCBibG9jaywgY29udGV4dCkge1xyXG5cdFx0Zm9yICh2YXIga2V5IGluIG9iamVjdCkge1xyXG5cdFx0XHRpZiAodHlwZW9mIHRoaXMucHJvdG90eXBlW2tleV0gPT0gXCJ1bmRlZmluZWRcIikge1xyXG5cdFx0XHRcdGJsb2NrLmNhbGwoY29udGV4dCwgb2JqZWN0W2tleV0sIGtleSwgb2JqZWN0KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8vIGNoYXJhY3RlciBlbnVtZXJhdGlvblxyXG5cdFN0cmluZy5mb3JFYWNoID0gZnVuY3Rpb24oc3RyaW5nLCBibG9jaywgY29udGV4dCkge1xyXG5cdFx0QXJyYXkuZm9yRWFjaChzdHJpbmcuc3BsaXQoXCJcIiksIGZ1bmN0aW9uKGNociwgaW5kZXgpIHtcclxuXHRcdFx0YmxvY2suY2FsbChjb250ZXh0LCBjaHIsIGluZGV4LCBzdHJpbmcpO1xyXG5cdFx0fSk7XHJcblx0fTtcclxuXHJcblx0Ly8gZ2xvYmFsbHkgcmVzb2x2ZSBmb3JFYWNoIGVudW1lcmF0aW9uXHJcblx0dmFyIGZvckVhY2ggPSBmdW5jdGlvbihvYmplY3QsIGJsb2NrLCBjb250ZXh0KSB7XHJcblx0XHRpZiAob2JqZWN0KSB7XHJcblx0XHRcdHZhciByZXNvbHZlID0gT2JqZWN0OyAvLyBkZWZhdWx0XHJcblx0XHRcdGlmIChvYmplY3QgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xyXG5cdFx0XHRcdC8vIGZ1bmN0aW9ucyBoYXZlIGEgXCJsZW5ndGhcIiBwcm9wZXJ0eVxyXG5cdFx0XHRcdHJlc29sdmUgPSBGdW5jdGlvbjtcclxuXHRcdFx0fSBlbHNlIGlmIChvYmplY3QuZm9yRWFjaCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XHJcblx0XHRcdFx0Ly8gdGhlIG9iamVjdCBpbXBsZW1lbnRzIGEgY3VzdG9tIGZvckVhY2ggbWV0aG9kIHNvIHVzZSB0aGF0XHJcblx0XHRcdFx0b2JqZWN0LmZvckVhY2goYmxvY2ssIGNvbnRleHQpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fSBlbHNlIGlmICh0eXBlb2Ygb2JqZWN0ID09IFwic3RyaW5nXCIpIHtcclxuXHRcdFx0XHQvLyB0aGUgb2JqZWN0IGlzIGEgc3RyaW5nXHJcblx0XHRcdFx0cmVzb2x2ZSA9IFN0cmluZztcclxuXHRcdFx0fSBlbHNlIGlmICh0eXBlb2Ygb2JqZWN0Lmxlbmd0aCA9PSBcIm51bWJlclwiKSB7XHJcblx0XHRcdFx0Ly8gdGhlIG9iamVjdCBpcyBhcnJheS1saWtlXHJcblx0XHRcdFx0cmVzb2x2ZSA9IEFycmF5O1xyXG5cdFx0XHR9XHJcblx0XHRcdHJlc29sdmUuZm9yRWFjaChvYmplY3QsIGJsb2NrLCBjb250ZXh0KTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRzb3J0dGFibGUuaW5pdCgpO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc29ydGFibGVUYWJsZUNvbnRyb2xsZXI7XHJcbiIsIi8qIGdsb2JhbCB0b29sdGlwQ29udHJvbGxlciAqL1xyXG5cclxuaW1wb3J0IGNhbGN1bGF0ZVBvcHVwT2Zmc2V0cyBmcm9tIFwiLi4vY2FsY3VsYXRlUG9wdXBPZmZzZXRzLmpzXCI7XHJcblxyXG4vKipcclxuICogY3JlYXRlcyBhIHBvcHVwIGFuZCBpbmplY3RzIGl0IGluIHRvIHRoZSBkb2N1bWVudC5cclxuICogQHBhcmFtICB7U3RyaW5nfSB0aXRsZSA6IHRpdGxlIG9mIHRoZSBwb3B1cCwgb3B0aW9uYWxcclxuICogQHBhcmFtICB7U3RyaW5nfSBodG1sIDogY29udGVudCBvZiB0aGUgcG9wdXAgYXMgaHRtbFxyXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHRvcCAgOiB0b3AgcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIGRvY3VtZW50XHJcbiAqIEBwYXJhbSAge051bWJlcn0gbGVmdCA6IGxlZnQgcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIGRvY3VtZW50XHJcbiAqIEBwYXJhbSAge051bWJlcn0gb2Zmc2V0IDogYSB2ZXJ0aWNhbCBvciBob3Jpem9uYWwgZGlzdGFuY2UgZnJvbSB0aGUgdG9wL2xlZnQgdGhlIHRyaWFuZ2xlIHNob3VsZCBwb2ludFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGVuZGluZyBvbiBpZiB0aGUgdHJpYW5nbGUgaXMgdG9wL2JvdHRvbSBvciBsZWZ0L3JpZ2h0XHJcbiAqIEBwYXJhbSAge1N0cmluZ30gY29udGFpbmVyIDogYSBzZWxlY3RvciBvZiB0aGUgY29udGFpbmVyIGluIHdoaWNoIHRvIGluamVjdCB0aGUgcG9wdXBcclxuICogQHBhcmFtICB7U3RyaW5nfSB0cmlhbmdsZSA6IFwidG9wXCIsIFwicmlnaHRcIiwgXCJib3R0b21cIiwgb3IgXCJsZWZ0XCJcclxuICogQHBhcmFtICB7Qm9vbGVhbn0gZmxpcFRvQ29udGFpbjogd2lsbCBmbGlwIHRoZSBwb3B1cCBpZiBpdCBnb2VzIG91dHNpZGUgdGhlIHBhcmVudCBjb250YWluZXJcclxuICogQHBhcmFtICB7Qm9vbGVhbn0gY2xvc2VCdG4gOiBpZiB0aGUgWCBzaG91bGQgYmUgc2hvd24uICBJZiBub3QsIHRoZSBwb3B1cCB3aXRoIG5vdCBoYXZlIHBvaW50ZXIgZXZlbnRzXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBpcyB1c2VmdWwgZm9yIHBvcHVwcyBvbiBob3ZlciB0aGF0IHNob3VsZG4ndCBmaXJlIG1vdXNlZW50ZXIvbGVhdmVcclxuICogQHBhcmFtICB7Qm9vbGVhbn0gaXNIaWRkZW46IFdoZXRoZXIgb3Igbm90IHRoZSBwb3B1cCBpcyB2aXNpYmxlLlxyXG4gKiBAcmV0dXJuIHtPYmplY3R9IHtcclxuICogICAgIHtGdW5jdGlvbn0gaGlkZVBvcHVwICAgOiB3aWxsIHNldCBpc0hpZGRlbiB0byB0cnVlXHJcbiAqICAgICB7RnVuY3Rpb259IHJlbW92ZVBvcHVwIDogd2lsbCByZW1vdmUgdGhlIHBvcHVwIGZyb20gdGhlIERPTSksXHJcbiAqICAgICB7RnVuY3Rpb259IHNldFN0YXRlIDogcGFzcyBhbiBvYmplY3Qgd2l0aCBhbnkga2V5cyBmcm9tIGFib3ZlIHRvIHVwZGF0ZSB0aGUgcG9wdXAuXHJcbiAqIH1cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVBvcHVwKGluaXRpYWxTdGF0ZSkge1xyXG5cclxuICAgIC8vIGRlZmF1bHRzLCBhbmQgdGhpcyBvYmplY3Qgd2lsbCBob2xkIHRoZSBwcmV2aW91cyBzdGF0ZSBhZnRlciBzZXRTdGF0ZVxyXG4gICAgbGV0IHByZXZTdGF0ZSA9IHtcclxuICAgICAgICB0aXRsZSAgICAgOiBcIlwiLFxyXG4gICAgICAgIGh0bWwgICAgICA6IFwiXCIsXHJcbiAgICAgICAgdG9wICAgICAgIDogMCxcclxuICAgICAgICBsZWZ0ICAgICAgOiAwLFxyXG4gICAgICAgIHdpZHRoICAgICA6IFwiXCIsXHJcbiAgICAgICAgb2Zmc2V0ICAgIDogMCxcclxuICAgICAgICBjb250YWluZXIgOiBcImJvZHlcIixcclxuICAgICAgICB0cmlhbmdsZSAgOiBcImJvdHRvbVwiLFxyXG4gICAgICAgIGNsb3NlQnRuICA6IHRydWUsXHJcbiAgICAgICAgaXNIaWRkZW4gIDogZmFsc2UsXHJcbiAgICAgICAgZmxpcFRvQ29udGFpbjogZmFsc2VcclxuICAgIH07XHJcblxyXG4gICAgbGV0IHN0YXRlID0gJC5leHRlbmQoe30sIHByZXZTdGF0ZSwgaW5pdGlhbFN0YXRlKTtcclxuXHJcblxyXG4gICAgZnVuY3Rpb24gc2V0U3RhdGUobmV3U3RhdGUpe1xyXG5cclxuICAgICAgICAvLyBjb3B5IHRoZSBvbGQgc3RhdGUgaW50byBwcmV2U3RhdGVcclxuICAgICAgICBwcmV2U3RhdGUgPSAkLmV4dGVuZCh7fSwgc3RhdGUpO1xyXG5cclxuICAgICAgICAkLmV4dGVuZChzdGF0ZSwgbmV3U3RhdGUpO1xyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhzdGF0ZSk7XHJcblxyXG4gICAgICAgIHJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGluaXRpYWxpemUgcG9wdXBcclxuICAgIC8vIGFsd2F5cyBzdGFydCBoaWRkZW4gc28gaXQgY2FuIGFuaW1hdGUgaW5cclxuICAgIGNvbnN0ICRwb3B1cCA9ICQoXCI8ZGl2IGNsYXNzPSdwb3B1cCc+XCIpXHJcbiAgICAgICAgLmNzcyh7XHJcbiAgICAgICAgICAgIFwib3BhY2l0eVwiOiAwLFxyXG4gICAgICAgICAgICBcIndpZHRoXCI6IHN0YXRlLndpZHRoLFxyXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiOiBcInNjYWxlKDAuODkpXCIsXHJcbiAgICAgICAgICAgIFwicG9pbnRlci1ldmVudHNcIjogKHN0YXRlLmNsb3NlQnRuKSA/IFwiYXV0b1wiIDogXCJub25lXCJcclxuICAgICAgICB9KTtcclxuICAgIGNvbnN0ICR0aXRsZURpdiAgICA9ICQoXCI8ZGl2PlwiKS5hZGRDbGFzcyhcInBvcHVwX190aXRsZVwiKTtcclxuICAgIGNvbnN0ICR0cmlhbmdsZURpdiA9ICQoXCI8ZGl2PlwiKS5hZGRDbGFzcyhcInBvcHVwX190cmlhbmdsZVwiKTtcclxuICAgIGNvbnN0ICRjb250ZW50ICAgICA9ICQoXCI8ZGl2PlwiKS5hZGRDbGFzcyhcInBvcHVwX19jb250ZW50XCIpO1xyXG5cclxuICAgIC8vIGF0dGFjaCB0aGUgY2xvc2UgYnV0dG9uIGlmIHdlJ3JlIHN1cHBvc2VkIHRvXHJcbiAgICBpZiAoc3RhdGUuY2xvc2VCdG4pe1xyXG4gICAgICAgIGNvbnN0ICR4RGl2ID0gJChcIjxkaXY+XCIpLmFkZENsYXNzKFwicG9wdXBfX3gtaWNvblwiKVxyXG4gICAgICAgICAgICAuaHRtbChcIjxzdmcgY2xhc3M9J3N2Zy14Jz4gPHVzZSB4bGluazpocmVmPSdidWlsZC9pbWcvc3ZnLXNwcml0ZS5zdmcjeCc+PC91c2U+IDwvc3ZnPlwiKVxyXG4gICAgICAgICAgICAub24oXCJjbGlja1wiLCByZW1vdmVQb3B1cCk7XHJcbiAgICAgICAgJHBvcHVwLmFwcGVuZCgkeERpdik7XHJcblxyXG5cclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZUNsaWNrQXdheSwgdHJ1ZSk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgaGFuZGxlQ2xpY2tBd2F5LCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICAkcG9wdXAuYXBwZW5kKCR0aXRsZURpdik7XHJcbiAgICAkcG9wdXAuYXBwZW5kKCR0cmlhbmdsZURpdik7XHJcbiAgICAkcG9wdXAuYXBwZW5kKCRjb250ZW50KTtcclxuXHJcbiAgICAkKHN0YXRlLmNvbnRhaW5lcikuYXBwZW5kKCRwb3B1cCk7XHJcblxyXG5cclxuXHJcbiAgICAvLyBpZiB0aGUgdXNlciBjbGlja2VkIG91dHNpZGUgb2YgdGhlIHBvcHVwLCBjbG9zZSBpdFxyXG4gICAgZnVuY3Rpb24gaGFuZGxlQ2xpY2tBd2F5KGUpIHtcclxuICAgICAgICBjb25zdCBpblBvcHVwID0gJChlLnRhcmdldCkuY2xvc2VzdChcIi5wb3B1cFwiKS5sZW5ndGg7XHJcbiAgICAgICAgaWYgKCFpblBvcHVwKXsgcmVtb3ZlUG9wdXAoKTsgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGhpZGVQb3B1cCgpe1xyXG5cclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZUNsaWNrQXdheSwgdHJ1ZSk7XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgaGFuZGxlQ2xpY2tBd2F5LCB0cnVlKTtcclxuXHJcbiAgICAgICAgLy8gb25seSByZS1yZW5kZXIgaWYgd2UgbmVlZCB0b1xyXG4gICAgICAgIGlmIChzdGF0ZS5pc0hpZGRlbiAhPT0gdHJ1ZSl7XHJcbiAgICAgICAgICAgIC8vIHdpbGwga2ljayBvZiB0aGUgdHJhbnNpdGlvblxyXG4gICAgICAgICAgICBzZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICBpc0hpZGRlbjogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlUG9wdXAoKXtcclxuXHJcbiAgICAgICAgLy8gZmlyc3QgY2xvc2UgaXRcclxuICAgICAgICBoaWRlUG9wdXAoKTtcclxuXHJcbiAgICAgICAgLy8gd2hlbiB0aGUgdHJhbnNpdGlvbiBmaW5pc2hlcywgcmVtb3ZlIHRoZSBwb3B1cCBmcm9tIHRoZSBET01cclxuICAgICAgICAkcG9wdXAub24oXCJ0cmFuc2l0aW9uZW5kXCIsICgpID0+IHtcclxuICAgICAgICAgICAgJHBvcHVwLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHJlbmRlciB0aGUgZmlyc3QgdGltZVxyXG4gICAgcmVuZGVyKCk7XHJcblxyXG4gICAgZnVuY3Rpb24gcmVuZGVyKCl7XHJcblxyXG4gICAgICAgIGNvbnN0IHsgdG9wLCBsZWZ0LCBvZmZzZXQsIHRyaWFuZ2xlLCBpc0hpZGRlbiwgaHRtbCwgdGl0bGUsIGZsaXBUb0NvbnRhaW4gfSA9IHN0YXRlO1xyXG5cclxuXHJcbiAgICAgICAgLy8gdXBkYXRlIHRoZSBjb250ZW50IGJlZm9yZSBjYWxjdWxhdGluZyB0aGUgb2Zmc2V0c1xyXG4gICAgICAgICRjb250ZW50Lmh0bWwoaHRtbCk7XHJcbiAgICAgICAgJHRpdGxlRGl2Lmh0bWwodGl0bGUpO1xyXG5cclxuICAgICAgICBjb25zdCBvZmZzZXRzID0gY2FsY3VsYXRlUG9wdXBPZmZzZXRzKHtcclxuICAgICAgICAgICAgcG9wdXA6ICRwb3B1cC5nZXQoMCksXHJcbiAgICAgICAgICAgIHRyaWFuZ2xlU2l6ZTogJHRyaWFuZ2xlRGl2LmhlaWdodCgpLFxyXG4gICAgICAgICAgICB0b3AsIGxlZnQsIG9mZnNldCwgdHJpYW5nbGUsIGZsaXBUb0NvbnRhaW5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gaWYgdGhlIHBvcHVwIHdhcyBoaWRkZW4sIHdlIHdhbnQgdG8gcGxhY2UgaXQgd2hlcmUgaXQgbmVlZHMgdG8gYmVcclxuICAgICAgICAvLyB0aGUgdXBkYXRlIHdpbGwgZmFkZSBpdCBpblxyXG4gICAgICAgIC8vIGVudGVyIC0gcHV0IGl0IGluIHBsYWNlIGJlZm9yZSB0cmFuc2l0aW9uaW5nIGluXHJcbiAgICAgICAgaWYgKHByZXZTdGF0ZS5pc0hpZGRlbiAmJiAhaXNIaWRkZW4pe1xyXG4gICAgICAgICAgICAkcG9wdXAuY3NzKHtcclxuICAgICAgICAgICAgICAgIFwidG9wXCIgOiBgJHtvZmZzZXRzLnBvcHVwVG9wfXB4YCxcclxuICAgICAgICAgICAgICAgIFwibGVmdFwiOiBgJHtvZmZzZXRzLnBvcHVwTGVmdH1weGBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkcG9wdXBcclxuICAgICAgICAgICAgLy8gLnN0b3AoKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgLmNzcyh7XHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAoaXNIaWRkZW4pID8gMCA6IDEsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IChpc0hpZGRlbikgPyBcInNjYWxlKDAuOSlcIiA6IFwic2NhbGUoMSlcIixcclxuICAgICAgICAgICAgICAgIHRvcDogb2Zmc2V0cy5wb3B1cFRvcCArICdweCcsXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiBvZmZzZXRzLnBvcHVwTGVmdCArICdweCdcclxuICAgICAgICAgICAgfSwgMjUwKVxyXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoZnVuY3Rpb24oaW5kZXgsIGNzcyl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGNzcy5tYXRjaCgvXFxiaXMtdHJpYW5nbGUtXFxTKy9nKSB8fCBbXSkuam9pbihcIiBcIik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hZGRDbGFzcyhgaXMtdHJpYW5nbGUtJHtvZmZzZXRzLnRyaWFuZ2xlU2lkZX1gKVxyXG4gICAgICAgICAgICAudG9nZ2xlQ2xhc3MoXCJwb3B1cC0taGlkZGVuXCIsIGlzSGlkZGVuKTtcclxuXHJcblxyXG4gICAgICAgIC8vIGFkanVzdCB0aGUgdHJpYW5nbGVcclxuICAgICAgICAkdHJpYW5nbGVEaXYuY3NzKHtcclxuICAgICAgICAgICAgXCJ0cmFuc2Zvcm1cIjogKG9mZnNldHMudHJpYW5nbGVTaWRlID09PSBcInRvcFwiIHx8IG9mZnNldHMudHJpYW5nbGVTaWRlID09PSBcImJvdHRvbVwiKVxyXG4gICAgICAgICAgICAgICAgPyBgdHJhbnNsYXRlWCgke29mZnNldHMudHJpYW5nbGVPZmZzZXR9cHgpYCAvLyB0b3AvYm90dG9tXHJcbiAgICAgICAgICAgICAgICA6IGB0cmFuc2xhdGVZKCR7b2Zmc2V0cy50cmlhbmdsZU9mZnNldH1weClgIC8vIGxlZnQvcmlnaHRcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICRwb3B1cC50b2dnbGVDbGFzcyhcIm5vLXRpdGxlXCIsICF0aXRsZSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vIGV4dGVybmFsIGFwaVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzZXRTdGF0ZSxcclxuICAgICAgICBoaWRlUG9wdXAsXHJcbiAgICAgICAgcmVtb3ZlUG9wdXBcclxuICAgIH07XHJcblxyXG59XHJcbiIsIi8qIGdsb2JhbCBhbmd1bGFyLCBhbmFseXRpY3NfZGF0YSAqL1xyXG5cclxuLy8gVEhJUkQtUEFSVFkgLyBWRU5ET1JcclxuaW1wb3J0IFplcHRvIGZyb20gJy4vemVwdG8ubWluJztcclxuaW1wb3J0IHN2ZzRldmVyeWJvZHkgZnJvbSAnLi9zdmc0ZXZlcnlib2R5JztcclxuaW1wb3J0IENvb2tpZXMgZnJvbSAnLi9qc2Nvb2tpZSc7XHJcbmltcG9ydCBEcmFwU3dhcCBmcm9tICcuL3plcHRvLmRyYWdzd2FwJztcclxuaW1wb3J0IERyb3BCb3ggZnJvbSAnLi9EcmFnRHJvcFRvdWNoJztcclxuXHJcbi8vIENBUk9VU0VMXHJcbi8vaW1wb3J0IGhpZ2hsaWdodCBmcm9tICcuL2Nhcm91c2VsL2hpZ2hsaWdodC5wYWNrJztcclxuaW1wb3J0IHplcHRvRGF0YSBmcm9tICcuL2Nhcm91c2VsL3plcHRvLmRhdGEnO1xyXG4vL2ltcG9ydCBhcHAgZnJvbSAnLi9jYXJvdXNlbC9hcHAnO1xyXG5pbXBvcnQgJy4vY2Fyb3VzZWwvb3dsLmNhcm91c2VsJztcclxuLy8gQ09OVFJPTExFUlNcclxuaW1wb3J0IEZvcm1Db250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcnMvZm9ybS1jb250cm9sbGVyJztcclxuaW1wb3J0IFBvcE91dENvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVycy9wb3Atb3V0LWNvbnRyb2xsZXInO1xyXG5pbXBvcnQgQm9va21hcmtDb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcnMvYm9va21hcmstY29udHJvbGxlcic7XHJcbmltcG9ydCBSZXNldFBhc3N3b3JkQ29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXJzL3Jlc2V0LXBhc3N3b3JkLWNvbnRyb2xsZXInO1xyXG5pbXBvcnQgUmVnaXN0ZXJDb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcnMvcmVnaXN0ZXItY29udHJvbGxlcic7XHJcbmltcG9ydCBTb3J0YWJsZVRhYmxlQ29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXJzL3NvcnRhYmxlLXRhYmxlLWNvbnRyb2xsZXInO1xyXG5pbXBvcnQgTGlnaHRib3hNb2RhbENvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVycy9saWdodGJveC1tb2RhbC1jb250cm9sbGVyJztcclxuaW1wb3J0IHsgYW5hbHl0aWNzRXZlbnQgfSBmcm9tICcuL2NvbnRyb2xsZXJzL2FuYWx5dGljcy1jb250cm9sbGVyJztcclxuaW1wb3J0IHRvb2x0aXBDb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcnMvdG9vbHRpcC1jb250cm9sbGVyJztcclxuXHJcbi8vIENPTVBPTkVOVFNcclxuaW1wb3J0ICcuL2NvbXBvbmVudHMvYXJ0aWNsZS1zaWRlYmFyLWNvbXBvbmVudCc7XHJcbmltcG9ydCAnLi9jb21wb25lbnRzL3NhdmUtc2VhcmNoLWNvbXBvbmVudCc7XHJcbmltcG9ydCAnLi9jb21wb25lbnRzL215dmlldy1zZXR0aW5ncyc7XHJcbmltcG9ydCAnLi9jb21wb25lbnRzL3BhZ2luYXRpb24nO1xyXG5pbXBvcnQgJy4vY29tcG9uZW50cy9wZXJzb25hbGlzYXRpb24nO1xyXG5pbXBvcnQgJy4vY29tcG9uZW50cy9pZC1jb21wYXJlY2hhcnQnO1xyXG5pbXBvcnQgJy4vY29tcG9uZW50cy9pZC1yZXNwb25zaXZlLXRhYmxlJztcclxuaW1wb3J0ICcuL2NvbXBvbmVudHMvaWQtZmluYW5jaWFsLXJlc3BvbnNpdmUtdGFibGUnO1xyXG5pbXBvcnQgJy4vY29tcG9uZW50cy9pZC1xdWFydGVybHktcmVzcG9uc2l2ZS10YWJsZSc7XHJcbmltcG9ydCAnLi9jb21wb25lbnRzL2lkLWNvbXBhcmVmaW5hbmNpYWxyZXN1bHRzJztcclxuaW1wb3J0ICcuL2NvbXBvbmVudHMvbGF0ZXN0LWNhc3VhbGl0eSc7XHJcbmltcG9ydCAnLi9jb21wb25lbnRzL2lkLW1lcmdlLWFjcXVpc3Rpb24nO1xyXG5pbXBvcnQgJy4vY29tcG9uZW50cy9BTUNoYXJ0cy1tZXJnZXMtYWNxdWlzaXRpb24nO1xyXG5pbXBvcnQgJy4vY29tcG9uZW50cy9keW5hbWljLWNvbnRlbnQtcmVjb21lbmRhdGlvbic7XHJcbmltcG9ydCAnLi9jb21wb25lbnRzL2xsLWNhc3VhbGl0eS1saXN0aW5nJztcclxuaW1wb3J0ICcuL2NvbXBvbmVudHMvbGwtY2FzdWFsaXR5LWRldGFpbCc7XHJcbmltcG9ydCAnLi9jb21wb25lbnRzL2xsLW1hcmtldC1kYXRhLXRvb2wnO1xyXG5pbXBvcnQgJy4vY29tcG9uZW50cy9sbC1tYXJrZXQtZGF0YSc7XHJcbmltcG9ydCAnLi9jb21wb25lbnRzL2xsLXRhbmtlci1maXh0dXJlcyc7XHJcblxyXG4vLyBPVEhFUiBDT0RFXHJcbmltcG9ydCBOZXdzbGV0dGVyU2lnbnVwQ29udHJvbGxlciAgZnJvbSAnLi9uZXdzbGV0dGVyLXNpZ251cCc7XHJcbmltcG9ydCBTZWFyY2hTY3JpcHQgZnJvbSAnLi9zZWFyY2gtcGFnZS5qcyc7XHJcblxyXG5pbXBvcnQgeyB0b2dnbGVJY29ucyB9IGZyb20gJy4vdG9nZ2xlLWljb25zJztcclxuLy8gR2xvYmFsIHNjb3BlIHRvIHBsYXkgbmljZWx5IHdpdGggQW5ndWxhclxyXG53aW5kb3cudG9nZ2xlSWNvbnMgPSB0b2dnbGVJY29ucztcclxuXHJcbi8qIFBvbHlmaWxsIGZvciBzY3JpcHRzIGV4cGVjdGluZyBgalF1ZXJ5YC4gQWxzbyBzZWU6IENTUyBzZWxlY3RvcnMgc3VwcG9ydCBpbiB6ZXB0by5taW4uanMgKi9cclxud2luZG93LmpRdWVyeSA9ICQ7XHJcbmltcG9ydCBzZWxlY3Rpdml0eSBmcm9tICcuL3NlbGVjdGl2aXR5LWZ1bGwnO1xyXG5pbXBvcnQgdmlkZW8gZnJvbSAnLi9jb21wb25lbnRzL3ZpZGVvLW1pbmknO1xyXG5pbXBvcnQgdmlkZW9tb2RhbCBmcm9tICcuL21vZGFsJztcclxuLy8gTWFrZSBzdXJlIHByb3BlciBlbG0gZ2V0cyB0aGUgY2xpY2sgZXZlbnRcclxuLy8gV2hlbiBhIHVzZXIgc3VibWl0cyBhIEZvcmdvdCBQYXNzd29yZCByZXF1ZXN0LCB0aGlzIHdpbGwgZGlzcGxheSB0aGUgcHJvcGVyXHJcbi8vIHN1Y2Nlc3MgbWVzc2FnZSBhbmQgaGlkZSB0aGUgZm9ybSB0byBwcmV2ZW50IHJlLXNlbmRpbmcuXHJcblxyXG52YXIgc2hvd0ZvcmdvdFBhc3NTdWNjZXNzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkKCcucG9wLW91dF9fc2lnbi1pbi1mb3Jnb3QtcGFzc3dvcmQtbmVzdGVkJykudG9nZ2xlQ2xhc3MoJ2lzLWhpZGRlbicpO1xyXG4gICAgJCgnLnBvcC1vdXRfX3NpZ24taW4tZm9yZ290LXBhc3N3b3JkJylcclxuXHRcdC5maW5kKCcuYWxlcnQtc3VjY2VzcycpXHJcblx0XHQudG9nZ2xlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG59O1xyXG5cclxud2luZG93LmZpbmRUb29sdGlwcyA9IGZ1bmN0aW9uKCkge1xyXG5cdCQoJy5qcy10b2dnbGUtdG9vbHRpcCcpLmVhY2goZnVuY3Rpb24oaW5kZXgsIGl0ZW0pIHtcclxuXHRcdHZhciB0b29sdGlwO1xyXG5cdFx0JChpdGVtKS5kYXRhKFwidHRWaXNpYmxlXCIsIGZhbHNlKTtcclxuXHRcdCQoaXRlbSkuZGF0YShcInR0VG91Y2hUcmlnZ2VyZWRcIiwgZmFsc2UpO1xyXG5cclxuXHRcdCQoaXRlbSkub24oJ21vdXNlZW50ZXIgdG91Y2hzdGFydCcsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cdFx0XHRpZiAoZS50eXBlID09PSBcInRvdWNoc3RhcnRcIikge1xyXG5cdFx0XHRcdCQoaXRlbSkuZGF0YShcInR0VG91Y2hUcmlnZ2VyZWRcIiwgdHJ1ZSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFjdHVhbCBtb3VzZSBldmVudHMgdGhyb3duIGNhbiBiZSBhbnkgbnVtYmVyIG9mIHRoaW5ncy4uLlxyXG5cdFx0XHRpZiAoKGUudHlwZSA9PT0gKFwibW91c2VvdmVyXCIpIHx8IGUudHlwZSA9PT0gKFwibW91c2VlbnRlclwiKSkgJiYgJChpdGVtKS5kYXRhKFwidHRUb3VjaFRyaWdnZXJlZFwiKSkge1xyXG5cdFx0XHRcdC8vIERvIG5vdGhpbmdcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmICgkKGl0ZW0pLmRhdGEoXCJ0dFZpc2libGVcIikgJiYgZS50eXBlID09PSBcInRvdWNoc3RhcnRcIikge1xyXG5cdFx0XHRcdCQoaXRlbSkuZGF0YShcInR0VmlzaWJsZVwiLCBmYWxzZSk7XHJcblx0XHRcdFx0JChpdGVtKS5kYXRhKFwidHRUb3VjaFRyaWdnZXJlZFwiLCBmYWxzZSk7XHJcblx0XHRcdFx0dG9vbHRpcC5oaWRlUG9wdXAoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHQkKGl0ZW0pLmRhdGEoXCJ0dFZpc2libGVcIiwgdHJ1ZSk7XHJcblx0XHRcdFx0Y29uc3Qgb2Zmc2V0cyA9ICQoaXRlbSkub2Zmc2V0KCk7XHJcblx0XHRcdFx0dG9vbHRpcCA9IHRvb2x0aXBDb250cm9sbGVyKHtcclxuXHRcdFx0XHRcdGlzSGlkZGVuOiBmYWxzZSxcclxuXHRcdFx0XHRcdGh0bWw6ICQoaXRlbSkuZGF0YSgndG9vbHRpcC10ZXh0JyksXHJcblx0XHRcdFx0XHR0b3A6IG9mZnNldHMudG9wLFxyXG5cdFx0XHRcdFx0bGVmdDogb2Zmc2V0cy5sZWZ0ICsgJCh0aGlzKS53aWR0aCgpLzIsXHJcblx0XHRcdFx0XHR0cmlhbmdsZTogJ2JvdHRvbSdcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0JChpdGVtKS5vbignbW91c2VsZWF2ZScsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHQkKGl0ZW0pLmRhdGEoXCJ0dFZpc2libGVcIiwgZmFsc2UpO1xyXG5cdFx0XHR0b29sdGlwLmhpZGVQb3B1cCgpO1xyXG5cdFx0XHQkKCcucG9wdXAnKS5yZW1vdmUoKTtcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG59O1xyXG5cclxud2luZG93LmZpbmRUb29sdGlwcygpO1xyXG5cclxudmFyIHJlbmRlcklmcmFtZUNvbXBvbmVudHMgPSBmdW5jdGlvbigpIHtcclxuICAgICQoJy5pZnJhbWUtY29tcG9uZW50JykuZWFjaChmdW5jdGlvbihpbmRleCwgZWxtKSB7XHJcbiAgICAgICAgdmFyIGRlc2t0b3BFbWJlZCA9ICQoZWxtKS5maW5kKCcuaWZyYW1lLWNvbXBvbmVudF9fZGVza3RvcCcpO1xyXG4gICAgICAgIHZhciBtb2JpbGVFbWJlZCA9ICQoZWxtKS5maW5kKCcuaWZyYW1lLWNvbXBvbmVudF9fbW9iaWxlJyk7XHJcblxyXG4gICAgICAgIHZhciBpc0VkaXRNb2RlID0gJCh0aGlzKS5oYXNDbGFzcygnaXMtcGFnZS1lZGl0b3InKTtcclxuXHJcbiAgICAgICAgdmFyIHNob3dNb2JpbGUgPSAoJCh3aW5kb3cpLndpZHRoKCkgPD0gNDgwKSB8fCBpc0VkaXRNb2RlO1xyXG4gICAgICAgIHZhciBzaG93RGVza3RvcCA9ICFzaG93TW9iaWxlIHx8IGlzRWRpdE1vZGU7XHJcblxyXG4gICAgICAgIGlmIChzaG93TW9iaWxlKSB7XHJcbiAgICAgICAgICAgIG1vYmlsZUVtYmVkLnNob3coKTtcclxuICAgICAgICAgICAgaWYgKG1vYmlsZUVtYmVkLmh0bWwoKSA9PSAnJylcclxuICAgICAgICAgICAgICAgIG1vYmlsZUVtYmVkLmh0bWwoZGVjb2RlSHRtbChtb2JpbGVFbWJlZC5kYXRhKCdlbWJlZC1saW5rJykpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkZXNrdG9wRW1iZWQuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNob3dEZXNrdG9wKSB7XHJcbiAgICAgICAgICAgIGRlc2t0b3BFbWJlZC5zaG93KCk7XHJcbiAgICAgICAgICAgIGlmIChkZXNrdG9wRW1iZWQuaHRtbCgpID09ICcnKVxyXG4gICAgICAgICAgICAgICAgZGVza3RvcEVtYmVkLmh0bWwoZGVjb2RlSHRtbChkZXNrdG9wRW1iZWQuZGF0YSgnZW1iZWQtbGluaycpKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbW9iaWxlRW1iZWQuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGRlc2t0b3BNZWRpYUlkID0gJChlbG0pLmZpbmQoJy5pZnJhbWUtY29tcG9uZW50X19kZXNrdG9wJykuZGF0YShcIm1lZGlhaWRcIik7XHJcblxyXG4gICAgICAgIHZhciB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcclxuICAgICAgICB1cmwucmVwbGFjZShcIiNcIiwgXCJcIik7XHJcbiAgICAgICAgaWYgKHVybC5pbmRleE9mKFwiP1wiKSA8IDApIHtcclxuICAgICAgICAgICAgdXJsICs9IFwiP1wiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHVybCArPSBcIiZcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHVybCArPSBcIm1vYmlsZW1lZGlhPXRydWUmc2VsZWN0ZWRpZD1cIiArIGRlc2t0b3BNZWRpYUlkO1xyXG4gICAgICAgICQoZWxtKS5maW5kKCcuaWZyYW1lLWNvbXBvbmVudF9fbW9iaWxlIGEnKS5kYXRhKCdtZWRpYWlkJywgdXJsKS5hdHRyKCdocmVmJywgbnVsbCk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbnZhciByZW5kZXJUYWJsZWF1ID0gZnVuY3Rpb24oKSB7XHJcblx0XHJcbiAgICB2YXIgZGVza3RvcEVtYmVkID0gJCgnLnRhYmxlYXVfY29tcG9uZW50X19kZXNrdG9wJyk7XHJcbiAgICB2YXIgbW9iaWxlRW1iZWQgPSAkKCcudGFibGVhdV9jb21wb25lbnRfX21vYmlsZScpO1xyXG5cclxuXHRcdFxyXG4gICAgdmFyIG1vYmlsZUhpZGRlblZhbHVlID0gJCgnI0lzTW9iaWxlRGFzaGJvYXJkQXZhaWxhYmxlJykudmFsKCk7XHJcbiAgICB2YXIgc2hvd01vYmlsZSA9ICgkKHdpbmRvdykud2lkdGgoKSA8PSA0ODApO1xyXG4gICAgdmFyIHNob3dEZXNrdG9wID0gIXNob3dNb2JpbGU7XHJcblxyXG4gICAgaWYgKHNob3dNb2JpbGUpIHtcclxuICAgICAgICBpZihtb2JpbGVIaWRkZW5WYWx1ZSA9PSBcIlRydWVcIil7XHJcbiAgICAgICAgICAgIG1vYmlsZUVtYmVkLnNob3coKTtcclxuICAgICAgICAgICAgZGVza3RvcEVtYmVkLmhpZGUoKTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgZGVza3RvcEVtYmVkLnNob3coKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNob3dEZXNrdG9wKSB7XHJcbiAgICAgICAgZGVza3RvcEVtYmVkLnNob3coKTtcclxuICAgICAgICBtb2JpbGVFbWJlZC5oaWRlKCk7XHJcbiAgICB9XHJcblxyXG5cdFx0XHJcbn07XHJcblxyXG52YXIgcmVuZGVyQU1jaGFydD1mdW5jdGlvbigpIHtcclxuICAgIGlmKCQoXCIjYW1jaGFydERhc2hib2FyZFwiKS5oYXNDbGFzcyhcImFtY2hhcnQtZGFzaGJvYXJkXCIpKVxyXG4gICAge1xyXG5cclxuICAgICAgICB2YXIgYW1DaGFydFR5cGUgPSAkKCcjQ2hhcnRUeXBlJykudmFsKCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB2YXIgZGF0YVByb3ZpZGVyID0gJCgnI2FtQ2hhcnREYXRhUHJvdmlkZXInKS52YWwoKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIHZhciBncmFwaFR5cGUgPSAkKCcjR3JhcGhUeXBlJykudmFsKCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB2YXIgY2F0ZWdvcnlGaWVsZCA9ICQoJyNDYXRlZ29yeUZpZWxkJykudmFsKCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB2YXIgdmFsdWVGaWVsZCA9ICQoJyNWYWx1ZUZpZWxkJykudmFsKCkudG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgQW1DaGFydHMubWFrZUNoYXJ0KFwiY2hhcnRkaXZcIiwge1xyXG4gICAgICAgICAgICBcInR5cGVcIjogYW1DaGFydFR5cGUsXHJcbiAgICAgICAgICAgIFwiZGF0YVByb3ZpZGVyXCI6IGNoYXJ0RGF0YSxcclxuICAgICAgICAgICAgXCJjYXRlZ29yeUZpZWxkXCI6IGNhdGVnb3J5RmllbGQsXHJcbiAgICAgICAgICAgIFwiZ3JhcGhzXCI6IFt7XHJcbiAgICAgICAgICAgICAgICBcInZhbHVlRmllbGRcIjogdmFsdWVGaWVsZCxcclxuICAgICAgICAgICAgICAgIFwidHlwZVwiOmdyYXBoVHlwZVxyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgXCJyZXNwb25zaXZlXCI6IHtcclxuICAgICAgICAgICAgICAgIFwiZW5hYmxlZFwiOiB0cnVlIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG52YXIgZGVjb2RlSHRtbCA9IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgIHZhciB0eHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIik7XHJcbiAgICB0eHQuaW5uZXJIVE1MID0gaHRtbDtcclxuICAgIHJldHVybiB0eHQudmFsdWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFBhcmFtZXRlckJ5TmFtZShuYW1lLCB1cmwpIHtcclxuICAgIGlmICghdXJsKSB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcclxuICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtcXF1dL2csIFwiXFxcXCQmXCIpO1xyXG4gICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIls/Jl1cIiArIG5hbWUgKyBcIig9KFteJiNdKil8JnwjfCQpXCIpLFxyXG4gICAgICAgIHJlc3VsdHMgPSByZWdleC5leGVjKHVybCk7XHJcbiAgICBpZiAoIXJlc3VsdHMpIHJldHVybiBudWxsO1xyXG4gICAgaWYgKCFyZXN1bHRzWzJdKSByZXR1cm4gJyc7XHJcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdHNbMl0ucmVwbGFjZSgvXFwrL2csIFwiIFwiKSk7XHJcbn1cclxuXHJcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7XHJcblx0XHJcblxyXG5cdC8vQU0gQ2hhcnRzXHJcbiAgICBpZigkKCcjYW1jaGFydERhdGEnKSAmJiAkKCcjYW1jaGFydERhdGEnKS5sZW5ndGgpe1xyXG4gICAgdmFyIGFtY2hhcnRWYWwgPSBKU09OLnBhcnNlKCQoJyNhbWNoYXJ0RGF0YScpLnZhbCgpKSxcclxuICAgIGNyZWF0ZU5ld09iaiA9IHt9LCBjaGFydDtcclxuXHJcbiAgICBpZih0eXBlb2YgYW1jaGFydFZhbC5kYXRhUHJvdmlkZXIgIT09ICdvYmplY3QnKXtcclxuICAgICAgICBmb3IodmFyIHByb3AgaW4gYW1jaGFydFZhbCl7XHJcbiAgICAgICAgICAgIGlmKHByb3AgIT0gJ2RhdGFQcm92aWRlcicpe1xyXG4gICAgICAgICAgICAgICAgY3JlYXRlTmV3T2JqW3Byb3BdID0gYW1jaGFydFZhbFtwcm9wXTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBjcmVhdGVOZXdPYmpbcHJvcF0gPSBjaGFydERhdGFWYWw7IFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgICAgICBjaGFydCA9IEFtQ2hhcnRzLm1ha2VDaGFydCggXCJjaGFydGRpdlwiLCBjcmVhdGVOZXdPYmogKTtcclxuICAgIH1cclxuICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGNoYXJ0ID0gQW1DaGFydHMubWFrZUNoYXJ0KCBcImNoYXJ0ZGl2XCIsIGFtY2hhcnRWYWwgKTtcclxuICAgICAgIH1cclxuICAgIH1cclxuXHQvL21lc3NhZ2luZyB3ZWIgdXNlcnNcclxuXHR3aW5kb3cuZGlzbWlzcz1mdW5jdGlvbigpe1xyXG5cdFx0JCgnLmRpc21pc3MnKS5vbignY2xpY2snLCBmdW5jdGlvbigpe1xyXG5cdFx0XHRDb29raWVzLnNldCgnZGlzbWlzc19jb29raWUnLCAnZGlzbWlzc19jb29raWVfY3JlYXRlZCcsJycpO1xyXG5cdFx0XHQkKCcubWVzc2FnaW5nX3dlYlVzZXJzJykucmVtb3ZlKCk7IFxyXG5cdFx0XHQkKCcubWVzc2FnaW5nX3dlYlVzZXJzX3doaXRlJykucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZGlzbWlzc19kYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgZXZlbnRfbmFtZTpcIm1lc3NhZ2VfZGlzbWlzc2FsXCIsXHJcbiAgICAgICAgICAgICAgICBnYV9ldmVudENhdGVnb3J5OlwiTWVzc2FnaW5nIEZyYW1lXCIsXHJcbiAgICAgICAgICAgICAgICBnYV9ldmVudEFjdGlvbjpcIkRpc21pc3NhbFwiLFxyXG4gICAgICAgICAgICAgICAgZ2FfZXZlbnRMYWJlbDpcIkRpc21pc3NcIixcclxuICAgICAgICAgICAgICAgIHBhZ2VfbmFtZTogYW5hbHl0aWNzX2RhdGFbXCJwYWdlX25hbWVcIl1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgYW5hbHl0aWNzRXZlbnQoICQuZXh0ZW5kKGFuYWx5dGljc19kYXRhLCBkaXNtaXNzX2RhdGEpICk7XHJcblx0XHR9KTtcclxuXHR9XHJcblx0d2luZG93LmRpc21pc3MoKTtcclxuXHJcblx0Ly9Kb2IgTGlzdGluZyBQYWdpbmF0aW9uXHJcblx0aWYoJCgnI2pvYlRpbGVzQ291bnQnKSAmJiAkKCcjam9iVGlsZXNDb3VudCcpLmxlbmd0aCAmJiAkKCcjbm9vZkpvYnNQZXJQYWdlJykgJiYgJCgnI25vb2ZKb2JzUGVyUGFnZScpLmxlbmd0aCl7XHJcblx0XHR2YXIgdG90YWxDYXRlZ29yaWVzID0gJChcIiNqb2JUaWxlc0NvdW50XCIpLnZhbCgpLCBjYXRlZ29yeUxpbWl0ID0gJChcIiNub29mSm9ic1BlclBhZ2VcIikudmFsKCk7IFxyXG5cdFxyXG5cdFx0d2luZG93LnNldFBhZ2luYXRpb24oe1xyXG5cdFx0XHR0b3RhbENhdGVnb3JpZXM6IHBhcnNlSW50KHRvdGFsQ2F0ZWdvcmllcyksXHJcblx0XHRcdGNhdGVnb3J5TGltaXQ6IHBhcnNlSW50KGNhdGVnb3J5TGltaXQpLFxyXG5cdFx0XHRjdXJyZW50UGFnZTogMSxcclxuXHRcdFx0cGFnaW5hdGlvbkVsZTogJy5qb2JfbGlzdF9pbmRpdmlkdWFsJ1xyXG5cdFx0fSk7XHJcblx0XHRcclxuXHRcdHdpbmRvdy5sb2FkUGFnaW5hdGlvbk51bXMoKTtcclxuXHR9XHJcblx0XHJcblx0Ly9Gb29kIG5ld3MgUGFnaW5hdGlvblxyXG5cdGlmKCQoJyNmb29kTmV3c0NvdW50JykgJiYgJCgnI2Zvb2ROZXdzQ291bnQnKS5sZW5ndGggJiYgJCgnI25vb2ZKb2JzUGVyUGFnZScpICYmICQoJyNub29mSm9ic1BlclBhZ2UnKS5sZW5ndGgpe1xyXG5cdFx0dmFyIHRvdGFsQ2F0ZWdvcmllcyA9ICQoXCIjZm9vZE5ld3NDb3VudFwiKS52YWwoKSwgY2F0ZWdvcnlMaW1pdCA9ICQoXCIjbm9vZkpvYnNQZXJQYWdlXCIpLnZhbCgpOyBcclxuXHRcclxuXHRcdHdpbmRvdy5zZXRQYWdpbmF0aW9uKHtcclxuXHRcdFx0dG90YWxDYXRlZ29yaWVzOiBwYXJzZUludCh0b3RhbENhdGVnb3JpZXMpLFxyXG5cdFx0XHRjYXRlZ29yeUxpbWl0OiBwYXJzZUludChjYXRlZ29yeUxpbWl0KSxcclxuXHRcdFx0Y3VycmVudFBhZ2U6IDFcclxuXHRcdH0pO1xyXG5cdFx0XHJcblx0XHR3aW5kb3cubG9hZFBhZ2luYXRpb25OdW1zKCk7XHJcblx0fVxyXG5cdFxyXG5cdHdpbmRvdy5jdXN0b21fbGFiZWwgPSBmdW5jdGlvbigpIHtcclxuXHRcdCQoXCJib2R5XCIpLm9mZigpLm9uKFwiY2xpY2tcIiwgJy5sYWJlbC1jaGVjaycsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0aWYoJCh0aGlzKS5oYXNDbGFzcyhcImxhYmVsLWNoZWNrXCIpKSB7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0dmFyIGVsZSA9ICQodGhpcykuZmluZCgnaW5wdXQnKTtcclxuXHRcdFx0XHRpZihlbGUuaXMoJzpjaGVja2VkJykpe1xyXG5cdFx0XHRcdCAgZWxlLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcblx0XHRcdFx0ICBlbGUucGFyZW50KCdkaXYnKS5yZW1vdmVDbGFzcygnd2NzLWMtb24nKTtcclxuXHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHQgIGVsZS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XHJcblx0XHRcdFx0ICBlbGUucGFyZW50KCdkaXYnKS5hZGRDbGFzcygnd2NzLWMtb24nKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0XHJcblx0fVxyXG5cdHdpbmRvdy5jdXN0b21fbGFiZWwoKTtcclxuXHRcclxuXHR3aW5kb3cucGVyc29uYWxpc2VkX25hdiA9IGZ1bmN0aW9uKCkge1xyXG5cdC8vcGVyc29uYWxpc2UgcG9wIHVwXHJcblx0dmFyIG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ215TW9kYWwnKTtcclxuXHJcblx0Ly8gR2V0IHRoZSBidXR0b24gdGhhdCBvcGVucyB0aGUgbW9kYWxcclxuXHR2YXIgYnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteUJ0blwiKTtcclxuXHJcblx0Ly8gR2V0IHRoZSA8c3Bhbj4gZWxlbWVudCB0aGF0IGNsb3NlcyB0aGUgbW9kYWxcclxuXHR2YXIgc3BhbiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJwZXJzb25hbGlzZV9jbG9zZVwiKVswXTtcclxuXHJcblx0ICAgIC8vIFdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSBidXR0b24sIG9wZW4gdGhlIG1vZGFsXHJcblx0JChkb2N1bWVudCkub24oJ2NsaWNrJywnI215QnRuJyxmdW5jdGlvbigpIHtcclxuXHRcdFx0bW9kYWwuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuXHR9KTsgIFxyXG5cclxuXHQvLyBXaGVuIHRoZSB1c2VyIGNsaWNrcyBvbiA8c3Bhbj4gKHgpLCBjbG9zZSB0aGUgbW9kYWxcclxuXHRpZihzcGFuICE9PSB1bmRlZmluZWQpe1xyXG5cdFx0c3Bhbi5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdG1vZGFsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIFdoZW4gdGhlIHVzZXIgY2xpY2tzIGFueXdoZXJlIG91dHNpZGUgb2YgdGhlIG1vZGFsLCBjbG9zZSBpdFxyXG5cdHdpbmRvdy5vbmNsaWNrID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuXHRcdGlmIChldmVudC50YXJnZXQgPT0gbW9kYWwpIHtcclxuXHRcdFx0bW9kYWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcdFxyXG5cdH1cclxuXHR3aW5kb3cucGVyc29uYWxpc2VkX25hdigpO1xyXG5cdFxyXG4gICAgdmFyIG1lZGlhVGFibGUgPSBnZXRQYXJhbWV0ZXJCeU5hbWUoJ21vYmlsZW1lZGlhJyk7XHJcbiAgICBpZihtZWRpYVRhYmxlPT1cInRydWVcIil7XHJcbiAgICAgICAgJChcInRhYmxlXCIpLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgJCh0aGlzKS5hdHRyKFwic3R5bGVcIixcImRpc3BsYXk6YmxvY2tcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIEFudGkgRm9yZ2VyeSBUb2tlblxyXG4gICAgdmFyIHJlcXVlc3RWZXJpZmljYXRpb25Ub2tlbiA9ICQoJy5tYWluX193cmFwcGVyJykuZGF0YSgncmVxdWVzdC12ZXJpZmljYXRpb24tdG9rZW4nKTtcclxuXHJcbiAgICB2YXIgc29ydFRoZVRhYmxlcyA9IG5ldyBTb3J0YWJsZVRhYmxlQ29udHJvbGxlcigpO1xyXG5cclxuICAgIHdpbmRvdy5saWdodGJveENvbnRyb2xsZXIgPSBuZXcgTGlnaHRib3hNb2RhbENvbnRyb2xsZXIoKTtcclxuXHJcbiAgICAvKiAqICpcclxuXHRcdFRyYXZlcnNlcyB0aGUgRE9NIGFuZCByZWdpc3RlcnMgZXZlbnQgbGlzdGVuZXJzIGZvciBhbnkgcG9wLW91dCB0cmlnZ2Vycy5cclxuXHRcdEJvdW5kIGV4cGxpY2l0bHkgdG8gYHdpbmRvd2AgZm9yIGVhc2llciBhY2Nlc3MgYnkgQW5ndWxhci5cclxuXHQqICogKi9cclxuICAgIHdpbmRvdy5pbmRleFBvcE91dHMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgd2luZG93LmNvbnRyb2xQb3BPdXRzID0gbmV3IFBvcE91dENvbnRyb2xsZXIoJy5qcy1wb3Atb3V0LXRyaWdnZXInKTtcclxuXHJcblx0XHR3aW5kb3cuY29udHJvbFBvcE91dHMuY3VzdG9taXplKHtcclxuXHRcdFx0aWQ6ICdoZWFkZXItcmVnaXN0ZXInLFxyXG5cdFx0XHR0YWJTdHlsZXM6IHtcclxuXHRcdFx0XHRkZXNrSGVpZ2h0OiA4NyxcclxuXHRcdFx0XHR0YWJsZXRIZWlnaHQ6IDcyLFxyXG5cdFx0XHRcdHBob25lSGVpZ2h0OiAnJyAvLyBEZWZhdWx0XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0XHJcblx0XHR3aW5kb3cuY29udHJvbFBvcE91dHMuY3VzdG9taXplKHtcclxuXHRcdFx0aWQ6ICdteVZpZXctaGVhZGVyLXJlZ2lzdGVyJyxcclxuXHRcdFx0dGFiU3R5bGVzOiB7XHJcblx0XHRcdFx0ZGVza0hlaWdodDogODcsXHJcblx0XHRcdFx0dGFibGV0SGVpZ2h0OiA3MixcclxuXHRcdFx0XHRwaG9uZUhlaWdodDogJycgLy8gRGVmYXVsdFxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuICAgICAgICB3aW5kb3cuY29udHJvbFBvcE91dHMuY3VzdG9taXplKHtcclxuICAgICAgICAgICAgaWQ6ICdoZWFkZXItcmVnaXN0ZXInLFxyXG4gICAgICAgICAgICB0YWJTdHlsZXM6IHtcclxuICAgICAgICAgICAgICAgIGRlc2tIZWlnaHQ6IDg3LFxyXG4gICAgICAgICAgICAgICAgdGFibGV0SGVpZ2h0OiA3MixcclxuICAgICAgICAgICAgICAgIHBob25lSGVpZ2h0OiAnJyAvLyBEZWZhdWx0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgd2luZG93LmNvbnRyb2xQb3BPdXRzLmN1c3RvbWl6ZSh7XHJcbiAgICAgICAgICAgIGlkOiAnaGVhZGVyLXNpZ25pbicsXHJcbiAgICAgICAgICAgIHRhYlN0eWxlczoge1xyXG4gICAgICAgICAgICAgICAgZGVza0hlaWdodDogODcsXHJcbiAgICAgICAgICAgICAgICB0YWJsZXRIZWlnaHQ6IDcyLFxyXG4gICAgICAgICAgICAgICAgcGhvbmVIZWlnaHQ6ICcnIC8vIERlZmF1bHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB3aW5kb3cuaW5kZXhQb3BPdXRzKCk7XHJcblxyXG5cclxuICAgIHdpbmRvdy5ib29rbWFyayA9IG5ldyBCb29rbWFya0NvbnRyb2xsZXIoKTtcclxuXHJcbiAgICAvKiAqICpcclxuXHRcdFRyYXZlcnNlcyB0aGUgRE9NIGFuZCByZWdpc3RlcnMgZXZlbnQgbGlzdGVuZXJzIGZvciBhbnkgYm9va21hcmthYmxlXHJcblx0XHRhcnRpY2xlcy4gQm91bmQgZXhwbGljaXRseSB0byBgd2luZG93YCBmb3IgZWFzaWVyIGFjY2VzcyBieSBBbmd1bGFyLlxyXG5cdCogKiAqL1xyXG4gICAgd2luZG93LmluZGV4Qm9va21hcmtzID0gZnVuY3Rpb24oKSB7IC8vIFRvZ2dsZSBib29rbWFyayBpY29uXHJcbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5qcy1ib29rbWFyay1hcnRpY2xlJywgZnVuY3Rpb24gYm9va21hcmtBcnRpY2xlKGUpIHtcclxuXHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgd2luZG93LmJvb2ttYXJrLnRvZ2dsZSh0aGlzKTtcclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHdpbmRvdy5pbmRleEJvb2ttYXJrcygpO1xyXG5cdFxyXG5cdC8vRGF0YSB0b29sIExhbmRpbmcgcGFnZVxyXG5cdFxyXG5cdFx0d2luZG93LmFkZFdpZHRoID0gZnVuY3Rpb24oKSB7XHJcblx0XHQvL2xhbmRpbmcgcGFnZVxyXG5cdFx0aWYoKCQoXCIuZGVtb1RleHRcIikuaXMoJzp2aXNpYmxlJykpICYmICEoJChcIi52aWRlby1kZW1vXCIpLmlzKCc6aGlkZGVuJykpKSAge1xyXG5cdFx0XHQkKCcuZGVtb1RleHQnKS5hZGRDbGFzcygnYWRkLXdpZHRoLTEwMCcpO1xyXG5cdFx0fVxyXG5cdFx0aWYoISgkKFwiLmRlbW9UZXh0XCIpLmlzKCc6aGlkZGVuJykpICYmICgkKFwiLnZpZGVvLWRlbW9cIikuaXMoJzp2aXNpYmxlJykpKSAge1xyXG5cdFx0XHQkKCcudmlkZW8tZGVtbycpLmFkZENsYXNzKCdhZGQtd2lkdGgtMTAwJyk7XHJcblx0XHR9XHJcblx0XHRpZigoJChcIi5kZW1vVGV4dFwiKS5pcygnOnZpc2libGUnKSkgJiYgKCQoXCIudmlkZW8tZGVtb1wiKS5pcygnOnZpc2libGUnKSkpICB7XHJcblx0XHRcdCQoJy5kZW1vVGV4dCcpLnJlbW92ZUNsYXNzKCdhZGQtd2lkdGgtMTAwJyk7XHJcblx0XHRcdCQoJy52aWRlby1kZW1vJykucmVtb3ZlQ2xhc3MoJ2FkZC13aWR0aC0xMDAnKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cdHdpbmRvdy5hZGRXaWR0aCgpO1xyXG5cclxuXHJcbiAgICAvKiAqICpcclxuXHRcdElmIGEgdXNlciB0cmllcyBib29rbWFya2luZyBhbiBhcnRpY2xlIHdoaWxlIGxvZ2dlZCBvdXQsIHRoZXknbGwgYmVcclxuXHRcdHByb21wdGVkIHRvIHNpZ24gaW4gZmlyc3QuIFRoaXMgY2hlY2tzIGZvciBhbnkgYXJ0aWNsZXMgdGhhdCBoYXZlIGJlZW5cclxuXHRcdHBhc3NlZCBhbG9uZyBmb3IgcG9zdC1zaWduLWluIGJvb2ttYXJraW5nLiBCb3VuZCBleHBsaWNpdGx5IHRvIGB3aW5kb3dgXHJcblx0XHRmb3IgZWFzaWVyIGFjY2VzcyBieSBBbmd1bGFyLlxyXG5cdCogKiAqL1xyXG4gICAgd2luZG93LmF1dG9Cb29rbWFyayA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgYm9va21hcmtUaGVBcnRpY2xlID0gZnVuY3Rpb24oYXJ0aWNsZSkge1xyXG4gICAgICAgICAgICAkKCcuanMtYm9va21hcmstYXJ0aWNsZScpLmVhY2goZnVuY3Rpb24oaW5keCwgaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaWYoJChpdGVtKS5kYXRhKCdib29rbWFyay1pZCcpID09PSBhcnRpY2xlXHJcblx0XHRcdFx0XHQmJiAhJChpdGVtKS5kYXRhKCdpcy1ib29rbWFya2VkJykpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJChpdGVtKS5jbGljaygpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWxyZWFkeSBib29rbWFya2VkIG9yIG5vdCBhIG1hdGNoXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciB1cmxWYXJzID0gd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoXCI/XCIpO1xyXG4gICAgICAgIHZhciB2YXJzVG9QYXJzZSA9IHVybFZhcnNbMV0gPyB1cmxWYXJzWzFdLnNwbGl0KFwiJlwiKSA6IG51bGw7XHJcbiAgICAgICAgaWYodmFyc1RvUGFyc2UpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpPHZhcnNUb1BhcnNlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFpciA9IHZhcnNUb1BhcnNlW2ldLnNwbGl0KFwiPVwiKTtcclxuICAgICAgICAgICAgICAgIGlmKHBhaXJbMF0gPT09ICdpbW1iJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGJvb2ttYXJrVGhlQXJ0aWNsZShwYWlyWzFdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgd2luZG93LmF1dG9Cb29rbWFyaygpO1xyXG5cclxuXHJcbiAgICAvKiAqICpcclxuXHRcdFRvZ2dsZSBnbG9iYWwgaGVhZGVyIHNlYXJjaCBib3hcclxuXHRcdCh0b2dnbGVzIGF0IHRhYmxldC9zbWFydHBob25lIHNpemVzLCBhbHdheXMgdmlzaWJsZSBhdCBkZXNrdG9wIHNpemUpXHJcblx0KiAqICovXHJcbiAgICAkKCcuanMtaGVhZGVyLXNlYXJjaC10cmlnZ2VyJykub24oJ2NsaWNrJywgZnVuY3Rpb24gdG9nZ2xlTWVudUl0ZW1zKGUpIHtcclxuICAgICAgICBpZigkKHdpbmRvdykud2lkdGgoKSA8PSA4MDApIHtcclxuICAgICAgICAgICAgJCgnLmhlYWRlci1zZWFyY2hfX3dyYXBwZXInKS50b2dnbGVDbGFzcygnaXMtYWN0aXZlJykuZm9jdXMoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKGUudGFyZ2V0KS5jbG9zZXN0KCdmb3JtJykuc3VibWl0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgbmV3c2xldHRlclNpZ251cCA9IG5ldyBOZXdzbGV0dGVyU2lnbnVwQ29udHJvbGxlcigpO1xyXG4gICAgbmV3c2xldHRlclNpZ251cC5jaGVja0ZvclVzZXJTaWduZWRVcCgpO1xyXG4gICAgbmV3c2xldHRlclNpZ251cC5hZGRDb250cm9sKCcuanMtbmV3c2xldHRlci1zaWdudXAtc3VibWl0JywgbnVsbCxmdW5jdGlvbih0cmlnZ2VyRWxlbWVudCkge1xyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIC8qICogKlxyXG5cdFx0SGFuZGxlIHVzZXIgc2lnbi1pbiBhdHRlbXB0cy5cclxuXHQqICogKi9cclxuICAgIHZhciB1c2VyU2lnbkluID0gbmV3IEZvcm1Db250cm9sbGVyKHtcclxuICAgICAgICBvYnNlcnZlOiAnLmpzLXNpZ24taW4tc3VibWl0JyxcclxuICAgICAgICBzdWNjZXNzQ2FsbGJhY2s6IGZ1bmN0aW9uKGZvcm0sIGNvbnRleHQsIGV2ZW50KSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgbG9naW5SZWdpc3Rlck1ldGhvZCA9IFwibG9naW5fcmVnaXN0ZXJfY29tcG9uZW50XCI7XHJcbiAgICAgICAgICAgIGlmKCQoZm9ybSkucGFyZW50cygnLnBvcC1vdXRfX3NpZ24taW4nKS5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICAgICAgbG9naW5SZWdpc3Rlck1ldGhvZCA9IFwiZ2xvYmFsX2xvZ2luXCI7XHJcblxyXG4gICAgICAgICAgICB2YXIgbG9naW5BbmFseXRpY3MgPSAge1xyXG4gICAgICAgICAgICAgICAgZXZlbnRfbmFtZTogJ2xvZ2luJyxcclxuICAgICAgICAgICAgICAgIGxvZ2luX3N0YXRlOiAnc3VjY2Vzc2Z1bCcsXHJcbiAgICAgICAgICAgICAgICB1c2VyTmFtZTogJ1wiJyArICQoZm9ybSkuZmluZCgnaW5wdXRbbmFtZT11c2VybmFtZV0nKS52YWwoKSArICdcIicsXHJcbiAgICAgICAgICAgICAgICBsb2dpbl9yZWdpc3Rlcl9tZXRob2Q6IGxvZ2luUmVnaXN0ZXJNZXRob2RcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGFuYWx5dGljc0V2ZW50KFx0JC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsIGxvZ2luQW5hbHl0aWNzKSApO1xyXG5cclxuICAgICAgICAgICAgLyogKiAqXHJcblx0XHRcdFx0SWYgYHBhc3MtYXJ0aWNsZS1pZGAgaXMgc2V0LCB1c2VyIGlzIHByb2JhYmx5IHRyeWluZyB0byBzaWduIGluXHJcblx0XHRcdFx0YWZ0ZXIgYXR0ZW1wdGluZyB0byBib29rbWFyayBhbiBhcnRpY2xlLiBBZGQgdGhlIGFydGljbGUgSUQgdG9cclxuXHRcdFx0XHR0aGUgVVJMIHNvIGBhdXRvQm9va21hcmsoKWAgY2F0Y2hlcyBpdC5cclxuXHRcdFx0KiAqICovXHJcbiAgICAgICAgICAgIHZhciBwYXNzQXJ0aWNsZUlkID0gJChmb3JtKS5maW5kKCcuc2lnbi1pbl9fc3VibWl0JykuZGF0YSgncGFzcy1hcnRpY2xlLWlkJyk7XHJcbiAgICAgICAgICAgIGlmKHBhc3NBcnRpY2xlSWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzZXAgPSAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignPycpID4gLTEpID8gJyYnIDogJz8nO1xyXG5cclxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWYgKyBzZXAgKyAnaW1tYj0nICsgcGFzc0FydGljbGVJZDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBBbmd1bGFyLCBuZWVkIGxvY2F0aW9uLnJlbG9hZCB0byBmb3JjZSBwYWdlIHJlZnJlc2hcclxuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBhbmd1bGFyICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgkKCcuc2VhcmNoLXJlc3VsdHMnKVswXSkuY29udHJvbGxlcigpLmZvcmNlUmVmcmVzaCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmYWlsdXJlQ2FsbGJhY2s6IGZ1bmN0aW9uKGZvcm0sIGNvbnRleHQsIGV2ZW50KSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgbG9naW5BbmFseXRpY3MgPSB7XHJcbiAgICAgICAgICAgICAgICBldmVudF9uYW1lOiBcIkxvZ2luIEZhaWx1cmVcIixcclxuICAgICAgICAgICAgICAgIGxvZ2luX3N0YXRlOiBcInVuc3VjY2Vzc2Z1bFwiLFxyXG4gICAgICAgICAgICAgICAgdXNlck5hbWU6ICdcIicgKyAkKGZvcm0pLmZpbmQoJ2lucHV0W25hbWU9dXNlcm5hbWVdJykudmFsKCkgKyAnXCInXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBhbmFseXRpY3NFdmVudCggJC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsIGxvZ2luQW5hbHl0aWNzKSApO1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgcmVzZXRQYXNzd29yZCA9IG5ldyBGb3JtQ29udHJvbGxlcih7XHJcbiAgICAgICAgb2JzZXJ2ZTogJy5mb3JtLXJlc2V0LXBhc3N3b3JkJyxcclxuICAgICAgICBzdWNjZXNzQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkKCcuZm9ybS1yZXNldC1wYXNzd29yZCcpLmZpbmQoJy5hbGVydC1zdWNjZXNzJykuc2hvdygpO1xyXG4gICAgICAgICAgICB2YXIgaXNQYXNzd29yZCA9ICQoJy5mb3JtLXJlc2V0LXBhc3N3b3JkJykuZGF0YShcImlzLXBhc3N3b3JkXCIpO1xyXG4gICAgICAgICAgICBpZihpc1Bhc3N3b3JkKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBhbmFseXRpY3NFdmVudCggJC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsIHsgZXZlbnRfbmFtZTogXCJwYXNzd29yZCByZXNldCBzdWNjZXNzXCIgfSkgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZmFpbHVyZUNhbGxiYWNrOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGlzUGFzc3dvcmQgPSAkKCcuZm9ybS1yZXNldC1wYXNzd29yZCcpLmRhdGEoXCJpcy1wYXNzd29yZFwiKTtcclxuICAgICAgICAgICAgaWYoaXNQYXNzd29yZClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYW5hbHl0aWNzRXZlbnQoICQuZXh0ZW5kKGFuYWx5dGljc19kYXRhLCB7IGV2ZW50X25hbWU6IFwicGFzc3dvcmQgcmVzZXQgZmFpbHVyZVwiIH0pICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIG5ld1Jlc2V0UGFzc1Rva2VuID0gbmV3IEZvcm1Db250cm9sbGVyKHtcclxuICAgICAgICBvYnNlcnZlOiAnLmZvcm0tbmV3LXJlc2V0LXBhc3MtdG9rZW4nLFxyXG4gICAgICAgIHN1Y2Nlc3NDYWxsYmFjazogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICQoJy5mb3JtLW5ldy1yZXNldC1wYXNzLXRva2VuJykuZmluZCgnLmFsZXJ0LXN1Y2Nlc3MnKS5zaG93KCk7XHJcbiAgICAgICAgICAgIGFuYWx5dGljc0V2ZW50KCAkLmV4dGVuZChhbmFseXRpY3NfZGF0YSwgeyBldmVudF9uYW1lOiBcInBhc3N3b3JkIHJlc2V0IHN1Y2Nlc3NcIiB9KSApO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZmFpbHVyZUNhbGxiYWNrOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgYW5hbHl0aWNzRXZlbnQoICQuZXh0ZW5kKGFuYWx5dGljc19kYXRhLCB7IGV2ZW50X25hbWU6IFwicGFzc3dvcmQgcmVzZXQgZmFpbHVyZVwiIH0pICk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnLmpzLWNvcnBvcmF0ZS1tYXN0ZXItdG9nZ2xlJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmKCQodGhpcykucHJvcCgnY2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgICQoJy5qcy1yZWdpc3RyYXRpb24tY29ycG9yYXRlLXdyYXBwZXInKS5zaG93KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnLmpzLXJlZ2lzdHJhdGlvbi1jb3Jwb3JhdGUtd3JhcHBlcicpLmhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgdXNlclJlZ2lzdHJhdGlvbkNvbnRyb2xsZXIgPSBuZXcgRm9ybUNvbnRyb2xsZXIoe1xyXG4gICAgICAgIG9ic2VydmU6ICcuZm9ybS1yZWdpc3RyYXRpb24nLFxyXG4gICAgICAgIHN1Y2Nlc3NDYWxsYmFjazogZnVuY3Rpb24oZm9ybSwgY29udGV4dCwgZXZlbnQpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIFN0YXNoIHJlZ2lzdHJhdGlvbiB0eXBlIHNvIG5leHQgcGFnZSBjYW4ga25vdyBpdCB3aXRob3V0XHJcbiAgICAgICAgICAgIC8vIGFuIGFkZGl0aW9uYWwgU2FsZXNmb3JjZSBjYWxsXHJcbiAgICAgICAgICAgIENvb2tpZXMuc2V0KCdyZWdpc3RyYXRpb25UeXBlJywgY29udGV4dC5yZXNwb25zZS5yZWdpc3RyYXRpb25fdHlwZSwge30gKTtcclxuXHJcbiAgICAgICAgICAgIGFuYWx5dGljc0V2ZW50KCAkLmV4dGVuZChhbmFseXRpY3NfZGF0YSwge1xyXG4gICAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uX3R5cGU6IGNvbnRleHQucmVzcG9uc2UucmVnaXN0cmF0aW9uX3R5cGVcclxuICAgICAgICAgICAgfSkgKTtcclxuXHJcbiAgICAgICAgfSxcclxuICAgICAgICBmYWlsdXJlQ2FsbGJhY2s6IGZ1bmN0aW9uKGZvcm0scmVzcG9uc2UpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBlcnJvck1zZyA9ICQoXCIucGFnZS1yZWdpc3RyYXRpb25fX2Vycm9yXCIpLnRleHQoKTtcclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnJlYXNvbnMgJiYgcmVzcG9uc2UucmVhc29ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1zZyA9IFwiW1wiO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcmVhc29uIGluIHJlc3BvbnNlLnJlYXNvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvck1zZyArPSByZXNwb25zZS5yZWFzb25zW3JlYXNvbl0gKyBcIixcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVycm9yTXNnID0gZXJyb3JNc2cuc3Vic3RyaW5nKDAsIGVycm9yTXNnLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNc2cgKz0gXCJdXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYW5hbHl0aWNzRXZlbnQoICQuZXh0ZW5kKGFuYWx5dGljc19kYXRhLCB7IGV2ZW50X25hbWU6IFwicmVnaXN0cmF0aW9uIGZhaWx1cmVcIiwgcmVnaXN0cmFpb25fZXJyb3JzIDogZXJyb3JNc2cgfSkgKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgdXNlclJlZ2lzdHJhdGlvbkZpbmFsQ29udHJvbGxlciA9IG5ldyBGb3JtQ29udHJvbGxlcih7XHJcbiAgICAgICAgb2JzZXJ2ZTogJy5mb3JtLXJlZ2lzdHJhdGlvbi1vcHRpbnMnLFxyXG4gICAgICAgIHN1Y2Nlc3NDYWxsYmFjazogZnVuY3Rpb24oZm9ybSwgY29udGV4dCwgZXZlbnQpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciByZWdpc3RyYXRpb25UeXBlID0gQ29va2llcy5nZXQoJ3JlZ2lzdHJhdGlvblR5cGUnKTtcclxuXHJcbiAgICAgICAgICAgIGFuYWx5dGljc0V2ZW50KCAkLmV4dGVuZChhbmFseXRpY3NfZGF0YSwge1xyXG4gICAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uX3R5cGU6IHJlZ2lzdHJhdGlvblR5cGVcclxuICAgICAgICAgICAgfSkgKTtcclxuXHJcbiAgICAgICAgICAgIENvb2tpZXMucmVtb3ZlKCdyZWdpc3RyYXRpb25UeXBlJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmYWlsdXJlQ2FsbGJhY2s6IGZ1bmN0aW9uKGZvcm0sIHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIHZhciBlcnJvck1zZyA9ICQoXCIucGFnZS1yZWdpc3RyYXRpb25fX2Vycm9yXCIpLnRleHQoKTtcclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnJlYXNvbnMgJiYgcmVzcG9uc2UucmVhc29ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1zZyA9IFwiW1wiO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcmVhc29uIGluIHJlc3BvbnNlLnJlYXNvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvck1zZyArPSByZXNwb25zZS5yZWFzb25zW3JlYXNvbl0gKyBcIixcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVycm9yTXNnID0gZXJyb3JNc2cuc3Vic3RyaW5nKDAsIGVycm9yTXNnLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNc2cgKz0gXCJdXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYW5hbHl0aWNzRXZlbnQoICQuZXh0ZW5kKGFuYWx5dGljc19kYXRhLCB7IGV2ZW50X25hbWU6IFwicmVnaXN0cmF0aW9uIGZhaWx1cmVcIiwgcmVnaXN0cmFpb25fZXJyb3JzIDogZXJyb3JNc2d9KSApO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICB2YXIgdXNlclByZVJlZ2lzdHJhdGlvbkNvbnRyb2xsZXIgPSBuZXcgRm9ybUNvbnRyb2xsZXIoe1xyXG4gICAgICAgIG9ic2VydmU6ICcuZm9ybS1wcmUtcmVnaXN0cmF0aW9uJyxcclxuICAgICAgICBzdWNjZXNzQ2FsbGJhY2s6IGZ1bmN0aW9uKGZvcm0pIHtcclxuICAgICAgICAgICAgdmFyIHVzZXJuYW1lSW5wdXQgPSAkKGZvcm0pLmZpbmQoJy5qcy1yZWdpc3Rlci11c2VybmFtZScpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGZvcndhcmRpbmdVUkwgPSAkKGZvcm0pLmRhdGEoJ2ZvcndhcmRpbmctdXJsJyk7XHJcbiAgICAgICAgICAgIHZhciBzZXAgPSBmb3J3YXJkaW5nVVJMLmluZGV4T2YoJz8nKSA8IDAgPyAnPycgOiAnJic7XHJcbiAgICAgICAgICAgIHZhciBuZXh0U3RlcFVybCA9ICQoZm9ybSkuZGF0YSgnZm9yd2FyZGluZy11cmwnKSArIHNlcCArIHVzZXJuYW1lSW5wdXQuYXR0cignbmFtZScpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHVzZXJuYW1lSW5wdXQudmFsKCkpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGxvZ2luUmVnaXN0ZXJNZXRob2QgPSBcImdsb2JhbF9yZWdpc3RyYXRpb25cIjtcclxuICAgICAgICAgICAgaWYoJChmb3JtKS5oYXNDbGFzcyhcInVzZXItY2FsbHRvYWN0aW9uXCIpKVxyXG4gICAgICAgICAgICAgICAgbG9naW5SZWdpc3Rlck1ldGhvZCA9IFwibG9naW5fcmVnaXN0ZXJfY29tcG9uZW50XCI7XHJcblxyXG4gICAgICAgICAgICBhbmFseXRpY3NFdmVudCggJC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsIHsgZXZlbnRfbmFtZTogXCJyZWdpc3RyYXRpb25cIiwgbG9naW5fcmVnaXN0ZXJfbWV0aG9kIDogbG9naW5SZWdpc3Rlck1ldGhvZCB9KSApO1xyXG5cclxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBuZXh0U3RlcFVybDtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkKCcuY2xpY2stbG9nb3V0Jykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGFuYWx5dGljc0V2ZW50KCAkLmV4dGVuZChhbmFseXRpY3NfZGF0YSwgeyBldmVudF9uYW1lOiBcImxvZ291dFwiIH0pICk7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgdmFyIGVtYWlsQXJ0aWNsZUNvbnRyb2xsZXIgPSBuZXcgRm9ybUNvbnRyb2xsZXIoe1xyXG4gICAgICAgIG9ic2VydmU6ICcuZm9ybS1lbWFpbC1hcnRpY2xlJyxcclxuICAgICAgICBzdWNjZXNzQ2FsbGJhY2s6IGZ1bmN0aW9uKGZvcm0pIHtcclxuICAgICAgICAgICAgJCgnLmpzLWVtYWlsLWFydGljbGUtZm9ybS13cmFwcGVyJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAkKCcuanMtZW1haWwtYXJ0aWNsZS1yZWNpcC1zdWNjZXNzJykuaHRtbCgkKCcuanMtZW1haWwtYXJ0aWNsZS1yZWNpcC1hZGRyJykudmFsKCkuc3BsaXQoJzsnKS5qb2luKCc7ICcpKTtcclxuICAgICAgICAgICAgJCgnLmpzLWVtYWlsLWFydGljbGUtc3VjY2VzcycpLnNob3coKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBFbWFpbCBBcnRpY2xlIHBvcC1vdXQgdG8gaXRzIGRlZmF1bHQgc3RhdGUgd2hlbiBjbG9zZWRcclxuICAgICAgICAgICAgJCgnLmpzLWRpc21pc3MtZW1haWwtYXJ0aWNsZScpLm9uZSgnY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICQoJy5qcy1lbWFpbC1hcnRpY2xlLWZvcm0td3JhcHBlcicpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICQoJy5qcy1lbWFpbC1hcnRpY2xlLXN1Y2Nlc3MnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICB2YXIgZW1haWxTZWFyY2hDb250cm9sbGVyID0gbmV3IEZvcm1Db250cm9sbGVyKHtcclxuICAgICAgICBvYnNlcnZlOiAnLmZvcm0tZW1haWwtc2VhcmNoJyxcclxuICAgICAgICBzdWNjZXNzQ2FsbGJhY2s6IGZ1bmN0aW9uKGZvcm0pIHtcclxuXHJcbiAgICAgICAgICAgICQoJy5qcy1lbWFpbC1zZWFyY2gtZm9ybS13cmFwcGVyJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAkKCcuanMtZW1haWwtc2VhcmNoLXJlY2lwLXN1Y2Nlc3MnKS5odG1sKCQoJy5qcy1lbWFpbC1zZWFyY2gtcmVjaXAtYWRkcicpLnZhbCgpKTtcclxuICAgICAgICAgICAgJCgnLmpzLWVtYWlsLXNlYXJjaC1zdWNjZXNzJykuc2hvdygpO1xyXG4gICAgICAgICAgICAkKCcuanMtZW1haWwtc2VhcmNoLWZvcm0td3JhcHBlciBpbnB1dCwgLmpzLWVtYWlsLXNlYXJjaC1mb3JtLXdyYXBwZXIgdGV4dGFyZWEnKS52YWwoJycpO1xyXG5cclxuICAgICAgICAgICAgLy8gUmVzZXQgdGhlIEVtYWlsIEFydGljbGUgcG9wLW91dCB0byBpdHMgZGVmYXVsdCBzdGF0ZSB3aGVuIGNsb3NlZFxyXG4gICAgICAgICAgICAkKCcuanMtZGlzbWlzcy1lbWFpbC1zZWFyY2gnKS5vbmUoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuanMtZW1haWwtc2VhcmNoLWZvcm0td3JhcHBlcicpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICQoJy5qcy1lbWFpbC1zZWFyY2gtc3VjY2VzcycpLmhpZGUoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZXZlbnRfZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGV2ZW50X25hbWU6IFwidG9vbGJhcl91c2VcIixcclxuICAgICAgICAgICAgICAgIHRvb2xiYXJfdG9vbDogXCJlbWFpbFwiXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBhbmFseXRpY3NFdmVudCggJC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsIGV2ZW50X2RhdGEpICk7XHJcblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYmVmb3JlUmVxdWVzdDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgcmVzdWx0SURzID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICQoJy5qcy1zZWFyY2gtcmVzdWx0cy1pZCcpLmVhY2goZnVuY3Rpb24oaW5keCwgaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0SURzID0gcmVzdWx0SURzID8gcmVzdWx0SURzICsgJywnICsgJChpdGVtKS5kYXRhKCdib29rbWFyay1pZCcpIDogJChpdGVtKS5kYXRhKCdib29rbWFyay1pZCcpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICQoJy5qcy1lbWFpbC1zZWFyY2gtcmVzdWx0cy1pZHMnKS52YWwocmVzdWx0SURzKTtcclxuICAgICAgICAgICAgJCgnLmpzLWVtYWlsLXNlYXJjaC1xdWVyeScpLnZhbCgkKCcuc2VhcmNoLWJhcl9fZmllbGQnKS52YWwoKSk7XHJcbiAgICAgICAgICAgICQoJy5qcy1lbWFpbC1zZWFyY2gtcXVlcnktdXJsJykudmFsKGRvY3VtZW50LmxvY2F0aW9uLmhyZWYpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgdmFyIGFjY291bnRFbWFpbFByZWZlcmVuY2VzQ29udHJvbGxlciA9IG5ldyBGb3JtQ29udHJvbGxlcih7XHJcbiAgICAgICAgb2JzZXJ2ZTogJy5mb3JtLWVtYWlsLXByZWZlcmVuY2VzJyxcclxuICAgICAgICBzdWNjZXNzQ2FsbGJhY2s6IGZ1bmN0aW9uKGZvcm0sIGNvbnRleHQsIGV2ZW50KSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgZXZlbnRfZGF0YSA9IHt9O1xyXG4gICAgICAgICAgICB2YXIgb3B0aW5nSW4gPSBudWxsO1xyXG4gICAgICAgICAgICB2YXIgb3B0aW5nT3V0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmKCQoJyNEb05vdFNlbmRPZmZlcnNPcHRJbicpLnByb3AoJ2NoZWNrZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnRfZGF0YS5ldmVudF9uYW1lID0gJ2VtYWlsX3ByZWZlcmVuY2VzX29wdF9vdXQnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIGV2ZW50X2RhdGEuZXZlbnRfbmFtZSA9ICdlbWFpbF9wcmVmZXJlbmNlc191cGRhdGUnO1xyXG5cclxuICAgICAgICAgICAgICAgICQoJy5qcy1hY2NvdW50LWVtYWlsLWNoZWNrYm94JykuZWFjaChmdW5jdGlvbihpbmRleCwgaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpbmdJbiA9IG9wdGluZ0luID8gb3B0aW5nSW4gKyAnfCcgKyB0aGlzLnZhbHVlIDogdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpbmdPdXQgPSBvcHRpbmdPdXQgPyBvcHRpbmdPdXQgKyAnfCcgKyB0aGlzLnZhbHVlIDogdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBldmVudF9kYXRhLmVtYWlsX3ByZWZlcmVuY2VzX29wdGluID0gb3B0aW5nSW47XHJcbiAgICAgICAgICAgICAgICBldmVudF9kYXRhLmVtYWlsX3ByZWZlcmVuY2VzX29wdG91dCA9IG9wdGluZ091dDtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFuYWx5dGljc0V2ZW50KCAkLmV4dGVuZChhbmFseXRpY3NfZGF0YSwgZXZlbnRfZGF0YSkgKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIHZhciBhY2NvdW50VXBkYXRlUGFzc0NvbnRyb2xsZXIgPSBuZXcgRm9ybUNvbnRyb2xsZXIoe1xyXG4gICAgICAgIG9ic2VydmU6ICcuZm9ybS11cGRhdGUtYWNjb3VudC1wYXNzJyxcclxuICAgICAgICBzdWNjZXNzQ2FsbGJhY2s6IGZ1bmN0aW9uKGZvcm0sIGNvbnRleHQsIGV2dCkge1xyXG4gICAgICAgICAgICAkKGZvcm0pLmZpbmQoJ2lucHV0LCBzZWxlY3QsIHRleHRhcmVhJykuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICQodGhpcykudmFsKCcnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIGFjY291bnRVcGRhdGVDb250YWN0Q29udHJvbGxlciA9IG5ldyBGb3JtQ29udHJvbGxlcih7XHJcbiAgICAgICAgb2JzZXJ2ZTogJy5mb3JtLXVwZGF0ZS1hY2NvdW50LWNvbnRhY3QnLFxyXG4gICAgICAgIHN1Y2Nlc3NDYWxsYmFjazogZnVuY3Rpb24oZm9ybSwgY29udGV4dCwgZXZ0KSB7XHJcbiAgICAgICAgICAgICQod2luZG93KS5zY3JvbGxUb3AoKCQoZXZ0LnRhcmdldCkuY2xvc2VzdCgnZm9ybScpLmZpbmQoJy5qcy1mb3JtLWVycm9yLWdlbmVyYWwnKS5vZmZzZXQoKS50b3AgLSAzMikpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHZhciBzYXZlZERvY3VtZW50c0NvbnRyb2xsZXIgPSBuZXcgRm9ybUNvbnRyb2xsZXIoe1xyXG4gICAgICAgIG9ic2VydmU6ICcuZm9ybS1yZW1vdmUtc2F2ZWQtZG9jdW1lbnQnLFxyXG4gICAgICAgIHN1Y2Nlc3NDYWxsYmFjazogZnVuY3Rpb24oZm9ybSwgY29udGV4dCwgZXZ0KSB7XHJcbiAgICAgICAgICAgICQoZXZ0LnRhcmdldCkuY2xvc2VzdCgndHInKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgaWYoJCgnLmpzLXNvcnRhYmxlLXRhYmxlIHRib2R5JylbMF0ucm93cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICQoJy5qcy1zb3J0YWJsZS10YWJsZScpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgJCgnLmpzLW5vLWFydGljbGVzJykuc2hvdygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgZXZlbnRfZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGV2ZW50X25hbWU6ICdib29rbWFya19yZW1vdmFsJyxcclxuICAgICAgICAgICAgICAgIGJvb2ttYXJrX3RpdGxlOiAkKGZvcm0pLmRhdGEoJ2FuYWx5dGljcy10aXRsZScpLFxyXG4gICAgICAgICAgICAgICAgYm9va21hcmtfcHVibGljYXRpb246ICQoZm9ybSkuZGF0YSgnYW5hbHl0aWNzLXB1YmxpY2F0aW9uJylcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGFuYWx5dGljc0V2ZW50KCAkLmV4dGVuZChhbmFseXRpY3NfZGF0YSwgZXZlbnRfZGF0YSkgKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBzdmc0ZXZlcnlib2R5KCk7XHJcblxyXG4gICAgLyogKiAqXHJcblx0XHRNQUlOIFNJVEUgTUVOVVxyXG5cdCogKiAqL1xyXG4gICAgKGZ1bmN0aW9uIE1lbnVDb250cm9sbGVyKCkge1xyXG5cclxuICAgICAgICB2YXIgZ2V0SGVhZGVyRWRnZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJCgnLmhlYWRlcl9fd3JhcHBlcicpLm9mZnNldCgpLnRvcCArICQoJy5oZWFkZXJfX3dyYXBwZXInKS5oZWlnaHQoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgc2hvd01lbnUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJCgnLm1haW4tbWVudScpLmFkZENsYXNzKCdpcy1hY3RpdmUnKTtcclxuICAgICAgICAgICAgJCgnLm1lbnUtdG9nZ2xlcicpLmFkZENsYXNzKCdpcy1hY3RpdmUnKTtcclxuICAgICAgICAgICAgJCgnLmhlYWRlcl9fd3JhcHBlciAubWVudS10b2dnbGVyJykuYWRkQ2xhc3MoJ2lzLXN0aWNreScpO1xyXG4gICAgICAgICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ2lzLWZyb3plbicpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBoaWRlTWVudSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkKCcubWFpbi1tZW51JykucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG4gICAgICAgICAgICAkKCcubWVudS10b2dnbGVyJykucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG4gICAgICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2lzLWZyb3plbicpO1xyXG4gICAgICAgICAgICBpZigkKHdpbmRvdykuc2Nyb2xsVG9wKCkgPD0gZ2V0SGVhZGVyRWRnZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuaGVhZGVyX193cmFwcGVyIC5tZW51LXRvZ2dsZXInKS5yZW1vdmVDbGFzcygnaXMtc3RpY2t5Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiBUb2dnbGUgbWVudSB2aXNpYmlsaXR5ICovXHJcbiAgICAgICAgJCgnLmpzLW1lbnUtdG9nZ2xlLWJ1dHRvbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uIHRvZ2dsZU1lbnUoZSkge1xyXG4gICAgICAgICAgICAkKCcubWFpbi1tZW51JykuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpID8gaGlkZU1lbnUoKSA6IHNob3dNZW51KCk7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLyogIElmIHRoZSBtZW51IGlzIGNsb3NlZCwgbGV0IGFueSBjbGlja3Mgb24gdGhlIG1lbnUgZWxlbWVudCBvcGVuXHJcblx0XHRcdHRoZSBtZW51LiBUaGlzIGluY2x1ZGVzIHRoZSBib3JkZXLigJR2aXNpYmxlIHdoZW4gdGhlIG1lbnUgaXMgY2xvc2Vk4oCUXHJcblx0XHRcdHNvIGl0J3MgZWFzaWVyIHRvIG9wZW4uICovXHJcbiAgICAgICAgJCgnLmpzLWZ1bGwtbWVudS10b2dnbGUnKS5vbignY2xpY2snLCBmdW5jdGlvbiB0b2dnbGVNZW51KCkge1xyXG4gICAgICAgICAgICAkKCcubWFpbi1tZW51JykuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpID8gbnVsbCA6IHNob3dNZW51KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qIEF0dGFjaCAvIGRldGFjaCBzdGlja3kgbWVudSAqL1xyXG4gICAgICAgICQod2luZG93KS5vbignc2Nyb2xsJywgZnVuY3Rpb24gd2luZG93U2Nyb2xsZWQoKSB7XHJcbiAgICAgICAgICAgIC8vIE9ubHkgc3RpY2sgaWYgdGhlIGhlYWRlciAoaW5jbHVkaW5nIHRvZ2dsZXIpIGlzbid0IHZpc2libGVcclxuICAgICAgICAgICAgaWYgKCQod2luZG93KS5zY3JvbGxUb3AoKSA+IGdldEhlYWRlckVkZ2UoKSB8fCAkKCcubWFpbi1tZW51JykuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuaGVhZGVyX193cmFwcGVyIC5tZW51LXRvZ2dsZXInKS5hZGRDbGFzcygnaXMtc3RpY2t5Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuaGVhZGVyX193cmFwcGVyIC5tZW51LXRvZ2dsZXInKS5yZW1vdmVDbGFzcygnaXMtc3RpY2t5Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLyogVG9nZ2xlIG1lbnUgY2F0ZWdvcmllcyAqL1xyXG4gICAgICAgICQoJy5qcy10b2dnbGUtbWVudS1zZWN0aW9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24gdG9nZ2xlTWVudUl0ZW1zKGUpIHtcclxuICAgICAgICAgICAgZS50YXJnZXQgIT09IHRoaXMgPyB0aGlzLmNsaWNrKCkgOiAkKGUudGFyZ2V0KS50b2dnbGVDbGFzcygnaXMtYWN0aXZlJyk7XHJcbiAgICAgICAgfSk7XHJcblx0XHRcclxuXHQkKCcuc2hvdy1kZW1vJykuY2xpY2soZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCcuanMtdG9nZ2xlLWRlbW8nKS50b2dnbGVDbGFzcygnY29sbGFwc2VkJyk7XHJcbiAgICAgICAgICAgIC8vSVBNUC02MTZcdFxyXG4gICAgICAgICAgICBpZiAoJCh0aGlzKS5wYXJlbnQoKS5oYXNDbGFzcygnY29sbGFwc2VkJykpIHtcclxuICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJteWtleVwiLCBcImZhbHNlXCIpO1xyXG4gICAgICAgICAgICAgICAgJCgnLnNkJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgJCgnLmhkJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgJCgnLnRvZ2dsZS1kZW1vJykuaGlkZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcIm15a2V5XCIsIFwidHJ1ZVwiKTtcclxuICAgICAgICAgICAgICAgICQoJy5oZCcpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICQoJy5zZCcpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICQoJy50b2dnbGUtZGVtbycpLnNob3coKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBwZXJzaXN0ZWR2YWwgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwibXlrZXlcIik7XHJcbiAgICAgICAgaWYgKHBlcnNpc3RlZHZhbD09J2ZhbHNlJykge1xyXG4gICAgICAgICAgICAkKCcuc2QnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICQoJy5oZCcpLmhpZGUoKTtcclxuICAgICAgICAgICAgJCgnLnRvZ2dsZS1kZW1vJykuaGlkZSgpO1xyXG5cdFx0XHQkKCcuanMtdG9nZ2xlLWRlbW8nKS5hZGRDbGFzcygnY29sbGFwc2VkJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnLmhkJykuc2hvdygpO1xyXG4gICAgICAgICAgICAkKCcuc2QnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICQoJy50b2dnbGUtZGVtbycpLnNob3coKTtcclxuICAgICAgICB9XHJcbiAgICB9KSgpO1xyXG5cclxuXHJcbiAgICAvKiAqICpcclxuXHRcdFdoZW4gYSBiYW5uZXIgaXMgZGlzbWlzc2VkLCB0aGUgYmFubmVyIElEIGlzIHN0b3JlZCBpbiB0aGVcclxuXHRcdGBkaXNtaXNzZWRCYW5uZXJzYCBjb29raWUgYXMgYSBKU09OIG9iamVjdC4gQmFubmVycyBhcmUgaW52aXNpYmxlIGJ5IGRlZmF1bHQsXHJcblx0XHRzbyBvbiBwYWdlIGxvYWQsIHRoaXMgY2hlY2tzIGlmIGEgYmFubmVyIG9uIHRoZSBwYWdlIGlzIGRpc21pc3NlZCBvciBub3QsXHJcblx0XHR0aGVuIG1ha2VzIHRoZSBiYW5uZXIgdmlzaWJsZSBpZiBub3QgZGlzbWlzc2VkLlxyXG5cdCogKiAqL1xyXG4gICAgdmFyIGRpc21pc3NlZEJhbm5lcnMgPSBDb29raWVzLmdldEpTT04oJ2Rpc21pc3NlZEJhbm5lcnMnKSB8fCB7fTtcclxuICAgICQoJy5iYW5uZXInKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmKCQodGhpcykuZGF0YSgnYmFubmVyLWlkJykgaW4gZGlzbWlzc2VkQmFubmVycyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnaXMtdmlzaWJsZScpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8qICogKlxyXG5cdFx0R2VuZXJpYyBiYW5uZXIgZGlzbWlzc1xyXG5cdCogKiAqL1xyXG4gICAgJCgnLmpzLWRpc21pc3MtYmFubmVyJykub24oJ2NsaWNrJywgZnVuY3Rpb24gZGlzbWlzc0Jhbm5lcihlKSB7XHJcbiAgICAgICAgdmFyIHRoaXNCYW5uZXIgPSAkKGUudGFyZ2V0KS5wYXJlbnRzKCcuYmFubmVyJyk7XHJcbiAgICAgICAgdGhpc0Jhbm5lci5yZW1vdmVDbGFzcygnaXMtdmlzaWJsZScpO1xyXG5cclxuICAgICAgICB2YXIgZGlzbWlzc2VkQmFubmVycyA9IENvb2tpZXMuZ2V0SlNPTignZGlzbWlzc2VkQmFubmVycycpIHx8IHt9O1xyXG4gICAgICAgIGRpc21pc3NlZEJhbm5lcnNbdGhpc0Jhbm5lci5kYXRhKCdiYW5uZXItaWQnKV0gPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBpZiBiYW5uZXIgaGFzIGEgJ2Rpc21pc3MtYWxsLXN1YmRvbWFpbnMnIGF0dHJpYnV0ZSA9IHRydWUsIHNldCB0aGUgZG9tYWluIG9mIHRoZSBjb29raWVcclxuICAgICAgICAvLyB0byB0aGUgdG9wLWxldmVsIGRvbWFpbi5cclxuICAgICAgICB2YXIgZG9tYWluID0gZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWU7XHJcbiAgICAgICAgaWYgKHRoaXNCYW5uZXIuZGF0YSgnZGlzbWlzcy1hbGwtc3ViZG9tYWlucycpKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IGRvbWFpbi5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICBwYXJ0cy5zaGlmdCgpO1xyXG4gICAgICAgICAgICBkb21haW4gPSBwYXJ0cy5qb2luKCcuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIENvb2tpZXMuc2V0KCdkaXNtaXNzZWRCYW5uZXJzJywgZGlzbWlzc2VkQmFubmVycywge2V4cGlyZXM6IDM2NTAsIGRvbWFpbjogZG9tYWluIH0gKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEZvciBlYWNoIGFydGljbGUgdGFibGUsIGNsb25lIGFuZCBhcHBlbmQgXCJ2aWV3IGZ1bGwgdGFibGVcIiBtYXJrdXBcclxuICAgICQoJy5hcnRpY2xlLWJvZHktY29udGVudCB0YWJsZScpLm5vdCgnLmFydGljbGUtdGFibGUtLW1vYmlsZS1saW5rJykuZm9yRWFjaChmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgdmFyIG1lZGlhSWQgPSAkKGUpLmRhdGEoXCJtZWRpYWlkXCIpO1xyXG4gICAgICAgIHZhciB0YWJsZUxpbmsgPSAkKCcuanMtbW9iaWxlLXRhYmxlLXRlbXBsYXRlIC5hcnRpY2xlLXRhYmxlJykuY2xvbmUoKTtcclxuXHJcbiAgICAgICAgdmFyIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xyXG4gICAgICAgIHVybC5yZXBsYWNlKFwiI1wiLCBcIlwiKTtcclxuICAgICAgICBpZiAodXJsLmluZGV4T2YoXCI/XCIpIDwgMClcclxuICAgICAgICAgICAgdXJsICs9IFwiP1wiO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdXJsICs9IFwiJlwiO1xyXG5cclxuICAgICAgICB1cmwrPSBcIm1vYmlsZW1lZGlhPXRydWUmc2VsZWN0ZWRpZD1cIiArIG1lZGlhSWQ7XHJcblxyXG4gICAgICAgIC8vICQodGFibGVMaW5rKS5maW5kKCdhJykuYXR0cihcImhyZWZcIiwgdXJsKTtcclxuICAgICAgICAkKHRhYmxlTGluaykuZmluZCgnYScpLmRhdGEoXCJ0YWJsZS11cmxcIiwgdXJsKS5hdHRyKCdocmVmJywgbnVsbCk7XHJcbiAgICAgICAgJChlKS5hZnRlcih0YWJsZUxpbmspO1xyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIC8vIEZpbmQgZHVwbGljYXRlIGVtYmVkcyBvbiBhcnRpY2xlIHBhZ2VcclxuICAgIC8vIElJVFMyLTMxMlxyXG4gICAgJCgnW2NsYXNzXj1ld2YtZGVza3RvcC1pZnJhbWVdIH4gW2NsYXNzXj1ld2YtbW9iaWxlLWlmcmFtZV0nKS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBpdGVtKSB7XHJcbiAgICAgICAgJChpdGVtKS5yZW1vdmUoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFdoZW4gRE9NIGxvYWRzLCByZW5kZXIgdGhlIGFwcHJvcHJpYXRlIGlGcmFtZSBjb21wb25lbnRzXHJcbiAgICAvLyBBbHNvIGFkZCBhIGxpc3RlbmVyIGZvciB3aW5kZXIgcmVzaXplLCByZW5kZXIgYXBwcm9wcmlhdGUgY29udGFpbmVyc1xyXG4gICAgcmVuZGVySWZyYW1lQ29tcG9uZW50cygpO1xyXG4gICAgcmVuZGVyVGFibGVhdSgpO1xyXG4gICAgcmVuZGVyQU1jaGFydCgpO1xyXG4gXHJcbiAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZScsIChldmVudCkgPT4ge1xyXG4gICAgICAgIHJlbmRlcklmcmFtZUNvbXBvbmVudHMoKTtcclxuICAgICAgICByZW5kZXJUYWJsZWF1KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBUb3BpYyBsaW5rc1xyXG4gICAgdmFyIHRvcGljQW5jaG9ycyA9ICQoJy5qcy10b3BpYy1hbmNob3InKTtcclxuXHJcbiAgICAkKCcuc3ViLXRvcGljLWxpbmtzJykuZm9yRWFjaChmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgdmFyIGxpbmtMaXN0ID0gJChlKS5maW5kKCcuYmFyLXNlcGFyYXRlZC1saW5rLWxpc3QnKTtcclxuXHJcbiAgICAgICAgdG9waWNBbmNob3JzLmZvckVhY2goZnVuY3Rpb24odGMpIHtcclxuICAgICAgICAgICAgdmFyIGlkID0gdGMuaWQ7XHJcbiAgICAgICAgICAgIHZhciB0ZXh0ID0gJCh0YykuZGF0YSgndG9waWMtbGluay10ZXh0Jyk7XHJcbiAgICAgICAgICAgIHZhciB1dGFnSW5mbyA9ICd7XCJldmVudF9uYW1lXCI9XCJ0b3BpYy1qdW1wLXRvLWxpbmstY2xpY2tcIixcInRvcGljLW5hbWVcIj1cIicrdGV4dCsnXCJ9JztcclxuICAgICAgICAgICAgbGlua0xpc3QuYXBwZW5kKCc8YSBocmVmPVwiIycgKyBpZCArICdcIiBjbGFzcz1cImNsaWNrLXV0YWdcIiBkYXRhLWluZm89Jyt0ZXh0Kyc+JyArIHRleHQgKyAnPC9hPicpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gRGlzcGxheSB0aGUgRm9yZ290IFBhc3N3b3JkIGJsb2NrIHdoZW4gXCJmb3Jnb3QgeW91ciBwYXNzd29yZFwiIGlzIGNsaWNrZWRcclxuICAgICQoJy5qcy1zaG93LWZvcmdvdC1wYXNzd29yZCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uIHRvZ2dsZUZvcmdvdFBhc3MoKSB7XHJcbiAgICAgICAgJCgnLmpzLXJlc2V0LXBhc3N3b3JkLWNvbnRhaW5lcicpLnRvZ2dsZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEdsb2JhbCBkaXNtaXNzIGJ1dHRvbiBmb3IgcG9wLW91dHNcclxuICAgICQoJy5kaXNtaXNzLWJ1dHRvbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHtcclxuICAgICAgICAgICAgdGhpcy5jbGljaygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkKCQoZS50YXJnZXQpLmRhdGEoJ3RhcmdldC1lbGVtZW50JykpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuICAgICAgICB3aW5kb3cuY29udHJvbFBvcE91dHMuY2xvc2VQb3BPdXQoZS50YXJnZXQpO1xyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIC8vIE1ha2Ugc3VyZSBhbGwgZXh0ZXJuYWwgbGlua3Mgb3BlbiBpbiBhIG5ldyB3aW5kb3cvdGFiXHJcbiAgICAkKFwiYVtocmVmXj1odHRwXVwiKS5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgaWYodGhpcy5ocmVmLmluZGV4T2YobG9jYXRpb24uaG9zdG5hbWUpID09IC0xKSB7XHJcbiAgICAgICAgICAgICQodGhpcykuYXR0cih7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQWRkcyBhbmFseXRpY3MgZm9yIGFydGljbGUgcGFnZSBjbGlja3NcclxuICAgICQoJy5yb290JykuZmluZCgnYScpLmVhY2goZnVuY3Rpb24oaW5kZXgsIGl0ZW0pIHtcclxuXHJcbiAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnY2xpY2stdXRhZycpO1xyXG5cclxuICAgICAgICB2YXIgbGlua1N0cmluZztcclxuXHJcbiAgICAgICAgaWYodGhpcy5ocmVmLmluZGV4T2YobG9jYXRpb24uaG9zdG5hbWUpID09IC0xKSB7XHJcbiAgICAgICAgICAgIGxpbmtTdHJpbmcgPSAnRXh0ZXJuYWw6JyArIHRoaXMuaHJlZjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsaW5rU3RyaW5nID0gdGhpcy5ocmVmO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCQodGhpcykuZGF0YSgnaW5mbycpID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAkKHRoaXMpLmRhdGEoJ2luZm8nLCAneyBcImV2ZW50X25hbWVcIjogXCJlbWJlZGVkX2xpbmtfY2xpY2tfdGhyb3VnaFwiLCBcImNsaWNrX3Rocm91Z2hfc291cmNlXCI6IFwiJyArICQoJ2gxJykudGV4dCArICdcIiwgXCJjbGlja190aHJvdWdoX2Rlc3RpbmF0aW9uXCI6IFwiJyArIGxpbmtTdHJpbmcgKyAnXCJ9Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnLmdlbmVyYWwtaGVhZGVyX19uYXZpZ2F0aW9uJykuZWFjaChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgJCh0aGlzKS5vbignc2Nyb2xsJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzY3JvbGxMZWZ0ID0gJCh0aGlzKS5zY3JvbGxMZWZ0KCk7XHJcbiAgICAgICAgICAgIHZhciBzY3JvbGxXaWR0aCA9ICQodGhpcylbMF0uc2Nyb2xsV2lkdGg7XHJcbiAgICAgICAgICAgIHZhciB3aW5XaWR0aCA9ICQod2luZG93KS53aWR0aCgpO1xyXG5cclxuICAgICAgICAgICAgaWYoc2Nyb2xsTGVmdCA+IDMyKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuZ2VuZXJhbC1oZWFkZXJfX25hdmlnYXRpb24tc2Nyb2xsZXItLWxlZnQnKS5hZGRDbGFzcygnaXMtdmlzaWJsZScpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJCgnLmdlbmVyYWwtaGVhZGVyX19uYXZpZ2F0aW9uLXNjcm9sbGVyLS1sZWZ0JykucmVtb3ZlQ2xhc3MoJ2lzLXZpc2libGUnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoc2Nyb2xsTGVmdCArIHdpbldpZHRoIDwgc2Nyb2xsV2lkdGggLSAzMikge1xyXG4gICAgICAgICAgICAgICAgJCgnLmdlbmVyYWwtaGVhZGVyX19uYXZpZ2F0aW9uLXNjcm9sbGVyLS1yaWdodCcpLmFkZENsYXNzKCdpcy12aXNpYmxlJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuZ2VuZXJhbC1oZWFkZXJfX25hdmlnYXRpb24tc2Nyb2xsZXItLXJpZ2h0JykucmVtb3ZlQ2xhc3MoJ2lzLXZpc2libGUnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdmFyIHNjcm9sbExlZnQgPSAkKHRoaXMpLnNjcm9sbExlZnQoKTtcclxuICAgICAgICB2YXIgc2Nyb2xsV2lkdGggPSAkKHRoaXMpWzBdLnNjcm9sbFdpZHRoO1xyXG4gICAgICAgIHZhciB3aW5XaWR0aCA9ICQod2luZG93KS53aWR0aCgpO1xyXG5cclxuICAgICAgICBpZihzY3JvbGxMZWZ0ICsgd2luV2lkdGggPCBzY3JvbGxXaWR0aCAtIDMyKSB7XHJcbiAgICAgICAgICAgICQoJy5nZW5lcmFsLWhlYWRlcl9fbmF2aWdhdGlvbi1zY3JvbGxlci0tcmlnaHQnKS5hZGRDbGFzcygnaXMtdmlzaWJsZScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICQoJy5nZW5lcmFsLWhlYWRlcl9fbmF2aWdhdGlvbi1zY3JvbGxlci0tcmlnaHQnKS5yZW1vdmVDbGFzcygnaXMtdmlzaWJsZScpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICAvLyBTbW9vdGgsIGNsaWNrYWJsZSBzY3JvbGxpbmcgZm9yIEdlbmVyYWwgcGFnZSBoZWFkZXJzXHJcbiAgICB2YXIgc21vb3RoU2Nyb2xsaW5nTmF2ID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIC8vIENhY2hlIGZvciBsZXNzIERPTSBjaGVja2luZ1xyXG4gICAgICAgIHZhciBTY3JvbGxhYmxlID0gJCgnLmdlbmVyYWwtaGVhZGVyX19uYXZpZ2F0aW9uJyk7XHJcbiAgICAgICAgdmFyIENvbnRhaW5lciA9ICQoJy5nZW5lcmFsLWhlYWRlcicpO1xyXG5cclxuICAgICAgICAvLyBGaW5kIGN1cnJlbnQgc2Nyb2xsIGRpc3RhbmNlIGlzIGZyb20gbGVmdCBhbmQgcmlnaHQgZWRnZXNcclxuICAgICAgICB2YXIgc2Nyb2xsRGlzdGFuY2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGxlZnQ6IFNjcm9sbGFibGUuc2Nyb2xsTGVmdCgpLFxyXG4gICAgICAgICAgICAgICAgcmlnaHQ6IFNjcm9sbGFibGVbMF0uc2Nyb2xsV2lkdGggLSAoQ29udGFpbmVyLndpZHRoKCkgKyBTY3JvbGxhYmxlLnNjcm9sbExlZnQoKSlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgJCgnLmdlbmVyYWwtaGVhZGVyX19uYXZpZ2F0aW9uLXNjcm9sbGVyLS1yaWdodCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYoc2Nyb2xsRGlzdGFuY2UoKS5yaWdodCA+IDApIHsgLy8gTm90IG9uIHJpZ2h0IGVkZ2VcclxuICAgICAgICAgICAgICAgICAgICBzbW9vdGhTY3JvbGwoMjAwLCAncmlnaHQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAkKCcuZ2VuZXJhbC1oZWFkZXJfX25hdmlnYXRpb24tc2Nyb2xsZXItLWxlZnQnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmKHNjcm9sbERpc3RhbmNlKCkubGVmdCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzbW9vdGhTY3JvbGwoMjAwLCAnbGVmdCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHNjcm9sbFRvVGltZXJDYWNoZTtcclxuICAgICAgICB2YXIgdG90YWxUcmF2ZWwgPSBudWxsO1xyXG4gICAgICAgIHZhciBkdXJhdGlvblN0YXJ0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gUXVhZHJhdGljIGVhc2Utb3V0IGFsZ29yaXRobVxyXG4gICAgICAgIHZhciBlYXNpbmcgPSBmdW5jdGlvbih0aW1lLCBkaXN0YW5jZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGlzdGFuY2UgKiAodGltZSAqICgyIC0gdGltZSkpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBzbW9vdGhTY3JvbGwgPSBmdW5jdGlvbihkdXJhdGlvbiwgZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmIChkdXJhdGlvbiA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBSZXNldCBldmVyeXRoaW5nIHdoZW4gZHVyYXRpb24gdGltZSBmaW5pc2hlc1xyXG4gICAgICAgICAgICAgICAgdG90YWxUcmF2ZWwgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgZHVyYXRpb25TdGFydCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFN0b3JlIGR1cmF0aW9uIGFzIGR1cmF0aW9uU3RhcnQgb24gZmlyc3QgbG9vcFxyXG4gICAgICAgICAgICBkdXJhdGlvblN0YXJ0ID0gIWR1cmF0aW9uU3RhcnQgPyBkdXJhdGlvbiA6IGR1cmF0aW9uU3RhcnQ7XHJcblxyXG4gICAgICAgICAgICAvLyBTdG9yZSB0cmF2ZWwgZGlzdGFuY2UgKGNvbnRhaW5lciB3aWR0aCkgYXMgdG90YWxUcmF2ZWwgb24gZmlyc3QgbG9vcFxyXG4gICAgICAgICAgICB0b3RhbFRyYXZlbCA9ICF0b3RhbFRyYXZlbCA/IENvbnRhaW5lci53aWR0aCgpIDogdG90YWxUcmF2ZWw7XHJcblxyXG4gICAgICAgICAgICAvLyBGaW5kcyBwZXJjZW50YWdlIG9mIGVsYXBzZWQgdGltZSBzaW5jZSBzdGFydFxyXG4gICAgICAgICAgICB2YXIgdHJhdmVsUGNlbnQgPSAxIC0gKGR1cmF0aW9uIC8gZHVyYXRpb25TdGFydCk7XHJcblxyXG4gICAgICAgICAgICAvLyBGaW5kcyB0cmF2ZWwgY2hhbmdlIG9uIHRoaXMgbG9vcCwgYWRqdXN0ZWQgZm9yIGVhc2Utb3V0XHJcbiAgICAgICAgICAgIHZhciB0cmF2ZWwgPSBlYXNpbmcodHJhdmVsUGNlbnQsICgodG90YWxUcmF2ZWwgLyBkdXJhdGlvblN0YXJ0KSAqIDEwKSk7XHJcblxyXG4gICAgICAgICAgICBzY3JvbGxUb1RpbWVyQ2FjaGUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihwYXJzZUludCh0cmF2ZWwsIDEwKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihkaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2Nyb2xsYWJsZS5zY3JvbGxMZWZ0KFNjcm9sbGFibGUuc2Nyb2xsTGVmdCgpICsgdHJhdmVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc21vb3RoU2Nyb2xsKGR1cmF0aW9uIC0gMTAsIGRpcmVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKGRpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNjcm9sbGFibGUuc2Nyb2xsTGVmdChTY3JvbGxhYmxlLnNjcm9sbExlZnQoKSAtIHRyYXZlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNtb290aFNjcm9sbChkdXJhdGlvbiAtIDEwLCBkaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSwgMTApO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIEJpbmQgZXZlbnQgbGlzdGVuZXJzXHJcbiAgICAgICAgaW5pdCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkKCcuanMtcmVnaXN0ZXItZmluYWwnKS5vbignY2xpY2snLGZ1bmN0aW9uKGUpe1xyXG4gICAgICAgIHZhciBwdWJfbmV3c2xldHRlciA9ICcnO1xyXG4gICAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYShcIihtYXgtd2lkdGg6IDYwMHB4KVwiKS5tYXRjaGVzKSB7XHJcbiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpPCQoJy5tb2JpbGUgLm5ld3NsZXR0ZXJfY2hlY2tib3gud2NzLWMtb24nKS5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBwdWJfbmV3c2xldHRlciArPSAkKCQoJy5zaXRlX2RpdiAubmV3c2xldHRlcl9jaGVja2JveC53Y3MtYy1vbicpW2ldKS5wcmV2KCkuaHRtbCgpICsgJywgJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpPCQoJy5zaXRlX2RpdiAubmV3c2xldHRlcl9jaGVja2JveC53Y3MtYy1vbicpLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIHB1Yl9uZXdzbGV0dGVyICs9ICQoJCgnLnNpdGVfZGl2IC5uZXdzbGV0dGVyX2NoZWNrYm94Lndjcy1jLW9uJylbaV0pLnByZXYoKS5odG1sKCkgKyAnLCAnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBcclxuICAgICAgICB2YXIgZXZlbnREZXRhaWxzID0ge1xyXG4gICAgICAgICAgICBldmVudF9uYW1lOlwibmV3c2xldHRlci1zaWdudXBcIixcclxuICAgICAgICAgICAgcGFnZV9uYW1lOlwiTmV3c2xldHRlclwiLFxyXG4gICAgICAgICAgICBnYV9ldmVudENhdGVnb3J5OlwiTmV3c2xldHRlclwiLFxyXG4gICAgICAgICAgICBnYV9ldmVudExhYmVsOmFuYWx5dGljc19kYXRhW1wicHVibGljYXRpb25cIl0sXHJcbiAgICAgICAgICAgIHB1YmxpY2F0aW9uX25ld3NsZXR0ZXI6cHViX25ld3NsZXR0ZXIsXHJcbiAgICAgICAgICAgIHVzZXJfbmV3c19lbWFpbDphbmFseXRpY3NfZGF0YVtcInVzZXJfZW1haWxcIl1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBjaGtEZXRhaWxzID0ge307XHJcbiAgICAgICAgaWYgKCQoJyNuZXdzbGV0dGVycycpLmlzKCc6Y2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgIGNoa0RldGFpbHMubmV3c2xldHRlcl9vcHRpbiA9IFwidHJ1ZVwiO1xyXG5cclxuICAgICAgICAgICAgZXZlbnREZXRhaWxzLm5ld3NsZXR0ZXJfc2lnbnVwX3N0YXRlID0gXCJzdWNjZXNzXCI7XHJcbiAgICAgICAgICAgIGV2ZW50RGV0YWlscy5nYV9ldmVudEFjdGlvbiA9IFwiU2lnbiBVcCBTdWNjZXNzXCI7XHJcblxyXG4gICAgICAgICAgICAkLmV4dGVuZChldmVudERldGFpbHMsY2hrRGV0YWlscyk7XHJcbiAgICAgICAgICAgIGFuYWx5dGljc0V2ZW50KCAkLmV4dGVuZChhbmFseXRpY3NfZGF0YSwgZXZlbnREZXRhaWxzKSApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNoa0RldGFpbHMubmV3c2xldHRlcl9vcHRpbiA9IFwiZmFsc2VcIjtcclxuXHJcbiAgICAgICAgICAgIGV2ZW50RGV0YWlscy5uZXdzbGV0dGVyX3NpZ251cF9zdGF0ZSA9IFwidW5zdWNjZXNzZnVsXCI7XHJcbiAgICAgICAgICAgIGV2ZW50RGV0YWlscy5nYV9ldmVudEFjdGlvbiA9IFwiU2lnbiBVcCBGYWlsdXJlXCI7XHJcblxyXG4gICAgICAgICAgICAkLmV4dGVuZChldmVudERldGFpbHMsY2hrRGV0YWlscyk7XHJcbiAgICAgICAgICAgIGFuYWx5dGljc0V2ZW50KCAkLmV4dGVuZChhbmFseXRpY3NfZGF0YSwgZXZlbnREZXRhaWxzKSApO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICAvLyBUT0RPIC0gUmVmYWN0b3IgdGhpcyBjb2RlLCB1cGRhdGUgY2xhc3MgbmFtZSB0byBhIGBqcy1gIG5hbWVcclxuICAgICQoJy5tYW5hZ2UtcHJlZmVyZW5jZXMnKS5jbGljayhmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgdmFyIHByZWZlcmVuY2VzRGF0YSA9IHtcclxuICAgICAgICAgICAgZXZlbnRfbmFtZTogXCJtYW5hZ2UtcHJlZmVyZW5jZXNcIlxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYoJChcIiNOZXdzbGV0dGVyT3B0SW5cIikuaXMoJzpjaGVja2VkJykgJiYgJChcIiNEb05vdFNlbmRPZmZlcnNPcHRJblwiKS5pcygnOmNoZWNrZWQnKSkge1xyXG4gICAgICAgICAgICBwcmVmZXJlbmNlc0RhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBuZXdzbGV0dGVyX29wdGluOiBcInRydWVcIixcclxuICAgICAgICAgICAgICAgIGRvbm90X3NlbmRfb2ZmZXJzX29wdGluOiBcInRydWVcIlxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZighJChcIiNOZXdzbGV0dGVyT3B0SW5cIikuaXMoJzpjaGVja2VkJykgJiYgJChcIiNEb05vdFNlbmRPZmZlcnNPcHRJblwiKS5pcygnOmNoZWNrZWQnKSkge1xyXG4gICAgICAgICAgICBwcmVmZXJlbmNlc0RhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBuZXdzbGV0dGVyX29wdGluOiBcImZhbHNlXCIsXHJcbiAgICAgICAgICAgICAgICBkb25vdF9zZW5kX29mZmVyc19vcHRpbjogXCJ0cnVlXCJcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoJChcIiNOZXdzbGV0dGVyT3B0SW5cIikuaXMoJzpjaGVja2VkJykgJiYgISQoXCIjRG9Ob3RTZW5kT2ZmZXJzT3B0SW5cIikuaXMoJzpjaGVja2VkJykpIHtcclxuICAgICAgICAgICAgcHJlZmVyZW5jZXNEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgbmV3c2xldHRlcl9vcHRpbjogXCJ0cnVlXCIsXHJcbiAgICAgICAgICAgICAgICBkb25vdF9zZW5kX29mZmVyc19vcHRpbjogXCJmYWxzZVwiXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKCEkKFwiI05ld3NsZXR0ZXJPcHRJblwiKS5pcygnOmNoZWNrZWQnKSAmJiAhJChcIiNEb05vdFNlbmRPZmZlcnNPcHRJblwiKS5pcygnOmNoZWNrZWQnKSkge1xyXG4gICAgICAgICAgICBwcmVmZXJlbmNlc0RhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBuZXdzbGV0dGVyX29wdGluOiBcImZhbHNlXCIsXHJcbiAgICAgICAgICAgICAgICBkb25vdF9zZW5kX29mZmVyc19vcHRpbjogXCJmYWxzZVwiXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhbmFseXRpY3NFdmVudCggJC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsIHByZWZlcmVuY2VzRGF0YSkgKTtcclxuXHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgLy8gRXhlY3V0ZSFcclxuICAgIHNtb290aFNjcm9sbGluZ05hdigpO1xyXG5cclxuXHJcbiAgICAvLyBUb2dnbGUgZ2xvYmFsIEluZm9ybWEgYmFyXHJcbiAgICAkKCcuaW5mb3JtYS1yaWJib25fX3RpdGxlJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAkKCcuaW5mb3JtYS1yaWJib24nKS50b2dnbGVDbGFzcygnc2hvdycpO1xyXG4gICAgfSk7XHJcblxyXG5cclxuICAgICQoJy5qcy10b2dnbGUtbGlzdCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAkKGUudGFyZ2V0KS5jbG9zZXN0KCcuanMtdG9nZ2xhYmxlLWxpc3Qtd3JhcHBlcicpLnRvZ2dsZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuICAgIH0pO1xyXG5cclxuICAgICQoJy5jbGljay11dGFnJykuY2xpY2soZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBhbmFseXRpY3NFdmVudCggJC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsICQodGhpcykuZGF0YSgnaW5mbycpKSApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnLnNlYXJjaC1yZXN1bHRzJykub24oJ2NsaWNrJywgJy5jbGljay11dGFnJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBhbmFseXRpY3NFdmVudCggJC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsICQodGhpcykuZGF0YSgnaW5mbycpKSApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnI2Noa0FTQmlsbGluZycpLmNsaWNrKGZ1bmN0aW9uKGUpe1xyXG4gICAgICAgIGlmKCQodGhpcykuaXMoJzpjaGVja2VkJykpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAkKCcjZGRsU2hpcHBpbmdDb3VudHJ5JykudmFsKCQoJyNkZGxCaWxsaW5nQ291bnRyeScpLnZhbCgpKTtcclxuICAgICAgICAgICAgJCgnI3R4dFNoaXBwaW5nQWRkcmVzczEnKS52YWwoJCgnI3R4dEJpbGxpbmdBZGRyZXNzMScpLnZhbCgpKTtcclxuICAgICAgICAgICAgJCgnI3R4dFNoaXBwaW5nQWRkcmVzczInKS52YWwoJCgnI3R4dEJpbGxpbmdBZGRyZXNzMicpLnZhbCgpKTtcclxuICAgICAgICAgICAgJCgnI3R4dFNoaXBwaW5nQ2l0eScpLnZhbCgkKCcjdHh0QmlsbGluZ0NpdHknKS52YWwoKSk7XHJcbiAgICAgICAgICAgICQoJyN0eHRTaGlwcGluZ1N0YXRlJykudmFsKCQoJyN0eHRCaWxsaW5nU3RhdGUnKS52YWwoKSk7XHJcbiAgICAgICAgICAgICQoJyN0eHRTaGlwcGluZ1Bvc3RhbENvZGUnKS52YWwoJCgnI3R4dEJpbGxpbmdQb3N0YWxDb2RlJykudmFsKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEFjY291bnQgLSBFbWFpbCBQcmVmZXJlbmNlcyB0b2dnbGVyXHJcbiAgICAkKCcuanMtYWNjb3VudC1lbWFpbC10b2dnbGUtYWxsJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICQoJy5qcy11cGRhdGUtZW1haWwtcHJlZnMnKS5hdHRyKCdkaXNhYmxlZCcsIG51bGwpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnLmpzLWFjY291bnQtZW1haWwtY2hlY2tib3gnKS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgJCgnLmpzLXVwZGF0ZS1lbWFpbC1wcmVmcycpLmF0dHIoJ2Rpc2FibGVkJywgbnVsbCk7XHJcbiAgICB9KTtcclxuICBcclxuICAgIC8vIFR3aXR0ZXIgc2hhcmluZyBKU1xyXG4gICAgd2luZG93LnR3dHRyID0gZnVuY3Rpb24odCxlLHIpe3ZhciBuLGk9dC5nZXRFbGVtZW50c0J5VGFnTmFtZShlKVswXSxcclxuXHRcdHc9d2luZG93LnR3dHRyfHx7fTtcclxuICAgICAgICByZXR1cm4gdC5nZXRFbGVtZW50QnlJZChyKSA/IHcgOiAobj10LmNyZWF0ZUVsZW1lbnQoZSksXHJcblx0XHRuLmlkPXIsbi5zcmM9XCJodHRwczovL3BsYXRmb3JtLnR3aXR0ZXIuY29tL3dpZGdldHMuanNcIixcclxuXHRcdGkucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobixpKSx3Ll9lPVtdLFxyXG5cdFx0dy5yZWFkeT1mdW5jdGlvbih0KSB7IHcuX2UucHVzaCh0KTsgfSxcclxuXHRcdHcpOyB9IChkb2N1bWVudCxcInNjcmlwdFwiLFwidHdpdHRlci13anNcIik7XHJcblxyXG5cclxuXHJcbiAgICAvLyBQcmV0dHkgc2VsZWN0IGJveGVzXHJcbiAgICAkKCdzZWxlY3Q6bm90KC5uZy1zY29wZSknKS5zZWxlY3Rpdml0eSh7XHJcbiAgICAgICAgc2hvd1NlYXJjaElucHV0SW5Ecm9wZG93bjogZmFsc2UsXHJcbiAgICAgICAgcG9zaXRpb25Ecm9wZG93bjogZnVuY3Rpb24oJGRyb3Bkb3duRWwsICAkc2VsZWN0RWwpIHtcclxuICAgICAgICAgICAgJGRyb3Bkb3duRWwuY3NzKFwid2lkdGhcIiwgJHNlbGVjdEVsLndpZHRoKCkgKyBcInB4XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICQoXCIuc2VsZWN0aXZpdHktaW5wdXQgLnNlbGVjdGl2aXR5LXNpbmdsZS1zZWxlY3RcIikuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAkKHRoaXMpLmFwcGVuZCgnPHNwYW4gY2xhc3M9XCJzZWxlY3Rpdml0eS1hcnJvd1wiPjxzdmcgY2xhc3M9XCJhbGVydF9faWNvblwiPjx1c2UgeGxpbms6aHJlZj1cIi9kaXN0L2ltZy9zdmctc3ByaXRlLnN2ZyNzb3J0LWRvd24tYXJyb3dcIj48L3VzZT48L3N2Zz48L3NwYW4+Jyk7XHJcbiAgICB9KTtcclxuICAgXHJcbn0pO1xyXG5cclxuXHJcblxyXG4iLCIvKiFcclxuICogSmF2YVNjcmlwdCBDb29raWUgdjIuMS4wXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qcy1jb29raWUvanMtY29va2llXHJcbiAqXHJcbiAqIENvcHlyaWdodCAyMDA2LCAyMDE1IEtsYXVzIEhhcnRsICYgRmFnbmVyIEJyYWNrXHJcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxyXG4gKi9cclxuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XHJcblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG5cdFx0ZGVmaW5lKGZhY3RvcnkpO1xyXG5cdH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XHJcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0dmFyIF9PbGRDb29raWVzID0gd2luZG93LkNvb2tpZXM7XHJcblx0XHR2YXIgYXBpID0gd2luZG93LkNvb2tpZXMgPSBmYWN0b3J5KCk7XHJcblx0XHRhcGkubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0d2luZG93LkNvb2tpZXMgPSBfT2xkQ29va2llcztcclxuXHRcdFx0cmV0dXJuIGFwaTtcclxuXHRcdH07XHJcblx0fVxyXG59KGZ1bmN0aW9uICgpIHtcclxuXHRmdW5jdGlvbiBleHRlbmQgKCkge1xyXG5cdFx0dmFyIGkgPSAwO1xyXG5cdFx0dmFyIHJlc3VsdCA9IHt9O1xyXG5cdFx0Zm9yICg7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBhcmd1bWVudHNbIGkgXTtcclxuXHRcdFx0Zm9yICh2YXIga2V5IGluIGF0dHJpYnV0ZXMpIHtcclxuXHRcdFx0XHRyZXN1bHRba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGluaXQgKGNvbnZlcnRlcikge1xyXG5cdFx0ZnVuY3Rpb24gYXBpIChrZXksIHZhbHVlLCBhdHRyaWJ1dGVzKSB7XHJcblx0XHRcdHZhciByZXN1bHQ7XHJcblxyXG5cdFx0XHQvLyBXcml0ZVxyXG5cclxuXHRcdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XHJcblx0XHRcdFx0YXR0cmlidXRlcyA9IGV4dGVuZCh7XHJcblx0XHRcdFx0XHRwYXRoOiAnLydcclxuXHRcdFx0XHR9LCBhcGkuZGVmYXVsdHMsIGF0dHJpYnV0ZXMpO1xyXG5cclxuXHRcdFx0XHRpZiAodHlwZW9mIGF0dHJpYnV0ZXMuZXhwaXJlcyA9PT0gJ251bWJlcicpIHtcclxuXHRcdFx0XHRcdHZhciBleHBpcmVzID0gbmV3IERhdGUoKTtcclxuXHRcdFx0XHRcdGV4cGlyZXMuc2V0TWlsbGlzZWNvbmRzKGV4cGlyZXMuZ2V0TWlsbGlzZWNvbmRzKCkgKyBhdHRyaWJ1dGVzLmV4cGlyZXMgKiA4NjRlKzUpO1xyXG5cdFx0XHRcdFx0YXR0cmlidXRlcy5leHBpcmVzID0gZXhwaXJlcztcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRyZXN1bHQgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XHJcblx0XHRcdFx0XHRpZiAoL15bXFx7XFxbXS8udGVzdChyZXN1bHQpKSB7XHJcblx0XHRcdFx0XHRcdHZhbHVlID0gcmVzdWx0O1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHt9XHJcblxyXG5cdFx0XHRcdGlmICghY29udmVydGVyLndyaXRlKSB7XHJcblx0XHRcdFx0XHR2YWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcodmFsdWUpKVxyXG5cdFx0XHRcdFx0XHQucmVwbGFjZSgvJSgyM3wyNHwyNnwyQnwzQXwzQ3wzRXwzRHwyRnwzRnw0MHw1Qnw1RHw1RXw2MHw3Qnw3RHw3QykvZywgZGVjb2RlVVJJQ29tcG9uZW50KTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dmFsdWUgPSBjb252ZXJ0ZXIud3JpdGUodmFsdWUsIGtleSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRrZXkgPSBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGtleSkpO1xyXG5cdFx0XHRcdGtleSA9IGtleS5yZXBsYWNlKC8lKDIzfDI0fDI2fDJCfDVFfDYwfDdDKS9nLCBkZWNvZGVVUklDb21wb25lbnQpO1xyXG5cdFx0XHRcdGtleSA9IGtleS5yZXBsYWNlKC9bXFwoXFwpXS9nLCBlc2NhcGUpO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gKGRvY3VtZW50LmNvb2tpZSA9IFtcclxuXHRcdFx0XHRcdGtleSwgJz0nLCB2YWx1ZSxcclxuXHRcdFx0XHRcdGF0dHJpYnV0ZXMuZXhwaXJlcyAmJiAnOyBleHBpcmVzPScgKyBhdHRyaWJ1dGVzLmV4cGlyZXMudG9VVENTdHJpbmcoKSwgLy8gdXNlIGV4cGlyZXMgYXR0cmlidXRlLCBtYXgtYWdlIGlzIG5vdCBzdXBwb3J0ZWQgYnkgSUVcclxuXHRcdFx0XHRcdGF0dHJpYnV0ZXMucGF0aCAgICAmJiAnOyBwYXRoPScgKyBhdHRyaWJ1dGVzLnBhdGgsXHJcblx0XHRcdFx0XHRhdHRyaWJ1dGVzLmRvbWFpbiAgJiYgJzsgZG9tYWluPScgKyBhdHRyaWJ1dGVzLmRvbWFpbixcclxuXHRcdFx0XHRcdGF0dHJpYnV0ZXMuc2VjdXJlID8gJzsgc2VjdXJlJyA6ICcnXHJcblx0XHRcdFx0XS5qb2luKCcnKSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFJlYWRcclxuXHJcblx0XHRcdGlmICgha2V5KSB7XHJcblx0XHRcdFx0cmVzdWx0ID0ge307XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFRvIHByZXZlbnQgdGhlIGZvciBsb29wIGluIHRoZSBmaXJzdCBwbGFjZSBhc3NpZ24gYW4gZW1wdHkgYXJyYXlcclxuXHRcdFx0Ly8gaW4gY2FzZSB0aGVyZSBhcmUgbm8gY29va2llcyBhdCBhbGwuIEFsc28gcHJldmVudHMgb2RkIHJlc3VsdCB3aGVuXHJcblx0XHRcdC8vIGNhbGxpbmcgXCJnZXQoKVwiXHJcblx0XHRcdHZhciBjb29raWVzID0gZG9jdW1lbnQuY29va2llID8gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7ICcpIDogW107XHJcblx0XHRcdHZhciByZGVjb2RlID0gLyglWzAtOUEtWl17Mn0pKy9nO1xyXG5cdFx0XHR2YXIgaSA9IDA7XHJcblxyXG5cdFx0XHRmb3IgKDsgaSA8IGNvb2tpZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHR2YXIgcGFydHMgPSBjb29raWVzW2ldLnNwbGl0KCc9Jyk7XHJcblx0XHRcdFx0dmFyIG5hbWUgPSBwYXJ0c1swXS5yZXBsYWNlKHJkZWNvZGUsIGRlY29kZVVSSUNvbXBvbmVudCk7XHJcblx0XHRcdFx0dmFyIGNvb2tpZSA9IHBhcnRzLnNsaWNlKDEpLmpvaW4oJz0nKTtcclxuXHJcblx0XHRcdFx0aWYgKGNvb2tpZS5jaGFyQXQoMCkgPT09ICdcIicpIHtcclxuXHRcdFx0XHRcdGNvb2tpZSA9IGNvb2tpZS5zbGljZSgxLCAtMSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0Y29va2llID0gY29udmVydGVyLnJlYWQgP1xyXG5cdFx0XHRcdFx0XHRjb252ZXJ0ZXIucmVhZChjb29raWUsIG5hbWUpIDogY29udmVydGVyKGNvb2tpZSwgbmFtZSkgfHxcclxuXHRcdFx0XHRcdFx0Y29va2llLnJlcGxhY2UocmRlY29kZSwgZGVjb2RlVVJJQ29tcG9uZW50KTtcclxuXHJcblx0XHRcdFx0XHRpZiAodGhpcy5qc29uKSB7XHJcblx0XHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdFx0Y29va2llID0gSlNPTi5wYXJzZShjb29raWUpO1xyXG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmIChrZXkgPT09IG5hbWUpIHtcclxuXHRcdFx0XHRcdFx0cmVzdWx0ID0gY29va2llO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoIWtleSkge1xyXG5cdFx0XHRcdFx0XHRyZXN1bHRbbmFtZV0gPSBjb29raWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBjYXRjaCAoZSkge31cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcclxuXHRcdH1cclxuXHJcblx0XHRhcGkuZ2V0ID0gYXBpLnNldCA9IGFwaTtcclxuXHRcdGFwaS5nZXRKU09OID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRyZXR1cm4gYXBpLmFwcGx5KHtcclxuXHRcdFx0XHRqc29uOiB0cnVlXHJcblx0XHRcdH0sIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XHJcblx0XHR9O1xyXG5cdFx0YXBpLmRlZmF1bHRzID0ge307XHJcblxyXG5cdFx0YXBpLnJlbW92ZSA9IGZ1bmN0aW9uIChrZXksIGF0dHJpYnV0ZXMpIHtcclxuXHRcdFx0YXBpKGtleSwgJycsIGV4dGVuZChhdHRyaWJ1dGVzLCB7XHJcblx0XHRcdFx0ZXhwaXJlczogLTFcclxuXHRcdFx0fSkpO1xyXG5cdFx0fTtcclxuXHJcblx0XHRhcGkud2l0aENvbnZlcnRlciA9IGluaXQ7XHJcblxyXG5cdFx0cmV0dXJuIGFwaTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBpbml0KGZ1bmN0aW9uICgpIHt9KTtcclxufSkpO1xyXG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogQm9vdHN0cmFwOiBtb2RhbC5qcyB2My4zLjdcclxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jbW9kYWxzXHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cclxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG5cclxuK2Z1bmN0aW9uICgkKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAvLyBNT0RBTCBDTEFTUyBERUZJTklUSU9OXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICB2YXIgTW9kYWwgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgdGhpcy5vcHRpb25zICAgICAgICAgICAgID0gb3B0aW9uc1xyXG4gICAgdGhpcy4kYm9keSAgICAgICAgICAgICAgID0gJChkb2N1bWVudC5ib2R5KVxyXG4gICAgdGhpcy4kZWxlbWVudCAgICAgICAgICAgID0gJChlbGVtZW50KVxyXG4gICAgdGhpcy4kZGlhbG9nICAgICAgICAgICAgID0gdGhpcy4kZWxlbWVudC5maW5kKCcubW9kYWwtZGlhbG9nJylcclxuICAgIHRoaXMuJGJhY2tkcm9wICAgICAgICAgICA9IG51bGxcclxuICAgIHRoaXMuaXNTaG93biAgICAgICAgICAgICA9IG51bGxcclxuICAgIHRoaXMub3JpZ2luYWxCb2R5UGFkICAgICA9IG51bGxcclxuICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggICAgICA9IDBcclxuICAgIHRoaXMuaWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlXHJcblxyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdGUpIHtcclxuICAgICAgdGhpcy4kZWxlbWVudFxyXG4gICAgICAgIC5maW5kKCcubW9kYWwtY29udGVudCcpXHJcbiAgICAgICAgLmxvYWQodGhpcy5vcHRpb25zLnJlbW90ZSwgJC5wcm94eShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2xvYWRlZC5icy5tb2RhbCcpXHJcbiAgICAgICAgfSwgdGhpcykpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBNb2RhbC5WRVJTSU9OICA9ICczLjMuNydcclxuXHJcbiAgTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTiA9IDMwMFxyXG4gIE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcclxuXHJcbiAgTW9kYWwuREVGQVVMVFMgPSB7XHJcbiAgICBiYWNrZHJvcDogdHJ1ZSxcclxuICAgIGtleWJvYXJkOiB0cnVlLFxyXG4gICAgc2hvdzogdHJ1ZVxyXG4gIH1cclxuXHJcbiAgTW9kYWwucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIChfcmVsYXRlZFRhcmdldCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaXNTaG93biA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KF9yZWxhdGVkVGFyZ2V0KVxyXG4gIH1cclxuXHJcbiAgTW9kYWwucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoX3JlbGF0ZWRUYXJnZXQpIHtcclxuICAgIHZhciB0aGF0ID0gdGhpc1xyXG4gICAgdmFyIGUgICAgPSAkLkV2ZW50KCdzaG93LmJzLm1vZGFsJywgeyByZWxhdGVkVGFyZ2V0OiBfcmVsYXRlZFRhcmdldCB9KVxyXG5cclxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxyXG5cclxuICAgIGlmICh0aGlzLmlzU2hvd24gfHwgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXHJcblxyXG4gICAgdGhpcy5pc1Nob3duID0gdHJ1ZVxyXG5cclxuICAgIHRoaXMuY2hlY2tTY3JvbGxiYXIoKVxyXG4gICAgdGhpcy5zZXRTY3JvbGxiYXIoKVxyXG4gICAgdGhpcy4kYm9keS5hZGRDbGFzcygnbW9kYWwtb3BlbicpXHJcblxyXG4gICAgdGhpcy5lc2NhcGUoKVxyXG4gICAgdGhpcy5yZXNpemUoKVxyXG5cclxuICAgIHRoaXMuJGVsZW1lbnQub24oJ2NsaWNrLmRpc21pc3MuYnMubW9kYWwnLCAnW2RhdGEtZGlzbWlzcz1cIm1vZGFsXCJdJywgJC5wcm94eSh0aGlzLmhpZGUsIHRoaXMpKVxyXG5cclxuICAgIHRoaXMuJGRpYWxvZy5vbignbW91c2Vkb3duLmRpc21pc3MuYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHRoYXQuJGVsZW1lbnQub25lKCdtb3VzZXVwLmRpc21pc3MuYnMubW9kYWwnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcyh0aGF0LiRlbGVtZW50KSkgdGhhdC5pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgfSlcclxuXHJcbiAgICB0aGlzLmJhY2tkcm9wKGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHRyYW5zaXRpb24gPSAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGF0LiRlbGVtZW50Lmhhc0NsYXNzKCdmYWRlJylcclxuXHJcbiAgICAgIGlmICghdGhhdC4kZWxlbWVudC5wYXJlbnQoKS5sZW5ndGgpIHtcclxuICAgICAgICB0aGF0LiRlbGVtZW50LmFwcGVuZFRvKHRoYXQuJGJvZHkpIC8vIGRvbid0IG1vdmUgbW9kYWxzIGRvbSBwb3NpdGlvblxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGF0LiRlbGVtZW50XHJcbiAgICAgICAgLnNob3coKVxyXG4gICAgICAgIC5zY3JvbGxUb3AoMClcclxuXHJcbiAgICAgIHRoYXQuYWRqdXN0RGlhbG9nKClcclxuXHJcbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XHJcbiAgICAgICAgdGhhdC4kZWxlbWVudFswXS5vZmZzZXRXaWR0aCAvLyBmb3JjZSByZWZsb3dcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhhdC4kZWxlbWVudC5hZGRDbGFzcygnaW4nKVxyXG5cclxuICAgICAgdGhhdC5lbmZvcmNlRm9jdXMoKVxyXG5cclxuICAgICAgdmFyIGUgPSAkLkV2ZW50KCdzaG93bi5icy5tb2RhbCcsIHsgcmVsYXRlZFRhcmdldDogX3JlbGF0ZWRUYXJnZXQgfSlcclxuXHJcbiAgICAgIHRyYW5zaXRpb24gP1xyXG4gICAgICAgIHRoYXQuJGRpYWxvZyAvLyB3YWl0IGZvciBtb2RhbCB0byBzbGlkZSBpblxyXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJykudHJpZ2dlcihlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChNb2RhbC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XHJcbiAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cycpLnRyaWdnZXIoZSlcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBNb2RhbC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICBpZiAoZSkgZS5wcmV2ZW50RGVmYXVsdCgpXHJcblxyXG4gICAgZSA9ICQuRXZlbnQoJ2hpZGUuYnMubW9kYWwnKVxyXG5cclxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxyXG5cclxuICAgIGlmICghdGhpcy5pc1Nob3duIHx8IGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxyXG5cclxuICAgIHRoaXMuaXNTaG93biA9IGZhbHNlXHJcblxyXG4gICAgdGhpcy5lc2NhcGUoKVxyXG4gICAgdGhpcy5yZXNpemUoKVxyXG5cclxuICAgICQoZG9jdW1lbnQpLm9mZignZm9jdXNpbi5icy5tb2RhbCcpXHJcblxyXG4gICAgdGhpcy4kZWxlbWVudFxyXG4gICAgICAucmVtb3ZlQ2xhc3MoJ2luJylcclxuICAgICAgLm9mZignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcpXHJcbiAgICAgIC5vZmYoJ21vdXNldXAuZGlzbWlzcy5icy5tb2RhbCcpXHJcblxyXG4gICAgdGhpcy4kZGlhbG9nLm9mZignbW91c2Vkb3duLmRpc21pc3MuYnMubW9kYWwnKVxyXG5cclxuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XHJcbiAgICAgIHRoaXMuJGVsZW1lbnRcclxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCAkLnByb3h5KHRoaXMuaGlkZU1vZGFsLCB0aGlzKSlcclxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTikgOlxyXG4gICAgICB0aGlzLmhpZGVNb2RhbCgpXHJcbiAgfVxyXG5cclxuICBNb2RhbC5wcm90b3R5cGUuZW5mb3JjZUZvY3VzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgJChkb2N1bWVudClcclxuICAgICAgLm9mZignZm9jdXNpbi5icy5tb2RhbCcpIC8vIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgZm9jdXMgbG9vcFxyXG4gICAgICAub24oJ2ZvY3VzaW4uYnMubW9kYWwnLCAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKGRvY3VtZW50ICE9PSBlLnRhcmdldCAmJlxyXG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50WzBdICE9PSBlLnRhcmdldCAmJlxyXG4gICAgICAgICAgICAhdGhpcy4kZWxlbWVudC5oYXMoZS50YXJnZXQpLmxlbmd0aCkge1xyXG4gICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cycpXHJcbiAgICAgICAgfVxyXG4gICAgICB9LCB0aGlzKSlcclxuICB9XHJcblxyXG4gIE1vZGFsLnByb3RvdHlwZS5lc2NhcGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5pc1Nob3duICYmIHRoaXMub3B0aW9ucy5rZXlib2FyZCkge1xyXG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duLmRpc21pc3MuYnMubW9kYWwnLCAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgZS53aGljaCA9PSAyNyAmJiB0aGlzLmhpZGUoKVxyXG4gICAgICB9LCB0aGlzKSlcclxuICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNTaG93bikge1xyXG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZigna2V5ZG93bi5kaXNtaXNzLmJzLm1vZGFsJylcclxuICAgIH1cclxuICB9XHJcblxyXG4gIE1vZGFsLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5pc1Nob3duKSB7XHJcbiAgICAgICQod2luZG93KS5vbigncmVzaXplLmJzLm1vZGFsJywgJC5wcm94eSh0aGlzLmhhbmRsZVVwZGF0ZSwgdGhpcykpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUuYnMubW9kYWwnKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgTW9kYWwucHJvdG90eXBlLmhpZGVNb2RhbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB0aGF0ID0gdGhpc1xyXG4gICAgdGhpcy4kZWxlbWVudC5oaWRlKClcclxuICAgIHRoaXMuYmFja2Ryb3AoZnVuY3Rpb24gKCkge1xyXG4gICAgICB0aGF0LiRib2R5LnJlbW92ZUNsYXNzKCdtb2RhbC1vcGVuJylcclxuICAgICAgdGhhdC5yZXNldEFkanVzdG1lbnRzKClcclxuICAgICAgdGhhdC5yZXNldFNjcm9sbGJhcigpXHJcbiAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignaGlkZGVuLmJzLm1vZGFsJylcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBNb2RhbC5wcm90b3R5cGUucmVtb3ZlQmFja2Ryb3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLiRiYWNrZHJvcCAmJiB0aGlzLiRiYWNrZHJvcC5yZW1vdmUoKVxyXG4gICAgdGhpcy4kYmFja2Ryb3AgPSBudWxsXHJcbiAgfVxyXG5cclxuICBNb2RhbC5wcm90b3R5cGUuYmFja2Ryb3AgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgIHZhciB0aGF0ID0gdGhpc1xyXG4gICAgdmFyIGFuaW1hdGUgPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmYWRlJykgPyAnZmFkZScgOiAnJ1xyXG5cclxuICAgIGlmICh0aGlzLmlzU2hvd24gJiYgdGhpcy5vcHRpb25zLmJhY2tkcm9wKSB7XHJcbiAgICAgIHZhciBkb0FuaW1hdGUgPSAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiBhbmltYXRlXHJcblxyXG4gICAgICB0aGlzLiRiYWNrZHJvcCA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXHJcbiAgICAgICAgLmFkZENsYXNzKCdtb2RhbC1iYWNrZHJvcCAnICsgYW5pbWF0ZSlcclxuICAgICAgICAuYXBwZW5kVG8odGhpcy4kYm9keSlcclxuXHJcbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ2NsaWNrLmRpc21pc3MuYnMubW9kYWwnLCAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaWdub3JlQmFja2Ryb3BDbGljaykge1xyXG4gICAgICAgICAgdGhpcy5pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2VcclxuICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCkgcmV0dXJuXHJcbiAgICAgICAgdGhpcy5vcHRpb25zLmJhY2tkcm9wID09ICdzdGF0aWMnXHJcbiAgICAgICAgICA/IHRoaXMuJGVsZW1lbnRbMF0uZm9jdXMoKVxyXG4gICAgICAgICAgOiB0aGlzLmhpZGUoKVxyXG4gICAgICB9LCB0aGlzKSlcclxuXHJcbiAgICAgIGlmIChkb0FuaW1hdGUpIHRoaXMuJGJhY2tkcm9wWzBdLm9mZnNldFdpZHRoIC8vIGZvcmNlIHJlZmxvd1xyXG5cclxuICAgICAgdGhpcy4kYmFja2Ryb3AuYWRkQ2xhc3MoJ2luJylcclxuXHJcbiAgICAgIGlmICghY2FsbGJhY2spIHJldHVyblxyXG5cclxuICAgICAgZG9BbmltYXRlID9cclxuICAgICAgICB0aGlzLiRiYWNrZHJvcFxyXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY2FsbGJhY2spXHJcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTikgOlxyXG4gICAgICAgIGNhbGxiYWNrKClcclxuXHJcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2hvd24gJiYgdGhpcy4kYmFja2Ryb3ApIHtcclxuICAgICAgdGhpcy4kYmFja2Ryb3AucmVtb3ZlQ2xhc3MoJ2luJylcclxuXHJcbiAgICAgIHZhciBjYWxsYmFja1JlbW92ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGF0LnJlbW92ZUJhY2tkcm9wKClcclxuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXHJcbiAgICAgIH1cclxuICAgICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID9cclxuICAgICAgICB0aGlzLiRiYWNrZHJvcFxyXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY2FsbGJhY2tSZW1vdmUpXHJcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTikgOlxyXG4gICAgICAgIGNhbGxiYWNrUmVtb3ZlKClcclxuXHJcbiAgICB9IGVsc2UgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgIGNhbGxiYWNrKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIHRoZXNlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcclxuXHJcbiAgTW9kYWwucHJvdG90eXBlLmhhbmRsZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuYWRqdXN0RGlhbG9nKClcclxuICB9XHJcblxyXG4gIE1vZGFsLnByb3RvdHlwZS5hZGp1c3REaWFsb2cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgbW9kYWxJc092ZXJmbG93aW5nID0gdGhpcy4kZWxlbWVudFswXS5zY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XHJcblxyXG4gICAgdGhpcy4kZWxlbWVudC5jc3Moe1xyXG4gICAgICBwYWRkaW5nTGVmdDogICF0aGlzLmJvZHlJc092ZXJmbG93aW5nICYmIG1vZGFsSXNPdmVyZmxvd2luZyA/IHRoaXMuc2Nyb2xsYmFyV2lkdGggOiAnJyxcclxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGlzLmJvZHlJc092ZXJmbG93aW5nICYmICFtb2RhbElzT3ZlcmZsb3dpbmcgPyB0aGlzLnNjcm9sbGJhcldpZHRoIDogJydcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBNb2RhbC5wcm90b3R5cGUucmVzZXRBZGp1c3RtZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtcclxuICAgICAgcGFkZGluZ0xlZnQ6ICcnLFxyXG4gICAgICBwYWRkaW5nUmlnaHQ6ICcnXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgTW9kYWwucHJvdG90eXBlLmNoZWNrU2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGZ1bGxXaW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoXHJcbiAgICBpZiAoIWZ1bGxXaW5kb3dXaWR0aCkgeyAvLyB3b3JrYXJvdW5kIGZvciBtaXNzaW5nIHdpbmRvdy5pbm5lcldpZHRoIGluIElFOFxyXG4gICAgICB2YXIgZG9jdW1lbnRFbGVtZW50UmVjdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgICBmdWxsV2luZG93V2lkdGggPSBkb2N1bWVudEVsZW1lbnRSZWN0LnJpZ2h0IC0gTWF0aC5hYnMoZG9jdW1lbnRFbGVtZW50UmVjdC5sZWZ0KVxyXG4gICAgfVxyXG4gICAgdGhpcy5ib2R5SXNPdmVyZmxvd2luZyA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggPCBmdWxsV2luZG93V2lkdGhcclxuICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggPSB0aGlzLm1lYXN1cmVTY3JvbGxiYXIoKVxyXG4gIH1cclxuXHJcbiAgTW9kYWwucHJvdG90eXBlLnNldFNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBib2R5UGFkID0gcGFyc2VJbnQoKHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JykgfHwgMCksIDEwKVxyXG4gICAgdGhpcy5vcmlnaW5hbEJvZHlQYWQgPSBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodCB8fCAnJ1xyXG4gICAgaWYgKHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcpIHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JywgYm9keVBhZCArIHRoaXMuc2Nyb2xsYmFyV2lkdGgpXHJcbiAgfVxyXG5cclxuICBNb2RhbC5wcm90b3R5cGUucmVzZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLiRib2R5LmNzcygncGFkZGluZy1yaWdodCcsIHRoaXMub3JpZ2luYWxCb2R5UGFkKVxyXG4gIH1cclxuXHJcbiAgTW9kYWwucHJvdG90eXBlLm1lYXN1cmVTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7IC8vIHRoeCB3YWxzaFxyXG4gICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcbiAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gJ21vZGFsLXNjcm9sbGJhci1tZWFzdXJlJ1xyXG4gICAgdGhpcy4kYm9keS5hcHBlbmQoc2Nyb2xsRGl2KVxyXG4gICAgdmFyIHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoXHJcbiAgICB0aGlzLiRib2R5WzBdLnJlbW92ZUNoaWxkKHNjcm9sbERpdilcclxuICAgIHJldHVybiBzY3JvbGxiYXJXaWR0aFxyXG4gIH1cclxuXHJcblxyXG4gIC8vIE1PREFMIFBMVUdJTiBERUZJTklUSU9OXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbiwgX3JlbGF0ZWRUYXJnZXQpIHtcclxuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcclxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5tb2RhbCcpXHJcbiAgICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoe30sIE1vZGFsLkRFRkFVTFRTLCAkdGhpcy5kYXRhKCksIHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uKVxyXG5cclxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5tb2RhbCcsIChkYXRhID0gbmV3IE1vZGFsKHRoaXMsIG9wdGlvbnMpKSlcclxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXShfcmVsYXRlZFRhcmdldClcclxuICAgICAgZWxzZSBpZiAob3B0aW9ucy5zaG93KSBkYXRhLnNob3coX3JlbGF0ZWRUYXJnZXQpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgdmFyIG9sZCA9ICQuZm4ubW9kYWxcclxuXHJcbiAgJC5mbi5tb2RhbCAgICAgICAgICAgICA9IFBsdWdpblxyXG4gICQuZm4ubW9kYWwuQ29uc3RydWN0b3IgPSBNb2RhbFxyXG5cclxuXHJcbiAgLy8gTU9EQUwgTk8gQ09ORkxJQ1RcclxuICAvLyA9PT09PT09PT09PT09PT09PVxyXG5cclxuICAkLmZuLm1vZGFsLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAkLmZuLm1vZGFsID0gb2xkXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuXHJcblxyXG4gIC8vIE1PREFMIERBVEEtQVBJXHJcbiAgLy8gPT09PT09PT09PT09PT1cclxuXHJcbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLm1vZGFsLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1cIm1vZGFsXCJdJywgZnVuY3Rpb24gKGUpIHtcclxuICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxyXG4gICAgdmFyIGhyZWYgICAgPSAkdGhpcy5hdHRyKCdocmVmJylcclxuICAgIHZhciAkdGFyZ2V0ID0gJCgkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpIHx8IChocmVmICYmIGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpKSkgLy8gc3RyaXAgZm9yIGllN1xyXG4gICAgdmFyIG9wdGlvbiAgPSAkdGFyZ2V0LmRhdGEoJ2JzLm1vZGFsJykgPyAndG9nZ2xlJyA6ICQuZXh0ZW5kKHsgcmVtb3RlOiAhLyMvLnRlc3QoaHJlZikgJiYgaHJlZiB9LCAkdGFyZ2V0LmRhdGEoKSwgJHRoaXMuZGF0YSgpKVxyXG5cclxuICAgIGlmICgkdGhpcy5pcygnYScpKSBlLnByZXZlbnREZWZhdWx0KClcclxuXHJcbiAgICAkdGFyZ2V0Lm9uZSgnc2hvdy5icy5tb2RhbCcsIGZ1bmN0aW9uIChzaG93RXZlbnQpIHtcclxuICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuIC8vIG9ubHkgcmVnaXN0ZXIgZm9jdXMgcmVzdG9yZXIgaWYgbW9kYWwgd2lsbCBhY3R1YWxseSBnZXQgc2hvd25cclxuICAgICAgJHRhcmdldC5vbmUoJ2hpZGRlbi5icy5tb2RhbCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkdGhpcy5pcygnOnZpc2libGUnKSAmJiAkdGhpcy50cmlnZ2VyKCdmb2N1cycpXHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9uLCB0aGlzKVxyXG4gIH0pXHJcblxyXG59KCQpO1xyXG4iLCIvKiBnbG9iYWwgYW5hbHl0aWNzX2RhdGEgKi9cclxuXHJcbmltcG9ydCB7IGFuYWx5dGljc0V2ZW50IH0gZnJvbSAnLi9jb250cm9sbGVycy9hbmFseXRpY3MtY29udHJvbGxlcic7XHJcblxyXG5mdW5jdGlvbiBuZXdzbGV0dGVyU2lnbnVwQ29udHJvbGxlcigpIHtcclxuXHJcbiAgICB0aGlzLmNoZWNrRm9yVXNlclNpZ25lZFVwID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAkLmdldCgnL0FjY291bnQvYXBpL1ByZWZlcmVuY2VzQXBpL0lzVXNlclNpZ25lZFVwJywgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgdmFyIHJlcyA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICBpZihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgJChcIi5uZXdzbGV0dGVyLXNpZ251cFwiKS5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuSXNWYWxpZEVtYWlsID0gZnVuY3Rpb24oZW1haWwpe1xyXG4gICAgICAgIHZhciByZSA9IC9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvO1xyXG4gICAgICAgIHJldHVybiByZS50ZXN0KGVtYWlsKTtcclxuICAgICAgICBcclxuICAgIH07XHJcbiAgICB0aGlzLmFkZENvbnRyb2wgPSBmdW5jdGlvbih0cmlnZ2VyRWxlbWVudCwgc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spIHtcclxuICAgICAgICBpZiAodHJpZ2dlckVsZW1lbnQpIHtcclxuICAgICAgICAgICAgJCh0cmlnZ2VyRWxlbWVudCkub24oJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCBmb3JtIHN1Ym1pdFxyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBIaWRlIGFueSBlcnJvcnNcclxuICAgICAgICAgICAgICAgICQoJy5qcy1uZXdzbGV0dGVyLXNpZ251cC1lcnJvcicpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICQoJy5uZXdzbGV0dGVyLXNpZ251cC1uZWVkcy1yZWdpc3RyYXRpb24nKS5oaWRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGlucHV0RGF0YSA9ICQoXCIjbmV3c2xldHRlclVzZXJOYW1lXCIpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHVybCA9ICQodHJpZ2dlckVsZW1lbnQpLmRhdGEoJ3NpZ251cC11cmwnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyQodHJpZ2dlckVsZW1lbnQpLnBhcmVudHMoJy5uZXdzbGV0dGVyLXNpZ251cCcpLmZpbmQoJ2lucHV0JykuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIC8vICAgIGlucHV0RGF0YSA9ICQodGhpcykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAvL30pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKGlucHV0RGF0YSE9PScnICYmIHRoaXMuSXNWYWxpZEVtYWlsKGlucHV0RGF0YSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICQoJy5qcy1uZXdzbGV0dGVyLXNpZ251cC0tZXJyb3ItaW52YWxpZGVtYWlsZm9ybWF0JykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgdXJsID0gdXJsICsgJz91c2VyTmFtZT0nICsgaW5wdXREYXRhO1xyXG5cclxuICAgICAgICAgICAgICAgICQuZ2V0KHVybCwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3c2xldHRlckFuYWx5dGljcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlID09ICd0cnVlJykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3c2xldHRlckFuYWx5dGljcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50X25hbWU6ICduZXdzbGV0dGVyLXNpZ251cCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdzbGV0dGVyX3NpZ251cF9zdGF0ZTogJ3N1Y2Nlc3NmdWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlck5hbWU6ICdcIicgKyBpbnB1dERhdGEgKyAnXCInXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmFseXRpY3NFdmVudCggJC5leHRlbmQoIGFuYWx5dGljc19kYXRhLCBuZXdzbGV0dGVyQW5hbHl0aWNzKSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5uZXdzbGV0dGVyLXNpZ251cC1iZWZvcmUtc3VibWl0XCIpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5uZXdzbGV0dGVyLXNpZ251cC1hZnRlci1zdWJtaXRcIikuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlID09ICdtdXN0cmVnaXN0ZXInKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld3NsZXR0ZXJBbmFseXRpY3MgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudF9uYW1lOiAnbmV3c2xldHRlci1zaWdudXAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3c2xldHRlcl9zaWdudXBfc3RhdGU6ICd1bnN1Y2Nlc3NmdWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlck5hbWU6ICdcIicgKyBpbnB1dERhdGEgKyAnXCInXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmFseXRpY3NFdmVudCggJC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsIG5ld3NsZXR0ZXJBbmFseXRpY3MpICk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLm5ld3NsZXR0ZXItc2lnbnVwLW5lZWRzLXJlZ2lzdHJhdGlvbiBhJykuYXR0cignaHJlZicsICQoJy5uZXdzbGV0dGVyLXNpZ251cC1uZWVkcy1yZWdpc3RyYXRpb24gYScpLmF0dHIoJ2hyZWYnKSArICQoJy5uZXdzbGV0dGVyLXNpZ251cC1iZWZvcmUtc3VibWl0IGlucHV0JykudmFsKCkpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcubmV3c2xldHRlci1zaWdudXAtYmVmb3JlLXN1Ym1pdCcpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLm5ld3NsZXR0ZXItc2lnbnVwLW5lZWRzLXJlZ2lzdHJhdGlvbicpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3c2xldHRlckFuYWx5dGljcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50X25hbWU6ICduZXdzbGV0dGVyLXNpZ251cCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdzbGV0dGVyX3NpZ251cF9zdGF0ZTogJ3Vuc3VjY2Vzc2Z1bCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyTmFtZTogJ1wiJyArIGlucHV0RGF0YSArICdcIidcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuYWx5dGljc0V2ZW50KCAkLmV4dGVuZChhbmFseXRpY3NfZGF0YSwgbmV3c2xldHRlckFuYWx5dGljcykgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5qcy1uZXdzbGV0dGVyLXNpZ251cC1lcnJvcicpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLmpzLW5ld3NsZXR0ZXItc2lnbnVwLS1lcnJvci1pbnZhbGlkZW1haWxmb3JtYXQnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ld3NsZXR0ZXJTaWdudXBDb250cm9sbGVyO1xyXG4iLCJ2YXIgU2VhcmNoU2NyaXB0ID0gZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHQvKiBUb2dnbGUgc2VhcmNoIHRpcHMgdmlzaWJpbGl0eSAqL1xyXG5cdFx0XHQkKCcuanMtdG9nZ2xlLXNlYXJjaC10aXBzJykub24oJ2NsaWNrJywgZnVuY3Rpb24gdG9nZ2xlVGlwcygpIHtcclxuXHRcdFx0XHQkKCcuc2VhcmNoLWJhcl9fdGlwcycpLnRvZ2dsZUNsYXNzKCdvcGVuJyk7XHJcblx0XHRcdFx0JCgnLnNlYXJjaC1iYXInKS50b2dnbGVDbGFzcygndGlwcy1vcGVuJyk7XHJcblx0XHRcdH0pO1xyXG5cclxufSgpO1xyXG4iLCIvKipcclxuICogQGxpY2Vuc2VcclxuICogU2VsZWN0aXZpdHkuanMgMi4xLjAgPGh0dHBzOi8vYXJlbmRqci5naXRodWIuaW8vc2VsZWN0aXZpdHkvPlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNiBBcmVuZCB2YW4gQmVlbGVuIGpyLlxyXG4gKiAgICAgICAgICAgKGMpIDIwMTYgU3BlYWthcCBCVlxyXG4gKiBBdmFpbGFibGUgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vZ2l0aHViLmNvbS9hcmVuZGpyL3NlbGVjdGl2aXR5L2Jsb2IvbWFzdGVyL0xJQ0VOU0U+XHJcbiAqL1xyXG4hZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUpbW9kdWxlLmV4cG9ydHM9ZSgpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSxlKTtlbHNle3ZhciBmO1widW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/Zj13aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9mPWdsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmKGY9c2VsZiksZi5zZWxlY3Rpdml0eT1lKCl9fShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIChmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcclxuX2RlcmVxXyg1KTtfZGVyZXFfKDYpO19kZXJlcV8oNyk7X2RlcmVxXyg5KTtfZGVyZXFfKDEwKTtfZGVyZXFfKDExKTtfZGVyZXFfKDEyKTtfZGVyZXFfKDEzKTtfZGVyZXFfKDE0KTtfZGVyZXFfKDE1KTtfZGVyZXFfKDE2KTtfZGVyZXFfKDE3KTtfZGVyZXFfKDE4KTtfZGVyZXFfKDE5KTttb2R1bGUuZXhwb3J0cz1fZGVyZXFfKDgpO1xyXG59LHtcIjEwXCI6MTAsXCIxMVwiOjExLFwiMTJcIjoxMixcIjEzXCI6MTMsXCIxNFwiOjE0LFwiMTVcIjoxNSxcIjE2XCI6MTYsXCIxN1wiOjE3LFwiMThcIjoxOCxcIjE5XCI6MTksXCI1XCI6NSxcIjZcIjo2LFwiN1wiOjcsXCI4XCI6OCxcIjlcIjo5fV0sMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciAkID0gd2luZG93LmpRdWVyeSB8fCB3aW5kb3cuWmVwdG87XHJcblxyXG4vKipcclxuICogRXZlbnQgRGVsZWdhdG9yIENvbnN0cnVjdG9yLlxyXG4gKi9cclxuZnVuY3Rpb24gRXZlbnREZWxlZ2F0b3IoKSB7XHJcblxyXG4gICAgdGhpcy5fZXZlbnRzID0gW107XHJcblxyXG4gICAgdGhpcy5kZWxlZ2F0ZUV2ZW50cygpO1xyXG59XHJcblxyXG4vKipcclxuICogTWV0aG9kcy5cclxuICovXHJcbiQuZXh0ZW5kKEV2ZW50RGVsZWdhdG9yLnByb3RvdHlwZSwge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXR0YWNoZXMgYWxsIGxpc3RlbmVycyBmcm9tIHRoZSBldmVudHMgbWFwIHRvIHRoZSBpbnN0YW5jZSdzIGVsZW1lbnQuXHJcbiAgICAgKlxyXG4gICAgICogTm9ybWFsbHksIHlvdSBzaG91bGQgbm90IGhhdmUgdG8gY2FsbCB0aGlzIG1ldGhvZCB5b3Vyc2VsZiBhcyBpdCdzIGNhbGxlZCBhdXRvbWF0aWNhbGx5IGluXHJcbiAgICAgKiB0aGUgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGRlbGVnYXRlRXZlbnRzOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdGhpcy51bmRlbGVnYXRlRXZlbnRzKCk7XHJcblxyXG4gICAgICAgICQuZWFjaCh0aGlzLmV2ZW50cywgZnVuY3Rpb24oZXZlbnQsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RvciwgaW5kZXggPSBldmVudC5pbmRleE9mKCcgJyk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RvciA9IGV2ZW50LnNsaWNlKGluZGV4ICsgMSk7XHJcbiAgICAgICAgICAgICAgICBldmVudCA9IGV2ZW50LnNsaWNlKDAsIGluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCQudHlwZShsaXN0ZW5lcikgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBsaXN0ZW5lciA9IHRoaXNbbGlzdGVuZXJdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLmJpbmQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGVsLm9uKGV2ZW50LCBzZWxlY3RvciwgbGlzdGVuZXIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZWwub24oZXZlbnQsIGxpc3RlbmVyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzLnB1c2goeyBldmVudDogZXZlbnQsIHNlbGVjdG9yOiBzZWxlY3RvciwgbGlzdGVuZXI6IGxpc3RlbmVyIH0pO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGV0YWNoZXMgYWxsIGxpc3RlbmVycyBmcm9tIHRoZSBldmVudHMgbWFwIGZyb20gdGhlIGluc3RhbmNlJ3MgZWxlbWVudC5cclxuICAgICAqL1xyXG4gICAgdW5kZWxlZ2F0ZUV2ZW50czogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX2V2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudC5zZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZWwub2ZmKGV2ZW50LmV2ZW50LCBldmVudC5zZWxlY3RvciwgZXZlbnQubGlzdGVuZXIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZWwub2ZmKGV2ZW50LmV2ZW50LCBldmVudC5saXN0ZW5lcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gW107XHJcbiAgICB9XHJcblxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRXZlbnREZWxlZ2F0b3I7XHJcblxyXG59LHtcImpxdWVyeVwiOlwianF1ZXJ5XCJ9XSwzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIGxvZGFzaCAzLjMuMSAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cclxuICogQ29weXJpZ2h0IDIwMTItMjAxNSBUaGUgRG9qbyBGb3VuZGF0aW9uIDxodHRwOi8vZG9qb2ZvdW5kYXRpb24ub3JnLz5cclxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMiA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cclxuICogQ29weXJpZ2h0IDIwMDktMjAxNSBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xyXG4gKiBBdmFpbGFibGUgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBVbml4IGVwb2NoXHJcbiAqICAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cclxuICpcclxuICogQHN0YXRpY1xyXG4gKiBAbWVtYmVyT2YgX1xyXG4gKiBAY2F0ZWdvcnkgRGF0ZVxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XHJcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcclxuICogfSwgXy5ub3coKSk7XHJcbiAqIC8vID0+IGxvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGZ1bmN0aW9uIHRvIGJlIGludm9rZWRcclxuICovXHJcbnZhciBub3cgPSBEYXRlLm5vdztcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHNcclxuICogaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgaXQgd2FzIGludm9rZWQuXHJcbiAqXHJcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXVxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIChodHRwOi8vZHJ1cGFsbW90aW9uLmNvbS9hcnRpY2xlL2RlYm91bmNlLWFuZC10aHJvdHRsZS12aXN1YWwtZXhwbGFuYXRpb24pXHJcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXHJcbiAqXHJcbiAqIEBzdGF0aWNcclxuICogQG1lbWJlck9mIF9cclxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cclxuICogQGV4YW1wbGVcclxuICpcclxuICogLy8gYXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eFxyXG4gKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xyXG4gKi9cclxuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCkge1xyXG4gICAgdmFyIGFyZ3MsXHJcbiAgICAgICAgcmVzdWx0LFxyXG4gICAgICAgIHN0YW1wLFxyXG4gICAgICAgIHRpbWVvdXRJZCxcclxuICAgICAgICB0cmFpbGluZ0NhbGwsXHJcbiAgICAgICAgbGFzdENhbGxlZCA9IDA7XHJcblxyXG4gICAgd2FpdCA9IHdhaXQgPCAwID8gMCA6ICgrd2FpdCB8fCAwKTtcclxuXHJcbiAgICBmdW5jdGlvbiBkZWxheWVkKCkge1xyXG4gICAgICAgIHZhciByZW1haW5pbmcgPSB3YWl0IC0gKG5vdygpIC0gc3RhbXApO1xyXG4gICAgICAgIGlmIChyZW1haW5pbmcgPD0gMCB8fCByZW1haW5pbmcgPiB3YWl0KSB7XHJcbiAgICAgICAgICAgIHZhciBpc0NhbGxlZCA9IHRyYWlsaW5nQ2FsbDtcclxuICAgICAgICAgICAgdGltZW91dElkID0gdHJhaWxpbmdDYWxsID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBpZiAoaXNDYWxsZWQpIHtcclxuICAgICAgICAgICAgICAgIGxhc3RDYWxsZWQgPSBub3coKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRpbWVvdXRJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyZ3MgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dChkZWxheWVkLCByZW1haW5pbmcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XHJcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcclxuICAgICAgICBzdGFtcCA9IG5vdygpO1xyXG4gICAgICAgIHRyYWlsaW5nQ2FsbCA9IHRydWU7XHJcblxyXG4gICAgICAgIGlmICghdGltZW91dElkKSB7XHJcbiAgICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZGVsYXllZCwgd2FpdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGVib3VuY2VkO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGRlYm91bmNlO1xyXG5cclxufSx7fV0sNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBMby1EYXNoIDIuNC4xIChDdXN0b20gQnVpbGQpIDxodHRwOi8vbG9kYXNoLmNvbS8+XHJcbiAqIENvcHlyaWdodCAyMDEyLTIwMTMgVGhlIERvam8gRm91bmRhdGlvbiA8aHR0cDovL2Rvam9mb3VuZGF0aW9uLm9yZy8+XHJcbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS41LjIgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XHJcbiAqIENvcHlyaWdodCAyMDA5LTIwMTMgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcclxuICogQXZhaWxhYmxlIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxyXG4gKi9cclxuXHJcbnZhciBodG1sRXNjYXBlcyA9IHtcclxuICAgICcmJzogJyZhbXA7JyxcclxuICAgICc8JzogJyZsdDsnLFxyXG4gICAgJz4nOiAnJmd0OycsXHJcbiAgICAnXCInOiAnJnF1b3Q7JyxcclxuICAgIFwiJ1wiOiAnJiMzOTsnXHJcbn07XHJcblxyXG4vKipcclxuICogVXNlZCBieSBgZXNjYXBlYCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy5cclxuICpcclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHtzdHJpbmd9IG1hdGNoIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxyXG4gKi9cclxuZnVuY3Rpb24gZXNjYXBlSHRtbENoYXIobWF0Y2gpIHtcclxuICAgIHJldHVybiBodG1sRXNjYXBlc1ttYXRjaF07XHJcbn1cclxuXHJcbnZhciByZVVuZXNjYXBlZEh0bWwgPSBuZXcgUmVnRXhwKCdbJyArIE9iamVjdC5rZXlzKGh0bWxFc2NhcGVzKS5qb2luKCcnKSArICddJywgJ2cnKTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgY2hhcmFjdGVycyBgJmAsIGA8YCwgYD5gLCBgXCJgLCBhbmQgYCdgIGluIGBzdHJpbmdgIHRvIHRoZWlyXHJcbiAqIGNvcnJlc3BvbmRpbmcgSFRNTCBlbnRpdGllcy5cclxuICpcclxuICogQHN0YXRpY1xyXG4gKiBAbWVtYmVyT2YgX1xyXG4gKiBAY2F0ZWdvcnkgVXRpbGl0aWVzXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBlc2NhcGUuXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBfLmVzY2FwZSgnRnJlZCwgV2lsbWEsICYgUGViYmxlcycpO1xyXG4gKiAvLyA9PiAnRnJlZCwgV2lsbWEsICZhbXA7IFBlYmJsZXMnXHJcbiAqL1xyXG5mdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gc3RyaW5nID8gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZVVuZXNjYXBlZEh0bWwsIGVzY2FwZUh0bWxDaGFyKSA6ICcnO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGVzY2FwZTtcclxuXHJcbn0se31dLDU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG52YXIgJCA9IHdpbmRvdy5qUXVlcnkgfHwgd2luZG93LlplcHRvO1xyXG5cclxudmFyIGRlYm91bmNlID0gX2RlcmVxXygzKTtcclxuXHJcbnZhciBTZWxlY3Rpdml0eSA9IF9kZXJlcV8oOCk7XHJcblxyXG5fZGVyZXFfKDEzKTtcclxuXHJcbi8qKlxyXG4gKiBPcHRpb24gbGlzdGVuZXIgdGhhdCBpbXBsZW1lbnRzIGEgY29udmVuaWVuY2UgcXVlcnkgZnVuY3Rpb24gZm9yIHBlcmZvcm1pbmcgQUpBWCByZXF1ZXN0cy5cclxuICovXHJcblNlbGVjdGl2aXR5Lk9wdGlvbkxpc3RlbmVycy51bnNoaWZ0KGZ1bmN0aW9uKHNlbGVjdGl2aXR5LCBvcHRpb25zKSB7XHJcblxyXG4gICAgdmFyIGFqYXggPSBvcHRpb25zLmFqYXg7XHJcbiAgICBpZiAoYWpheCAmJiBhamF4LnVybCkge1xyXG4gICAgICAgIHZhciBmb3JtYXRFcnJvciA9IGFqYXguZm9ybWF0RXJyb3IgfHwgU2VsZWN0aXZpdHkuTG9jYWxlLmFqYXhFcnJvcjtcclxuICAgICAgICB2YXIgbWluaW11bUlucHV0TGVuZ3RoID0gYWpheC5taW5pbXVtSW5wdXRMZW5ndGggfHwgMDtcclxuICAgICAgICB2YXIgcGFyYW1zID0gYWpheC5wYXJhbXM7XHJcbiAgICAgICAgdmFyIHByb2Nlc3NJdGVtID0gYWpheC5wcm9jZXNzSXRlbSB8fCBmdW5jdGlvbihpdGVtKSB7IHJldHVybiBpdGVtOyB9O1xyXG4gICAgICAgIHZhciBxdWlldE1pbGxpcyA9IGFqYXgucXVpZXRNaWxsaXMgfHwgMDtcclxuICAgICAgICB2YXIgcmVzdWx0c0NiID0gYWpheC5yZXN1bHRzIHx8IGZ1bmN0aW9uKGRhdGEpIHsgcmV0dXJuIHsgcmVzdWx0czogZGF0YSwgbW9yZTogZmFsc2UgfTsgfTtcclxuICAgICAgICB2YXIgdHJhbnNwb3J0ID0gYWpheC50cmFuc3BvcnQgfHwgJC5hamF4O1xyXG5cclxuICAgICAgICBpZiAocXVpZXRNaWxsaXMpIHtcclxuICAgICAgICAgICAgdHJhbnNwb3J0ID0gZGVib3VuY2UodHJhbnNwb3J0LCBxdWlldE1pbGxpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvcHRpb25zLnF1ZXJ5ID0gZnVuY3Rpb24ocXVlcnlPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSBxdWVyeU9wdGlvbnMub2Zmc2V0O1xyXG4gICAgICAgICAgICB2YXIgdGVybSA9IHF1ZXJ5T3B0aW9ucy50ZXJtO1xyXG4gICAgICAgICAgICBpZiAodGVybS5sZW5ndGggPCBtaW5pbXVtSW5wdXRMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5T3B0aW9ucy5lcnJvcihcclxuICAgICAgICAgICAgICAgICAgICBTZWxlY3Rpdml0eS5Mb2NhbGUubmVlZE1vcmVDaGFyYWN0ZXJzKG1pbmltdW1JbnB1dExlbmd0aCAtIHRlcm0ubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciB1cmwgPSAoYWpheC51cmwgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IGFqYXgudXJsKHF1ZXJ5T3B0aW9ucykgOiBhamF4LnVybCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID4gLTEgPyAnJicgOiAnPycpICsgJC5wYXJhbShwYXJhbXModGVybSwgb2Zmc2V0KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSBhamF4LnN1Y2Nlc3M7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBhamF4LmVycm9yO1xyXG5cclxuICAgICAgICAgICAgICAgIHRyYW5zcG9ydCgkLmV4dGVuZCh7fSwgYWpheCwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogdXJsLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEsIHRleHRTdGF0dXMsIGpxWEhSKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzKGRhdGEsIHRleHRTdGF0dXMsIGpxWEhSKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSByZXN1bHRzQ2IoZGF0YSwgb2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5yZXN1bHRzID0gcmVzdWx0cy5yZXN1bHRzLm1hcChwcm9jZXNzSXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5T3B0aW9ucy5jYWxsYmFjayhyZXN1bHRzKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcihqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeU9wdGlvbnMuZXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRFcnJvcih0ZXJtLCBqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBlc2NhcGU6IGZhbHNlIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59KTtcclxuXHJcbn0se1wiMTNcIjoxMyxcIjNcIjozLFwiOFwiOjgsXCJqcXVlcnlcIjpcImpxdWVyeVwifV0sNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBTZWxlY3Rpdml0eSA9IF9kZXJlcV8oOCk7XHJcblxyXG52YXIgbGF0ZXN0UXVlcnlOdW0gPSAwO1xyXG5cclxuLyoqXHJcbiAqIE9wdGlvbiBsaXN0ZW5lciB0aGF0IHdpbGwgZGlzY2FyZCBhbnkgY2FsbGJhY2tzIGZyb20gdGhlIHF1ZXJ5IGZ1bmN0aW9uIGlmIGFub3RoZXIgcXVlcnkgaGFzXHJcbiAqIGJlZW4gY2FsbGVkIGFmdGVyd2FyZHMuIFRoaXMgcHJldmVudHMgcmVzcG9uc2VzIGZyb20gcmVtb3RlIHNvdXJjZXMgYXJyaXZpbmcgb3V0LW9mLW9yZGVyLlxyXG4gKi9cclxuU2VsZWN0aXZpdHkuT3B0aW9uTGlzdGVuZXJzLnB1c2goZnVuY3Rpb24oc2VsZWN0aXZpdHksIG9wdGlvbnMpIHtcclxuXHJcbiAgICB2YXIgcXVlcnkgPSBvcHRpb25zLnF1ZXJ5O1xyXG4gICAgaWYgKHF1ZXJ5ICYmICFxdWVyeS5fYXN5bmMpIHtcclxuICAgICAgICBvcHRpb25zLnF1ZXJ5ID0gZnVuY3Rpb24ocXVlcnlPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGxhdGVzdFF1ZXJ5TnVtKys7XHJcbiAgICAgICAgICAgIHZhciBxdWVyeU51bSA9IGxhdGVzdFF1ZXJ5TnVtO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gcXVlcnlPcHRpb25zLmNhbGxiYWNrO1xyXG4gICAgICAgICAgICB2YXIgZXJyb3IgPSBxdWVyeU9wdGlvbnMuZXJyb3I7XHJcbiAgICAgICAgICAgIHF1ZXJ5T3B0aW9ucy5jYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHF1ZXJ5TnVtID09PSBsYXRlc3RRdWVyeU51bSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHF1ZXJ5T3B0aW9ucy5lcnJvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHF1ZXJ5TnVtID09PSBsYXRlc3RRdWVyeU51bSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHF1ZXJ5KHF1ZXJ5T3B0aW9ucyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBvcHRpb25zLnF1ZXJ5Ll9hc3luYyA9IHRydWU7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxufSx7XCI4XCI6OH1dLDc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG52YXIgJCA9IHdpbmRvdy5qUXVlcnkgfHwgd2luZG93LlplcHRvO1xyXG5cclxudmFyIFNlbGVjdGl2aXR5RHJvcGRvd24gPSBfZGVyZXFfKDEwKTtcclxuXHJcbi8qKlxyXG4gKiBNZXRob2RzLlxyXG4gKi9cclxuJC5leHRlbmQoU2VsZWN0aXZpdHlEcm9wZG93bi5wcm90b3R5cGUsIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0XHJcbiAgICAgKi9cclxuICAgIHJlbW92ZUNsb3NlSGFuZGxlcjogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl8kYmFja2Ryb3AgJiYgIXRoaXMucGFyZW50TWVudSkge1xyXG4gICAgICAgICAgICB0aGlzLl8kYmFja2Ryb3AucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuXyRiYWNrZHJvcCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0XHJcbiAgICAgKi9cclxuICAgIHNldHVwQ2xvc2VIYW5kbGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyICRiYWNrZHJvcDtcclxuICAgICAgICBpZiAodGhpcy5wYXJlbnRNZW51KSB7XHJcbiAgICAgICAgICAgICRiYWNrZHJvcCA9IHRoaXMucGFyZW50TWVudS5fJGJhY2tkcm9wO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICRiYWNrZHJvcCA9ICQoJzxkaXY+JykuYWRkQ2xhc3MoJ3NlbGVjdGl2aXR5LWJhY2tkcm9wJyk7XHJcblxyXG4gICAgICAgICAgICAkKCdib2R5JykuYXBwZW5kKCRiYWNrZHJvcCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkYmFja2Ryb3Aub24oJ2NsaWNrJywgdGhpcy5jbG9zZS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgdGhpcy5fJGJhY2tkcm9wID0gJGJhY2tkcm9wO1xyXG4gICAgfVxyXG5cclxufSk7XHJcblxyXG59LHtcIjEwXCI6MTAsXCJqcXVlcnlcIjpcImpxdWVyeVwifV0sODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciAkID0gd2luZG93LmpRdWVyeSB8fCB3aW5kb3cuWmVwdG87XHJcblxyXG52YXIgRXZlbnREZWxlZ2F0b3IgPSBfZGVyZXFfKDIpO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhIG5ldyBTZWxlY3Rpdml0eSBpbnN0YW5jZSBvciBpbnZva2UgYSBtZXRob2Qgb24gYW4gaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBtZXRob2ROYW1lIE9wdGlvbmFsIG5hbWUgb2YgYSBtZXRob2QgdG8gY2FsbC4gSWYgb21pdHRlZCwgYSBTZWxlY3Rpdml0eSBpbnN0YW5jZSBpc1xyXG4gKiAgICAgICAgICAgICAgICAgICBjcmVhdGVkIGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLiBJZiBhbiBlbGVtZW50IGluIHRoZVxyXG4gKiAgICAgICAgICAgICAgICAgICBzZXQgYWxyZWFkeSBoYXMgYSBTZWxlY3Rpdml0eSBpbnN0YW5jZSwgdGhlIHJlc3VsdCBpcyB0aGUgc2FtZSBhcyBpZiB0aGVcclxuICogICAgICAgICAgICAgICAgICAgc2V0T3B0aW9ucygpIG1ldGhvZCBpcyBjYWxsZWQuIElmIGEgbWV0aG9kIG5hbWUgaXMgZ2l2ZW4sIHRoZSBvcHRpb25zXHJcbiAqICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlciBpcyBpZ25vcmVkIGFuZCBhbnkgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGFyZSBwYXNzZWQgdG8gdGhlIGdpdmVuXHJcbiAqICAgICAgICAgICAgICAgICAgIG1ldGhvZC5cclxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBvYmplY3QgdG8gcGFzcyB0byB0aGUgY29uc3RydWN0b3Igb3IgdGhlIHNldE9wdGlvbnMoKSBtZXRob2QuIEluIGNhc2VcclxuICogICAgICAgICAgICAgICAgYSBuZXcgaW5zdGFuY2UgaXMgYmVpbmcgY3JlYXRlZCwgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIGFyZSB1c2VkOlxyXG4gKiAgICAgICAgICAgICAgICBpbnB1dFR5cGUgLSBUaGUgaW5wdXQgdHlwZSB0byB1c2UuIERlZmF1bHQgaW5wdXQgdHlwZXMgaW5jbHVkZSAnTXVsdGlwbGUnIGFuZFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU2luZ2xlJywgYnV0IHlvdSBjYW4gYWRkIGN1c3RvbSBpbnB1dCB0eXBlcyB0byB0aGUgSW5wdXRUeXBlcyBtYXAgb3JcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAganVzdCBzcGVjaWZ5IG9uZSBoZXJlIGFzIGEgZnVuY3Rpb24uIFRoZSBkZWZhdWx0IHZhbHVlIGlzICdTaW5nbGUnLFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmxlc3MgbXVsdGlwbGUgaXMgdHJ1ZSBpbiB3aGljaCBjYXNlIGl0IGlzICdNdWx0aXBsZScuXHJcbiAqICAgICAgICAgICAgICAgIG11bHRpcGxlIC0gQm9vbGVhbiBkZXRlcm1pbmluZyB3aGV0aGVyIG11bHRpcGxlIGl0ZW1zIG1heSBiZSBzZWxlY3RlZFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIChkZWZhdWx0OiBmYWxzZSkuIElmIHRydWUsIGEgTXVsdGlwbGVTZWxlY3Rpdml0eSBpbnN0YW5jZSBpcyBjcmVhdGVkLFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyd2lzZSBhIFNpbmdsZVNlbGVjdGl2aXR5IGluc3RhbmNlIGlzIGNyZWF0ZWQuXHJcbiAqXHJcbiAqIEByZXR1cm4gSWYgdGhlIGdpdmVuIG1ldGhvZCByZXR1cm5zIGEgdmFsdWUsIHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIHZhbHVlIG9mIHRoYXQgbWV0aG9kXHJcbiAqICAgICAgICAgZXhlY3V0ZWQgb24gdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLlxyXG4gKi9cclxuZnVuY3Rpb24gc2VsZWN0aXZpdHkobWV0aG9kTmFtZSwgb3B0aW9ucykge1xyXG4gICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xyXG5cclxuICAgIHZhciBtZXRob2RBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcclxuICAgIHZhciByZXN1bHQ7XHJcblxyXG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuc2VsZWN0aXZpdHk7XHJcblxyXG4gICAgICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBpZiAoJC50eXBlKG1ldGhvZE5hbWUpICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kQXJncyA9IFttZXRob2ROYW1lXTtcclxuICAgICAgICAgICAgICAgIG1ldGhvZE5hbWUgPSAnc2V0T3B0aW9ucyc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgkLnR5cGUoaW5zdGFuY2VbbWV0aG9kTmFtZV0pID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpbnN0YW5jZVttZXRob2ROYW1lXS5hcHBseShpbnN0YW5jZSwgbWV0aG9kQXJncyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbWV0aG9kOiAnICsgbWV0aG9kTmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoJC50eXBlKG1ldGhvZE5hbWUpID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1ldGhvZE5hbWUgIT09ICdkZXN0cm95Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNhbGwgbWV0aG9kIG9uIGVsZW1lbnQgd2l0aG91dCBTZWxlY3Rpdml0eSBpbnN0YW5jZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBtZXRob2ROYW1lLCB7IGVsZW1lbnQ6IHRoaXMgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBhIG9uZS10aW1lIGhhY2sgdG8gZmFjaWxpdGF0ZSB0aGUgc2VsZWN0aXZpdHktdHJhZGl0aW9uYWwgbW9kdWxlLCBiZWNhdXNlXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgbW9kdWxlIGlzIG5vdCBhYmxlIHRvIGhvb2sgdGhpcyBlYXJseSBpbnRvIGNyZWF0aW9uIG9mIHRoZSBpbnN0YW5jZVxyXG4gICAgICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIGlmICgkdGhpcy5pcygnc2VsZWN0JykgJiYgJHRoaXMucHJvcCgnbXVsdGlwbGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMubXVsdGlwbGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHZhciBJbnB1dFR5cGVzID0gU2VsZWN0aXZpdHkuSW5wdXRUeXBlcztcclxuICAgICAgICAgICAgICAgIHZhciBJbnB1dFR5cGUgPSAob3B0aW9ucy5pbnB1dFR5cGUgfHwgKG9wdGlvbnMubXVsdGlwbGUgPyAnTXVsdGlwbGUnIDogJ1NpbmdsZScpKTtcclxuICAgICAgICAgICAgICAgIGlmICgkLnR5cGUoSW5wdXRUeXBlKSAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChJbnB1dFR5cGVzW0lucHV0VHlwZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSW5wdXRUeXBlID0gSW5wdXRUeXBlc1tJbnB1dFR5cGVdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBTZWxlY3Rpdml0eSBpbnB1dCB0eXBlOiAnICsgSW5wdXRUeXBlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpdml0eSA9IG5ldyBJbnB1dFR5cGUob3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gKHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gdGhpcyA6IHJlc3VsdCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZWxlY3Rpdml0eSBCYXNlIENvbnN0cnVjdG9yLlxyXG4gKlxyXG4gKiBZb3Ugd2lsbCBuZXZlciB1c2UgdGhpcyBjb25zdHJ1Y3RvciBkaXJlY3RseS4gSW5zdGVhZCwgeW91IHVzZSAkKHNlbGVjdG9yKS5zZWxlY3Rpdml0eShvcHRpb25zKVxyXG4gKiB0byBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgZWl0aGVyIE11bHRpcGxlU2VsZWN0aXZpdHkgb3IgU2luZ2xlU2VsZWN0aXZpdHkuIFRoaXMgY2xhc3MgZGVmaW5lcyBhbGxcclxuICogZnVuY3Rpb25hbGl0eSB0aGF0IGlzIGNvbW1vbiBiZXR3ZWVuIGJvdGguXHJcbiAqXHJcbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0LiBBY2NlcHRzIHRoZSBzYW1lIG9wdGlvbnMgYXMgdGhlIHNldE9wdGlvbnMgbWV0aG9kKCksIGluIGFkZGl0aW9uXHJcbiAqICAgICAgICAgICAgICAgIHRvIHRoZSBmb2xsb3dpbmcgb25lczpcclxuICogICAgICAgICAgICAgICAgZGF0YSAtIEluaXRpYWwgc2VsZWN0aW9uIGRhdGEgdG8gc2V0LiBUaGlzIHNob3VsZCBiZSBhbiBhcnJheSBvZiBvYmplY3RzIHdpdGggJ2lkJ1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgYW5kICd0ZXh0JyBwcm9wZXJ0aWVzLiBUaGlzIG9wdGlvbiBpcyBtdXR1YWxseSBleGNsdXNpdmUgd2l0aCAndmFsdWUnLlxyXG4gKiAgICAgICAgICAgICAgICBlbGVtZW50IC0gVGhlIERPTSBlbGVtZW50IHRvIHdoaWNoIHRvIGF0dGFjaCB0aGUgU2VsZWN0aXZpdHkgaW5zdGFuY2UuIFRoaXNcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5IGlzIHNldCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSAkLmZuLnNlbGVjdGl2aXR5KCkgZnVuY3Rpb24uXHJcbiAqICAgICAgICAgICAgICAgIHZhbHVlIC0gSW5pdGlhbCB2YWx1ZSB0byBzZXQuIFRoaXMgc2hvdWxkIGJlIGFuIGFycmF5IG9mIElEcy4gVGhpcyBwcm9wZXJ0eSBpc1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIG11dHVhbGx5IGV4Y2x1c2l2ZSB3aXRoICdkYXRhJy5cclxuICovXHJcbmZ1bmN0aW9uIFNlbGVjdGl2aXR5KG9wdGlvbnMpIHtcclxuXHJcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU2VsZWN0aXZpdHkpKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdGl2aXR5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBqUXVlcnkgY29udGFpbmVyIGZvciB0aGUgZWxlbWVudCB0byB3aGljaCB0aGlzIGluc3RhbmNlIGlzIGF0dGFjaGVkLlxyXG4gICAgICovXHJcbiAgICB0aGlzLiRlbCA9ICQob3B0aW9ucy5lbGVtZW50KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGpRdWVyeSBjb250YWluZXIgZm9yIHRoZSBzZWFyY2ggaW5wdXQuXHJcbiAgICAgKlxyXG4gICAgICogTWF5IGJlIG51bGwgYXMgbG9uZyBhcyB0aGVyZSBpcyBubyB2aXNpYmxlIHNlYXJjaCBpbnB1dC4gSXQgaXMgc2V0IGJ5IGluaXRTZWFyY2hJbnB1dCgpLlxyXG4gICAgICovXHJcbiAgICB0aGlzLiRzZWFyY2hJbnB1dCA9IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnRseSBvcGVuIGRyb3Bkb3duLlxyXG4gICAgICovXHJcbiAgICB0aGlzLmRyb3Bkb3duID0gbnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgdGhlIGlucHV0IGlzIGVuYWJsZWQuXHJcbiAgICAgKlxyXG4gICAgICogVGhpcyBpcyBmYWxzZSB3aGVuIHRoZSBvcHRpb24gcmVhZE9ubHkgaXMgZmFsc2Ugb3IgdGhlIG9wdGlvbiByZW1vdmVPbmx5IGlzIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQm9vbGVhbiB3aGV0aGVyIHRoZSBicm93c2VyIGhhcyB0b3VjaCBpbnB1dC5cclxuICAgICAqL1xyXG4gICAgdGhpcy5oYXNUb3VjaCA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQm9vbGVhbiB3aGV0aGVyIHRoZSBicm93c2VyIGhhcyBhIHBoeXNpY2FsIGtleWJvYXJkIGF0dGFjaGVkIHRvIGl0LlxyXG4gICAgICpcclxuICAgICAqIEdpdmVuIHRoYXQgdGhlcmUgaXMgbm8gd2F5IGZvciBKYXZhU2NyaXB0IHRvIHJlbGlhYmx5IGRldGVjdCB0aGlzIHlldCwgd2UganVzdCBhc3N1bWUgaXQnc1xyXG4gICAgICogdGhlIG9wcG9zaXRlIG9mIGhhc1RvdWNoIGZvciBub3cuXHJcbiAgICAgKi9cclxuICAgIHRoaXMuaGFzS2V5Ym9hcmQgPSAhdGhpcy5oYXNUb3VjaDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFycmF5IG9mIGl0ZW1zIGZyb20gd2hpY2ggdG8gc2VsZWN0LiBJZiBzZXQsIHRoaXMgd2lsbCBiZSBhbiBhcnJheSBvZiBvYmplY3RzIHdpdGggJ2lkJyBhbmRcclxuICAgICAqICd0ZXh0JyBwcm9wZXJ0aWVzLlxyXG4gICAgICpcclxuICAgICAqIElmIGdpdmVuLCBhbGwgaXRlbXMgYXJlIGV4cGVjdGVkIHRvIGJlIGF2YWlsYWJsZSBsb2NhbGx5IGFuZCBhbGwgc2VsZWN0aW9uIG9wZXJhdGlvbnMgb3BlcmF0ZVxyXG4gICAgICogb24gdGhpcyBsb2NhbCBhcnJheSBvbmx5LiBJZiBudWxsLCBpdGVtcyBhcmUgbm90IGF2YWlsYWJsZSBsb2NhbGx5LCBhbmQgYSBxdWVyeSBmdW5jdGlvblxyXG4gICAgICogc2hvdWxkIGJlIHByb3ZpZGVkIHRvIGZldGNoIHJlbW90ZSBkYXRhLlxyXG4gICAgICovXHJcbiAgICB0aGlzLml0ZW1zID0gbnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciBtYXRjaGluZyBzZWFyY2ggcmVzdWx0cy5cclxuICAgICAqL1xyXG4gICAgdGhpcy5tYXRjaGVyID0gU2VsZWN0aXZpdHkubWF0Y2hlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE9wdGlvbnMgcGFzc2VkIHRvIHRoZSBTZWxlY3Rpdml0eSBpbnN0YW5jZSBvciBzZXQgdGhyb3VnaCBzZXRPcHRpb25zKCkuXHJcbiAgICAgKi9cclxuICAgIHRoaXMub3B0aW9ucyA9IHt9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXJyYXkgb2Ygc2VhcmNoIGlucHV0IGxpc3RlbmVycy5cclxuICAgICAqXHJcbiAgICAgKiBDdXN0b20gbGlzdGVuZXJzIGNhbiBiZSBzcGVjaWZpZWQgaW4gdGhlIG9wdGlvbnMgb2JqZWN0LlxyXG4gICAgICovXHJcbiAgICB0aGlzLnNlYXJjaElucHV0TGlzdGVuZXJzID0gU2VsZWN0aXZpdHkuU2VhcmNoSW5wdXRMaXN0ZW5lcnM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXBwaW5nIG9mIHRlbXBsYXRlcy5cclxuICAgICAqXHJcbiAgICAgKiBDdXN0b20gdGVtcGxhdGVzIGNhbiBiZSBzcGVjaWZpZWQgaW4gdGhlIG9wdGlvbnMgb2JqZWN0LlxyXG4gICAgICovXHJcbiAgICB0aGlzLnRlbXBsYXRlcyA9ICQuZXh0ZW5kKHt9LCBTZWxlY3Rpdml0eS5UZW1wbGF0ZXMpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGxhc3QgdXNlZCBzZWFyY2ggdGVybS5cclxuICAgICAqL1xyXG4gICAgdGhpcy50ZXJtID0gJyc7XHJcblxyXG4gICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xyXG5cclxuICAgIGlmIChvcHRpb25zLnZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZShvcHRpb25zLnZhbHVlLCB7IHRyaWdnZXJDaGFuZ2U6IGZhbHNlIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmRhdGEob3B0aW9ucy5kYXRhIHx8IG51bGwsIHsgdHJpZ2dlckNoYW5nZTogZmFsc2UgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy4kZWwub24oJ21vdXNlb3ZlcicsIHRoaXMuX21vdXNlb3Zlci5iaW5kKHRoaXMpKTtcclxuICAgIHRoaXMuJGVsLm9uKCdtb3VzZWxlYXZlJywgdGhpcy5fbW91c2VvdXQuYmluZCh0aGlzKSk7XHJcbiAgICB0aGlzLiRlbC5vbignc2VsZWN0aXZpdHktY2xvc2UnLCB0aGlzLl9jbG9zZWQuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgRXZlbnREZWxlZ2F0b3IuY2FsbCh0aGlzKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1ldGhvZHMuXHJcbiAqL1xyXG4kLmV4dGVuZChTZWxlY3Rpdml0eS5wcm90b3R5cGUsIEV2ZW50RGVsZWdhdG9yLnByb3RvdHlwZSwge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVuaWVuY2Ugc2hvcnRjdXQgZm9yIHRoaXMuJGVsLmZpbmQoc2VsZWN0b3IpLlxyXG4gICAgICovXHJcbiAgICAkOiBmdW5jdGlvbihzZWxlY3Rvcikge1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy4kZWwuZmluZChzZWxlY3Rvcik7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2xvc2VzIHRoZSBkcm9wZG93bi5cclxuICAgICAqL1xyXG4gICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5kcm9wZG93bikge1xyXG4gICAgICAgICAgICB0aGlzLmRyb3Bkb3duLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgb3IgZ2V0cyB0aGUgc2VsZWN0aW9uIGRhdGEuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIHNlbGVjdGlvbiBkYXRhIGNvbnRhaW5zIGJvdGggSURzIGFuZCB0ZXh0IGxhYmVscy4gSWYgeW91IG9ubHkgd2FudCB0byBzZXQgb3IgZ2V0IHRoZSBJRHMsXHJcbiAgICAgKiB5b3Ugc2hvdWxkIHVzZSB0aGUgdmFsdWUoKSBtZXRob2QuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5ld0RhdGEgT3B0aW9uYWwgbmV3IGRhdGEgdG8gc2V0LiBGb3IgYSBNdWx0aXBsZVNlbGVjdGl2aXR5IGluc3RhbmNlIHRoZSBkYXRhIG11c3QgYmVcclxuICAgICAqICAgICAgICAgICAgICAgIGFuIGFycmF5IG9mIG9iamVjdHMgd2l0aCAnaWQnIGFuZCAndGV4dCcgcHJvcGVydGllcywgZm9yIGEgU2luZ2xlU2VsZWN0aXZpdHlcclxuICAgICAqICAgICAgICAgICAgICAgIGluc3RhbmNlIHRoZSBkYXRhIG11c3QgYmUgYSBzaW5nbGUgc3VjaCBvYmplY3Qgb3IgbnVsbCB0byBpbmRpY2F0ZSBubyBpdGVtIGlzXHJcbiAgICAgKiAgICAgICAgICAgICAgICBzZWxlY3RlZC5cclxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0LiBNYXkgY29udGFpbiB0aGUgZm9sbG93aW5nIHByb3BlcnR5OlxyXG4gICAgICogICAgICAgICAgICAgICAgdHJpZ2dlckNoYW5nZSAtIFNldCB0byBmYWxzZSB0byBzdXBwcmVzcyB0aGUgXCJjaGFuZ2VcIiBldmVudCBiZWluZyB0cmlnZ2VyZWQuXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm90ZSB0aGlzIHdpbGwgYWxzbyBjYXVzZSB0aGUgVUkgdG8gbm90IHVwZGF0ZSBhdXRvbWF0aWNhbGx5O1xyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvIHlvdSBtYXkgd2FudCB0byBjYWxsIHJlcmVuZGVyU2VsZWN0aW9uKCkgbWFudWFsbHkgd2hlblxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzaW5nIHRoaXMgb3B0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4gSWYgbmV3RGF0YSBpcyBvbWl0dGVkLCB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSBjdXJyZW50IGRhdGEuXHJcbiAgICAgKi9cclxuICAgIGRhdGE6IGZ1bmN0aW9uKG5ld0RhdGEsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gICAgICAgIGlmIChuZXdEYXRhID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbmV3RGF0YSA9IHRoaXMudmFsaWRhdGVEYXRhKG5ld0RhdGEpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IG5ld0RhdGE7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5nZXRWYWx1ZUZvckRhdGEobmV3RGF0YSk7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy50cmlnZ2VyQ2hhbmdlICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyQ2hhbmdlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVzdHJveXMgdGhlIFNlbGVjdGl2aXR5IGluc3RhbmNlLlxyXG4gICAgICovXHJcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdGhpcy51bmRlbGVnYXRlRXZlbnRzKCk7XHJcblxyXG4gICAgICAgIHZhciAkZWwgPSB0aGlzLiRlbDtcclxuICAgICAgICAkZWwuY2hpbGRyZW4oKS5yZW1vdmUoKTtcclxuICAgICAgICAkZWxbMF0uc2VsZWN0aXZpdHkgPSBudWxsO1xyXG4gICAgICAgICRlbCA9IG51bGw7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmlsdGVycyB0aGUgcmVzdWx0cyB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIGRyb3Bkb3duLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHNpbXBseSByZXR1cm5zIHRoZSByZXN1bHRzIHVuZmlsdGVyZWQsIGJ1dCB0aGUgTXVsdGlwbGVTZWxlY3Rpdml0eVxyXG4gICAgICogY2xhc3Mgb3ZlcnJpZGVzIHRoaXMgbWV0aG9kIHRvIGZpbHRlciBvdXQgYW55IGl0ZW1zIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gc2VsZWN0ZWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHJlc3VsdHMgQXJyYXkgb2YgaXRlbXMgd2l0aCAnaWQnIGFuZCAndGV4dCcgcHJvcGVydGllcy5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIFRoZSBmaWx0ZXJlZCBhcnJheS5cclxuICAgICAqL1xyXG4gICAgZmlsdGVyUmVzdWx0czogZnVuY3Rpb24ocmVzdWx0cykge1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0cztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBsaWVzIGZvY3VzIHRvIHRoZSBpbnB1dC5cclxuICAgICAqL1xyXG4gICAgZm9jdXM6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy4kc2VhcmNoSW5wdXQpIHtcclxuICAgICAgICAgICAgdGhpcy4kc2VhcmNoSW5wdXQuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgY29ycmVjdCBpdGVtIGZvciBhIGdpdmVuIElELlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpZCBUaGUgSUQgdG8gZ2V0IHRoZSBpdGVtIGZvci5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIFRoZSBjb3JyZXNwb25kaW5nIGl0ZW0uIFdpbGwgYmUgYW4gb2JqZWN0IHdpdGggJ2lkJyBhbmQgJ3RleHQnIHByb3BlcnRpZXMgb3IgbnVsbCBpZlxyXG4gICAgICogICAgICAgICB0aGUgaXRlbSBjYW5ub3QgYmUgZm91bmQuIE5vdGUgdGhhdCBpZiBubyBpdGVtcyBhcmUgZGVmaW5lZCwgdGhpcyBtZXRob2QgYXNzdW1lcyB0aGVcclxuICAgICAqICAgICAgICAgdGV4dCBsYWJlbHMgd2lsbCBiZSBlcXVhbCB0byB0aGUgSURzLlxyXG4gICAgICovXHJcbiAgICBnZXRJdGVtRm9ySWQ6IGZ1bmN0aW9uKGlkKSB7XHJcblxyXG4gICAgICAgIHZhciBpdGVtcyA9IHRoaXMuaXRlbXM7XHJcbiAgICAgICAgaWYgKGl0ZW1zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTZWxlY3Rpdml0eS5maW5kTmVzdGVkQnlJZChpdGVtcywgaWQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IGlkOiBpZCwgdGV4dDogJycgKyBpZCB9O1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgc2VhcmNoIGlucHV0IGVsZW1lbnQuXHJcbiAgICAgKlxyXG4gICAgICogU2V0cyB0aGUgJHNlYXJjaElucHV0IHByb3BlcnR5LCBpbnZva2VzIGFsbCBzZWFyY2ggaW5wdXQgbGlzdGVuZXJzIGFuZCBhdHRhY2hlcyB0aGUgZGVmYXVsdFxyXG4gICAgICogYWN0aW9uIG9mIHNlYXJjaGluZyB3aGVuIHNvbWV0aGluZyBpcyB0eXBlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gJGlucHV0IGpRdWVyeSBjb250YWluZXIgZm9yIHRoZSBpbnB1dCBlbGVtZW50LlxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QuIE1heSBjb250YWluIHRoZSBmb2xsb3dpbmcgcHJvcGVydHk6XHJcbiAgICAgKiAgICAgICAgICAgICAgICBub1NlYXJjaCAtIElmIHRydWUsIG5vIGV2ZW50IGhhbmRsZXJzIGFyZSBzZXR1cCB0byBpbml0aWF0ZSBzZWFyY2hpbmcgd2hlblxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgdXNlciB0eXBlcyBpbiB0aGUgaW5wdXQgZmllbGQuIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSB3YW50IHRvXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZSB0aGUgaW5wdXQgb25seSB0byBoYW5kbGUga2V5Ym9hcmQgc3VwcG9ydC5cclxuICAgICAqL1xyXG4gICAgaW5pdFNlYXJjaElucHV0OiBmdW5jdGlvbigkaW5wdXQsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy4kc2VhcmNoSW5wdXQgPSAkaW5wdXQ7XHJcblxyXG4gICAgICAgIHRoaXMuc2VhcmNoSW5wdXRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbihsaXN0ZW5lcikge1xyXG4gICAgICAgICAgICBsaXN0ZW5lcih0aGlzLCAkaW5wdXQpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5ub1NlYXJjaCkge1xyXG4gICAgICAgICAgICAkaW5wdXQub24oJ2tleXVwJywgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPcGVucyB0aGUgZHJvcGRvd24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QuIE1heSBjb250YWluIHRoZSBmb2xsb3dpbmcgcHJvcGVydHk6XHJcbiAgICAgKiAgICAgICAgICAgICAgICBzZWFyY2ggLSBCb29sZWFuIHdoZXRoZXIgdGhlIGRyb3Bkb3duIHNob3VsZCBiZSBpbml0aWFsaXplZCBieSBwZXJmb3JtaW5nIGFcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaCBmb3IgdGhlIGVtcHR5IHN0cmluZyAoaWUuIGRpc3BsYXkgYWxsIHJlc3VsdHMpLiBEZWZhdWx0IGlzXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlLlxyXG4gICAgICogICAgICAgICAgICAgICAgc2hvd1NlYXJjaElucHV0IC0gQm9vbGVhbiB3aGV0aGVyIGEgc2VhcmNoIGlucHV0IHNob3VsZCBiZSBzaG93biBpbiB0aGVcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLiBEZWZhdWx0IGlzIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBvcGVuOiBmdW5jdGlvbihvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuZHJvcGRvd24pIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudHJpZ2dlckV2ZW50KCdzZWxlY3Rpdml0eS1vcGVuaW5nJykpIHtcclxuICAgICAgICAgICAgICAgIHZhciBEcm9wZG93biA9IHRoaXMub3B0aW9ucy5kcm9wZG93biB8fCBTZWxlY3Rpdml0eS5Ecm9wZG93bjtcclxuICAgICAgICAgICAgICAgIGlmIChEcm9wZG93bikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJvcGRvd24gPSBuZXcgRHJvcGRvd24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogdGhpcy5pdGVtcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHRoaXMub3B0aW9ucy5wb3NpdGlvbkRyb3Bkb3duLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeTogdGhpcy5vcHRpb25zLnF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpdml0eTogdGhpcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1NlYXJjaElucHV0OiBvcHRpb25zLnNob3dTZWFyY2hJbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNlYXJjaCAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaCgnJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGVsLmNoaWxkcmVuKCkudG9nZ2xlQ2xhc3MoJ29wZW4nLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogKFJlLSlwb3NpdGlvbnMgdGhlIGRyb3Bkb3duLlxyXG4gICAgICovXHJcbiAgICBwb3NpdGlvbkRyb3Bkb3duOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZHJvcGRvd24pIHtcclxuICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5wb3NpdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZWFyY2hlcyBmb3IgcmVzdWx0cyBiYXNlZCBvbiB0aGUgdGVybSBnaXZlbiBvciB0aGUgdGVybSBlbnRlcmVkIGluIHRoZSBzZWFyY2ggaW5wdXQuXHJcbiAgICAgKlxyXG4gICAgICogSWYgYW4gaXRlbXMgYXJyYXkgaGFzIGJlZW4gcGFzc2VkIHdpdGggdGhlIG9wdGlvbnMgdG8gdGhlIFNlbGVjdGl2aXR5IGluc3RhbmNlLCBhIGxvY2FsXHJcbiAgICAgKiBzZWFyY2ggd2lsbCBiZSBwZXJmb3JtZWQgYW1vbmcgdGhvc2UgaXRlbXMuIE90aGVyd2lzZSwgdGhlIHF1ZXJ5IGZ1bmN0aW9uIHNwZWNpZmllZCBpbiB0aGVcclxuICAgICAqIG9wdGlvbnMgd2lsbCBiZSB1c2VkIHRvIHBlcmZvcm0gdGhlIHNlYXJjaC4gSWYgbmVpdGhlciBpcyBkZWZpbmVkLCBub3RoaW5nIGhhcHBlbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHRlcm0gT3B0aW9uYWwgdGVybSB0byBzZWFyY2ggZm9yLiBJZiBvbW1pdHRlZCwgdGhlIHZhbHVlIG9mIHRoZSBzZWFyY2ggaW5wdXQgZWxlbWVudFxyXG4gICAgICogICAgICAgICAgICAgaXMgdXNlZCBhcyB0ZXJtLlxyXG4gICAgICovXHJcbiAgICBzZWFyY2g6IGZ1bmN0aW9uKHRlcm0pIHtcclxuXHJcbiAgICAgICAgaWYgKHRlcm0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0ZXJtID0gKHRoaXMuJHNlYXJjaElucHV0ID8gdGhpcy4kc2VhcmNoSW5wdXQudmFsKCkgOiAnJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm9wZW4oeyBzZWFyY2g6IGZhbHNlIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5kcm9wZG93bikge1xyXG4gICAgICAgICAgICB0aGlzLmRyb3Bkb3duLnNlYXJjaCh0ZXJtKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyBvbmUgb3IgbW9yZSBvcHRpb25zIG9uIHRoaXMgU2VsZWN0aXZpdHkgaW5zdGFuY2UuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBvYmplY3QuIE1heSBjb250YWluIG9uZSBvciBtb3JlIG9mIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcclxuICAgICAqICAgICAgICAgICAgICAgIGNsb3NlT25TZWxlY3QgLSBTZXQgdG8gZmFsc2UgdG8ga2VlcCB0aGUgZHJvcGRvd24gb3BlbiBhZnRlciB0aGUgdXNlciBoYXNcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCBhbiBpdGVtLiBUaGlzIGlzIHVzZWZ1bCBpZiB5b3Ugd2FudCB0byBhbGxvdyB0aGUgdXNlclxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHF1aWNrbHkgc2VsZWN0IG11bHRpcGxlIGl0ZW1zLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxyXG4gICAgICogICAgICAgICAgICAgICAgZHJvcGRvd24gLSBDdXN0b20gZHJvcGRvd24gaW1wbGVtZW50YXRpb24gdG8gdXNlIGZvciB0aGlzIGluc3RhbmNlLlxyXG4gICAgICogICAgICAgICAgICAgICAgaW5pdFNlbGVjdGlvbiAtIEZ1bmN0aW9uIHRvIG1hcCB2YWx1ZXMgYnkgSUQgdG8gc2VsZWN0aW9uIGRhdGEuIFRoaXMgZnVuY3Rpb25cclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZlcyB0d28gYXJndW1lbnRzLCAndmFsdWUnIGFuZCAnY2FsbGJhY2snLiBUaGUgdmFsdWUgaXNcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgc2VsZWN0aW9uLCB3aGljaCBpcyBhbiBJRCBvciBhbiBhcnJheVxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIElEcyBkZXBlbmRpbmcgb24gdGhlIGlucHV0IHR5cGUuIFRoZSBjYWxsYmFjayBzaG91bGQgYmVcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZva2VkIHdpdGggYW4gb2JqZWN0IG9yIGFycmF5IG9mIG9iamVjdHMsIHJlc3BlY3RpdmVseSxcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluaW5nICdpZCcgYW5kICd0ZXh0JyBwcm9wZXJ0aWVzLlxyXG4gICAgICogICAgICAgICAgICAgICAgaXRlbXMgLSBBcnJheSBvZiBpdGVtcyBmcm9tIHdoaWNoIHRvIHNlbGVjdC4gU2hvdWxkIGJlIGFuIGFycmF5IG9mIG9iamVjdHNcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCAnaWQnIGFuZCAndGV4dCcgcHJvcGVydGllcy4gQXMgY29udmVuaWVuY2UsIHlvdSBtYXkgYWxzbyBwYXNzIGFuXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5IG9mIHN0cmluZ3MsIGluIHdoaWNoIGNhc2UgdGhlIHNhbWUgc3RyaW5nIGlzIHVzZWQgZm9yIGJvdGggdGhlXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICdpZCcgYW5kICd0ZXh0JyBwcm9wZXJ0aWVzLiBJZiBpdGVtcyBhcmUgZ2l2ZW4sIGFsbCBpdGVtcyBhcmUgZXhwZWN0ZWRcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgYXZhaWxhYmxlIGxvY2FsbHkgYW5kIGFsbCBzZWxlY3Rpb24gb3BlcmF0aW9ucyBvcGVyYXRlIG9uIHRoaXNcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgYXJyYXkgb25seS4gSWYgbnVsbCwgaXRlbXMgYXJlIG5vdCBhdmFpbGFibGUgbG9jYWxseSwgYW5kIGFcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkgZnVuY3Rpb24gc2hvdWxkIGJlIHByb3ZpZGVkIHRvIGZldGNoIHJlbW90ZSBkYXRhLlxyXG4gICAgICogICAgICAgICAgICAgICAgbWF0Y2hlciAtIEZ1bmN0aW9uIHRvIGRldGVybWluZSB3aGV0aGVyIHRleHQgbWF0Y2hlcyBhIGdpdmVuIHNlYXJjaCB0ZXJtLiBOb3RlXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IHVzZWQgaWYgeW91IGhhdmUgc3BlY2lmaWVkIGFuIGFycmF5IG9mIGl0ZW1zLlxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIFJlY2VpdmVzIHR3byBhcmd1bWVudHM6XHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSAtIFRoZSBpdGVtIHRoYXQgc2hvdWxkIG1hdGNoIHRoZSBzZWFyY2ggdGVybS5cclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXJtIC0gVGhlIHNlYXJjaCB0ZXJtLiBOb3RlIHRoYXQgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIHRoZSB0ZXJtXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhcyBhbHdheXMgYmVlbiBhbHJlYWR5IHByb2Nlc3NlZCB1c2luZ1xyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWxlY3Rpdml0eS50cmFuc2Zvcm1UZXh0KCkuXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIG1ldGhvZCBzaG91bGQgcmV0dXJuIHRoZSBpdGVtIGlmIGl0IG1hdGNoZXMsIGFuZCBudWxsIG90aGVyd2lzZS5cclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBJZiB0aGUgaXRlbSBoYXMgYSBjaGlsZHJlbiBhcnJheSwgdGhlIG1hdGNoZXIgaXMgZXhwZWN0ZWQgdG8gZmlsdGVyXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhvc2UgaXRzZWxmIChiZSBzdXJlIHRvIG9ubHkgcmV0dXJuIHRoZSBmaWx0ZXJlZCBhcnJheSBvZiBjaGlsZHJlblxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSByZXR1cm5lZCBpdGVtIGFuZCBub3QgdG8gbW9kaWZ5IHRoZSBjaGlsZHJlbiBvZiB0aGUgaXRlbVxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50KS5cclxuICAgICAqICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyIC0gUGxhY2Vob2xkZXIgdGV4dCB0byBkaXNwbGF5IHdoZW4gdGhlIGVsZW1lbnQgaGFzIG5vIGZvY3VzIGFuZFxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBubyBzZWxlY3RlZCBpdGVtcy5cclxuICAgICAqICAgICAgICAgICAgICAgIHBvc2l0aW9uRHJvcGRvd24gLSBGdW5jdGlvbiB0byBwb3NpdGlvbiB0aGUgZHJvcGRvd24uIFJlY2VpdmVzIHR3byBhcmd1bWVudHM6XHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGRyb3Bkb3duRWwgLSBUaGUgZWxlbWVudCB0byBiZSBwb3NpdGlvbmVkLlxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzZWxlY3RFbCAtIFRoZSBlbGVtZW50IG9mIHRoZSBTZWxlY3Rpdml0eSBpbnN0YW5jZSwgdGhhdFxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdSBjYW4gcG9zaXRpb24gdGhlIGRyb3Bkb3duIHRvLlxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHBvc2l0aW9ucyB0aGUgZHJvcGRvd24gZWxlbWVudFxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVyIHRoZSBTZWxlY3Rpdml0eSdzIGVsZW1lbnQgYW5kIGdpdmVzIGl0IHRoZSBzYW1lXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGguXHJcbiAgICAgKiAgICAgICAgICAgICAgICBxdWVyeSAtIEZ1bmN0aW9uIHRvIHVzZSBmb3IgcXVlcnlpbmcgaXRlbXMuIFJlY2VpdmVzIGEgc2luZ2xlIG9iamVjdCBhc1xyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgLSBDYWxsYmFjayB0byBpbnZva2Ugd2hlbiB0aGUgcmVzdWx0cyBhcmUgYXZhaWxhYmxlLiBUaGlzXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgc2hvdWxkIGJlIHBhc3NlZCBhIHNpbmdsZSBvYmplY3QgYXMgYXJndW1lbnQgd2l0aFxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlIC0gQm9vbGVhbiB0aGF0IGNhbiBiZSBzZXQgdG8gdHJ1ZSB0byBpbmRpY2F0ZSB0aGVyZVxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgbW9yZSByZXN1bHRzIGF2YWlsYWJsZS4gQWRkaXRpb25hbCByZXN1bHRzIG1heVxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBmZXRjaGVkIGJ5IHRoZSB1c2VyIHRocm91Z2ggcGFnaW5hdGlvbi5cclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzIC0gQXJyYXkgb2YgcmVzdWx0IGl0ZW1zLiBUaGUgZm9ybWF0IGZvciB0aGUgcmVzdWx0XHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zIGlzIHRoZSBzYW1lIGFzIGZvciBwYXNzaW5nIGxvY2FsIGl0ZW1zLlxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgLSBUaGlzIHByb3BlcnR5IGlzIG9ubHkgdXNlZCBmb3IgcGFnaW5hdGlvbiBhbmQgaW5kaWNhdGVzIGhvd1xyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW55IHJlc3VsdHMgc2hvdWxkIGJlIHNraXBwZWQgd2hlbiByZXR1cm5pbmcgbW9yZSByZXN1bHRzLlxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpdml0eSAtIFRoZSBTZWxlY3Rpdml0eSBpbnN0YW5jZSB0aGUgcXVlcnkgZnVuY3Rpb24gaXMgdXNlZCBvbi5cclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgdGVybSAtIFRoZSBzZWFyY2ggdGVybSB0aGUgdXNlciBpcyBzZWFyY2hpbmcgZm9yLiBVbmxpa2Ugd2l0aCB0aGVcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXIgZnVuY3Rpb24sIHRoZSB0ZXJtIGhhcyBub3QgYmVlbiBwcm9jZXNzZWQgdXNpbmdcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlbGVjdGl2aXR5LnRyYW5zZm9ybVRleHQoKS5cclxuICAgICAqICAgICAgICAgICAgICAgIHJlYWRPbmx5IC0gSWYgdHJ1ZSwgZGlzYWJsZXMgYW55IG1vZGlmaWNhdGlvbiBvZiB0aGUgaW5wdXQuXHJcbiAgICAgKiAgICAgICAgICAgICAgICByZW1vdmVPbmx5IC0gSWYgdHJ1ZSwgZGlzYWJsZXMgYW55IG1vZGlmaWNhdGlvbiBvZiB0aGUgaW5wdXQgZXhjZXB0IHJlbW92aW5nXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Ygc2VsZWN0ZWQgaXRlbXMuXHJcbiAgICAgKiAgICAgICAgICAgICAgICBzZWFyY2hJbnB1dExpc3RlbmVycyAtIEFycmF5IG9mIHNlYXJjaCBpbnB1dCBsaXN0ZW5lcnMuIEJ5IGRlZmF1bHQsIHRoZSBnbG9iYWxcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXkgU2VsZWN0aXZpdHkuU2VhcmNoSW5wdXRMaXN0ZW5lcnMgaXMgdXNlZC5cclxuICAgICAqICAgICAgICAgICAgICAgIHNob3dEcm9wZG93biAtIFNldCB0byBmYWxzZSBpZiB5b3UgZG9uJ3Qgd2FudCB0byB1c2UgYW55IGRyb3Bkb3duICh5b3UgY2FuXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGlsbCBvcGVuIGl0IHByb2dyYW1tYXRpY2FsbHkgdXNpbmcgb3BlbigpKS5cclxuICAgICAqICAgICAgICAgICAgICAgIHRlbXBsYXRlcyAtIE9iamVjdCB3aXRoIGluc3RhbmNlLXNwZWNpZmljIHRlbXBsYXRlcyB0byBvdmVycmlkZSB0aGUgZ2xvYmFsXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZXMgYXNzaWduZWQgdG8gU2VsZWN0aXZpdHkuVGVtcGxhdGVzLlxyXG4gICAgICovXHJcbiAgICBzZXRPcHRpb25zOiBmdW5jdGlvbihvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuICAgICAgICBTZWxlY3Rpdml0eS5PcHRpb25MaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbihsaXN0ZW5lcikge1xyXG4gICAgICAgICAgICBsaXN0ZW5lcih0aGlzLCBvcHRpb25zKTtcclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICAkLmV4dGVuZCh0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICB2YXIgYWxsb3dlZFR5cGVzID0gJC5leHRlbmQoe1xyXG4gICAgICAgICAgICBjbG9zZU9uU2VsZWN0OiAnYm9vbGVhbicsXHJcbiAgICAgICAgICAgIGRyb3Bkb3duOiAnZnVuY3Rpb258bnVsbCcsXHJcbiAgICAgICAgICAgIGluaXRTZWxlY3Rpb246ICdmdW5jdGlvbnxudWxsJyxcclxuICAgICAgICAgICAgbWF0Y2hlcjogJ2Z1bmN0aW9ufG51bGwnLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ3N0cmluZycsXHJcbiAgICAgICAgICAgIHBvc2l0aW9uRHJvcGRvd246ICdmdW5jdGlvbnxudWxsJyxcclxuICAgICAgICAgICAgcXVlcnk6ICdmdW5jdGlvbnxudWxsJyxcclxuICAgICAgICAgICAgcmVhZE9ubHk6ICdib29sZWFuJyxcclxuICAgICAgICAgICAgcmVtb3ZlT25seTogJ2Jvb2xlYW4nLFxyXG4gICAgICAgICAgICBzZWFyY2hJbnB1dExpc3RlbmVyczogJ2FycmF5J1xyXG4gICAgICAgIH0sIG9wdGlvbnMuYWxsb3dlZFR5cGVzKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgdmFyIHR5cGUgPSBhbGxvd2VkVHlwZXNba2V5XTtcclxuICAgICAgICAgICAgaWYgKHR5cGUgJiYgIXR5cGUuc3BsaXQoJ3wnKS5zb21lKGZ1bmN0aW9uKHR5cGUpIHsgcmV0dXJuICQudHlwZSh2YWx1ZSkgPT09IHR5cGU7IH0pKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Ioa2V5ICsgJyBtdXN0IGJlIG9mIHR5cGUgJyArIHR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICAgICAgICBjYXNlICdpdGVtcyc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zID0gKHZhbHVlID09PSBudWxsID8gdmFsdWUgOiBTZWxlY3Rpdml0eS5wcm9jZXNzSXRlbXModmFsdWUpKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAnbWF0Y2hlcic6XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZXIgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAnc2VhcmNoSW5wdXRMaXN0ZW5lcnMnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hJbnB1dExpc3RlbmVycyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlICd0ZW1wbGF0ZXMnOlxyXG4gICAgICAgICAgICAgICAgJC5leHRlbmQodGhpcy50ZW1wbGF0ZXMsIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgdGhpcy5lbmFibGVkID0gKCF0aGlzLm9wdGlvbnMucmVhZE9ubHkgJiYgIXRoaXMub3B0aW9ucy5yZW1vdmVPbmx5KTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGdpdmVuIHRlbXBsYXRlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB0ZW1wbGF0ZU5hbWUgTmFtZSBvZiB0aGUgdGVtcGxhdGUgdG8gcHJvY2Vzcy5cclxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgdG8gcGFzcyB0byB0aGUgdGVtcGxhdGUuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiBTdHJpbmcgY29udGFpbmluZyBIVE1MLlxyXG4gICAgICovXHJcbiAgICB0ZW1wbGF0ZTogZnVuY3Rpb24odGVtcGxhdGVOYW1lLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHZhciB0ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVzW3RlbXBsYXRlTmFtZV07XHJcbiAgICAgICAgaWYgKHRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgIGlmICgkLnR5cGUodGVtcGxhdGUpID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGVtcGxhdGUob3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGVtcGxhdGUucmVuZGVyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGVtcGxhdGUucmVuZGVyKG9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdGVtcGxhdGU6ICcgKyB0ZW1wbGF0ZU5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2VycyB0aGUgY2hhbmdlIGV2ZW50LlxyXG4gICAgICpcclxuICAgICAqIFRoZSBldmVudCBvYmplY3QgYXQgbGVhc3QgY29udGFpbnMgdGhlIGZvbGxvd2luZyBwcm9wZXJ0eTpcclxuICAgICAqIHZhbHVlIC0gVGhlIG5ldyB2YWx1ZSBvZiB0aGUgU2VsZWN0aXZpdHkgaW5zdGFuY2UuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIE9wdGlvbmFsIGFkZGl0aW9uYWwgb3B0aW9ucyBhZGRlZCB0byB0aGUgZXZlbnQgb2JqZWN0LlxyXG4gICAgICovXHJcbiAgICB0cmlnZ2VyQ2hhbmdlOiBmdW5jdGlvbihvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KCdjaGFuZ2UnLCAkLmV4dGVuZCh7IHZhbHVlOiB0aGlzLl92YWx1ZSB9LCBvcHRpb25zKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcnMgYW4gZXZlbnQgb24gdGhlIGluc3RhbmNlJ3MgZWxlbWVudC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gT3B0aW9uYWwgZXZlbnQgZGF0YSB0byBiZSBhZGRlZCB0byB0aGUgZXZlbnQgb2JqZWN0LlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4gV2hldGhlciB0aGUgZGVmYXVsdCBhY3Rpb24gb2YgdGhlIGV2ZW50IG1heSBiZSBleGVjdXRlZCwgaWUuIHJldHVybnMgZmFsc2UgaWZcclxuICAgICAqICAgICAgICAgcHJldmVudERlZmF1bHQoKSBoYXMgYmVlbiBjYWxsZWQuXHJcbiAgICAgKi9cclxuICAgIHRyaWdnZXJFdmVudDogZnVuY3Rpb24oZXZlbnROYW1lLCBkYXRhKSB7XHJcblxyXG4gICAgICAgIHZhciBldmVudCA9ICQuRXZlbnQoZXZlbnROYW1lLCBkYXRhIHx8IHt9KTtcclxuICAgICAgICB0aGlzLiRlbC50cmlnZ2VyKGV2ZW50KTtcclxuICAgICAgICByZXR1cm4gIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNob3J0aGFuZCBmb3IgdmFsdWUoKS5cclxuICAgICAqL1xyXG4gICAgdmFsOiBmdW5jdGlvbihuZXdWYWx1ZSkge1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZShuZXdWYWx1ZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVmFsaWRhdGVzIGEgc2luZ2xlIGl0ZW0uIFRocm93cyBhbiBleGNlcHRpb24gaWYgdGhlIGl0ZW0gaXMgaW52YWxpZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaXRlbSBUaGUgaXRlbSB0byB2YWxpZGF0ZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIFRoZSB2YWxpZGF0ZWQgaXRlbS4gTWF5IGRpZmZlciBmcm9tIHRoZSBpbnB1dCBpdGVtLlxyXG4gICAgICovXHJcbiAgICB2YWxpZGF0ZUl0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcclxuXHJcbiAgICAgICAgaWYgKGl0ZW0gJiYgU2VsZWN0aXZpdHkuaXNWYWxpZElkKGl0ZW0uaWQpICYmICQudHlwZShpdGVtLnRleHQpID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0ZW0gc2hvdWxkIGhhdmUgaWQgKG51bWJlciBvciBzdHJpbmcpIGFuZCB0ZXh0IChzdHJpbmcpIHByb3BlcnRpZXMnKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyBvciBnZXRzIHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIFRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0aW9uIG9ubHkgY29uY2VybnMgdGhlIElEcyBvZiB0aGUgc2VsZWN0aW9uIGl0ZW1zLiBJZiB5b3UgYXJlXHJcbiAgICAgKiBpbnRlcmVzdGVkIGluIHRoZSBJRHMgYW5kIHRoZSB0ZXh0IGxhYmVscywgeW91IHNob3VsZCB1c2UgdGhlIGRhdGEoKSBtZXRob2QuXHJcbiAgICAgKlxyXG4gICAgICogTm90ZSB0aGF0IGlmIG5laXRoZXIgdGhlIGl0ZW1zIG9wdGlvbiBub3IgdGhlIGluaXRTZWxlY3Rpb24gb3B0aW9uIGhhdmUgYmVlbiBzZXQsIFNlbGVjdGl2aXR5XHJcbiAgICAgKiB3aWxsIGhhdmUgbm8gd2F5IHRvIGRldGVybWluZSB3aGF0IHRleHQgbGFiZWxzIHNob3VsZCBiZSB1c2VkIHdpdGggdGhlIGdpdmVuIElEcyBpbiB3aGljaFxyXG4gICAgICogY2FzZSBpdCB3aWxsIGFzc3VtZSB0aGUgdGV4dCBpcyBlcXVhbCB0byB0aGUgSUQuIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSdyZSB3b3JraW5nIHdpdGggdGFncyxcclxuICAgICAqIG9yIHNlbGVjdGluZyBlLW1haWwgYWRkcmVzc2VzIGZvciBpbnN0YW5jZSwgYnV0IG1heSBub3QgYWx3YXlzIGJlIHdoYXQgeW91IHdhbnQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5ld1ZhbHVlIE9wdGlvbmFsIG5ldyB2YWx1ZSB0byBzZXQuIEZvciBhIE11bHRpcGxlU2VsZWN0aXZpdHkgaW5zdGFuY2UgdGhlIHZhbHVlIG11c3RcclxuICAgICAqICAgICAgICAgICAgICAgICBiZSBhbiBhcnJheSBvZiBJRHMsIGZvciBhIFNpbmdsZVNlbGVjdGl2aXR5IGluc3RhbmNlIHRoZSB2YWx1ZSBtdXN0IGJlIGFcclxuICAgICAqICAgICAgICAgICAgICAgICBzaW5nbGUgSUQgKGEgc3RyaW5nIG9yIGEgbnVtYmVyKSBvciBudWxsIHRvIGluZGljYXRlIG5vIGl0ZW0gaXMgc2VsZWN0ZWQuXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBvcHRpb25zIG9iamVjdC4gTWF5IGNvbnRhaW4gdGhlIGZvbGxvd2luZyBwcm9wZXJ0eTpcclxuICAgICAqICAgICAgICAgICAgICAgIHRyaWdnZXJDaGFuZ2UgLSBTZXQgdG8gZmFsc2UgdG8gc3VwcHJlc3MgdGhlIFwiY2hhbmdlXCIgZXZlbnQgYmVpbmcgdHJpZ2dlcmVkLlxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vdGUgdGhpcyB3aWxsIGFsc28gY2F1c2UgdGhlIFVJIHRvIG5vdCB1cGRhdGUgYXV0b21hdGljYWxseTtcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbyB5b3UgbWF5IHdhbnQgdG8gY2FsbCByZXJlbmRlclNlbGVjdGlvbigpIG1hbnVhbGx5IHdoZW5cclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2luZyB0aGlzIG9wdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIElmIG5ld1ZhbHVlIGlzIG9taXR0ZWQsIHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGN1cnJlbnQgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIHZhbHVlOiBmdW5jdGlvbihuZXdWYWx1ZSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcbiAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdGhpcy52YWxpZGF0ZVZhbHVlKG5ld1ZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gbmV3VmFsdWU7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmluaXRTZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5pbml0U2VsZWN0aW9uKG5ld1ZhbHVlLCBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ZhbHVlID09PSBuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kYXRhID0gdGhpcy52YWxpZGF0ZURhdGEoZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy50cmlnZ2VyQ2hhbmdlICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyQ2hhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGF0YSA9IHRoaXMuZ2V0RGF0YUZvclZhbHVlKG5ld1ZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy50cmlnZ2VyQ2hhbmdlICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlckNoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9jbG9zZWQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB0aGlzLmRyb3Bkb3duID0gbnVsbDtcclxuXHJcbiAgICAgICAgdGhpcy4kZWwuY2hpbGRyZW4oKS50b2dnbGVDbGFzcygnb3BlbicsIGZhbHNlKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfZ2V0SXRlbUlkOiBmdW5jdGlvbihlbGVtZW50T3JFdmVudCkge1xyXG5cclxuICAgICAgICAvLyByZXR1cm5zIHRoZSBpdGVtIElEIHJlbGF0ZWQgdG8gYW4gZWxlbWVudCBvciBldmVudCB0YXJnZXQuXHJcbiAgICAgICAgLy8gSURzIGNhbiBiZSBlaXRoZXIgbnVtYmVycyBvciBzdHJpbmdzLCBidXQgYXR0cmlidXRlIHZhbHVlcyBhcmUgYWx3YXlzIHN0cmluZ3MsIHNvIHdlXHJcbiAgICAgICAgLy8gd2lsbCBoYXZlIHRvIGZpbmQgb3V0IHdoZXRoZXIgdGhlIGl0ZW0gSUQgb3VnaHQgdG8gYmUgYSBudW1iZXIgb3Igc3RyaW5nIG91cnNlbHZlcy5cclxuICAgICAgICAvLyAkLmZuLmRhdGEoKSBpcyBhIGJpdCBvdmVyemVhbG91cyBmb3Igb3VyIGNhc2UsIGJlY2F1c2UgaXQgcmV0dXJucyBhIG51bWJlciB3aGVuZXZlciB0aGVcclxuICAgICAgICAvLyBhdHRyaWJ1dGUgdmFsdWUgY2FuIGJlIHBhcnNlZCBhcyBhIG51bWJlci4gaG93ZXZlciwgaXQgaXMgcG9zc2libGUgYW4gaXRlbSBoYWQgYW4gSURcclxuICAgICAgICAvLyB3aGljaCBpcyBhIHN0cmluZyBidXQgd2hpY2ggaXMgcGFyc2VhYmxlIGFzIG51bWJlciwgaW4gd2hpY2ggY2FzZSB3ZSB2ZXJpZnkgaWYgdGhlIElEXHJcbiAgICAgICAgLy8gYXMgbnVtYmVyIGlzIGFjdHVhbGx5IGZvdW5kIGFtb25nIHRoZSBkYXRhIG9yIHJlc3VsdHMuIGlmIGl0IGlzbid0LCB3ZSBhc3N1bWUgaXQgd2FzXHJcbiAgICAgICAgLy8gc3VwcG9zZWQgdG8gYmUgYSBzdHJpbmcgYWZ0ZXIgYWxsLi4uXHJcblxyXG4gICAgICAgIHZhciAkZWxlbWVudDtcclxuICAgICAgICBpZiAoZWxlbWVudE9yRXZlbnQudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICRlbGVtZW50ID0gJChlbGVtZW50T3JFdmVudC50YXJnZXQpLmNsb3Nlc3QoJ1tkYXRhLWl0ZW0taWRdJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50T3JFdmVudC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgJGVsZW1lbnQgPSBlbGVtZW50T3JFdmVudDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkZWxlbWVudCA9ICQoZWxlbWVudE9yRXZlbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGlkID0gJGVsZW1lbnQuZGF0YSgnaXRlbS1pZCcpO1xyXG4gICAgICAgIGlmICgkLnR5cGUoaWQpID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gaWQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKFNlbGVjdGl2aXR5LmZpbmRCeUlkKHRoaXMuX2RhdGEgfHwgW10sIGlkKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRyb3Bkb3duID0gdGhpcy5kcm9wZG93bjtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChkcm9wZG93bikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChTZWxlY3Rpdml0eS5maW5kTmVzdGVkQnlJZChkcm9wZG93bi5yZXN1bHRzLCBpZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBGSVhNRTogcmVmZXJlbmNlIHRvIHN1Ym1lbnUgZG9lc24ndCBiZWxvbmcgaW4gYmFzZSBtb2R1bGVcclxuICAgICAgICAgICAgICAgICAgICBkcm9wZG93biA9IGRyb3Bkb3duLnN1Ym1lbnU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJycgKyBpZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfbW91c2VvdXQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB0aGlzLiRlbC5jaGlsZHJlbigpLnRvZ2dsZUNsYXNzKCdob3ZlcicsIGZhbHNlKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfbW91c2VvdmVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdGhpcy4kZWwuY2hpbGRyZW4oKS50b2dnbGVDbGFzcygnaG92ZXInLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIERyb3Bkb3duIGNsYXNzIHRvIHVzZSBmb3IgZGlzcGxheWluZyBkcm9wZG93bnMuXHJcbiAqXHJcbiAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIGEgZHJvcGRvd24gaXMgZGVmaW5lZCBpbiB0aGUgc2VsZWN0aXZpdHktZHJvcGRvd24gbW9kdWxlLlxyXG4gKi9cclxuU2VsZWN0aXZpdHkuRHJvcGRvd24gPSBudWxsO1xyXG5cclxuLyoqXHJcbiAqIE1hcHBpbmcgb2YgaW5wdXQgdHlwZXMuXHJcbiAqL1xyXG5TZWxlY3Rpdml0eS5JbnB1dFR5cGVzID0ge307XHJcblxyXG4vKipcclxuICogQXJyYXkgb2Ygb3B0aW9uIGxpc3RlbmVycy5cclxuICpcclxuICogT3B0aW9uIGxpc3RlbmVycyBhcmUgaW52b2tlZCB3aGVuIHNldE9wdGlvbnMoKSBpcyBjYWxsZWQuIEV2ZXJ5IGxpc3RlbmVyIHJlY2VpdmVzIHR3byBhcmd1bWVudHM6XHJcbiAqXHJcbiAqIHNlbGVjdGl2aXR5IC0gVGhlIFNlbGVjdGl2aXR5IGluc3RhbmNlLlxyXG4gKiBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdGhhdCBhcmUgYWJvdXQgdG8gYmUgc2V0LiBUaGUgbGlzdGVuZXIgbWF5IG1vZGlmeSB0aGlzIG9wdGlvbnMgb2JqZWN0LlxyXG4gKlxyXG4gKiBBbiBleGFtcGxlIG9mIGFuIG9wdGlvbiBsaXN0ZW5lciBpcyB0aGUgc2VsZWN0aXZpdHktdHJhZGl0aW9uYWwgbW9kdWxlLlxyXG4gKi9cclxuU2VsZWN0aXZpdHkuT3B0aW9uTGlzdGVuZXJzID0gW107XHJcblxyXG4vKipcclxuICogQXJyYXkgb2Ygc2VhcmNoIGlucHV0IGxpc3RlbmVycy5cclxuICpcclxuICogU2VhcmNoIGlucHV0IGxpc3RlbmVycyBhcmUgaW52b2tlZCB3aGVuIGluaXRTZWFyY2hJbnB1dCgpIGlzIGNhbGxlZCAodHlwaWNhbGx5IHJpZ2h0IGFmdGVyIHRoZVxyXG4gKiBzZWFyY2ggaW5wdXQgaXMgY3JlYXRlZCkuIEV2ZXJ5IGxpc3RlbmVyIHJlY2VpdmVzIHR3byBhcmd1bWVudHM6XHJcbiAqXHJcbiAqIHNlbGVjdGl2aXR5IC0gVGhlIFNlbGVjdGl2aXR5IGluc3RhbmNlLlxyXG4gKiAkaW5wdXQgLSBqUXVlcnkgY29udGFpbmVyIHdpdGggdGhlIHNlYXJjaCBpbnB1dC5cclxuICpcclxuICogQW4gZXhhbXBsZSBvZiBhIHNlYXJjaCBpbnB1dCBsaXN0ZW5lciBpcyB0aGUgc2VsZWN0aXZpdHkta2V5Ym9hcmQgbW9kdWxlLlxyXG4gKi9cclxuU2VsZWN0aXZpdHkuU2VhcmNoSW5wdXRMaXN0ZW5lcnMgPSBbXTtcclxuXHJcbi8qKlxyXG4gKiBNYXBwaW5nIHdpdGggdGVtcGxhdGVzIHRvIHVzZSBmb3IgcmVuZGVyaW5nIHNlbGVjdCBib3hlcyBhbmQgZHJvcGRvd25zLiBTZWVcclxuICogc2VsZWN0aXZpdHktdGVtcGxhdGVzLmpzIGZvciBhIHVzZWZ1bCBzZXQgb2YgZGVmYXVsdCB0ZW1wbGF0ZXMsIGFzIHdlbGwgYXMgZm9yIGRvY3VtZW50YXRpb24gb2ZcclxuICogdGhlIGluZGl2aWR1YWwgdGVtcGxhdGVzLlxyXG4gKi9cclxuU2VsZWN0aXZpdHkuVGVtcGxhdGVzID0ge307XHJcblxyXG4vKipcclxuICogRmluZHMgYW4gaXRlbSBpbiB0aGUgZ2l2ZW4gYXJyYXkgd2l0aCB0aGUgc3BlY2lmaWVkIElELlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgQXJyYXkgdG8gc2VhcmNoIGluLlxyXG4gKiBAcGFyYW0gaWQgSUQgdG8gc2VhcmNoIGZvci5cclxuICpcclxuICogQHJldHVybiBUaGUgaXRlbSBpbiB0aGUgYXJyYXkgd2l0aCB0aGUgZ2l2ZW4gSUQsIG9yIG51bGwgaWYgdGhlIGl0ZW0gd2FzIG5vdCBmb3VuZC5cclxuICovXHJcblNlbGVjdGl2aXR5LmZpbmRCeUlkID0gZnVuY3Rpb24oYXJyYXksIGlkKSB7XHJcblxyXG4gICAgdmFyIGluZGV4ID0gU2VsZWN0aXZpdHkuZmluZEluZGV4QnlJZChhcnJheSwgaWQpO1xyXG4gICAgcmV0dXJuIChpbmRleCA+IC0xID8gYXJyYXlbaW5kZXhdIDogbnVsbCk7XHJcbn07XHJcblxyXG4vKipcclxuICogRmluZHMgdGhlIGluZGV4IG9mIGFuIGl0ZW0gaW4gdGhlIGdpdmVuIGFycmF5IHdpdGggdGhlIHNwZWNpZmllZCBJRC5cclxuICpcclxuICogQHBhcmFtIGFycmF5IEFycmF5IHRvIHNlYXJjaCBpbi5cclxuICogQHBhcmFtIGlkIElEIHRvIHNlYXJjaCBmb3IuXHJcbiAqXHJcbiAqIEByZXR1cm4gVGhlIGluZGV4IG9mIHRoZSBpdGVtIGluIHRoZSBhcnJheSB3aXRoIHRoZSBnaXZlbiBJRCwgb3IgLTEgaWYgdGhlIGl0ZW0gd2FzIG5vdCBmb3VuZC5cclxuICovXHJcblNlbGVjdGl2aXR5LmZpbmRJbmRleEJ5SWQgPSBmdW5jdGlvbihhcnJheSwgaWQpIHtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoYXJyYXlbaV0uaWQgPT09IGlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiAtMTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBGaW5kcyBhbiBpdGVtIGluIHRoZSBnaXZlbiBhcnJheSB3aXRoIHRoZSBzcGVjaWZpZWQgSUQuIEl0ZW1zIGluIHRoZSBhcnJheSBtYXkgY29udGFpbiAnY2hpbGRyZW4nXHJcbiAqIHByb3BlcnRpZXMgd2hpY2ggaW4gdHVybiB3aWxsIGJlIHNlYXJjaGVkIGZvciB0aGUgaXRlbS5cclxuICpcclxuICogQHBhcmFtIGFycmF5IEFycmF5IHRvIHNlYXJjaCBpbi5cclxuICogQHBhcmFtIGlkIElEIHRvIHNlYXJjaCBmb3IuXHJcbiAqXHJcbiAqIEByZXR1cm4gVGhlIGl0ZW0gaW4gdGhlIGFycmF5IHdpdGggdGhlIGdpdmVuIElELCBvciBudWxsIGlmIHRoZSBpdGVtIHdhcyBub3QgZm91bmQuXHJcbiAqL1xyXG5TZWxlY3Rpdml0eS5maW5kTmVzdGVkQnlJZCA9ICBudWxsICYmIGZ1bmN0aW9uKGFycmF5LCBpZCkge1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciBpdGVtID0gYXJyYXlbaV07XHJcbiAgICAgICAgaWYgKGl0ZW0uaWQgPT09IGlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gU2VsZWN0aXZpdHkuZmluZE5lc3RlZEJ5SWQoaXRlbS5jaGlsZHJlbiwgaWQpO1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XHJcblxyXG4vKipcclxuICogVXRpbGl0eSBtZXRob2QgZm9yIGluaGVyaXRpbmcgYW5vdGhlciBjbGFzcy5cclxuICpcclxuICogQHBhcmFtIFN1YkNsYXNzIENvbnN0cnVjdG9yIGZ1bmN0aW9uIG9mIHRoZSBzdWJjbGFzcy5cclxuICogQHBhcmFtIFN1cGVyQ2xhc3MgT3B0aW9uYWwgY29uc3RydWN0b3IgZnVuY3Rpb24gb2YgdGhlIHN1cGVyY2xhc3MuIElmIG9taXR0ZWQsIFNlbGVjdGl2aXR5IGlzXHJcbiAqICAgICAgICAgICAgICAgICAgIHVzZWQgYXMgc3VwZXJjbGFzcy5cclxuICogQHBhcmFtIHByb3RvdHlwZSBPYmplY3Qgd2l0aCBtZXRob2RzIHlvdSB3YW50IHRvIGFkZCB0byB0aGUgc3ViY2xhc3MgcHJvdG90eXBlLlxyXG4gKlxyXG4gKiBAcmV0dXJuIEEgdXRpbGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyB0aGUgbWV0aG9kcyBvZiB0aGUgc3VwZXJjbGFzcy4gVGhpcyBmdW5jdGlvbiByZWNlaXZlcyB0d29cclxuICogICAgICAgICBhcmd1bWVudHM6IFRoZSB0aGlzIG9iamVjdCBvbiB3aGljaCB5b3Ugd2FudCB0byBleGVjdXRlIHRoZSBtZXRob2QgYW5kIHRoZSBuYW1lIG9mIHRoZVxyXG4gKiAgICAgICAgIG1ldGhvZC4gQW55IGFyZ3VtZW50cyBwYXN0IHRob3NlIGFyZSBwYXNzZWQgdG8gdGhlIHN1cGVyY2xhc3MgbWV0aG9kLlxyXG4gKi9cclxuU2VsZWN0aXZpdHkuaW5oZXJpdHMgPSBmdW5jdGlvbihTdWJDbGFzcywgU3VwZXJDbGFzcywgcHJvdG90eXBlKSB7XHJcblxyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICBwcm90b3R5cGUgPSBTdXBlckNsYXNzO1xyXG4gICAgICAgIFN1cGVyQ2xhc3MgPSBTZWxlY3Rpdml0eTtcclxuICAgIH1cclxuXHJcbiAgICBTdWJDbGFzcy5wcm90b3R5cGUgPSAkLmV4dGVuZChcclxuICAgICAgICBPYmplY3QuY3JlYXRlKFN1cGVyQ2xhc3MucHJvdG90eXBlKSxcclxuICAgICAgICB7IGNvbnN0cnVjdG9yOiBTdWJDbGFzcyB9LFxyXG4gICAgICAgIHByb3RvdHlwZVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gZnVuY3Rpb24oc2VsZiwgbWV0aG9kTmFtZSkge1xyXG4gICAgICAgIFN1cGVyQ2xhc3MucHJvdG90eXBlW21ldGhvZE5hbWVdLmFwcGx5KHNlbGYsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMikpO1xyXG4gICAgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVja3Mgd2hldGhlciBhIHZhbHVlIGNhbiBiZSB1c2VkIGFzIGEgdmFsaWQgSUQgZm9yIHNlbGVjdGlvbiBpdGVtcy4gT25seSBudW1iZXJzIGFuZCBzdHJpbmdzXHJcbiAqIGFyZSBhY2NlcHRlZCB0byBiZSB1c2VkIGFzIElEcy5cclxuICpcclxuICogQHBhcmFtIGlkIFRoZSB2YWx1ZSB0byBjaGVjayB3aGV0aGVyIGl0IGlzIGEgdmFsaWQgSUQuXHJcbiAqXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgaXMgYSB2YWxpZCBJRCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cclxuU2VsZWN0aXZpdHkuaXNWYWxpZElkID0gZnVuY3Rpb24oaWQpIHtcclxuXHJcbiAgICB2YXIgdHlwZSA9ICQudHlwZShpZCk7XHJcbiAgICByZXR1cm4gdHlwZSA9PT0gJ251bWJlcicgfHwgdHlwZSA9PT0gJ3N0cmluZyc7XHJcbn07XHJcblxyXG4vKipcclxuICogRGVjaWRlcyB3aGV0aGVyIGEgZ2l2ZW4gaXRlbSBtYXRjaGVzIGEgc2VhcmNoIHRlcm0uIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHNpbXBseVxyXG4gKiBjaGVja3Mgd2hldGhlciB0aGUgdGVybSBpcyBjb250YWluZWQgd2l0aGluIHRoZSBpdGVtJ3MgdGV4dCwgYWZ0ZXIgdHJhbnNmb3JtaW5nIHRoZW0gdXNpbmdcclxuICogdHJhbnNmb3JtVGV4dCgpLlxyXG4gKlxyXG4gKiBAcGFyYW0gaXRlbSBUaGUgaXRlbSB0aGF0IHNob3VsZCBtYXRjaCB0aGUgc2VhcmNoIHRlcm0uXHJcbiAqIEBwYXJhbSB0ZXJtIFRoZSBzZWFyY2ggdGVybS4gTm90ZSB0aGF0IGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB0aGUgdGVybSBoYXMgYWx3YXlzIGJlZW4gYWxyZWFkeVxyXG4gKiAgICAgICAgICAgICBwcm9jZXNzZWQgdXNpbmcgdHJhbnNmb3JtVGV4dCgpLlxyXG4gKlxyXG4gKiBAcmV0dXJuIHRydWUgaWYgdGhlIHRleHQgbWF0Y2hlcyB0aGUgdGVybSwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cclxuU2VsZWN0aXZpdHkubWF0Y2hlciA9IGZ1bmN0aW9uKGl0ZW0sIHRlcm0pIHtcclxuXHJcbiAgICB2YXIgcmVzdWx0ID0gbnVsbDtcclxuICAgIGlmIChTZWxlY3Rpdml0eS50cmFuc2Zvcm1UZXh0KGl0ZW0udGV4dCkuaW5kZXhPZih0ZXJtKSA+IC0xKSB7XHJcbiAgICAgICAgcmVzdWx0ID0gaXRlbTtcclxuICAgIH0gZWxzZSBpZiAoaXRlbS5jaGlsZHJlbikge1xyXG4gICAgICAgIHZhciBtYXRjaGluZ0NoaWxkcmVuID0gaXRlbS5jaGlsZHJlbi5tYXAoZnVuY3Rpb24oY2hpbGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNlbGVjdGl2aXR5Lm1hdGNoZXIoY2hpbGQsIHRlcm0pO1xyXG4gICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbihjaGlsZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gISFjaGlsZDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAobWF0Y2hpbmdDaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0geyBpZDogaXRlbS5pZCwgdGV4dDogaXRlbS50ZXh0LCBjaGlsZHJlbjogbWF0Y2hpbmdDaGlsZHJlbiB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn07XHJcblxyXG4vKipcclxuICogSGVscGVyIGZ1bmN0aW9uIGZvciBwcm9jZXNzaW5nIGl0ZW1zLlxyXG4gKlxyXG4gKiBAcGFyYW0gaXRlbSBUaGUgaXRlbSB0byBwcm9jZXNzLCBlaXRoZXIgYXMgb2JqZWN0IGNvbnRhaW5pbmcgJ2lkJyBhbmQgJ3RleHQnIHByb3BlcnRpZXMgb3IganVzdFxyXG4gKiAgICAgICAgICAgICBhcyBJRC4gVGhlICdpZCcgcHJvcGVydHkgb2YgYW4gaXRlbSBpcyBvcHRpb25hbCBpZiBpdCBoYXMgYSAnY2hpbGRyZW4nIHByb3BlcnR5XHJcbiAqICAgICAgICAgICAgIGNvbnRhaW5pbmcgYW4gYXJyYXkgb2YgaXRlbXMuXHJcbiAqXHJcbiAqIEByZXR1cm4gT2JqZWN0IGNvbnRhaW5pbmcgJ2lkJyBhbmQgJ3RleHQnIHByb3BlcnRpZXMuXHJcbiAqL1xyXG5TZWxlY3Rpdml0eS5wcm9jZXNzSXRlbSA9IGZ1bmN0aW9uKGl0ZW0pIHtcclxuXHJcbiAgICBpZiAoU2VsZWN0aXZpdHkuaXNWYWxpZElkKGl0ZW0pKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgaWQ6IGl0ZW0sIHRleHQ6ICcnICsgaXRlbSB9O1xyXG4gICAgfSBlbHNlIGlmIChpdGVtICYmXHJcbiAgICAgICAgICAgICAgIChTZWxlY3Rpdml0eS5pc1ZhbGlkSWQoaXRlbS5pZCkgfHwgaXRlbS5jaGlsZHJlbikgJiZcclxuICAgICAgICAgICAgICAgJC50eXBlKGl0ZW0udGV4dCkgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgaWYgKGl0ZW0uY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgaXRlbS5jaGlsZHJlbiA9IFNlbGVjdGl2aXR5LnByb2Nlc3NJdGVtcyhpdGVtLmNoaWxkcmVuKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgaXRlbScpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEhlbHBlciBmdW5jdGlvbiBmb3IgcHJvY2Vzc2luZyBhbiBhcnJheSBvZiBpdGVtcy5cclxuICpcclxuICogQHBhcmFtIGl0ZW1zIEFycmF5IG9mIGl0ZW1zIHRvIHByb2Nlc3MuIFNlZSBwcm9jZXNzSXRlbSgpIGZvciBkZXRhaWxzIGFib3V0IGEgc2luZ2xlIGl0ZW0uXHJcbiAqXHJcbiAqIEByZXR1cm4gQXJyYXkgd2l0aCBpdGVtcy5cclxuICovXHJcblNlbGVjdGl2aXR5LnByb2Nlc3NJdGVtcyA9IGZ1bmN0aW9uKGl0ZW1zKSB7XHJcblxyXG4gICAgaWYgKCQudHlwZShpdGVtcykgPT09ICdhcnJheScpIHtcclxuICAgICAgICByZXR1cm4gaXRlbXMubWFwKFNlbGVjdGl2aXR5LnByb2Nlc3NJdGVtKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGl0ZW1zJyk7XHJcbiAgICB9XHJcbn07XHJcblxyXG4vKipcclxuICogUXVvdGVzIGEgc3RyaW5nIHNvIGl0IGNhbiBiZSB1c2VkIGluIGEgQ1NTIGF0dHJpYnV0ZSBzZWxlY3Rvci4gSXQgYWRkcyBkb3VibGUgcXVvdGVzIHRvIHRoZVxyXG4gKiBzdHJpbmcgYW5kIGVzY2FwZXMgYWxsIG9jY3VycmVuY2VzIG9mIHRoZSBxdW90ZSBjaGFyYWN0ZXIgaW5zaWRlIHRoZSBzdHJpbmcuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgVGhlIHN0cmluZyB0byBxdW90ZS5cclxuICpcclxuICogQHJldHVybiBUaGUgcXVvdGVkIHN0cmluZy5cclxuICovXHJcblNlbGVjdGl2aXR5LnF1b3RlQ3NzQXR0ciA9IGZ1bmN0aW9uKHN0cmluZykge1xyXG5cclxuICAgIHJldHVybiAnXCInICsgKCcnICsgc3RyaW5nKS5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKSArICdcIic7XHJcbn07XHJcblxyXG4vKipcclxuICogVHJhbnNmb3JtcyB0ZXh0IGluIG9yZGVyIHRvIGZpbmQgbWF0Y2hlcy4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gY2FzdHMgYWxsIHN0cmluZ3MgdG9cclxuICogbG93ZXItY2FzZSBzbyB0aGF0IGFueSBtYXRjaGVzIGZvdW5kIHdpbGwgYmUgY2FzZS1pbnNlbnNpdGl2ZS5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBUaGUgc3RyaW5nIHRvIHRyYW5zZm9ybS5cclxuICpcclxuICogQHJldHVybiBUaGUgdHJhbnNmb3JtZWQgc3RyaW5nLlxyXG4gKi9cclxuU2VsZWN0aXZpdHkudHJhbnNmb3JtVGV4dCA9IGZ1bmN0aW9uKHN0cmluZykge1xyXG5cclxuICAgIHJldHVybiBzdHJpbmcudG9Mb3dlckNhc2UoKTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gJC5mbi5zZWxlY3Rpdml0eSA9IFNlbGVjdGl2aXR5O1xyXG5cclxufSx7XCIyXCI6MixcImpxdWVyeVwiOlwianF1ZXJ5XCJ9XSw5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIERJQUNSSVRJQ1MgPSB7XHJcbiAgICAnXFx1MjRCNic6ICdBJyxcclxuICAgICdcXHVGRjIxJzogJ0EnLFxyXG4gICAgJ1xcdTAwQzAnOiAnQScsXHJcbiAgICAnXFx1MDBDMSc6ICdBJyxcclxuICAgICdcXHUwMEMyJzogJ0EnLFxyXG4gICAgJ1xcdTFFQTYnOiAnQScsXHJcbiAgICAnXFx1MUVBNCc6ICdBJyxcclxuICAgICdcXHUxRUFBJzogJ0EnLFxyXG4gICAgJ1xcdTFFQTgnOiAnQScsXHJcbiAgICAnXFx1MDBDMyc6ICdBJyxcclxuICAgICdcXHUwMTAwJzogJ0EnLFxyXG4gICAgJ1xcdTAxMDInOiAnQScsXHJcbiAgICAnXFx1MUVCMCc6ICdBJyxcclxuICAgICdcXHUxRUFFJzogJ0EnLFxyXG4gICAgJ1xcdTFFQjQnOiAnQScsXHJcbiAgICAnXFx1MUVCMic6ICdBJyxcclxuICAgICdcXHUwMjI2JzogJ0EnLFxyXG4gICAgJ1xcdTAxRTAnOiAnQScsXHJcbiAgICAnXFx1MDBDNCc6ICdBJyxcclxuICAgICdcXHUwMURFJzogJ0EnLFxyXG4gICAgJ1xcdTFFQTInOiAnQScsXHJcbiAgICAnXFx1MDBDNSc6ICdBJyxcclxuICAgICdcXHUwMUZBJzogJ0EnLFxyXG4gICAgJ1xcdTAxQ0QnOiAnQScsXHJcbiAgICAnXFx1MDIwMCc6ICdBJyxcclxuICAgICdcXHUwMjAyJzogJ0EnLFxyXG4gICAgJ1xcdTFFQTAnOiAnQScsXHJcbiAgICAnXFx1MUVBQyc6ICdBJyxcclxuICAgICdcXHUxRUI2JzogJ0EnLFxyXG4gICAgJ1xcdTFFMDAnOiAnQScsXHJcbiAgICAnXFx1MDEwNCc6ICdBJyxcclxuICAgICdcXHUwMjNBJzogJ0EnLFxyXG4gICAgJ1xcdTJDNkYnOiAnQScsXHJcbiAgICAnXFx1QTczMic6ICdBQScsXHJcbiAgICAnXFx1MDBDNic6ICdBRScsXHJcbiAgICAnXFx1MDFGQyc6ICdBRScsXHJcbiAgICAnXFx1MDFFMic6ICdBRScsXHJcbiAgICAnXFx1QTczNCc6ICdBTycsXHJcbiAgICAnXFx1QTczNic6ICdBVScsXHJcbiAgICAnXFx1QTczOCc6ICdBVicsXHJcbiAgICAnXFx1QTczQSc6ICdBVicsXHJcbiAgICAnXFx1QTczQyc6ICdBWScsXHJcbiAgICAnXFx1MjRCNyc6ICdCJyxcclxuICAgICdcXHVGRjIyJzogJ0InLFxyXG4gICAgJ1xcdTFFMDInOiAnQicsXHJcbiAgICAnXFx1MUUwNCc6ICdCJyxcclxuICAgICdcXHUxRTA2JzogJ0InLFxyXG4gICAgJ1xcdTAyNDMnOiAnQicsXHJcbiAgICAnXFx1MDE4Mic6ICdCJyxcclxuICAgICdcXHUwMTgxJzogJ0InLFxyXG4gICAgJ1xcdTI0QjgnOiAnQycsXHJcbiAgICAnXFx1RkYyMyc6ICdDJyxcclxuICAgICdcXHUwMTA2JzogJ0MnLFxyXG4gICAgJ1xcdTAxMDgnOiAnQycsXHJcbiAgICAnXFx1MDEwQSc6ICdDJyxcclxuICAgICdcXHUwMTBDJzogJ0MnLFxyXG4gICAgJ1xcdTAwQzcnOiAnQycsXHJcbiAgICAnXFx1MUUwOCc6ICdDJyxcclxuICAgICdcXHUwMTg3JzogJ0MnLFxyXG4gICAgJ1xcdTAyM0InOiAnQycsXHJcbiAgICAnXFx1QTczRSc6ICdDJyxcclxuICAgICdcXHUyNEI5JzogJ0QnLFxyXG4gICAgJ1xcdUZGMjQnOiAnRCcsXHJcbiAgICAnXFx1MUUwQSc6ICdEJyxcclxuICAgICdcXHUwMTBFJzogJ0QnLFxyXG4gICAgJ1xcdTFFMEMnOiAnRCcsXHJcbiAgICAnXFx1MUUxMCc6ICdEJyxcclxuICAgICdcXHUxRTEyJzogJ0QnLFxyXG4gICAgJ1xcdTFFMEUnOiAnRCcsXHJcbiAgICAnXFx1MDExMCc6ICdEJyxcclxuICAgICdcXHUwMThCJzogJ0QnLFxyXG4gICAgJ1xcdTAxOEEnOiAnRCcsXHJcbiAgICAnXFx1MDE4OSc6ICdEJyxcclxuICAgICdcXHVBNzc5JzogJ0QnLFxyXG4gICAgJ1xcdTAxRjEnOiAnRFonLFxyXG4gICAgJ1xcdTAxQzQnOiAnRFonLFxyXG4gICAgJ1xcdTAxRjInOiAnRHonLFxyXG4gICAgJ1xcdTAxQzUnOiAnRHonLFxyXG4gICAgJ1xcdTI0QkEnOiAnRScsXHJcbiAgICAnXFx1RkYyNSc6ICdFJyxcclxuICAgICdcXHUwMEM4JzogJ0UnLFxyXG4gICAgJ1xcdTAwQzknOiAnRScsXHJcbiAgICAnXFx1MDBDQSc6ICdFJyxcclxuICAgICdcXHUxRUMwJzogJ0UnLFxyXG4gICAgJ1xcdTFFQkUnOiAnRScsXHJcbiAgICAnXFx1MUVDNCc6ICdFJyxcclxuICAgICdcXHUxRUMyJzogJ0UnLFxyXG4gICAgJ1xcdTFFQkMnOiAnRScsXHJcbiAgICAnXFx1MDExMic6ICdFJyxcclxuICAgICdcXHUxRTE0JzogJ0UnLFxyXG4gICAgJ1xcdTFFMTYnOiAnRScsXHJcbiAgICAnXFx1MDExNCc6ICdFJyxcclxuICAgICdcXHUwMTE2JzogJ0UnLFxyXG4gICAgJ1xcdTAwQ0InOiAnRScsXHJcbiAgICAnXFx1MUVCQSc6ICdFJyxcclxuICAgICdcXHUwMTFBJzogJ0UnLFxyXG4gICAgJ1xcdTAyMDQnOiAnRScsXHJcbiAgICAnXFx1MDIwNic6ICdFJyxcclxuICAgICdcXHUxRUI4JzogJ0UnLFxyXG4gICAgJ1xcdTFFQzYnOiAnRScsXHJcbiAgICAnXFx1MDIyOCc6ICdFJyxcclxuICAgICdcXHUxRTFDJzogJ0UnLFxyXG4gICAgJ1xcdTAxMTgnOiAnRScsXHJcbiAgICAnXFx1MUUxOCc6ICdFJyxcclxuICAgICdcXHUxRTFBJzogJ0UnLFxyXG4gICAgJ1xcdTAxOTAnOiAnRScsXHJcbiAgICAnXFx1MDE4RSc6ICdFJyxcclxuICAgICdcXHUyNEJCJzogJ0YnLFxyXG4gICAgJ1xcdUZGMjYnOiAnRicsXHJcbiAgICAnXFx1MUUxRSc6ICdGJyxcclxuICAgICdcXHUwMTkxJzogJ0YnLFxyXG4gICAgJ1xcdUE3N0InOiAnRicsXHJcbiAgICAnXFx1MjRCQyc6ICdHJyxcclxuICAgICdcXHVGRjI3JzogJ0cnLFxyXG4gICAgJ1xcdTAxRjQnOiAnRycsXHJcbiAgICAnXFx1MDExQyc6ICdHJyxcclxuICAgICdcXHUxRTIwJzogJ0cnLFxyXG4gICAgJ1xcdTAxMUUnOiAnRycsXHJcbiAgICAnXFx1MDEyMCc6ICdHJyxcclxuICAgICdcXHUwMUU2JzogJ0cnLFxyXG4gICAgJ1xcdTAxMjInOiAnRycsXHJcbiAgICAnXFx1MDFFNCc6ICdHJyxcclxuICAgICdcXHUwMTkzJzogJ0cnLFxyXG4gICAgJ1xcdUE3QTAnOiAnRycsXHJcbiAgICAnXFx1QTc3RCc6ICdHJyxcclxuICAgICdcXHVBNzdFJzogJ0cnLFxyXG4gICAgJ1xcdTI0QkQnOiAnSCcsXHJcbiAgICAnXFx1RkYyOCc6ICdIJyxcclxuICAgICdcXHUwMTI0JzogJ0gnLFxyXG4gICAgJ1xcdTFFMjInOiAnSCcsXHJcbiAgICAnXFx1MUUyNic6ICdIJyxcclxuICAgICdcXHUwMjFFJzogJ0gnLFxyXG4gICAgJ1xcdTFFMjQnOiAnSCcsXHJcbiAgICAnXFx1MUUyOCc6ICdIJyxcclxuICAgICdcXHUxRTJBJzogJ0gnLFxyXG4gICAgJ1xcdTAxMjYnOiAnSCcsXHJcbiAgICAnXFx1MkM2Nyc6ICdIJyxcclxuICAgICdcXHUyQzc1JzogJ0gnLFxyXG4gICAgJ1xcdUE3OEQnOiAnSCcsXHJcbiAgICAnXFx1MjRCRSc6ICdJJyxcclxuICAgICdcXHVGRjI5JzogJ0knLFxyXG4gICAgJ1xcdTAwQ0MnOiAnSScsXHJcbiAgICAnXFx1MDBDRCc6ICdJJyxcclxuICAgICdcXHUwMENFJzogJ0knLFxyXG4gICAgJ1xcdTAxMjgnOiAnSScsXHJcbiAgICAnXFx1MDEyQSc6ICdJJyxcclxuICAgICdcXHUwMTJDJzogJ0knLFxyXG4gICAgJ1xcdTAxMzAnOiAnSScsXHJcbiAgICAnXFx1MDBDRic6ICdJJyxcclxuICAgICdcXHUxRTJFJzogJ0knLFxyXG4gICAgJ1xcdTFFQzgnOiAnSScsXHJcbiAgICAnXFx1MDFDRic6ICdJJyxcclxuICAgICdcXHUwMjA4JzogJ0knLFxyXG4gICAgJ1xcdTAyMEEnOiAnSScsXHJcbiAgICAnXFx1MUVDQSc6ICdJJyxcclxuICAgICdcXHUwMTJFJzogJ0knLFxyXG4gICAgJ1xcdTFFMkMnOiAnSScsXHJcbiAgICAnXFx1MDE5Nyc6ICdJJyxcclxuICAgICdcXHUyNEJGJzogJ0onLFxyXG4gICAgJ1xcdUZGMkEnOiAnSicsXHJcbiAgICAnXFx1MDEzNCc6ICdKJyxcclxuICAgICdcXHUwMjQ4JzogJ0onLFxyXG4gICAgJ1xcdTI0QzAnOiAnSycsXHJcbiAgICAnXFx1RkYyQic6ICdLJyxcclxuICAgICdcXHUxRTMwJzogJ0snLFxyXG4gICAgJ1xcdTAxRTgnOiAnSycsXHJcbiAgICAnXFx1MUUzMic6ICdLJyxcclxuICAgICdcXHUwMTM2JzogJ0snLFxyXG4gICAgJ1xcdTFFMzQnOiAnSycsXHJcbiAgICAnXFx1MDE5OCc6ICdLJyxcclxuICAgICdcXHUyQzY5JzogJ0snLFxyXG4gICAgJ1xcdUE3NDAnOiAnSycsXHJcbiAgICAnXFx1QTc0Mic6ICdLJyxcclxuICAgICdcXHVBNzQ0JzogJ0snLFxyXG4gICAgJ1xcdUE3QTInOiAnSycsXHJcbiAgICAnXFx1MjRDMSc6ICdMJyxcclxuICAgICdcXHVGRjJDJzogJ0wnLFxyXG4gICAgJ1xcdTAxM0YnOiAnTCcsXHJcbiAgICAnXFx1MDEzOSc6ICdMJyxcclxuICAgICdcXHUwMTNEJzogJ0wnLFxyXG4gICAgJ1xcdTFFMzYnOiAnTCcsXHJcbiAgICAnXFx1MUUzOCc6ICdMJyxcclxuICAgICdcXHUwMTNCJzogJ0wnLFxyXG4gICAgJ1xcdTFFM0MnOiAnTCcsXHJcbiAgICAnXFx1MUUzQSc6ICdMJyxcclxuICAgICdcXHUwMTQxJzogJ0wnLFxyXG4gICAgJ1xcdTAyM0QnOiAnTCcsXHJcbiAgICAnXFx1MkM2Mic6ICdMJyxcclxuICAgICdcXHUyQzYwJzogJ0wnLFxyXG4gICAgJ1xcdUE3NDgnOiAnTCcsXHJcbiAgICAnXFx1QTc0Nic6ICdMJyxcclxuICAgICdcXHVBNzgwJzogJ0wnLFxyXG4gICAgJ1xcdTAxQzcnOiAnTEonLFxyXG4gICAgJ1xcdTAxQzgnOiAnTGonLFxyXG4gICAgJ1xcdTI0QzInOiAnTScsXHJcbiAgICAnXFx1RkYyRCc6ICdNJyxcclxuICAgICdcXHUxRTNFJzogJ00nLFxyXG4gICAgJ1xcdTFFNDAnOiAnTScsXHJcbiAgICAnXFx1MUU0Mic6ICdNJyxcclxuICAgICdcXHUyQzZFJzogJ00nLFxyXG4gICAgJ1xcdTAxOUMnOiAnTScsXHJcbiAgICAnXFx1MjRDMyc6ICdOJyxcclxuICAgICdcXHVGRjJFJzogJ04nLFxyXG4gICAgJ1xcdTAxRjgnOiAnTicsXHJcbiAgICAnXFx1MDE0Myc6ICdOJyxcclxuICAgICdcXHUwMEQxJzogJ04nLFxyXG4gICAgJ1xcdTFFNDQnOiAnTicsXHJcbiAgICAnXFx1MDE0Nyc6ICdOJyxcclxuICAgICdcXHUxRTQ2JzogJ04nLFxyXG4gICAgJ1xcdTAxNDUnOiAnTicsXHJcbiAgICAnXFx1MUU0QSc6ICdOJyxcclxuICAgICdcXHUxRTQ4JzogJ04nLFxyXG4gICAgJ1xcdTAyMjAnOiAnTicsXHJcbiAgICAnXFx1MDE5RCc6ICdOJyxcclxuICAgICdcXHVBNzkwJzogJ04nLFxyXG4gICAgJ1xcdUE3QTQnOiAnTicsXHJcbiAgICAnXFx1MDFDQSc6ICdOSicsXHJcbiAgICAnXFx1MDFDQic6ICdOaicsXHJcbiAgICAnXFx1MjRDNCc6ICdPJyxcclxuICAgICdcXHVGRjJGJzogJ08nLFxyXG4gICAgJ1xcdTAwRDInOiAnTycsXHJcbiAgICAnXFx1MDBEMyc6ICdPJyxcclxuICAgICdcXHUwMEQ0JzogJ08nLFxyXG4gICAgJ1xcdTFFRDInOiAnTycsXHJcbiAgICAnXFx1MUVEMCc6ICdPJyxcclxuICAgICdcXHUxRUQ2JzogJ08nLFxyXG4gICAgJ1xcdTFFRDQnOiAnTycsXHJcbiAgICAnXFx1MDBENSc6ICdPJyxcclxuICAgICdcXHUxRTRDJzogJ08nLFxyXG4gICAgJ1xcdTAyMkMnOiAnTycsXHJcbiAgICAnXFx1MUU0RSc6ICdPJyxcclxuICAgICdcXHUwMTRDJzogJ08nLFxyXG4gICAgJ1xcdTFFNTAnOiAnTycsXHJcbiAgICAnXFx1MUU1Mic6ICdPJyxcclxuICAgICdcXHUwMTRFJzogJ08nLFxyXG4gICAgJ1xcdTAyMkUnOiAnTycsXHJcbiAgICAnXFx1MDIzMCc6ICdPJyxcclxuICAgICdcXHUwMEQ2JzogJ08nLFxyXG4gICAgJ1xcdTAyMkEnOiAnTycsXHJcbiAgICAnXFx1MUVDRSc6ICdPJyxcclxuICAgICdcXHUwMTUwJzogJ08nLFxyXG4gICAgJ1xcdTAxRDEnOiAnTycsXHJcbiAgICAnXFx1MDIwQyc6ICdPJyxcclxuICAgICdcXHUwMjBFJzogJ08nLFxyXG4gICAgJ1xcdTAxQTAnOiAnTycsXHJcbiAgICAnXFx1MUVEQyc6ICdPJyxcclxuICAgICdcXHUxRURBJzogJ08nLFxyXG4gICAgJ1xcdTFFRTAnOiAnTycsXHJcbiAgICAnXFx1MUVERSc6ICdPJyxcclxuICAgICdcXHUxRUUyJzogJ08nLFxyXG4gICAgJ1xcdTFFQ0MnOiAnTycsXHJcbiAgICAnXFx1MUVEOCc6ICdPJyxcclxuICAgICdcXHUwMUVBJzogJ08nLFxyXG4gICAgJ1xcdTAxRUMnOiAnTycsXHJcbiAgICAnXFx1MDBEOCc6ICdPJyxcclxuICAgICdcXHUwMUZFJzogJ08nLFxyXG4gICAgJ1xcdTAxODYnOiAnTycsXHJcbiAgICAnXFx1MDE5Ric6ICdPJyxcclxuICAgICdcXHVBNzRBJzogJ08nLFxyXG4gICAgJ1xcdUE3NEMnOiAnTycsXHJcbiAgICAnXFx1MDFBMic6ICdPSScsXHJcbiAgICAnXFx1QTc0RSc6ICdPTycsXHJcbiAgICAnXFx1MDIyMic6ICdPVScsXHJcbiAgICAnXFx1MjRDNSc6ICdQJyxcclxuICAgICdcXHVGRjMwJzogJ1AnLFxyXG4gICAgJ1xcdTFFNTQnOiAnUCcsXHJcbiAgICAnXFx1MUU1Nic6ICdQJyxcclxuICAgICdcXHUwMUE0JzogJ1AnLFxyXG4gICAgJ1xcdTJDNjMnOiAnUCcsXHJcbiAgICAnXFx1QTc1MCc6ICdQJyxcclxuICAgICdcXHVBNzUyJzogJ1AnLFxyXG4gICAgJ1xcdUE3NTQnOiAnUCcsXHJcbiAgICAnXFx1MjRDNic6ICdRJyxcclxuICAgICdcXHVGRjMxJzogJ1EnLFxyXG4gICAgJ1xcdUE3NTYnOiAnUScsXHJcbiAgICAnXFx1QTc1OCc6ICdRJyxcclxuICAgICdcXHUwMjRBJzogJ1EnLFxyXG4gICAgJ1xcdTI0QzcnOiAnUicsXHJcbiAgICAnXFx1RkYzMic6ICdSJyxcclxuICAgICdcXHUwMTU0JzogJ1InLFxyXG4gICAgJ1xcdTFFNTgnOiAnUicsXHJcbiAgICAnXFx1MDE1OCc6ICdSJyxcclxuICAgICdcXHUwMjEwJzogJ1InLFxyXG4gICAgJ1xcdTAyMTInOiAnUicsXHJcbiAgICAnXFx1MUU1QSc6ICdSJyxcclxuICAgICdcXHUxRTVDJzogJ1InLFxyXG4gICAgJ1xcdTAxNTYnOiAnUicsXHJcbiAgICAnXFx1MUU1RSc6ICdSJyxcclxuICAgICdcXHUwMjRDJzogJ1InLFxyXG4gICAgJ1xcdTJDNjQnOiAnUicsXHJcbiAgICAnXFx1QTc1QSc6ICdSJyxcclxuICAgICdcXHVBN0E2JzogJ1InLFxyXG4gICAgJ1xcdUE3ODInOiAnUicsXHJcbiAgICAnXFx1MjRDOCc6ICdTJyxcclxuICAgICdcXHVGRjMzJzogJ1MnLFxyXG4gICAgJ1xcdTFFOUUnOiAnUycsXHJcbiAgICAnXFx1MDE1QSc6ICdTJyxcclxuICAgICdcXHUxRTY0JzogJ1MnLFxyXG4gICAgJ1xcdTAxNUMnOiAnUycsXHJcbiAgICAnXFx1MUU2MCc6ICdTJyxcclxuICAgICdcXHUwMTYwJzogJ1MnLFxyXG4gICAgJ1xcdTFFNjYnOiAnUycsXHJcbiAgICAnXFx1MUU2Mic6ICdTJyxcclxuICAgICdcXHUxRTY4JzogJ1MnLFxyXG4gICAgJ1xcdTAyMTgnOiAnUycsXHJcbiAgICAnXFx1MDE1RSc6ICdTJyxcclxuICAgICdcXHUyQzdFJzogJ1MnLFxyXG4gICAgJ1xcdUE3QTgnOiAnUycsXHJcbiAgICAnXFx1QTc4NCc6ICdTJyxcclxuICAgICdcXHUyNEM5JzogJ1QnLFxyXG4gICAgJ1xcdUZGMzQnOiAnVCcsXHJcbiAgICAnXFx1MUU2QSc6ICdUJyxcclxuICAgICdcXHUwMTY0JzogJ1QnLFxyXG4gICAgJ1xcdTFFNkMnOiAnVCcsXHJcbiAgICAnXFx1MDIxQSc6ICdUJyxcclxuICAgICdcXHUwMTYyJzogJ1QnLFxyXG4gICAgJ1xcdTFFNzAnOiAnVCcsXHJcbiAgICAnXFx1MUU2RSc6ICdUJyxcclxuICAgICdcXHUwMTY2JzogJ1QnLFxyXG4gICAgJ1xcdTAxQUMnOiAnVCcsXHJcbiAgICAnXFx1MDFBRSc6ICdUJyxcclxuICAgICdcXHUwMjNFJzogJ1QnLFxyXG4gICAgJ1xcdUE3ODYnOiAnVCcsXHJcbiAgICAnXFx1QTcyOCc6ICdUWicsXHJcbiAgICAnXFx1MjRDQSc6ICdVJyxcclxuICAgICdcXHVGRjM1JzogJ1UnLFxyXG4gICAgJ1xcdTAwRDknOiAnVScsXHJcbiAgICAnXFx1MDBEQSc6ICdVJyxcclxuICAgICdcXHUwMERCJzogJ1UnLFxyXG4gICAgJ1xcdTAxNjgnOiAnVScsXHJcbiAgICAnXFx1MUU3OCc6ICdVJyxcclxuICAgICdcXHUwMTZBJzogJ1UnLFxyXG4gICAgJ1xcdTFFN0EnOiAnVScsXHJcbiAgICAnXFx1MDE2Qyc6ICdVJyxcclxuICAgICdcXHUwMERDJzogJ1UnLFxyXG4gICAgJ1xcdTAxREInOiAnVScsXHJcbiAgICAnXFx1MDFENyc6ICdVJyxcclxuICAgICdcXHUwMUQ1JzogJ1UnLFxyXG4gICAgJ1xcdTAxRDknOiAnVScsXHJcbiAgICAnXFx1MUVFNic6ICdVJyxcclxuICAgICdcXHUwMTZFJzogJ1UnLFxyXG4gICAgJ1xcdTAxNzAnOiAnVScsXHJcbiAgICAnXFx1MDFEMyc6ICdVJyxcclxuICAgICdcXHUwMjE0JzogJ1UnLFxyXG4gICAgJ1xcdTAyMTYnOiAnVScsXHJcbiAgICAnXFx1MDFBRic6ICdVJyxcclxuICAgICdcXHUxRUVBJzogJ1UnLFxyXG4gICAgJ1xcdTFFRTgnOiAnVScsXHJcbiAgICAnXFx1MUVFRSc6ICdVJyxcclxuICAgICdcXHUxRUVDJzogJ1UnLFxyXG4gICAgJ1xcdTFFRjAnOiAnVScsXHJcbiAgICAnXFx1MUVFNCc6ICdVJyxcclxuICAgICdcXHUxRTcyJzogJ1UnLFxyXG4gICAgJ1xcdTAxNzInOiAnVScsXHJcbiAgICAnXFx1MUU3Nic6ICdVJyxcclxuICAgICdcXHUxRTc0JzogJ1UnLFxyXG4gICAgJ1xcdTAyNDQnOiAnVScsXHJcbiAgICAnXFx1MjRDQic6ICdWJyxcclxuICAgICdcXHVGRjM2JzogJ1YnLFxyXG4gICAgJ1xcdTFFN0MnOiAnVicsXHJcbiAgICAnXFx1MUU3RSc6ICdWJyxcclxuICAgICdcXHUwMUIyJzogJ1YnLFxyXG4gICAgJ1xcdUE3NUUnOiAnVicsXHJcbiAgICAnXFx1MDI0NSc6ICdWJyxcclxuICAgICdcXHVBNzYwJzogJ1ZZJyxcclxuICAgICdcXHUyNENDJzogJ1cnLFxyXG4gICAgJ1xcdUZGMzcnOiAnVycsXHJcbiAgICAnXFx1MUU4MCc6ICdXJyxcclxuICAgICdcXHUxRTgyJzogJ1cnLFxyXG4gICAgJ1xcdTAxNzQnOiAnVycsXHJcbiAgICAnXFx1MUU4Nic6ICdXJyxcclxuICAgICdcXHUxRTg0JzogJ1cnLFxyXG4gICAgJ1xcdTFFODgnOiAnVycsXHJcbiAgICAnXFx1MkM3Mic6ICdXJyxcclxuICAgICdcXHUyNENEJzogJ1gnLFxyXG4gICAgJ1xcdUZGMzgnOiAnWCcsXHJcbiAgICAnXFx1MUU4QSc6ICdYJyxcclxuICAgICdcXHUxRThDJzogJ1gnLFxyXG4gICAgJ1xcdTI0Q0UnOiAnWScsXHJcbiAgICAnXFx1RkYzOSc6ICdZJyxcclxuICAgICdcXHUxRUYyJzogJ1knLFxyXG4gICAgJ1xcdTAwREQnOiAnWScsXHJcbiAgICAnXFx1MDE3Nic6ICdZJyxcclxuICAgICdcXHUxRUY4JzogJ1knLFxyXG4gICAgJ1xcdTAyMzInOiAnWScsXHJcbiAgICAnXFx1MUU4RSc6ICdZJyxcclxuICAgICdcXHUwMTc4JzogJ1knLFxyXG4gICAgJ1xcdTFFRjYnOiAnWScsXHJcbiAgICAnXFx1MUVGNCc6ICdZJyxcclxuICAgICdcXHUwMUIzJzogJ1knLFxyXG4gICAgJ1xcdTAyNEUnOiAnWScsXHJcbiAgICAnXFx1MUVGRSc6ICdZJyxcclxuICAgICdcXHUyNENGJzogJ1onLFxyXG4gICAgJ1xcdUZGM0EnOiAnWicsXHJcbiAgICAnXFx1MDE3OSc6ICdaJyxcclxuICAgICdcXHUxRTkwJzogJ1onLFxyXG4gICAgJ1xcdTAxN0InOiAnWicsXHJcbiAgICAnXFx1MDE3RCc6ICdaJyxcclxuICAgICdcXHUxRTkyJzogJ1onLFxyXG4gICAgJ1xcdTFFOTQnOiAnWicsXHJcbiAgICAnXFx1MDFCNSc6ICdaJyxcclxuICAgICdcXHUwMjI0JzogJ1onLFxyXG4gICAgJ1xcdTJDN0YnOiAnWicsXHJcbiAgICAnXFx1MkM2Qic6ICdaJyxcclxuICAgICdcXHVBNzYyJzogJ1onLFxyXG4gICAgJ1xcdTI0RDAnOiAnYScsXHJcbiAgICAnXFx1RkY0MSc6ICdhJyxcclxuICAgICdcXHUxRTlBJzogJ2EnLFxyXG4gICAgJ1xcdTAwRTAnOiAnYScsXHJcbiAgICAnXFx1MDBFMSc6ICdhJyxcclxuICAgICdcXHUwMEUyJzogJ2EnLFxyXG4gICAgJ1xcdTFFQTcnOiAnYScsXHJcbiAgICAnXFx1MUVBNSc6ICdhJyxcclxuICAgICdcXHUxRUFCJzogJ2EnLFxyXG4gICAgJ1xcdTFFQTknOiAnYScsXHJcbiAgICAnXFx1MDBFMyc6ICdhJyxcclxuICAgICdcXHUwMTAxJzogJ2EnLFxyXG4gICAgJ1xcdTAxMDMnOiAnYScsXHJcbiAgICAnXFx1MUVCMSc6ICdhJyxcclxuICAgICdcXHUxRUFGJzogJ2EnLFxyXG4gICAgJ1xcdTFFQjUnOiAnYScsXHJcbiAgICAnXFx1MUVCMyc6ICdhJyxcclxuICAgICdcXHUwMjI3JzogJ2EnLFxyXG4gICAgJ1xcdTAxRTEnOiAnYScsXHJcbiAgICAnXFx1MDBFNCc6ICdhJyxcclxuICAgICdcXHUwMURGJzogJ2EnLFxyXG4gICAgJ1xcdTFFQTMnOiAnYScsXHJcbiAgICAnXFx1MDBFNSc6ICdhJyxcclxuICAgICdcXHUwMUZCJzogJ2EnLFxyXG4gICAgJ1xcdTAxQ0UnOiAnYScsXHJcbiAgICAnXFx1MDIwMSc6ICdhJyxcclxuICAgICdcXHUwMjAzJzogJ2EnLFxyXG4gICAgJ1xcdTFFQTEnOiAnYScsXHJcbiAgICAnXFx1MUVBRCc6ICdhJyxcclxuICAgICdcXHUxRUI3JzogJ2EnLFxyXG4gICAgJ1xcdTFFMDEnOiAnYScsXHJcbiAgICAnXFx1MDEwNSc6ICdhJyxcclxuICAgICdcXHUyQzY1JzogJ2EnLFxyXG4gICAgJ1xcdTAyNTAnOiAnYScsXHJcbiAgICAnXFx1QTczMyc6ICdhYScsXHJcbiAgICAnXFx1MDBFNic6ICdhZScsXHJcbiAgICAnXFx1MDFGRCc6ICdhZScsXHJcbiAgICAnXFx1MDFFMyc6ICdhZScsXHJcbiAgICAnXFx1QTczNSc6ICdhbycsXHJcbiAgICAnXFx1QTczNyc6ICdhdScsXHJcbiAgICAnXFx1QTczOSc6ICdhdicsXHJcbiAgICAnXFx1QTczQic6ICdhdicsXHJcbiAgICAnXFx1QTczRCc6ICdheScsXHJcbiAgICAnXFx1MjREMSc6ICdiJyxcclxuICAgICdcXHVGRjQyJzogJ2InLFxyXG4gICAgJ1xcdTFFMDMnOiAnYicsXHJcbiAgICAnXFx1MUUwNSc6ICdiJyxcclxuICAgICdcXHUxRTA3JzogJ2InLFxyXG4gICAgJ1xcdTAxODAnOiAnYicsXHJcbiAgICAnXFx1MDE4Myc6ICdiJyxcclxuICAgICdcXHUwMjUzJzogJ2InLFxyXG4gICAgJ1xcdTI0RDInOiAnYycsXHJcbiAgICAnXFx1RkY0Myc6ICdjJyxcclxuICAgICdcXHUwMTA3JzogJ2MnLFxyXG4gICAgJ1xcdTAxMDknOiAnYycsXHJcbiAgICAnXFx1MDEwQic6ICdjJyxcclxuICAgICdcXHUwMTBEJzogJ2MnLFxyXG4gICAgJ1xcdTAwRTcnOiAnYycsXHJcbiAgICAnXFx1MUUwOSc6ICdjJyxcclxuICAgICdcXHUwMTg4JzogJ2MnLFxyXG4gICAgJ1xcdTAyM0MnOiAnYycsXHJcbiAgICAnXFx1QTczRic6ICdjJyxcclxuICAgICdcXHUyMTg0JzogJ2MnLFxyXG4gICAgJ1xcdTI0RDMnOiAnZCcsXHJcbiAgICAnXFx1RkY0NCc6ICdkJyxcclxuICAgICdcXHUxRTBCJzogJ2QnLFxyXG4gICAgJ1xcdTAxMEYnOiAnZCcsXHJcbiAgICAnXFx1MUUwRCc6ICdkJyxcclxuICAgICdcXHUxRTExJzogJ2QnLFxyXG4gICAgJ1xcdTFFMTMnOiAnZCcsXHJcbiAgICAnXFx1MUUwRic6ICdkJyxcclxuICAgICdcXHUwMTExJzogJ2QnLFxyXG4gICAgJ1xcdTAxOEMnOiAnZCcsXHJcbiAgICAnXFx1MDI1Nic6ICdkJyxcclxuICAgICdcXHUwMjU3JzogJ2QnLFxyXG4gICAgJ1xcdUE3N0EnOiAnZCcsXHJcbiAgICAnXFx1MDFGMyc6ICdkeicsXHJcbiAgICAnXFx1MDFDNic6ICdkeicsXHJcbiAgICAnXFx1MjRENCc6ICdlJyxcclxuICAgICdcXHVGRjQ1JzogJ2UnLFxyXG4gICAgJ1xcdTAwRTgnOiAnZScsXHJcbiAgICAnXFx1MDBFOSc6ICdlJyxcclxuICAgICdcXHUwMEVBJzogJ2UnLFxyXG4gICAgJ1xcdTFFQzEnOiAnZScsXHJcbiAgICAnXFx1MUVCRic6ICdlJyxcclxuICAgICdcXHUxRUM1JzogJ2UnLFxyXG4gICAgJ1xcdTFFQzMnOiAnZScsXHJcbiAgICAnXFx1MUVCRCc6ICdlJyxcclxuICAgICdcXHUwMTEzJzogJ2UnLFxyXG4gICAgJ1xcdTFFMTUnOiAnZScsXHJcbiAgICAnXFx1MUUxNyc6ICdlJyxcclxuICAgICdcXHUwMTE1JzogJ2UnLFxyXG4gICAgJ1xcdTAxMTcnOiAnZScsXHJcbiAgICAnXFx1MDBFQic6ICdlJyxcclxuICAgICdcXHUxRUJCJzogJ2UnLFxyXG4gICAgJ1xcdTAxMUInOiAnZScsXHJcbiAgICAnXFx1MDIwNSc6ICdlJyxcclxuICAgICdcXHUwMjA3JzogJ2UnLFxyXG4gICAgJ1xcdTFFQjknOiAnZScsXHJcbiAgICAnXFx1MUVDNyc6ICdlJyxcclxuICAgICdcXHUwMjI5JzogJ2UnLFxyXG4gICAgJ1xcdTFFMUQnOiAnZScsXHJcbiAgICAnXFx1MDExOSc6ICdlJyxcclxuICAgICdcXHUxRTE5JzogJ2UnLFxyXG4gICAgJ1xcdTFFMUInOiAnZScsXHJcbiAgICAnXFx1MDI0Nyc6ICdlJyxcclxuICAgICdcXHUwMjVCJzogJ2UnLFxyXG4gICAgJ1xcdTAxREQnOiAnZScsXHJcbiAgICAnXFx1MjRENSc6ICdmJyxcclxuICAgICdcXHVGRjQ2JzogJ2YnLFxyXG4gICAgJ1xcdTFFMUYnOiAnZicsXHJcbiAgICAnXFx1MDE5Mic6ICdmJyxcclxuICAgICdcXHVBNzdDJzogJ2YnLFxyXG4gICAgJ1xcdTI0RDYnOiAnZycsXHJcbiAgICAnXFx1RkY0Nyc6ICdnJyxcclxuICAgICdcXHUwMUY1JzogJ2cnLFxyXG4gICAgJ1xcdTAxMUQnOiAnZycsXHJcbiAgICAnXFx1MUUyMSc6ICdnJyxcclxuICAgICdcXHUwMTFGJzogJ2cnLFxyXG4gICAgJ1xcdTAxMjEnOiAnZycsXHJcbiAgICAnXFx1MDFFNyc6ICdnJyxcclxuICAgICdcXHUwMTIzJzogJ2cnLFxyXG4gICAgJ1xcdTAxRTUnOiAnZycsXHJcbiAgICAnXFx1MDI2MCc6ICdnJyxcclxuICAgICdcXHVBN0ExJzogJ2cnLFxyXG4gICAgJ1xcdTFENzknOiAnZycsXHJcbiAgICAnXFx1QTc3Ric6ICdnJyxcclxuICAgICdcXHUyNEQ3JzogJ2gnLFxyXG4gICAgJ1xcdUZGNDgnOiAnaCcsXHJcbiAgICAnXFx1MDEyNSc6ICdoJyxcclxuICAgICdcXHUxRTIzJzogJ2gnLFxyXG4gICAgJ1xcdTFFMjcnOiAnaCcsXHJcbiAgICAnXFx1MDIxRic6ICdoJyxcclxuICAgICdcXHUxRTI1JzogJ2gnLFxyXG4gICAgJ1xcdTFFMjknOiAnaCcsXHJcbiAgICAnXFx1MUUyQic6ICdoJyxcclxuICAgICdcXHUxRTk2JzogJ2gnLFxyXG4gICAgJ1xcdTAxMjcnOiAnaCcsXHJcbiAgICAnXFx1MkM2OCc6ICdoJyxcclxuICAgICdcXHUyQzc2JzogJ2gnLFxyXG4gICAgJ1xcdTAyNjUnOiAnaCcsXHJcbiAgICAnXFx1MDE5NSc6ICdodicsXHJcbiAgICAnXFx1MjREOCc6ICdpJyxcclxuICAgICdcXHVGRjQ5JzogJ2knLFxyXG4gICAgJ1xcdTAwRUMnOiAnaScsXHJcbiAgICAnXFx1MDBFRCc6ICdpJyxcclxuICAgICdcXHUwMEVFJzogJ2knLFxyXG4gICAgJ1xcdTAxMjknOiAnaScsXHJcbiAgICAnXFx1MDEyQic6ICdpJyxcclxuICAgICdcXHUwMTJEJzogJ2knLFxyXG4gICAgJ1xcdTAwRUYnOiAnaScsXHJcbiAgICAnXFx1MUUyRic6ICdpJyxcclxuICAgICdcXHUxRUM5JzogJ2knLFxyXG4gICAgJ1xcdTAxRDAnOiAnaScsXHJcbiAgICAnXFx1MDIwOSc6ICdpJyxcclxuICAgICdcXHUwMjBCJzogJ2knLFxyXG4gICAgJ1xcdTFFQ0InOiAnaScsXHJcbiAgICAnXFx1MDEyRic6ICdpJyxcclxuICAgICdcXHUxRTJEJzogJ2knLFxyXG4gICAgJ1xcdTAyNjgnOiAnaScsXHJcbiAgICAnXFx1MDEzMSc6ICdpJyxcclxuICAgICdcXHUyNEQ5JzogJ2onLFxyXG4gICAgJ1xcdUZGNEEnOiAnaicsXHJcbiAgICAnXFx1MDEzNSc6ICdqJyxcclxuICAgICdcXHUwMUYwJzogJ2onLFxyXG4gICAgJ1xcdTAyNDknOiAnaicsXHJcbiAgICAnXFx1MjREQSc6ICdrJyxcclxuICAgICdcXHVGRjRCJzogJ2snLFxyXG4gICAgJ1xcdTFFMzEnOiAnaycsXHJcbiAgICAnXFx1MDFFOSc6ICdrJyxcclxuICAgICdcXHUxRTMzJzogJ2snLFxyXG4gICAgJ1xcdTAxMzcnOiAnaycsXHJcbiAgICAnXFx1MUUzNSc6ICdrJyxcclxuICAgICdcXHUwMTk5JzogJ2snLFxyXG4gICAgJ1xcdTJDNkEnOiAnaycsXHJcbiAgICAnXFx1QTc0MSc6ICdrJyxcclxuICAgICdcXHVBNzQzJzogJ2snLFxyXG4gICAgJ1xcdUE3NDUnOiAnaycsXHJcbiAgICAnXFx1QTdBMyc6ICdrJyxcclxuICAgICdcXHUyNERCJzogJ2wnLFxyXG4gICAgJ1xcdUZGNEMnOiAnbCcsXHJcbiAgICAnXFx1MDE0MCc6ICdsJyxcclxuICAgICdcXHUwMTNBJzogJ2wnLFxyXG4gICAgJ1xcdTAxM0UnOiAnbCcsXHJcbiAgICAnXFx1MUUzNyc6ICdsJyxcclxuICAgICdcXHUxRTM5JzogJ2wnLFxyXG4gICAgJ1xcdTAxM0MnOiAnbCcsXHJcbiAgICAnXFx1MUUzRCc6ICdsJyxcclxuICAgICdcXHUxRTNCJzogJ2wnLFxyXG4gICAgJ1xcdTAxN0YnOiAnbCcsXHJcbiAgICAnXFx1MDE0Mic6ICdsJyxcclxuICAgICdcXHUwMTlBJzogJ2wnLFxyXG4gICAgJ1xcdTAyNkInOiAnbCcsXHJcbiAgICAnXFx1MkM2MSc6ICdsJyxcclxuICAgICdcXHVBNzQ5JzogJ2wnLFxyXG4gICAgJ1xcdUE3ODEnOiAnbCcsXHJcbiAgICAnXFx1QTc0Nyc6ICdsJyxcclxuICAgICdcXHUwMUM5JzogJ2xqJyxcclxuICAgICdcXHUyNERDJzogJ20nLFxyXG4gICAgJ1xcdUZGNEQnOiAnbScsXHJcbiAgICAnXFx1MUUzRic6ICdtJyxcclxuICAgICdcXHUxRTQxJzogJ20nLFxyXG4gICAgJ1xcdTFFNDMnOiAnbScsXHJcbiAgICAnXFx1MDI3MSc6ICdtJyxcclxuICAgICdcXHUwMjZGJzogJ20nLFxyXG4gICAgJ1xcdTI0REQnOiAnbicsXHJcbiAgICAnXFx1RkY0RSc6ICduJyxcclxuICAgICdcXHUwMUY5JzogJ24nLFxyXG4gICAgJ1xcdTAxNDQnOiAnbicsXHJcbiAgICAnXFx1MDBGMSc6ICduJyxcclxuICAgICdcXHUxRTQ1JzogJ24nLFxyXG4gICAgJ1xcdTAxNDgnOiAnbicsXHJcbiAgICAnXFx1MUU0Nyc6ICduJyxcclxuICAgICdcXHUwMTQ2JzogJ24nLFxyXG4gICAgJ1xcdTFFNEInOiAnbicsXHJcbiAgICAnXFx1MUU0OSc6ICduJyxcclxuICAgICdcXHUwMTlFJzogJ24nLFxyXG4gICAgJ1xcdTAyNzInOiAnbicsXHJcbiAgICAnXFx1MDE0OSc6ICduJyxcclxuICAgICdcXHVBNzkxJzogJ24nLFxyXG4gICAgJ1xcdUE3QTUnOiAnbicsXHJcbiAgICAnXFx1MDFDQyc6ICduaicsXHJcbiAgICAnXFx1MjRERSc6ICdvJyxcclxuICAgICdcXHVGRjRGJzogJ28nLFxyXG4gICAgJ1xcdTAwRjInOiAnbycsXHJcbiAgICAnXFx1MDBGMyc6ICdvJyxcclxuICAgICdcXHUwMEY0JzogJ28nLFxyXG4gICAgJ1xcdTFFRDMnOiAnbycsXHJcbiAgICAnXFx1MUVEMSc6ICdvJyxcclxuICAgICdcXHUxRUQ3JzogJ28nLFxyXG4gICAgJ1xcdTFFRDUnOiAnbycsXHJcbiAgICAnXFx1MDBGNSc6ICdvJyxcclxuICAgICdcXHUxRTREJzogJ28nLFxyXG4gICAgJ1xcdTAyMkQnOiAnbycsXHJcbiAgICAnXFx1MUU0Ric6ICdvJyxcclxuICAgICdcXHUwMTREJzogJ28nLFxyXG4gICAgJ1xcdTFFNTEnOiAnbycsXHJcbiAgICAnXFx1MUU1Myc6ICdvJyxcclxuICAgICdcXHUwMTRGJzogJ28nLFxyXG4gICAgJ1xcdTAyMkYnOiAnbycsXHJcbiAgICAnXFx1MDIzMSc6ICdvJyxcclxuICAgICdcXHUwMEY2JzogJ28nLFxyXG4gICAgJ1xcdTAyMkInOiAnbycsXHJcbiAgICAnXFx1MUVDRic6ICdvJyxcclxuICAgICdcXHUwMTUxJzogJ28nLFxyXG4gICAgJ1xcdTAxRDInOiAnbycsXHJcbiAgICAnXFx1MDIwRCc6ICdvJyxcclxuICAgICdcXHUwMjBGJzogJ28nLFxyXG4gICAgJ1xcdTAxQTEnOiAnbycsXHJcbiAgICAnXFx1MUVERCc6ICdvJyxcclxuICAgICdcXHUxRURCJzogJ28nLFxyXG4gICAgJ1xcdTFFRTEnOiAnbycsXHJcbiAgICAnXFx1MUVERic6ICdvJyxcclxuICAgICdcXHUxRUUzJzogJ28nLFxyXG4gICAgJ1xcdTFFQ0QnOiAnbycsXHJcbiAgICAnXFx1MUVEOSc6ICdvJyxcclxuICAgICdcXHUwMUVCJzogJ28nLFxyXG4gICAgJ1xcdTAxRUQnOiAnbycsXHJcbiAgICAnXFx1MDBGOCc6ICdvJyxcclxuICAgICdcXHUwMUZGJzogJ28nLFxyXG4gICAgJ1xcdTAyNTQnOiAnbycsXHJcbiAgICAnXFx1QTc0Qic6ICdvJyxcclxuICAgICdcXHVBNzREJzogJ28nLFxyXG4gICAgJ1xcdTAyNzUnOiAnbycsXHJcbiAgICAnXFx1MDFBMyc6ICdvaScsXHJcbiAgICAnXFx1MDIyMyc6ICdvdScsXHJcbiAgICAnXFx1QTc0Ric6ICdvbycsXHJcbiAgICAnXFx1MjRERic6ICdwJyxcclxuICAgICdcXHVGRjUwJzogJ3AnLFxyXG4gICAgJ1xcdTFFNTUnOiAncCcsXHJcbiAgICAnXFx1MUU1Nyc6ICdwJyxcclxuICAgICdcXHUwMUE1JzogJ3AnLFxyXG4gICAgJ1xcdTFEN0QnOiAncCcsXHJcbiAgICAnXFx1QTc1MSc6ICdwJyxcclxuICAgICdcXHVBNzUzJzogJ3AnLFxyXG4gICAgJ1xcdUE3NTUnOiAncCcsXHJcbiAgICAnXFx1MjRFMCc6ICdxJyxcclxuICAgICdcXHVGRjUxJzogJ3EnLFxyXG4gICAgJ1xcdTAyNEInOiAncScsXHJcbiAgICAnXFx1QTc1Nyc6ICdxJyxcclxuICAgICdcXHVBNzU5JzogJ3EnLFxyXG4gICAgJ1xcdTI0RTEnOiAncicsXHJcbiAgICAnXFx1RkY1Mic6ICdyJyxcclxuICAgICdcXHUwMTU1JzogJ3InLFxyXG4gICAgJ1xcdTFFNTknOiAncicsXHJcbiAgICAnXFx1MDE1OSc6ICdyJyxcclxuICAgICdcXHUwMjExJzogJ3InLFxyXG4gICAgJ1xcdTAyMTMnOiAncicsXHJcbiAgICAnXFx1MUU1Qic6ICdyJyxcclxuICAgICdcXHUxRTVEJzogJ3InLFxyXG4gICAgJ1xcdTAxNTcnOiAncicsXHJcbiAgICAnXFx1MUU1Ric6ICdyJyxcclxuICAgICdcXHUwMjREJzogJ3InLFxyXG4gICAgJ1xcdTAyN0QnOiAncicsXHJcbiAgICAnXFx1QTc1Qic6ICdyJyxcclxuICAgICdcXHVBN0E3JzogJ3InLFxyXG4gICAgJ1xcdUE3ODMnOiAncicsXHJcbiAgICAnXFx1MjRFMic6ICdzJyxcclxuICAgICdcXHVGRjUzJzogJ3MnLFxyXG4gICAgJ1xcdTAwREYnOiAncycsXHJcbiAgICAnXFx1MDE1Qic6ICdzJyxcclxuICAgICdcXHUxRTY1JzogJ3MnLFxyXG4gICAgJ1xcdTAxNUQnOiAncycsXHJcbiAgICAnXFx1MUU2MSc6ICdzJyxcclxuICAgICdcXHUwMTYxJzogJ3MnLFxyXG4gICAgJ1xcdTFFNjcnOiAncycsXHJcbiAgICAnXFx1MUU2Myc6ICdzJyxcclxuICAgICdcXHUxRTY5JzogJ3MnLFxyXG4gICAgJ1xcdTAyMTknOiAncycsXHJcbiAgICAnXFx1MDE1Ric6ICdzJyxcclxuICAgICdcXHUwMjNGJzogJ3MnLFxyXG4gICAgJ1xcdUE3QTknOiAncycsXHJcbiAgICAnXFx1QTc4NSc6ICdzJyxcclxuICAgICdcXHUxRTlCJzogJ3MnLFxyXG4gICAgJ1xcdTI0RTMnOiAndCcsXHJcbiAgICAnXFx1RkY1NCc6ICd0JyxcclxuICAgICdcXHUxRTZCJzogJ3QnLFxyXG4gICAgJ1xcdTFFOTcnOiAndCcsXHJcbiAgICAnXFx1MDE2NSc6ICd0JyxcclxuICAgICdcXHUxRTZEJzogJ3QnLFxyXG4gICAgJ1xcdTAyMUInOiAndCcsXHJcbiAgICAnXFx1MDE2Myc6ICd0JyxcclxuICAgICdcXHUxRTcxJzogJ3QnLFxyXG4gICAgJ1xcdTFFNkYnOiAndCcsXHJcbiAgICAnXFx1MDE2Nyc6ICd0JyxcclxuICAgICdcXHUwMUFEJzogJ3QnLFxyXG4gICAgJ1xcdTAyODgnOiAndCcsXHJcbiAgICAnXFx1MkM2Nic6ICd0JyxcclxuICAgICdcXHVBNzg3JzogJ3QnLFxyXG4gICAgJ1xcdUE3MjknOiAndHonLFxyXG4gICAgJ1xcdTI0RTQnOiAndScsXHJcbiAgICAnXFx1RkY1NSc6ICd1JyxcclxuICAgICdcXHUwMEY5JzogJ3UnLFxyXG4gICAgJ1xcdTAwRkEnOiAndScsXHJcbiAgICAnXFx1MDBGQic6ICd1JyxcclxuICAgICdcXHUwMTY5JzogJ3UnLFxyXG4gICAgJ1xcdTFFNzknOiAndScsXHJcbiAgICAnXFx1MDE2Qic6ICd1JyxcclxuICAgICdcXHUxRTdCJzogJ3UnLFxyXG4gICAgJ1xcdTAxNkQnOiAndScsXHJcbiAgICAnXFx1MDBGQyc6ICd1JyxcclxuICAgICdcXHUwMURDJzogJ3UnLFxyXG4gICAgJ1xcdTAxRDgnOiAndScsXHJcbiAgICAnXFx1MDFENic6ICd1JyxcclxuICAgICdcXHUwMURBJzogJ3UnLFxyXG4gICAgJ1xcdTFFRTcnOiAndScsXHJcbiAgICAnXFx1MDE2Ric6ICd1JyxcclxuICAgICdcXHUwMTcxJzogJ3UnLFxyXG4gICAgJ1xcdTAxRDQnOiAndScsXHJcbiAgICAnXFx1MDIxNSc6ICd1JyxcclxuICAgICdcXHUwMjE3JzogJ3UnLFxyXG4gICAgJ1xcdTAxQjAnOiAndScsXHJcbiAgICAnXFx1MUVFQic6ICd1JyxcclxuICAgICdcXHUxRUU5JzogJ3UnLFxyXG4gICAgJ1xcdTFFRUYnOiAndScsXHJcbiAgICAnXFx1MUVFRCc6ICd1JyxcclxuICAgICdcXHUxRUYxJzogJ3UnLFxyXG4gICAgJ1xcdTFFRTUnOiAndScsXHJcbiAgICAnXFx1MUU3Myc6ICd1JyxcclxuICAgICdcXHUwMTczJzogJ3UnLFxyXG4gICAgJ1xcdTFFNzcnOiAndScsXHJcbiAgICAnXFx1MUU3NSc6ICd1JyxcclxuICAgICdcXHUwMjg5JzogJ3UnLFxyXG4gICAgJ1xcdTI0RTUnOiAndicsXHJcbiAgICAnXFx1RkY1Nic6ICd2JyxcclxuICAgICdcXHUxRTdEJzogJ3YnLFxyXG4gICAgJ1xcdTFFN0YnOiAndicsXHJcbiAgICAnXFx1MDI4Qic6ICd2JyxcclxuICAgICdcXHVBNzVGJzogJ3YnLFxyXG4gICAgJ1xcdTAyOEMnOiAndicsXHJcbiAgICAnXFx1QTc2MSc6ICd2eScsXHJcbiAgICAnXFx1MjRFNic6ICd3JyxcclxuICAgICdcXHVGRjU3JzogJ3cnLFxyXG4gICAgJ1xcdTFFODEnOiAndycsXHJcbiAgICAnXFx1MUU4Myc6ICd3JyxcclxuICAgICdcXHUwMTc1JzogJ3cnLFxyXG4gICAgJ1xcdTFFODcnOiAndycsXHJcbiAgICAnXFx1MUU4NSc6ICd3JyxcclxuICAgICdcXHUxRTk4JzogJ3cnLFxyXG4gICAgJ1xcdTFFODknOiAndycsXHJcbiAgICAnXFx1MkM3Myc6ICd3JyxcclxuICAgICdcXHUyNEU3JzogJ3gnLFxyXG4gICAgJ1xcdUZGNTgnOiAneCcsXHJcbiAgICAnXFx1MUU4Qic6ICd4JyxcclxuICAgICdcXHUxRThEJzogJ3gnLFxyXG4gICAgJ1xcdTI0RTgnOiAneScsXHJcbiAgICAnXFx1RkY1OSc6ICd5JyxcclxuICAgICdcXHUxRUYzJzogJ3knLFxyXG4gICAgJ1xcdTAwRkQnOiAneScsXHJcbiAgICAnXFx1MDE3Nyc6ICd5JyxcclxuICAgICdcXHUxRUY5JzogJ3knLFxyXG4gICAgJ1xcdTAyMzMnOiAneScsXHJcbiAgICAnXFx1MUU4Ric6ICd5JyxcclxuICAgICdcXHUwMEZGJzogJ3knLFxyXG4gICAgJ1xcdTFFRjcnOiAneScsXHJcbiAgICAnXFx1MUU5OSc6ICd5JyxcclxuICAgICdcXHUxRUY1JzogJ3knLFxyXG4gICAgJ1xcdTAxQjQnOiAneScsXHJcbiAgICAnXFx1MDI0Ric6ICd5JyxcclxuICAgICdcXHUxRUZGJzogJ3knLFxyXG4gICAgJ1xcdTI0RTknOiAneicsXHJcbiAgICAnXFx1RkY1QSc6ICd6JyxcclxuICAgICdcXHUwMTdBJzogJ3onLFxyXG4gICAgJ1xcdTFFOTEnOiAneicsXHJcbiAgICAnXFx1MDE3Qyc6ICd6JyxcclxuICAgICdcXHUwMTdFJzogJ3onLFxyXG4gICAgJ1xcdTFFOTMnOiAneicsXHJcbiAgICAnXFx1MUU5NSc6ICd6JyxcclxuICAgICdcXHUwMUI2JzogJ3onLFxyXG4gICAgJ1xcdTAyMjUnOiAneicsXHJcbiAgICAnXFx1MDI0MCc6ICd6JyxcclxuICAgICdcXHUyQzZDJzogJ3onLFxyXG4gICAgJ1xcdUE3NjMnOiAneicsXHJcbiAgICAnXFx1MDM4Nic6ICdcXHUwMzkxJyxcclxuICAgICdcXHUwMzg4JzogJ1xcdTAzOTUnLFxyXG4gICAgJ1xcdTAzODknOiAnXFx1MDM5NycsXHJcbiAgICAnXFx1MDM4QSc6ICdcXHUwMzk5JyxcclxuICAgICdcXHUwM0FBJzogJ1xcdTAzOTknLFxyXG4gICAgJ1xcdTAzOEMnOiAnXFx1MDM5RicsXHJcbiAgICAnXFx1MDM4RSc6ICdcXHUwM0E1JyxcclxuICAgICdcXHUwM0FCJzogJ1xcdTAzQTUnLFxyXG4gICAgJ1xcdTAzOEYnOiAnXFx1MDNBOScsXHJcbiAgICAnXFx1MDNBQyc6ICdcXHUwM0IxJyxcclxuICAgICdcXHUwM0FEJzogJ1xcdTAzQjUnLFxyXG4gICAgJ1xcdTAzQUUnOiAnXFx1MDNCNycsXHJcbiAgICAnXFx1MDNBRic6ICdcXHUwM0I5JyxcclxuICAgICdcXHUwM0NBJzogJ1xcdTAzQjknLFxyXG4gICAgJ1xcdTAzOTAnOiAnXFx1MDNCOScsXHJcbiAgICAnXFx1MDNDQyc6ICdcXHUwM0JGJyxcclxuICAgICdcXHUwM0NEJzogJ1xcdTAzQzUnLFxyXG4gICAgJ1xcdTAzQ0InOiAnXFx1MDNDNScsXHJcbiAgICAnXFx1MDNCMCc6ICdcXHUwM0M1JyxcclxuICAgICdcXHUwM0M5JzogJ1xcdTAzQzknLFxyXG4gICAgJ1xcdTAzQzInOiAnXFx1MDNDMydcclxufTtcclxuXHJcbnZhciBTZWxlY3Rpdml0eSA9IF9kZXJlcV8oOCk7XHJcbnZhciBwcmV2aW91c1RyYW5zZm9ybSA9IFNlbGVjdGl2aXR5LnRyYW5zZm9ybVRleHQ7XHJcblxyXG4vKipcclxuICogRXh0ZW5kZWQgdmVyc2lvbiBvZiB0aGUgdHJhbnNmb3JtVGV4dCgpIGZ1bmN0aW9uIHRoYXQgc2ltcGxpZmllcyBkaWFjcml0aWNzIHRvIHRoZWlyIGxhdGluMVxyXG4gKiBjb3VudGVycGFydHMuXHJcbiAqXHJcbiAqIE5vdGUgdGhhdCBpZiBhbGwgcXVlcnkgZnVuY3Rpb25zIGZldGNoIHRoZWlyIHJlc3VsdHMgZnJvbSBhIHJlbW90ZSBzZXJ2ZXIsIHlvdSBtYXkgbm90IG5lZWQgdGhpc1xyXG4gKiBmdW5jdGlvbiwgYmVjYXVzZSBpdCBtYWtlcyBzZW5zZSB0byByZW1vdmUgZGlhY3JpdGljcyBzZXJ2ZXItc2lkZSBpbiBzdWNoIGNhc2VzLlxyXG4gKi9cclxuU2VsZWN0aXZpdHkudHJhbnNmb3JtVGV4dCA9IGZ1bmN0aW9uKHN0cmluZykge1xyXG4gICAgdmFyIHJlc3VsdCA9ICcnO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciBjaGFyYWN0ZXIgPSBzdHJpbmdbaV07XHJcbiAgICAgICAgcmVzdWx0ICs9IERJQUNSSVRJQ1NbY2hhcmFjdGVyXSB8fCBjaGFyYWN0ZXI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJldmlvdXNUcmFuc2Zvcm0ocmVzdWx0KTtcclxufTtcclxuXHJcbn0se1wiOFwiOjh9XSwxMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciAkID0gd2luZG93LmpRdWVyeSB8fCB3aW5kb3cuWmVwdG87XHJcblxyXG52YXIgZGVib3VuY2UgPSBfZGVyZXFfKDMpO1xyXG5cclxudmFyIEV2ZW50RGVsZWdhdG9yID0gX2RlcmVxXygyKTtcclxuXHJcbnZhciBTZWxlY3Rpdml0eSA9IF9kZXJlcV8oOCk7XHJcblxyXG4vKipcclxuICogc2VsZWN0aXZpdHkgRHJvcGRvd24gQ29uc3RydWN0b3IuXHJcbiAqXHJcbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0LiBTaG91bGQgaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XHJcbiAqICAgICAgICAgICAgICAgIHNlbGVjdGl2aXR5IC0gU2VsZWN0aXZpdHkgaW5zdGFuY2UgdG8gc2hvdyB0aGUgZHJvcGRvd24gZm9yLlxyXG4gKiAgICAgICAgICAgICAgICBzaG93U2VhcmNoSW5wdXQgLSBCb29sZWFuIHdoZXRoZXIgYSBzZWFyY2ggaW5wdXQgc2hvdWxkIGJlIHNob3duLlxyXG4gKi9cclxuZnVuY3Rpb24gU2VsZWN0aXZpdHlEcm9wZG93bihvcHRpb25zKSB7XHJcblxyXG4gICAgdmFyIHNlbGVjdGl2aXR5ID0gb3B0aW9ucy5zZWxlY3Rpdml0eTtcclxuXHJcbiAgICB0aGlzLiRlbCA9ICQoc2VsZWN0aXZpdHkudGVtcGxhdGUoJ2Ryb3Bkb3duJywge1xyXG4gICAgICAgIGRyb3Bkb3duQ3NzQ2xhc3M6IHNlbGVjdGl2aXR5Lm9wdGlvbnMuZHJvcGRvd25Dc3NDbGFzcyxcclxuICAgICAgICBzZWFyY2hJbnB1dFBsYWNlaG9sZGVyOiBzZWxlY3Rpdml0eS5vcHRpb25zLnNlYXJjaElucHV0UGxhY2Vob2xkZXIsXHJcbiAgICAgICAgc2hvd1NlYXJjaElucHV0OiBvcHRpb25zLnNob3dTZWFyY2hJbnB1dFxyXG4gICAgfSkpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogalF1ZXJ5IGNvbnRhaW5lciB0byBhZGQgdGhlIHJlc3VsdHMgdG8uXHJcbiAgICAgKi9cclxuICAgIHRoaXMuJHJlc3VsdHMgPSB0aGlzLiQoJy5zZWxlY3Rpdml0eS1yZXN1bHRzLWNvbnRhaW5lcicpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgbW9yZSByZXN1bHRzIGFyZSBhdmFpbGFibGUgdGhhbiBjdXJyZW50bHkgZGlzcGxheWVkIGluIHRoZVxyXG4gICAgICogZHJvcGRvd24uXHJcbiAgICAgKi9cclxuICAgIHRoaXMuaGFzTW9yZSA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGN1cnJlbnRseSBoaWdobGlnaHRlZCByZXN1bHQgaXRlbS5cclxuICAgICAqL1xyXG4gICAgdGhpcy5oaWdobGlnaHRlZFJlc3VsdCA9IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBCb29sZWFuIHdoZXRoZXIgdGhlIGxvYWQgbW9yZSBsaW5rIGlzIGN1cnJlbnRseSBoaWdobGlnaHRlZC5cclxuICAgICAqL1xyXG4gICAgdGhpcy5sb2FkTW9yZUhpZ2hsaWdodGVkID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPcHRpb25zIHBhc3NlZCB0byB0aGUgZHJvcGRvd24gY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcmVzdWx0cyBkaXNwbGF5ZWQgaW4gdGhlIGRyb3Bkb3duLlxyXG4gICAgICovXHJcbiAgICB0aGlzLnJlc3VsdHMgPSBbXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbGVjdGl2aXR5IGluc3RhbmNlLlxyXG4gICAgICovXHJcbiAgICB0aGlzLnNlbGVjdGl2aXR5ID0gc2VsZWN0aXZpdHk7XHJcblxyXG4gICAgdGhpcy5fY2xvc2VkID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5fY2xvc2VQcm94eSA9IHRoaXMuY2xvc2UuYmluZCh0aGlzKTtcclxuICAgIGlmIChzZWxlY3Rpdml0eS5vcHRpb25zLmNsb3NlT25TZWxlY3QgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgc2VsZWN0aXZpdHkuJGVsLm9uKCdzZWxlY3Rpdml0eS1zZWxlY3RpbmcnLCB0aGlzLl9jbG9zZVByb3h5KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9sYXN0TW91c2VQb3NpdGlvbiA9IHt9O1xyXG5cclxuICAgIHRoaXMuYWRkVG9Eb20oKTtcclxuICAgIHRoaXMucG9zaXRpb24oKTtcclxuICAgIHRoaXMuc2V0dXBDbG9zZUhhbmRsZXIoKTtcclxuXHJcbiAgICB0aGlzLl9zdXBwcmVzc01vdXNlV2hlZWwoKTtcclxuXHJcbiAgICBpZiAob3B0aW9ucy5zaG93U2VhcmNoSW5wdXQpIHtcclxuICAgICAgICBzZWxlY3Rpdml0eS5pbml0U2VhcmNoSW5wdXQodGhpcy4kKCcuc2VsZWN0aXZpdHktc2VhcmNoLWlucHV0JykpO1xyXG4gICAgICAgIHNlbGVjdGl2aXR5LmZvY3VzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgRXZlbnREZWxlZ2F0b3IuY2FsbCh0aGlzKTtcclxuXHJcbiAgICB0aGlzLiRyZXN1bHRzLm9uKCdzY3JvbGwgdG91Y2htb3ZlIHRvdWNoZW5kJywgZGVib3VuY2UodGhpcy5fc2Nyb2xsZWQuYmluZCh0aGlzKSwgNTApKTtcclxuXHJcbiAgICB0aGlzLnNob3dMb2FkaW5nKCk7XHJcblxyXG4gICAgc2V0VGltZW91dCh0aGlzLnRyaWdnZXJPcGVuLmJpbmQodGhpcyksIDEpO1xyXG59XHJcblxyXG4vKipcclxuICogTWV0aG9kcy5cclxuICovXHJcbiQuZXh0ZW5kKFNlbGVjdGl2aXR5RHJvcGRvd24ucHJvdG90eXBlLCBFdmVudERlbGVnYXRvci5wcm90b3R5cGUsIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlbmllbmNlIHNob3J0Y3V0IGZvciB0aGlzLiRlbC5maW5kKHNlbGVjdG9yKS5cclxuICAgICAqL1xyXG4gICAgJDogZnVuY3Rpb24oc2VsZWN0b3IpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoc2VsZWN0b3IpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdGhlIGRyb3Bkb3duIHRvIHRoZSBET00uXHJcbiAgICAgKi9cclxuICAgIGFkZFRvRG9tOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyICRuZXh0O1xyXG4gICAgICAgIHZhciAkYW5jaG9yID0gdGhpcy5zZWxlY3Rpdml0eS4kZWw7XHJcbiAgICAgICAgd2hpbGUgKCgkbmV4dCA9ICRhbmNob3IubmV4dCgnLnNlbGVjdGl2aXR5LWRyb3Bkb3duJykpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAkYW5jaG9yID0gJG5leHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vdGhpcy4kZWwuaW5zZXJ0QWZ0ZXIoJGFuY2hvcik7XHJcbiAgICAgICAgJGFuY2hvci5hcHBlbmQodGhpcy4kZWwpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIENsb3NlcyB0aGUgZHJvcGRvd24uXHJcbiAgICAgKi9cclxuICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl9jbG9zZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fY2xvc2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGVsLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVDbG9zZUhhbmRsZXIoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aXZpdHkuJGVsLm9mZignc2VsZWN0aXZpdHktc2VsZWN0aW5nJywgdGhpcy5fY2xvc2VQcm94eSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJDbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudHMgbWFwLlxyXG4gICAgICpcclxuICAgICAqIEZvbGxvd3MgdGhlIHNhbWUgZm9ybWF0IGFzIEJhY2tib25lOiBodHRwOi8vYmFja2JvbmVqcy5vcmcvI1ZpZXctZGVsZWdhdGVFdmVudHNcclxuICAgICAqL1xyXG4gICAgZXZlbnRzOiB7XHJcbiAgICAgICAgJ2NsaWNrIC5zZWxlY3Rpdml0eS1sb2FkLW1vcmUnOiAnX2xvYWRNb3JlQ2xpY2tlZCcsXHJcbiAgICAgICAgJ2NsaWNrIC5zZWxlY3Rpdml0eS1yZXN1bHQtaXRlbSc6ICdfcmVzdWx0Q2xpY2tlZCcsXHJcbiAgICAgICAgJ21vdXNlZW50ZXIgLnNlbGVjdGl2aXR5LWxvYWQtbW9yZSc6ICdfbG9hZE1vcmVIb3ZlcmVkJyxcclxuICAgICAgICAnbW91c2VlbnRlciAuc2VsZWN0aXZpdHktcmVzdWx0LWl0ZW0nOiAnX3Jlc3VsdEhvdmVyZWQnXHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGlnaGxpZ2h0cyBhIHJlc3VsdCBpdGVtLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpdGVtIFRoZSBpdGVtIHRvIGhpZ2hsaWdodC5cclxuICAgICAqL1xyXG4gICAgaGlnaGxpZ2h0OiBmdW5jdGlvbihpdGVtKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmxvYWRNb3JlSGlnaGxpZ2h0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy4kKCcuc2VsZWN0aXZpdHktbG9hZC1tb3JlJykucmVtb3ZlQ2xhc3MoJ2hpZ2hsaWdodCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy4kKCcuc2VsZWN0aXZpdHktcmVzdWx0LWl0ZW0nKS5yZW1vdmVDbGFzcygnaGlnaGxpZ2h0JylcclxuICAgICAgICAgICAgLmZpbHRlcignW2RhdGEtaXRlbS1pZD0nICsgU2VsZWN0aXZpdHkucXVvdGVDc3NBdHRyKGl0ZW0uaWQpICsgJ10nKVxyXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2hpZ2hsaWdodCcpO1xyXG5cclxuICAgICAgICB0aGlzLmhpZ2hsaWdodGVkUmVzdWx0ID0gaXRlbTtcclxuICAgICAgICB0aGlzLmxvYWRNb3JlSGlnaGxpZ2h0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5zZWxlY3Rpdml0eS50cmlnZ2VyRXZlbnQoJ3NlbGVjdGl2aXR5LWhpZ2hsaWdodCcsIHsgaXRlbTogaXRlbSwgaWQ6IGl0ZW0uaWQgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGlnaGxpZ2h0cyB0aGUgbG9hZCBtb3JlIGxpbmsuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGl0ZW0gVGhlIGl0ZW0gdG8gaGlnaGxpZ2h0LlxyXG4gICAgICovXHJcbiAgICBoaWdobGlnaHRMb2FkTW9yZTogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHRoaXMuJCgnLnNlbGVjdGl2aXR5LXJlc3VsdC1pdGVtJykucmVtb3ZlQ2xhc3MoJ2hpZ2hsaWdodCcpO1xyXG5cclxuICAgICAgICB0aGlzLiQoJy5zZWxlY3Rpdml0eS1sb2FkLW1vcmUnKS5hZGRDbGFzcygnaGlnaGxpZ2h0Jyk7XHJcblxyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRSZXN1bHQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubG9hZE1vcmVIaWdobGlnaHRlZCA9IHRydWU7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTG9hZHMgYSBmb2xsb3ctdXAgcGFnZSB3aXRoIHJlc3VsdHMgYWZ0ZXIgYSBzZWFyY2guXHJcbiAgICAgKlxyXG4gICAgICogVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGFmdGVyIGEgY2FsbCB0byBzZWFyY2goKSB3aGVuIHRoZSBjYWxsYmFjayBoYXMgaW5kaWNhdGVkXHJcbiAgICAgKiBtb3JlIHJlc3VsdHMgYXJlIGF2YWlsYWJsZS5cclxuICAgICAqL1xyXG4gICAgbG9hZE1vcmU6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB0aGlzLm9wdGlvbnMucXVlcnkoe1xyXG4gICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5yZXN1bHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hvd1Jlc3VsdHMoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNlbGVjdGl2aXR5LnByb2Nlc3NJdGVtcyhyZXNwb25zZS5yZXN1bHRzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeyBhZGQ6IHRydWUsIGhhc01vcmU6ICEhcmVzcG9uc2UubW9yZSB9XHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYWxsYmFjayBtdXN0IGJlIHBhc3NlZCBhIHJlc3BvbnNlIG9iamVjdCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIGVycm9yOiB0aGlzLl9zaG93UmVzdWx0cy5iaW5kKHRoaXMsIFtdLCB7IGFkZDogdHJ1ZSB9KSxcclxuICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLnJlc3VsdHMubGVuZ3RoLFxyXG4gICAgICAgICAgICBzZWxlY3Rpdml0eTogdGhpcy5zZWxlY3Rpdml0eSxcclxuICAgICAgICAgICAgdGVybTogdGhpcy50ZXJtXHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUG9zaXRpb25zIHRoZSBkcm9wZG93biBpbnNpZGUgdGhlIERPTS5cclxuICAgICAqL1xyXG4gICAgcG9zaXRpb246IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb247XHJcbiAgICAgICAgaWYgKHBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uKHRoaXMuJGVsLCB0aGlzLnNlbGVjdGl2aXR5LiRlbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9zY3JvbGxlZCgpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgdGhlIGV2ZW50IGhhbmRsZXIgdG8gY2xvc2UgdGhlIGRyb3Bkb3duLlxyXG4gICAgICovXHJcbiAgICByZW1vdmVDbG9zZUhhbmRsZXI6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAkKCdib2R5Jykub2ZmKCdjbGljaycsIHRoaXMuX2Nsb3NlUHJveHkpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlcnMgYW4gYXJyYXkgb2YgcmVzdWx0IGl0ZW1zLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpdGVtcyBBcnJheSBvZiByZXN1bHQgaXRlbXMuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiBIVE1MLWZvcm1hdHRlZCBzdHJpbmcgdG8gZGlzcGxheSB0aGUgcmVzdWx0IGl0ZW1zLlxyXG4gICAgICovXHJcbiAgICByZW5kZXJJdGVtczogZnVuY3Rpb24oaXRlbXMpIHtcclxuXHJcbiAgICAgICAgdmFyIHNlbGVjdGl2aXR5ID0gdGhpcy5zZWxlY3Rpdml0eTtcclxuICAgICAgICByZXR1cm4gaXRlbXMubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHNlbGVjdGl2aXR5LnRlbXBsYXRlKGl0ZW0uaWQgPyAncmVzdWx0SXRlbScgOiAncmVzdWx0TGFiZWwnLCBpdGVtKTtcclxuICAgICAgICAgICAgaWYgKGl0ZW0uY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzZWxlY3Rpdml0eS50ZW1wbGF0ZSgncmVzdWx0Q2hpbGRyZW4nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW5IdG1sOiB0aGlzLnJlbmRlckl0ZW1zKGl0ZW0uY2hpbGRyZW4pXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0sIHRoaXMpLmpvaW4oJycpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlYXJjaGVzIGZvciByZXN1bHRzIGJhc2VkIG9uIHRoZSB0ZXJtIGdpdmVuIG9yIHRoZSB0ZXJtIGVudGVyZWQgaW4gdGhlIHNlYXJjaCBpbnB1dC5cclxuICAgICAqXHJcbiAgICAgKiBJZiBhbiBpdGVtcyBhcnJheSBoYXMgYmVlbiBwYXNzZWQgd2l0aCB0aGUgb3B0aW9ucyB0byB0aGUgU2VsZWN0aXZpdHkgaW5zdGFuY2UsIGEgbG9jYWxcclxuICAgICAqIHNlYXJjaCB3aWxsIGJlIHBlcmZvcm1lZCBhbW9uZyB0aG9zZSBpdGVtcy4gT3RoZXJ3aXNlLCB0aGUgcXVlcnkgZnVuY3Rpb24gc3BlY2lmaWVkIGluIHRoZVxyXG4gICAgICogb3B0aW9ucyB3aWxsIGJlIHVzZWQgdG8gcGVyZm9ybSB0aGUgc2VhcmNoLiBJZiBuZWl0aGVyIGlzIGRlZmluZWQsIG5vdGhpbmcgaGFwcGVucy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdGVybSBUZXJtIHRvIHNlYXJjaCBmb3IuXHJcbiAgICAgKi9cclxuICAgIHNlYXJjaDogZnVuY3Rpb24odGVybSkge1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgIHRlcm0gPSB0ZXJtIHx8ICcnO1xyXG4gICAgICAgIHNlbGYudGVybSA9IHRlcm07XHJcblxyXG4gICAgICAgIGlmIChzZWxmLm9wdGlvbnMuaXRlbXMpIHtcclxuICAgICAgICAgICAgdGVybSA9IFNlbGVjdGl2aXR5LnRyYW5zZm9ybVRleHQodGVybSk7XHJcbiAgICAgICAgICAgIHZhciBtYXRjaGVyID0gc2VsZi5zZWxlY3Rpdml0eS5tYXRjaGVyO1xyXG4gICAgICAgICAgICBzZWxmLl9zaG93UmVzdWx0cyhzZWxmLm9wdGlvbnMuaXRlbXMubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVyKGl0ZW0sIHRlcm0pO1xyXG4gICAgICAgICAgICB9KS5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICEhaXRlbTtcclxuICAgICAgICAgICAgfSksIHsgdGVybTogdGVybSB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHNlbGYub3B0aW9ucy5xdWVyeSkge1xyXG4gICAgICAgICAgICBzZWxmLm9wdGlvbnMucXVlcnkoe1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnJlc3VsdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2hvd1Jlc3VsdHMoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWxlY3Rpdml0eS5wcm9jZXNzSXRlbXMocmVzcG9uc2UucmVzdWx0cyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGhhc01vcmU6ICEhcmVzcG9uc2UubW9yZSwgdGVybTogdGVybSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYWxsYmFjayBtdXN0IGJlIHBhc3NlZCBhIHJlc3BvbnNlIG9iamVjdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlcnJvcjogc2VsZi5zaG93RXJyb3IuYmluZChzZWxmKSxcclxuICAgICAgICAgICAgICAgIG9mZnNldDogMCxcclxuICAgICAgICAgICAgICAgIHNlbGVjdGl2aXR5OiBzZWxmLnNlbGVjdGl2aXR5LFxyXG4gICAgICAgICAgICAgICAgdGVybTogdGVybVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VsZWN0cyB0aGUgaGlnaGxpZ2h0ZWQgaXRlbS5cclxuICAgICAqL1xyXG4gICAgc2VsZWN0SGlnaGxpZ2h0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaGlnaGxpZ2h0ZWRSZXN1bHQpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RJdGVtKHRoaXMuaGlnaGxpZ2h0ZWRSZXN1bHQuaWQpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5sb2FkTW9yZUhpZ2hsaWdodGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xvYWRNb3JlQ2xpY2tlZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZWxlY3RzIHRoZSBpdGVtIHdpdGggdGhlIGdpdmVuIElELlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpZCBJRCBvZiB0aGUgaXRlbSB0byBzZWxlY3QuXHJcbiAgICAgKi9cclxuICAgIHNlbGVjdEl0ZW06IGZ1bmN0aW9uKGlkKSB7XHJcblxyXG4gICAgICAgIHZhciBpdGVtID0gU2VsZWN0aXZpdHkuZmluZE5lc3RlZEJ5SWQodGhpcy5yZXN1bHRzLCBpZCk7XHJcbiAgICAgICAgaWYgKGl0ZW0gJiYgIWl0ZW0uZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7IGlkOiBpZCwgaXRlbTogaXRlbSB9O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3Rpdml0eS50cmlnZ2VyRXZlbnQoJ3NlbGVjdGl2aXR5LXNlbGVjdGluZycsIG9wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGl2aXR5LnRyaWdnZXJFdmVudCgnc2VsZWN0aXZpdHktc2VsZWN0ZWQnLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHVwIGFuIGV2ZW50IGhhbmRsZXIgdGhhdCB3aWxsIGNsb3NlIHRoZSBkcm9wZG93biB3aGVuIHRoZSBTZWxlY3Rpdml0eSBjb250cm9sIGxvc2VzXHJcbiAgICAgKiBmb2N1cy5cclxuICAgICAqL1xyXG4gICAgc2V0dXBDbG9zZUhhbmRsZXI6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAkKCdib2R5Jykub24oJ2NsaWNrJywgdGhpcy5fY2xvc2VQcm94eSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2hvd3MgYW4gZXJyb3IgbWVzc2FnZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBFcnJvciBtZXNzYWdlIHRvIGRpc3BsYXkuXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIG9iamVjdC4gTWF5IGNvbnRhaW4gdGhlIGZvbGxvd2luZyBwcm9wZXJ0eTpcclxuICAgICAqICAgICAgICAgICAgICAgIGVzY2FwZSAtIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIEhUTUwtZXNjYXBpbmcgb2YgdGhlIG1lc3NhZ2UuIFVzZWZ1bCBpZiB5b3VcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgIHdhbnQgdG8gc2V0IHJhdyBIVE1MIGFzIHRoZSBtZXNzYWdlLCBidXQgbWF5IG9wZW4geW91IHVwIHRvIFhTU1xyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNrcyBpZiB5b3UncmUgbm90IGNhcmVmdWwgd2l0aCBlc2NhcGluZyB1c2VyIGlucHV0LlxyXG4gICAgICovXHJcbiAgICBzaG93RXJyb3I6IGZ1bmN0aW9uKG1lc3NhZ2UsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gICAgICAgIHRoaXMuJHJlc3VsdHMuaHRtbCh0aGlzLnNlbGVjdGl2aXR5LnRlbXBsYXRlKCdlcnJvcicsIHtcclxuICAgICAgICAgICAgZXNjYXBlOiBvcHRpb25zLmVzY2FwZSAhPT0gZmFsc2UsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIHRoaXMuaGFzTW9yZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucmVzdWx0cyA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLmhpZ2hsaWdodGVkUmVzdWx0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmxvYWRNb3JlSGlnaGxpZ2h0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbigpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNob3dzIGEgbG9hZGluZyBpbmRpY2F0b3IgaW4gdGhlIGRyb3Bkb3duLlxyXG4gICAgICovXHJcbiAgICBzaG93TG9hZGluZzogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHRoaXMuJHJlc3VsdHMuaHRtbCh0aGlzLnNlbGVjdGl2aXR5LnRlbXBsYXRlKCdsb2FkaW5nJykpO1xyXG5cclxuICAgICAgICB0aGlzLmhhc01vcmUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnJlc3VsdHMgPSBbXTtcclxuXHJcbiAgICAgICAgdGhpcy5oaWdobGlnaHRlZFJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5sb2FkTW9yZUhpZ2hsaWdodGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMucG9zaXRpb24oKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93cyB0aGUgcmVzdWx0cyBmcm9tIGEgc2VhcmNoIHF1ZXJ5LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSByZXN1bHRzIEFycmF5IG9mIHJlc3VsdCBpdGVtcy5cclxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0LiBNYXkgY29udGFpbiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XHJcbiAgICAgKiAgICAgICAgICAgICAgICBhZGQgLSBUcnVlIGlmIHRoZSByZXN1bHRzIHNob3VsZCBiZSBhZGRlZCB0byBhbnkgYWxyZWFkeSBzaG93biByZXN1bHRzLlxyXG4gICAgICogICAgICAgICAgICAgICAgaGFzTW9yZSAtIEJvb2xlYW4gd2hldGhlciBtb3JlIHJlc3VsdHMgY2FuIGJlIGZldGNoZWQgdXNpbmcgdGhlIHF1ZXJ5KClcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbi5cclxuICAgICAqICAgICAgICAgICAgICAgIHRlcm0gLSBUaGUgc2VhcmNoIHRlcm0gZm9yIHdoaWNoIHRoZSByZXN1bHRzIGFyZSBkaXNwbGF5ZWQuXHJcbiAgICAgKi9cclxuICAgIHNob3dSZXN1bHRzOiBmdW5jdGlvbihyZXN1bHRzLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHZhciByZXN1bHRzSHRtbCA9IHRoaXMucmVuZGVySXRlbXMocmVzdWx0cyk7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzTW9yZSkge1xyXG4gICAgICAgICAgICByZXN1bHRzSHRtbCArPSB0aGlzLnNlbGVjdGl2aXR5LnRlbXBsYXRlKCdsb2FkTW9yZScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICghcmVzdWx0c0h0bWwgJiYgIW9wdGlvbnMuYWRkKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRzSHRtbCA9IHRoaXMuc2VsZWN0aXZpdHkudGVtcGxhdGUoJ25vUmVzdWx0cycsIHsgdGVybTogb3B0aW9ucy50ZXJtIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5hZGQpIHtcclxuICAgICAgICAgICAgdGhpcy4kKCcuc2VsZWN0aXZpdHktbG9hZGluZycpLnJlcGxhY2VXaXRoKHJlc3VsdHNIdG1sKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVzdWx0cyA9IHRoaXMucmVzdWx0cy5jb25jYXQocmVzdWx0cyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy4kcmVzdWx0cy5odG1sKHJlc3VsdHNIdG1sKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVzdWx0cyA9IHJlc3VsdHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmhhc01vcmUgPSBvcHRpb25zLmhhc01vcmU7XHJcblxyXG4gICAgICAgIGlmICghb3B0aW9ucy5hZGQgfHwgdGhpcy5sb2FkTW9yZUhpZ2hsaWdodGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hpZ2hsaWdodEZpcnN0SXRlbShyZXN1bHRzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucG9zaXRpb24oKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2VycyB0aGUgJ3NlbGVjdGl2aXR5LWNsb3NlJyBldmVudC5cclxuICAgICAqL1xyXG4gICAgdHJpZ2dlckNsb3NlOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdGhpcy5zZWxlY3Rpdml0eS4kZWwudHJpZ2dlcignc2VsZWN0aXZpdHktY2xvc2UnKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2VycyB0aGUgJ3NlbGVjdGl2aXR5LW9wZW4nIGV2ZW50LlxyXG4gICAgICovXHJcbiAgICB0cmlnZ2VyT3BlbjogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHRoaXMuc2VsZWN0aXZpdHkuJGVsLnRyaWdnZXIoJ3NlbGVjdGl2aXR5LW9wZW4nKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfaGlnaGxpZ2h0Rmlyc3RJdGVtOiBmdW5jdGlvbihyZXN1bHRzKSB7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGZpbmRGaXJzdEl0ZW0ocmVzdWx0cykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gcmVzdWx0cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHJlc3VsdHNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBmaW5kRmlyc3RJdGVtKHJlc3VsdC5jaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZmlyc3RJdGVtID0gZmluZEZpcnN0SXRlbShyZXN1bHRzKTtcclxuICAgICAgICBpZiAoZmlyc3RJdGVtKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0KGZpcnN0SXRlbSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5oaWdobGlnaHRlZFJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZE1vcmVIaWdobGlnaHRlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfbG9hZE1vcmVDbGlja2VkOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdGhpcy4kKCcuc2VsZWN0aXZpdHktbG9hZC1tb3JlJykucmVwbGFjZVdpdGgodGhpcy5zZWxlY3Rpdml0eS50ZW1wbGF0ZSgnbG9hZGluZycpKTtcclxuXHJcbiAgICAgICAgdGhpcy5sb2FkTW9yZSgpO1xyXG5cclxuICAgICAgICB0aGlzLnNlbGVjdGl2aXR5LmZvY3VzKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfbG9hZE1vcmVIb3ZlcmVkOiBmdW5jdGlvbihldmVudCkge1xyXG5cclxuICAgICAgICBpZiAoZXZlbnQuc2NyZWVuWCA9PT0gdW5kZWZpbmVkIHx8IGV2ZW50LnNjcmVlblggIT09IHRoaXMuX2xhc3RNb3VzZVBvc2l0aW9uLnggfHxcclxuICAgICAgICAgICAgZXZlbnQuc2NyZWVuWSA9PT0gdW5kZWZpbmVkIHx8IGV2ZW50LnNjcmVlblkgIT09IHRoaXMuX2xhc3RNb3VzZVBvc2l0aW9uLnkpIHtcclxuICAgICAgICAgICAgdGhpcy5oaWdobGlnaHRMb2FkTW9yZSgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fcmVjb3JkTW91c2VQb3NpdGlvbihldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9yZWNvcmRNb3VzZVBvc2l0aW9uOiBmdW5jdGlvbihldmVudCkge1xyXG5cclxuICAgICAgICB0aGlzLl9sYXN0TW91c2VQb3NpdGlvbiA9IHsgeDogZXZlbnQuc2NyZWVuWCwgeTogZXZlbnQuc2NyZWVuWSB9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9yZXN1bHRDbGlja2VkOiBmdW5jdGlvbihldmVudCkge1xyXG5cclxuICAgICAgICB0aGlzLnNlbGVjdEl0ZW0odGhpcy5zZWxlY3Rpdml0eS5fZ2V0SXRlbUlkKGV2ZW50KSk7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfcmVzdWx0SG92ZXJlZDogZnVuY3Rpb24oZXZlbnQpIHtcclxuXHJcbiAgICAgICAgaWYgKGV2ZW50LnNjcmVlblggPT09IHVuZGVmaW5lZCB8fCBldmVudC5zY3JlZW5YICE9PSB0aGlzLl9sYXN0TW91c2VQb3NpdGlvbi54IHx8XHJcbiAgICAgICAgICAgIGV2ZW50LnNjcmVlblkgPT09IHVuZGVmaW5lZCB8fCBldmVudC5zY3JlZW5ZICE9PSB0aGlzLl9sYXN0TW91c2VQb3NpdGlvbi55KSB7XHJcbiAgICAgICAgICAgIHZhciBpZCA9IHRoaXMuc2VsZWN0aXZpdHkuX2dldEl0ZW1JZChldmVudCk7XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gU2VsZWN0aXZpdHkuZmluZE5lc3RlZEJ5SWQodGhpcy5yZXN1bHRzLCBpZCk7XHJcbiAgICAgICAgICAgIGlmIChpdGVtICYmICFpdGVtLmRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZ2hsaWdodChpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fcmVjb3JkTW91c2VQb3NpdGlvbihldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9zY3JvbGxlZDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciAkbG9hZE1vcmUgPSB0aGlzLiQoJy5zZWxlY3Rpdml0eS1sb2FkLW1vcmUnKTtcclxuICAgICAgICBpZiAoJGxvYWRNb3JlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAoJGxvYWRNb3JlWzBdLm9mZnNldFRvcCAtIHRoaXMuJHJlc3VsdHNbMF0uc2Nyb2xsVG9wIDwgdGhpcy4kZWwuaGVpZ2h0KCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRNb3JlQ2xpY2tlZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9zaG93UmVzdWx0czogZnVuY3Rpb24ocmVzdWx0cywgb3B0aW9ucykge1xyXG5cclxuICAgICAgICB0aGlzLnNob3dSZXN1bHRzKHRoaXMuc2VsZWN0aXZpdHkuZmlsdGVyUmVzdWx0cyhyZXN1bHRzKSwgb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX3N1cHByZXNzTW91c2VXaGVlbDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBzdXBwcmVzc01vdXNlV2hlZWxTZWxlY3RvciA9IHRoaXMuc2VsZWN0aXZpdHkub3B0aW9ucy5zdXBwcmVzc01vdXNlV2hlZWxTZWxlY3RvcjtcclxuICAgICAgICBpZiAoc3VwcHJlc3NNb3VzZVdoZWVsU2VsZWN0b3IgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gc3VwcHJlc3NNb3VzZVdoZWVsU2VsZWN0b3IgfHwgJy5zZWxlY3Rpdml0eS1yZXN1bHRzLWNvbnRhaW5lcic7XHJcbiAgICAgICAgdGhpcy4kZWwub24oJ0RPTU1vdXNlU2Nyb2xsIG1vdXNld2hlZWwnLCBzZWxlY3RvciwgZnVuY3Rpb24oZXZlbnQpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIFRoYW5rcyB0byBUcm95IEFsZm9yZDpcclxuICAgICAgICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81ODAyNDY3L3ByZXZlbnQtc2Nyb2xsaW5nLW9mLXBhcmVudC1lbGVtZW50XHJcblxyXG4gICAgICAgICAgICB2YXIgJGVsID0gJCh0aGlzKSxcclxuICAgICAgICAgICAgICAgIHNjcm9sbFRvcCA9IHRoaXMuc2Nyb2xsVG9wLFxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0ID0gdGhpcy5zY3JvbGxIZWlnaHQsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSAkZWwuaGVpZ2h0KCksXHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50ID0gZXZlbnQub3JpZ2luYWxFdmVudCxcclxuICAgICAgICAgICAgICAgIGRlbHRhID0gKGV2ZW50LnR5cGUgPT09ICdET01Nb3VzZVNjcm9sbCcgPyBvcmlnaW5hbEV2ZW50LmRldGFpbCAqIC00MFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG9yaWdpbmFsRXZlbnQud2hlZWxEZWx0YSksXHJcbiAgICAgICAgICAgICAgICB1cCA9IGRlbHRhID4gMDtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHByZXZlbnQoKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBldmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc2Nyb2xsSGVpZ2h0ID4gaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXVwICYmIC1kZWx0YSA+IHNjcm9sbEhlaWdodCAtIGhlaWdodCAtIHNjcm9sbFRvcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNjcm9sbGluZyBkb3duLCBidXQgdGhpcyB3aWxsIHRha2UgdXMgcGFzdCB0aGUgYm90dG9tLlxyXG4gICAgICAgICAgICAgICAgICAgICRlbC5zY3JvbGxUb3Aoc2Nyb2xsSGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldmVudCgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1cCAmJiBkZWx0YSA+IHNjcm9sbFRvcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNjcm9sbGluZyB1cCwgYnV0IHRoaXMgd2lsbCB0YWtlIHVzIHBhc3QgdGhlIHRvcC5cclxuICAgICAgICAgICAgICAgICAgICAkZWwuc2Nyb2xsVG9wKDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2ZW50KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTZWxlY3Rpdml0eS5Ecm9wZG93biA9IFNlbGVjdGl2aXR5RHJvcGRvd247XHJcblxyXG59LHtcIjJcIjoyLFwiM1wiOjMsXCI4XCI6OCxcImpxdWVyeVwiOlwianF1ZXJ5XCJ9XSwxMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciAkID0gd2luZG93LmpRdWVyeSB8fCB3aW5kb3cuWmVwdG87XHJcblxyXG52YXIgU2VsZWN0aXZpdHkgPSBfZGVyZXFfKDgpO1xyXG52YXIgTXVsdGlwbGVTZWxlY3Rpdml0eSA9IF9kZXJlcV8oMTQpO1xyXG5cclxuZnVuY3Rpb24gaXNWYWxpZEVtYWlsKGVtYWlsKSB7XHJcblxyXG4gICAgdmFyIGF0SW5kZXggPSBlbWFpbC5pbmRleE9mKCdAJyk7XHJcbiAgICB2YXIgZG90SW5kZXggPSBlbWFpbC5sYXN0SW5kZXhPZignLicpO1xyXG4gICAgdmFyIHNwYWNlSW5kZXggPSBlbWFpbC5pbmRleE9mKCcgJyk7XHJcbiAgICByZXR1cm4gKGF0SW5kZXggPiAwICYmIGRvdEluZGV4ID4gYXRJbmRleCArIDEgJiZcclxuICAgICAgICAgICAgZG90SW5kZXggPCBlbWFpbC5sZW5ndGggLSAyICYmIHNwYWNlSW5kZXggPT09IC0xKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbGFzdFdvcmQodG9rZW4sIGxlbmd0aCkge1xyXG5cclxuICAgIGxlbmd0aCA9IChsZW5ndGggPT09IHVuZGVmaW5lZCA/IHRva2VuLmxlbmd0aCA6IGxlbmd0aCk7XHJcbiAgICBmb3IgKHZhciBpID0gbGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICBpZiAoKC9cXHMvKS50ZXN0KHRva2VuW2ldKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdG9rZW4uc2xpY2UoaSArIDEsIGxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRva2VuLnNsaWNlKDAsIGxlbmd0aCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0cmlwRW5jbG9zdXJlKHRva2VuLCBlbmNsb3N1cmUpIHtcclxuXHJcbiAgICBpZiAodG9rZW4uc2xpY2UoMCwgMSkgPT09IGVuY2xvc3VyZVswXSAmJiB0b2tlbi5zbGljZSgtMSkgPT09IGVuY2xvc3VyZVsxXSkge1xyXG4gICAgICAgIHJldHVybiB0b2tlbi5zbGljZSgxLCAtMSkudHJpbSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdG9rZW4udHJpbSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVFbWFpbEl0ZW0odG9rZW4pIHtcclxuXHJcbiAgICB2YXIgZW1haWwgPSBsYXN0V29yZCh0b2tlbik7XHJcbiAgICB2YXIgbmFtZSA9IHRva2VuLnNsaWNlKDAsIC1lbWFpbC5sZW5ndGgpLnRyaW0oKTtcclxuICAgIGlmIChpc1ZhbGlkRW1haWwoZW1haWwpKSB7XHJcbiAgICAgICAgZW1haWwgPSBzdHJpcEVuY2xvc3VyZShzdHJpcEVuY2xvc3VyZShlbWFpbCwgJygpJyksICc8PicpO1xyXG4gICAgICAgIG5hbWUgPSBzdHJpcEVuY2xvc3VyZShuYW1lLCAnXCJcIicpLnRyaW0oKSB8fCBlbWFpbDtcclxuICAgICAgICByZXR1cm4geyBpZDogZW1haWwsIHRleHQ6IG5hbWUgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuICh0b2tlbi50cmltKCkgPyB7IGlkOiB0b2tlbiwgdGV4dDogdG9rZW4gfSA6IG51bGwpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBlbWFpbFRva2VuaXplcihpbnB1dCwgc2VsZWN0aW9uLCBjcmVhdGVUb2tlbikge1xyXG5cclxuICAgIGZ1bmN0aW9uIGhhc1Rva2VuKGlucHV0KSB7XHJcbiAgICAgICAgaWYgKGlucHV0KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBpbnB1dC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChpbnB1dFtpXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnOyc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICcsJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1xcbic6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlICcgJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1xcdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWRFbWFpbChsYXN0V29yZChpbnB1dCwgaSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1wiJzpcclxuICAgICAgICAgICAgICAgICAgICBkbyB7IGkrKzsgfSB3aGlsZShpIDwgbGVuZ3RoICYmIGlucHV0W2ldICE9PSAnXCInKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHRha2VUb2tlbihpbnB1dCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBpbnB1dC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGlucHV0W2ldKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJzsnOlxyXG4gICAgICAgICAgICBjYXNlICcsJzpcclxuICAgICAgICAgICAgY2FzZSAnXFxuJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IHRlcm06IGlucHV0LnNsaWNlKDAsIGkpLCBpbnB1dDogaW5wdXQuc2xpY2UoaSArIDEpIH07XHJcbiAgICAgICAgICAgIGNhc2UgJyAnOlxyXG4gICAgICAgICAgICBjYXNlICdcXHQnOlxyXG4gICAgICAgICAgICAgICAgaWYgKGlzVmFsaWRFbWFpbChsYXN0V29yZChpbnB1dCwgaSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdGVybTogaW5wdXQuc2xpY2UoMCwgaSksIGlucHV0OiBpbnB1dC5zbGljZShpICsgMSkgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdcIic6XHJcbiAgICAgICAgICAgICAgICBkbyB7IGkrKzsgfSB3aGlsZShpIDwgbGVuZ3RoICYmIGlucHV0W2ldICE9PSAnXCInKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfVxyXG5cclxuICAgIHdoaWxlIChoYXNUb2tlbihpbnB1dCkpIHtcclxuICAgICAgICB2YXIgdG9rZW4gPSB0YWtlVG9rZW4oaW5wdXQpO1xyXG4gICAgICAgIGlmICh0b2tlbi50ZXJtKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gY3JlYXRlRW1haWxJdGVtKHRva2VuLnRlcm0pO1xyXG4gICAgICAgICAgICBpZiAoaXRlbSAmJiAhKGl0ZW0uaWQgJiYgU2VsZWN0aXZpdHkuZmluZEJ5SWQoc2VsZWN0aW9uLCBpdGVtLmlkKSkpIHtcclxuICAgICAgICAgICAgICAgIGNyZWF0ZVRva2VuKGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlucHV0ID0gdG9rZW4uaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlucHV0O1xyXG59XHJcblxyXG4vKipcclxuICogRW1haWxzZWxlY3Rpdml0eSBDb25zdHJ1Y3Rvci5cclxuICpcclxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBvYmplY3QuIEFjY2VwdHMgYWxsIG9wdGlvbnMgZnJvbSB0aGUgTXVsdGlwbGVTZWxlY3Rpdml0eSBDb25zdHJ1Y3Rvci5cclxuICovXHJcbmZ1bmN0aW9uIEVtYWlsc2VsZWN0aXZpdHkob3B0aW9ucykge1xyXG5cclxuICAgIE11bHRpcGxlU2VsZWN0aXZpdHkuY2FsbCh0aGlzLCBvcHRpb25zKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1ldGhvZHMuXHJcbiAqL1xyXG52YXIgY2FsbFN1cGVyID0gU2VsZWN0aXZpdHkuaW5oZXJpdHMoRW1haWxzZWxlY3Rpdml0eSwgTXVsdGlwbGVTZWxlY3Rpdml0eSwge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXRcclxuICAgICAqL1xyXG4gICAgaW5pdFNlYXJjaElucHV0OiBmdW5jdGlvbigkaW5wdXQpIHtcclxuXHJcbiAgICAgICAgY2FsbFN1cGVyKHRoaXMsICdpbml0U2VhcmNoSW5wdXQnLCAkaW5wdXQpO1xyXG5cclxuICAgICAgICAkaW5wdXQub24oJ2JsdXInLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHRlcm0gPSAkaW5wdXQudmFsKCk7XHJcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRW1haWwobGFzdFdvcmQodGVybSkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChjcmVhdGVFbWFpbEl0ZW0odGVybSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdFxyXG4gICAgICpcclxuICAgICAqIE5vdGUgdGhhdCBmb3IgdGhlIEVtYWlsIGlucHV0IHR5cGUgdGhlIG9wdGlvbiBzaG93RHJvcGRvd24gaXMgc2V0IHRvIGZhbHNlIGFuZCB0aGUgdG9rZW5pemVyXHJcbiAgICAgKiBvcHRpb24gaXMgc2V0IHRvIGEgdG9rZW5pemVyIHNwZWNpYWxpemVkIGZvciBlbWFpbCBhZGRyZXNzZXMuXHJcbiAgICAgKi9cclxuICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcclxuICAgICAgICAgICAgY3JlYXRlVG9rZW5JdGVtOiBjcmVhdGVFbWFpbEl0ZW0sXHJcbiAgICAgICAgICAgIHNob3dEcm9wZG93bjogZmFsc2UsXHJcbiAgICAgICAgICAgIHRva2VuaXplcjogZW1haWxUb2tlbml6ZXJcclxuICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgY2FsbFN1cGVyKHRoaXMsICdzZXRPcHRpb25zJywgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU2VsZWN0aXZpdHkuSW5wdXRUeXBlcy5FbWFpbCA9IEVtYWlsc2VsZWN0aXZpdHk7XHJcblxyXG59LHtcIjE0XCI6MTQsXCI4XCI6OCxcImpxdWVyeVwiOlwianF1ZXJ5XCJ9XSwxMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBTZWxlY3Rpdml0eSA9IF9kZXJlcV8oOCk7XHJcblxyXG52YXIgS0VZX0JBQ0tTUEFDRSA9IDg7XHJcbnZhciBLRVlfRE9XTl9BUlJPVyA9IDQwO1xyXG52YXIgS0VZX0VOVEVSID0gMTM7XHJcbnZhciBLRVlfRVNDQVBFID0gMjc7XHJcbnZhciBLRVlfVEFCID0gOTtcclxudmFyIEtFWV9VUF9BUlJPVyA9IDM4O1xyXG5cclxuLyoqXHJcbiAqIFNlYXJjaCBpbnB1dCBsaXN0ZW5lciBwcm92aWRpbmcga2V5Ym9hcmQgc3VwcG9ydCBmb3IgbmF2aWdhdGluZyB0aGUgZHJvcGRvd24uXHJcbiAqL1xyXG5mdW5jdGlvbiBsaXN0ZW5lcihzZWxlY3Rpdml0eSwgJGlucHV0KSB7XHJcblxyXG4gICAgdmFyIGtleWRvd25DYW5jZWxlZCA9IGZhbHNlO1xyXG4gICAgdmFyIGNsb3NlU3VibWVudSA9IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNb3ZlcyBhIGRyb3Bkb3duJ3MgaGlnaGxpZ2h0IHRvIHRoZSBuZXh0IG9yIHByZXZpb3VzIHJlc3VsdCBpdGVtLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBkZWx0YSBFaXRoZXIgMSB0byBtb3ZlIHRvIHRoZSBuZXh0IGl0ZW0sIG9yIC0xIHRvIG1vdmUgdG8gdGhlIHByZXZpb3VzIGl0ZW0uXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIG1vdmVIaWdobGlnaHQoZHJvcGRvd24sIGRlbHRhKSB7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGZpbmRFbGVtZW50SW5kZXgoJGVsZW1lbnRzLCBzZWxlY3Rvcikge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gJGVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJGVsZW1lbnRzLmVxKGkpLmlzKHNlbGVjdG9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNjcm9sbFRvSGlnaGxpZ2h0KCkge1xyXG4gICAgICAgICAgICB2YXIgJGVsO1xyXG4gICAgICAgICAgICBpZiAoZHJvcGRvd24uaGlnaGxpZ2h0ZWRSZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBxdW90ZWRJZCA9IFNlbGVjdGl2aXR5LnF1b3RlQ3NzQXR0cihkcm9wZG93bi5oaWdobGlnaHRlZFJlc3VsdC5pZCk7XHJcbiAgICAgICAgICAgICAgICAkZWwgPSBkcm9wZG93bi4kKCcuc2VsZWN0aXZpdHktcmVzdWx0LWl0ZW1bZGF0YS1pdGVtLWlkPScgKyBxdW90ZWRJZCArICddJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZHJvcGRvd24ubG9hZE1vcmVIaWdobGlnaHRlZCkge1xyXG4gICAgICAgICAgICAgICAgJGVsID0gZHJvcGRvd24uJCgnLnNlbGVjdGl2aXR5LWxvYWQtbW9yZScpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBubyBoaWdobGlnaHQgdG8gc2Nyb2xsIHRvXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9ICRlbC5wb3NpdGlvbigpO1xyXG4gICAgICAgICAgICBpZiAoIXBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciB0b3AgPSBwb3NpdGlvbi50b3A7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHRzSGVpZ2h0ID0gZHJvcGRvd24uJHJlc3VsdHMuaGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIHZhciBlbEhlaWdodCA9ICgkZWwub3V0ZXJIZWlnaHQgPyAkZWwub3V0ZXJIZWlnaHQoKSA6ICRlbC5oZWlnaHQoKSk7XHJcbiAgICAgICAgICAgIGlmICh0b3AgPCAwIHx8IHRvcCA+IHJlc3VsdHNIZWlnaHQgLSBlbEhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgdG9wICs9IGRyb3Bkb3duLiRyZXN1bHRzLnNjcm9sbFRvcCgpO1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd24uJHJlc3VsdHMuc2Nyb2xsVG9wKGRlbHRhIDwgMCA/IHRvcCA6IHRvcCAtIHJlc3VsdHNIZWlnaHQgKyBlbEhlaWdodCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkcm9wZG93bi5zdWJtZW51KSB7XHJcbiAgICAgICAgICAgIG1vdmVIaWdobGlnaHQoZHJvcGRvd24uc3VibWVudSwgZGVsdGEpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgcmVzdWx0cyA9IGRyb3Bkb3duLnJlc3VsdHM7XHJcbiAgICAgICAgaWYgKHJlc3VsdHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHZhciAkcmVzdWx0cyA9IGRyb3Bkb3duLiQoJy5zZWxlY3Rpdml0eS1yZXN1bHQtaXRlbScpO1xyXG4gICAgICAgICAgICB2YXIgZGVmYXVsdEluZGV4ID0gKGRlbHRhID4gMCA/IDAgOiAkcmVzdWx0cy5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gZGVmYXVsdEluZGV4O1xyXG4gICAgICAgICAgICB2YXIgaGlnaGxpZ2h0ZWRSZXN1bHQgPSBkcm9wZG93bi5oaWdobGlnaHRlZFJlc3VsdDtcclxuICAgICAgICAgICAgaWYgKGhpZ2hsaWdodGVkUmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcXVvdGVkSWQgPSBTZWxlY3Rpdml0eS5xdW90ZUNzc0F0dHIoaGlnaGxpZ2h0ZWRSZXN1bHQuaWQpO1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBmaW5kRWxlbWVudEluZGV4KCRyZXN1bHRzLCAnW2RhdGEtaXRlbS1pZD0nICsgcXVvdGVkSWQgKyAnXScpICsgZGVsdGE7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVsdGEgPiAwID8gaW5kZXggPj0gJHJlc3VsdHMubGVuZ3RoIDogaW5kZXggPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRyb3Bkb3duLmhhc01vcmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24uaGlnaGxpZ2h0TG9hZE1vcmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9IaWdobGlnaHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gZGVmYXVsdEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFNlbGVjdGl2aXR5LmZpbmROZXN0ZWRCeUlkKHJlc3VsdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpdml0eS5fZ2V0SXRlbUlkKCRyZXN1bHRzW2luZGV4XSkpO1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5oaWdobGlnaHQocmVzdWx0LCB7IGRlbGF5OiAhIXJlc3VsdC5zdWJtZW51IH0pO1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsVG9IaWdobGlnaHQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBrZXlIZWxkKGV2ZW50KSB7XHJcblxyXG4gICAgICAgIHZhciBkcm9wZG93biA9IHNlbGVjdGl2aXR5LmRyb3Bkb3duO1xyXG4gICAgICAgIGlmIChkcm9wZG93bikge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gS0VZX0JBQ0tTUEFDRSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEkaW5wdXQudmFsKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZHJvcGRvd24uc3VibWVudSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VibWVudSA9IGRyb3Bkb3duLnN1Ym1lbnU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChzdWJtZW51LnN1Ym1lbnUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1lbnUgPSBzdWJtZW51LnN1Ym1lbnU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VTdWJtZW51ID0gc3VibWVudTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5ZG93bkNhbmNlbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSBLRVlfRE9XTl9BUlJPVykge1xyXG4gICAgICAgICAgICAgICAgbW92ZUhpZ2hsaWdodChkcm9wZG93biwgMSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PT0gS0VZX1VQX0FSUk9XKSB7XHJcbiAgICAgICAgICAgICAgICBtb3ZlSGlnaGxpZ2h0KGRyb3Bkb3duLCAtMSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PT0gS0VZX1RBQikge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpdml0eS5jbG9zZSh7IGtlZXBGb2N1czogZmFsc2UgfSk7XHJcbiAgICAgICAgICAgICAgICB9LCAxKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSBLRVlfRU5URVIpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIGRvbid0IHN1Ym1pdCBmb3JtcyBvbiBrZXlkb3duXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24ga2V5UmVsZWFzZWQoZXZlbnQpIHtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb3BlbigpIHtcclxuICAgICAgICAgICAgaWYgKHNlbGVjdGl2aXR5Lm9wdGlvbnMuc2hvd0Ryb3Bkb3duICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0aXZpdHkub3BlbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZHJvcGRvd24gPSBzZWxlY3Rpdml0eS5kcm9wZG93bjtcclxuICAgICAgICBpZiAoa2V5ZG93bkNhbmNlbGVkKSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGtleWRvd25DYW5jZWxlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNsb3NlU3VibWVudSkge1xyXG4gICAgICAgICAgICAgICAgY2xvc2VTdWJtZW51LmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3Rpdml0eS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgY2xvc2VTdWJtZW51ID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PT0gS0VZX0JBQ0tTUEFDRSkge1xyXG4gICAgICAgICAgICBpZiAoIWRyb3Bkb3duICYmIHNlbGVjdGl2aXR5Lm9wdGlvbnMuYWxsb3dDbGVhcikge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0aXZpdHkuY2xlYXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PT0gS0VZX0VOVEVSICYmICFldmVudC5jdHJsS2V5KSB7XHJcbiAgICAgICAgICAgIGlmIChkcm9wZG93bikge1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd24uc2VsZWN0SGlnaGxpZ2h0KCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0aXZpdHkub3B0aW9ucy5zaG93RHJvcGRvd24gIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBvcGVuKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSBLRVlfRVNDQVBFKSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGl2aXR5LmNsb3NlKCk7XHJcblxyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PT0gS0VZX0RPV05fQVJST1cgfHwgZXZlbnQua2V5Q29kZSA9PT0gS0VZX1VQX0FSUk9XKSB7XHJcbiAgICAgICAgICAgIC8vIGhhbmRsZWQgaW4ga2V5SGVsZCgpIGJlY2F1c2UgdGhlIHJlc3BvbnNlIGZlZWxzIGZhc3RlciBhbmQgaXQgd29ya3Mgd2l0aCByZXBlYXRlZFxyXG4gICAgICAgICAgICAvLyBldmVudHMgaWYgdGhlIHVzZXIgaG9sZHMgdGhlIGtleSBmb3IgYSBsb25nZXIgcGVyaW9kXHJcbiAgICAgICAgICAgIC8vIHN0aWxsLCB3ZSBpc3N1ZSBhbiBvcGVuKCkgY2FsbCBoZXJlIGluIGNhc2UgdGhlIGRyb3Bkb3duIHdhcyBub3QgeWV0IG9wZW4uLi5cclxuICAgICAgICAgICAgb3BlbigpO1xyXG5cclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvcGVuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICRpbnB1dC5vbigna2V5ZG93bicsIGtleUhlbGQpLm9uKCdrZXl1cCcsIGtleVJlbGVhc2VkKTtcclxufVxyXG5cclxuU2VsZWN0aXZpdHkuU2VhcmNoSW5wdXRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcblxyXG59LHtcIjhcIjo4fV0sMTM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG52YXIgZXNjYXBlID0gX2RlcmVxXyg0KTtcclxudmFyIFNlbGVjdGl2aXR5ID0gX2RlcmVxXyg4KTtcclxuXHJcbi8qKlxyXG4gKiBMb2NhbGl6YWJsZSBlbGVtZW50cyBvZiB0aGUgU2VsZWN0aXZpdHkgVGVtcGxhdGVzLlxyXG4gKlxyXG4gKiBCZSBhd2FyZSB0aGF0IHRoZXNlIHN0cmluZ3MgYXJlIGFkZGVkIHN0cmFpZ2h0IHRvIHRoZSBIVE1MIG91dHB1dCBvZiB0aGUgdGVtcGxhdGVzLCBzbyBhbnlcclxuICogbm9uLXNhZmUgc3RyaW5ncyBzaG91bGQgYmUgZXNjYXBlZC5cclxuICovXHJcblNlbGVjdGl2aXR5LkxvY2FsZSA9IHtcclxuXHJcbiAgICBhamF4RXJyb3I6IGZ1bmN0aW9uKHRlcm0pIHsgcmV0dXJuICdGYWlsZWQgdG8gZmV0Y2ggcmVzdWx0cyBmb3IgPGI+JyArIGVzY2FwZSh0ZXJtKSArICc8L2I+JzsgfSxcclxuICAgIGxvYWRpbmc6ICdMb2FkaW5nLi4uJyxcclxuICAgIGxvYWRNb3JlOiAnTG9hZCBtb3JlLi4uJyxcclxuICAgIG5lZWRNb3JlQ2hhcmFjdGVyczogZnVuY3Rpb24obnVtQ2hhcmFjdGVycykge1xyXG4gICAgICAgIHJldHVybiAnRW50ZXIgJyArIG51bUNoYXJhY3RlcnMgKyAnIG1vcmUgY2hhcmFjdGVycyB0byBzZWFyY2gnO1xyXG4gICAgfSxcclxuICAgIG5vUmVzdWx0czogJ05vIHJlc3VsdHMgZm91bmQnLFxyXG4gICAgbm9SZXN1bHRzRm9yVGVybTogZnVuY3Rpb24odGVybSkgeyByZXR1cm4gJ05vIHJlc3VsdHMgZm9yIDxiPicgKyBlc2NhcGUodGVybSkgKyAnPC9iPic7IH1cclxuXHJcbn07XHJcblxyXG59LHtcIjRcIjo0LFwiOFwiOjh9XSwxNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciAkID0gd2luZG93LmpRdWVyeSB8fCB3aW5kb3cuWmVwdG87XHJcblxyXG52YXIgU2VsZWN0aXZpdHkgPSBfZGVyZXFfKDgpO1xyXG5cclxudmFyIEtFWV9CQUNLU1BBQ0UgPSA4O1xyXG52YXIgS0VZX0RFTEVURSA9IDQ2O1xyXG52YXIgS0VZX0VOVEVSID0gMTM7XHJcblxyXG4vKipcclxuICogTXVsdGlwbGVTZWxlY3Rpdml0eSBDb25zdHJ1Y3Rvci5cclxuICpcclxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBvYmplY3QuIEFjY2VwdHMgYWxsIG9wdGlvbnMgZnJvbSB0aGUgU2VsZWN0aXZpdHkgQmFzZSBDb25zdHJ1Y3RvciBpblxyXG4gKiAgICAgICAgICAgICAgICBhZGRpdGlvbiB0byB0aG9zZSBhY2NlcHRlZCBieSBNdWx0aXBsZVNlbGVjdGl2aXR5LnNldE9wdGlvbnMoKS5cclxuICovXHJcbmZ1bmN0aW9uIE11bHRpcGxlU2VsZWN0aXZpdHkob3B0aW9ucykge1xyXG5cclxuICAgIFNlbGVjdGl2aXR5LmNhbGwodGhpcywgb3B0aW9ucyk7XHJcblxyXG4gICAgdGhpcy4kZWwuaHRtbCh0aGlzLnRlbXBsYXRlKCdtdWx0aXBsZVNlbGVjdElucHV0JywgeyBlbmFibGVkOiB0aGlzLmVuYWJsZWQgfSkpXHJcbiAgICAgICAgICAgIC50cmlnZ2VyKCdzZWxlY3Rpdml0eS1pbml0JywgJ211bHRpcGxlJyk7XHJcblxyXG4gICAgdGhpcy5faGlnaGxpZ2h0ZWRJdGVtSWQgPSBudWxsO1xyXG5cclxuICAgIHRoaXMuaW5pdFNlYXJjaElucHV0KHRoaXMuJCgnLnNlbGVjdGl2aXR5LW11bHRpcGxlLWlucHV0Om5vdCguc2VsZWN0aXZpdHktd2lkdGgtZGV0ZWN0b3IpJykpO1xyXG5cclxuICAgIHRoaXMucmVyZW5kZXJTZWxlY3Rpb24oKTtcclxuXHJcbiAgICBpZiAoIW9wdGlvbnMucG9zaXRpb25Ecm9wZG93bikge1xyXG4gICAgICAgIC8vIGRyb3Bkb3ducyBmb3IgbXVsdGlwbGUtdmFsdWUgaW5wdXRzIHNob3VsZCBvcGVuIGJlbG93IHRoZSBzZWxlY3QgYm94LFxyXG4gICAgICAgIC8vIHVubGVzcyB0aGVyZSBpcyBub3QgZW5vdWdoIHNwYWNlIGJlbG93LCBidXQgdGhlcmUgaXMgc3BhY2UgZW5vdWdoIGFib3ZlLCB0aGVuIGl0IHNob3VsZFxyXG4gICAgICAgIC8vIG9wZW4gdXB3YXJkc1xyXG4gICAgICAgIHRoaXMub3B0aW9ucy5wb3NpdGlvbkRyb3Bkb3duID0gZnVuY3Rpb24oJGVsLCAkc2VsZWN0RWwpIHtcclxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gJHNlbGVjdEVsLnBvc2l0aW9uKCksXHJcbiAgICAgICAgICAgICAgICBkcm9wZG93bkhlaWdodCA9ICRlbC5oZWlnaHQoKSxcclxuICAgICAgICAgICAgICAgIHNlbGVjdEhlaWdodCA9ICRzZWxlY3RFbC5oZWlnaHQoKSxcclxuICAgICAgICAgICAgICAgIHRvcCA9ICRzZWxlY3RFbFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AsXHJcbiAgICAgICAgICAgICAgICBib3R0b20gPSB0b3AgKyBzZWxlY3RIZWlnaHQgKyBkcm9wZG93bkhlaWdodCxcclxuICAgICAgICAgICAgICAgIG9wZW5VcHdhcmRzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIGJvdHRvbSA+ICQod2luZG93KS5oZWlnaHQoKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wIC0gZHJvcGRvd25IZWlnaHQgPiAwKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB3aWR0aCA9ICRzZWxlY3RFbC5vdXRlcldpZHRoID8gJHNlbGVjdEVsLm91dGVyV2lkdGgoKSA6ICRzZWxlY3RFbC53aWR0aCgpO1xyXG4gICAgICAgICAgICAkZWwuY3NzKHtcclxuICAgICAgICAgICAgICAgIGxlZnQ6IHBvc2l0aW9uLmxlZnQgKyAncHgnLFxyXG4gICAgICAgICAgICAgICAgdG9wOiBwb3NpdGlvbi50b3AgKyAob3BlblVwd2FyZHMgPyAtZHJvcGRvd25IZWlnaHQgOiBzZWxlY3RIZWlnaHQpICsgJ3B4J1xyXG4gICAgICAgICAgICB9KS53aWR0aCh3aWR0aCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIE1ldGhvZHMuXHJcbiAqL1xyXG52YXIgY2FsbFN1cGVyID0gU2VsZWN0aXZpdHkuaW5oZXJpdHMoTXVsdGlwbGVTZWxlY3Rpdml0eSwge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhbiBpdGVtIHRvIHRoZSBzZWxlY3Rpb24sIGlmIGl0J3Mgbm90IHNlbGVjdGVkIHlldC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaXRlbSBUaGUgaXRlbSB0byBhZGQuIE1heSBiZSBhbiBpdGVtIHdpdGggJ2lkJyBhbmQgJ3RleHQnIHByb3BlcnRpZXMgb3IganVzdCBhbiBJRC5cclxuICAgICAqL1xyXG4gICAgYWRkOiBmdW5jdGlvbihpdGVtKSB7XHJcblxyXG4gICAgICAgIHZhciBpdGVtSXNJZCA9IFNlbGVjdGl2aXR5LmlzVmFsaWRJZChpdGVtKTtcclxuICAgICAgICB2YXIgaWQgPSAoaXRlbUlzSWQgPyBpdGVtIDogdGhpcy52YWxpZGF0ZUl0ZW0oaXRlbSkgJiYgaXRlbS5pZCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl92YWx1ZS5pbmRleE9mKGlkKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUucHVzaChpZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXRlbUlzSWQgJiYgdGhpcy5vcHRpb25zLmluaXRTZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5pbml0U2VsZWN0aW9uKFtpZF0sIGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdmFsdWUuaW5kZXhPZihpZCkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gdGhpcy52YWxpZGF0ZUl0ZW0oZGF0YVswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEucHVzaChpdGVtKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlckNoYW5nZSh7IGFkZGVkOiBpdGVtIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbUlzSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtID0gdGhpcy5nZXRJdGVtRm9ySWQoaWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGF0YS5wdXNoKGl0ZW0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlckNoYW5nZSh7IGFkZGVkOiBpdGVtIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLiRzZWFyY2hJbnB1dC52YWwoJycpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIENsZWFycyB0aGUgZGF0YSBhbmQgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGNsZWFyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdGhpcy5kYXRhKFtdKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudHMgbWFwLlxyXG4gICAgICpcclxuICAgICAqIEZvbGxvd3MgdGhlIHNhbWUgZm9ybWF0IGFzIEJhY2tib25lOiBodHRwOi8vYmFja2JvbmVqcy5vcmcvI1ZpZXctZGVsZWdhdGVFdmVudHNcclxuICAgICAqL1xyXG4gICAgZXZlbnRzOiB7XHJcbiAgICAgICAgJ2NoYW5nZSc6ICdyZXJlbmRlclNlbGVjdGlvbicsXHJcbiAgICAgICAgJ2NoYW5nZSAuc2VsZWN0aXZpdHktbXVsdGlwbGUtaW5wdXQnOiBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9LFxyXG4gICAgICAgICdjbGljayc6ICdfY2xpY2tlZCcsXHJcbiAgICAgICAgJ2NsaWNrIC5zZWxlY3Rpdml0eS1tdWx0aXBsZS1zZWxlY3RlZC1pdGVtJzogJ19pdGVtQ2xpY2tlZCcsXHJcbiAgICAgICAgJ2tleWRvd24gLnNlbGVjdGl2aXR5LW11bHRpcGxlLWlucHV0JzogJ19rZXlIZWxkJyxcclxuICAgICAgICAna2V5dXAgLnNlbGVjdGl2aXR5LW11bHRpcGxlLWlucHV0JzogJ19rZXlSZWxlYXNlZCcsXHJcbiAgICAgICAgJ3Bhc3RlIC5zZWxlY3Rpdml0eS1tdWx0aXBsZS1pbnB1dCc6ICdfb25QYXN0ZScsXHJcbiAgICAgICAgJ3NlbGVjdGl2aXR5LXNlbGVjdGVkJzogJ19yZXN1bHRTZWxlY3RlZCdcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdFxyXG4gICAgICovXHJcbiAgICBmaWx0ZXJSZXN1bHRzOiBmdW5jdGlvbihyZXN1bHRzKSB7XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHRzLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhU2VsZWN0aXZpdHkuZmluZEJ5SWQodGhpcy5fZGF0YSwgaXRlbS5pZCk7XHJcbiAgICAgICAgfSwgdGhpcyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgY29ycmVjdCBkYXRhIGZvciBhIGdpdmVuIHZhbHVlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gZ2V0IHRoZSBkYXRhIGZvci4gU2hvdWxkIGJlIGFuIGFycmF5IG9mIElEcy5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIFRoZSBjb3JyZXNwb25kaW5nIGRhdGEuIFdpbGwgYmUgYW4gYXJyYXkgb2Ygb2JqZWN0cyB3aXRoICdpZCcgYW5kICd0ZXh0JyBwcm9wZXJ0aWVzLlxyXG4gICAgICogICAgICAgICBOb3RlIHRoYXQgaWYgbm8gaXRlbXMgYXJlIGRlZmluZWQsIHRoaXMgbWV0aG9kIGFzc3VtZXMgdGhlIHRleHQgbGFiZWxzIHdpbGwgYmUgZXF1YWxcclxuICAgICAqICAgICAgICAgdG8gdGhlIElEcy5cclxuICAgICAqL1xyXG4gICAgZ2V0RGF0YUZvclZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xyXG5cclxuICAgICAgICByZXR1cm4gdmFsdWUubWFwKHRoaXMuZ2V0SXRlbUZvcklkLCB0aGlzKS5maWx0ZXIoZnVuY3Rpb24oaXRlbSkgeyByZXR1cm4gISFpdGVtOyB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBjb3JyZWN0IHZhbHVlIGZvciB0aGUgZ2l2ZW4gZGF0YS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZGF0YSBUaGUgZGF0YSB0byBnZXQgdGhlIHZhbHVlIGZvci4gU2hvdWxkIGJlIGFuIGFycmF5IG9mIG9iamVjdHMgd2l0aCAnaWQnIGFuZCAndGV4dCdcclxuICAgICAqICAgICAgICAgICAgIHByb3BlcnRpZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZS4gV2lsbCBiZSBhbiBhcnJheSBvZiBJRHMuXHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlRm9yRGF0YTogZnVuY3Rpb24oZGF0YSkge1xyXG5cclxuICAgICAgICByZXR1cm4gZGF0YS5tYXAoZnVuY3Rpb24oaXRlbSkgeyByZXR1cm4gaXRlbS5pZDsgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBhbiBpdGVtIGZyb20gdGhlIHNlbGVjdGlvbiwgaWYgaXQgaXMgc2VsZWN0ZWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGl0ZW0gVGhlIGl0ZW0gdG8gcmVtb3ZlLiBNYXkgYmUgYW4gaXRlbSB3aXRoICdpZCcgYW5kICd0ZXh0JyBwcm9wZXJ0aWVzIG9yIGp1c3QgYW4gSUQuXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZTogZnVuY3Rpb24oaXRlbSkge1xyXG5cclxuICAgICAgICB2YXIgaWQgPSAoJC50eXBlKGl0ZW0pID09PSAnb2JqZWN0JyA/IGl0ZW0uaWQgOiBpdGVtKTtcclxuXHJcbiAgICAgICAgdmFyIHJlbW92ZWRJdGVtO1xyXG4gICAgICAgIHZhciBpbmRleCA9IFNlbGVjdGl2aXR5LmZpbmRJbmRleEJ5SWQodGhpcy5fZGF0YSwgaWQpO1xyXG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgIHJlbW92ZWRJdGVtID0gdGhpcy5fZGF0YVtpbmRleF07XHJcbiAgICAgICAgICAgIHRoaXMuX2RhdGEuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl92YWx1ZVtpbmRleF0gIT09IGlkKSB7XHJcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5fdmFsdWUuaW5kZXhPZihpZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocmVtb3ZlZEl0ZW0pIHtcclxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyQ2hhbmdlKHsgcmVtb3ZlZDogcmVtb3ZlZEl0ZW0gfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaWQgPT09IHRoaXMuX2hpZ2hsaWdodGVkSXRlbUlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hpZ2hsaWdodGVkSXRlbUlkID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmUtcmVuZGVycyB0aGUgc2VsZWN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIE5vcm1hbGx5IHRoZSBVSSBpcyBhdXRvbWF0aWNhbGx5IHVwZGF0ZWQgd2hlbmV2ZXIgdGhlIHNlbGVjdGlvbiBjaGFuZ2VzLCBidXQgeW91IG1heSB3YW50IHRvXHJcbiAgICAgKiBjYWxsIHRoaXMgbWV0aG9kIGV4cGxpY2l0bHkgaWYgeW91J3ZlIHVwZGF0ZWQgdGhlIHNlbGVjdGlvbiB3aXRoIHRoZSB0cmlnZ2VyQ2hhbmdlIG9wdGlvbiBzZXRcclxuICAgICAqIHRvIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICByZXJlbmRlclNlbGVjdGlvbjogZnVuY3Rpb24oZXZlbnQpIHtcclxuXHJcbiAgICAgICAgZXZlbnQgPSBldmVudCB8fCB7fTtcclxuXHJcbiAgICAgICAgaWYgKGV2ZW50LmFkZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlclNlbGVjdGVkSXRlbShldmVudC5hZGRlZCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9zY3JvbGxUb0JvdHRvbSgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQucmVtb3ZlZCkge1xyXG4gICAgICAgICAgICB2YXIgcXVvdGVkSWQgPSBTZWxlY3Rpdml0eS5xdW90ZUNzc0F0dHIoZXZlbnQucmVtb3ZlZC5pZCk7XHJcbiAgICAgICAgICAgIHRoaXMuJCgnLnNlbGVjdGl2aXR5LW11bHRpcGxlLXNlbGVjdGVkLWl0ZW1bZGF0YS1pdGVtLWlkPScgKyBxdW90ZWRJZCArICddJykucmVtb3ZlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy4kKCcuc2VsZWN0aXZpdHktbXVsdGlwbGUtc2VsZWN0ZWQtaXRlbScpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fZGF0YS5mb3JFYWNoKHRoaXMuX3JlbmRlclNlbGVjdGVkSXRlbSwgdGhpcyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVJbnB1dFdpZHRoKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZXZlbnQuYWRkZWQgfHwgZXZlbnQucmVtb3ZlZCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kcm9wZG93bikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5zaG93UmVzdWx0cyh0aGlzLmZpbHRlclJlc3VsdHModGhpcy5kcm9wZG93bi5yZXN1bHRzKSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc01vcmU6IHRoaXMuZHJvcGRvd24uaGFzTW9yZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc0tleWJvYXJkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucG9zaXRpb25Ecm9wZG93bigpO1xyXG5cclxuICAgICAgICB0aGlzLl91cGRhdGVQbGFjZWhvbGRlcigpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0XHJcbiAgICAgKi9cclxuICAgIHNlYXJjaDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciB0ZXJtID0gdGhpcy4kc2VhcmNoSW5wdXQudmFsKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudG9rZW5pemVyKSB7XHJcbiAgICAgICAgICAgIHRlcm0gPSB0aGlzLm9wdGlvbnMudG9rZW5pemVyKHRlcm0sIHRoaXMuX2RhdGEsIHRoaXMuYWRkLmJpbmQodGhpcyksIHRoaXMub3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoJC50eXBlKHRlcm0pID09PSAnc3RyaW5nJyAmJiB0ZXJtICE9PSB0aGlzLiRzZWFyY2hJbnB1dC52YWwoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kc2VhcmNoSW5wdXQudmFsKHRlcm0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5kcm9wZG93bikge1xyXG4gICAgICAgICAgICBjYWxsU3VwZXIodGhpcywgJ3NlYXJjaCcpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0LiBJbiBhZGRpdGlvbiB0byB0aGUgb3B0aW9ucyBzdXBwb3J0ZWQgaW4gdGhlIGJhc2VcclxuICAgICAqICAgICAgICAgICAgICAgIGltcGxlbWVudGF0aW9uLCB0aGlzIG1heSBjb250YWluIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcclxuICAgICAqICAgICAgICAgICAgICAgIGJhY2tzcGFjZUhpZ2hsaWdodHNCZWZvcmVEZWxldGUgLSBJZiBzZXQgdG8gdHJ1ZSwgd2hlbiB0aGUgdXNlciBlbnRlcnMgYVxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tzcGFjZSB3aGlsZSB0aGVyZSBpcyBubyB0ZXh0IGluIHRoZVxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaCBmaWVsZCBidXQgdGhlcmUgYXJlIHNlbGVjdGVkIGl0ZW1zLFxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBsYXN0IHNlbGVjdGVkIGl0ZW0gd2lsbCBiZSBoaWdobGlnaHRlZFxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB3aGVuIGEgc2Vjb25kIGJhY2tzcGFjZSBpcyBlbnRlcmVkIHRoZVxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gaXMgZGVsZXRlZC4gSWYgZmFsc2UsIHRoZSBpdGVtIGdldHNcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVkIG9uIHRoZSBmaXJzdCBiYWNrc3BhY2UuIFRoZSBkZWZhdWx0XHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgaXMgdHJ1ZSBvbiBkZXZpY2VzIHRoYXQgaGF2ZSB0b3VjaFxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0IGFuZCBmYWxzZSBvbiBkZXZpY2VzIHRoYXQgZG9uJ3QuXHJcbiAgICAgKiAgICAgICAgICAgICAgICBjcmVhdGVUb2tlbkl0ZW0gLSBGdW5jdGlvbiB0byBjcmVhdGUgYSBuZXcgaXRlbSBmcm9tIGEgdXNlcidzIHNlYXJjaCB0ZXJtLlxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyB1c2VkIHRvIHR1cm4gdGhlIHRlcm0gaW50byBhbiBpdGVtIHdoZW4gZHJvcGRvd25zXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgZGlzYWJsZWQgYW5kIHRoZSB1c2VyIHByZXNzZXMgRW50ZXIuIEl0IGlzIGFsc28gdXNlZCBieVxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGRlZmF1bHQgdG9rZW5pemVyIHRvIGNyZWF0ZSBpdGVtcyBmb3IgaW5kaXZpZHVhbCB0b2tlbnMuXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgZnVuY3Rpb24gcmVjZWl2ZXMgYSAndG9rZW4nIHBhcmFtZXRlciB3aGljaCBpcyB0aGVcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaCB0ZXJtIChvciBwYXJ0IG9mIGEgc2VhcmNoIHRlcm0pIHRvIGNyZWF0ZSBhbiBpdGVtIGZvclxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIG11c3QgcmV0dXJuIGFuIGl0ZW0gb2JqZWN0IHdpdGggJ2lkJyBhbmQgJ3RleHQnXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzIG9yIG51bGwgaWYgbm8gdG9rZW4gY2FuIGJlIGNyZWF0ZWQgZnJvbSB0aGUgdGVybS5cclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBkZWZhdWx0IGlzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIGl0ZW0gd2hlcmUgdGhlIGlkXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGV4dCBib3RoIG1hdGNoIHRoZSB0b2tlbiBmb3IgYW55IG5vbi1lbXB0eSBzdHJpbmcgYW5kXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGljaCByZXR1cm5zIG51bGwgb3RoZXJ3aXNlLlxyXG4gICAgICogICAgICAgICAgICAgICAgdG9rZW5pemVyIC0gRnVuY3Rpb24gZm9yIHRva2VuaXppbmcgc2VhcmNoIHRlcm1zLiBXaWxsIHJlY2VpdmUgdGhlIGZvbGxvd2luZ1xyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyczpcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0IC0gVGhlIGlucHV0IHN0cmluZyB0byB0b2tlbml6ZS5cclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbiAtIFRoZSBjdXJyZW50IHNlbGVjdGlvbiBkYXRhLlxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlVG9rZW4gLSBDYWxsYmFjayB0byBjcmVhdGUgYSB0b2tlbiBmcm9tIHRoZSBzZWFyY2ggdGVybXMuXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNob3VsZCBiZSBwYXNzZWQgYW4gaXRlbSBvYmplY3Qgd2l0aCAnaWQnIGFuZCAndGV4dCdcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcy5cclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBzZXQgb24gdGhlIFNlbGVjdGl2aXR5IGluc3RhbmNlLlxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgQW55IHN0cmluZyByZXR1cm5lZCBieSB0aGUgdG9rZW5pemVyIGZ1bmN0aW9uIGlzIHRyZWF0ZWQgYXMgdGhlXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1haW5kZXIgb2YgdW50b2tlbml6ZWQgaW5wdXQuXHJcbiAgICAgKi9cclxuICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gICAgICAgIHZhciBiYWNrc3BhY2VIaWdobGlnaHRzQmVmb3JlRGVsZXRlID0gJ2JhY2tzcGFjZUhpZ2hsaWdodHNCZWZvcmVEZWxldGUnO1xyXG4gICAgICAgIGlmIChvcHRpb25zW2JhY2tzcGFjZUhpZ2hsaWdodHNCZWZvcmVEZWxldGVdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb3B0aW9uc1tiYWNrc3BhY2VIaWdobGlnaHRzQmVmb3JlRGVsZXRlXSA9IHRoaXMuaGFzVG91Y2g7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvcHRpb25zLmFsbG93ZWRUeXBlcyA9IG9wdGlvbnMuYWxsb3dlZFR5cGVzIHx8IHt9O1xyXG4gICAgICAgIG9wdGlvbnMuYWxsb3dlZFR5cGVzW2JhY2tzcGFjZUhpZ2hsaWdodHNCZWZvcmVEZWxldGVdID0gJ2Jvb2xlYW4nO1xyXG5cclxuICAgICAgICB2YXIgd2FzRW5hYmxlZCA9IHRoaXMuZW5hYmxlZDtcclxuXHJcbiAgICAgICAgY2FsbFN1cGVyKHRoaXMsICdzZXRPcHRpb25zJywgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIGlmICh3YXNFbmFibGVkICE9PSB0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy4kZWwuaHRtbCh0aGlzLnRlbXBsYXRlKCdtdWx0aXBsZVNlbGVjdElucHV0JywgeyBlbmFibGVkOiB0aGlzLmVuYWJsZWQgfSkpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWYWxpZGF0ZXMgZGF0YSB0byBzZXQuIFRocm93cyBhbiBleGNlcHRpb24gaWYgdGhlIGRhdGEgaXMgaW52YWxpZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZGF0YSBUaGUgZGF0YSB0byB2YWxpZGF0ZS4gU2hvdWxkIGJlIGFuIGFycmF5IG9mIG9iamVjdHMgd2l0aCAnaWQnIGFuZCAndGV4dCdcclxuICAgICAqICAgICAgICAgICAgIHByb3BlcnRpZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiBUaGUgdmFsaWRhdGVkIGRhdGEuIFRoaXMgbWF5IGRpZmZlciBmcm9tIHRoZSBpbnB1dCBkYXRhLlxyXG4gICAgICovXHJcbiAgICB2YWxpZGF0ZURhdGE6IGZ1bmN0aW9uKGRhdGEpIHtcclxuXHJcbiAgICAgICAgaWYgKGRhdGEgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoJC50eXBlKGRhdGEpID09PSAnYXJyYXknKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhLm1hcCh0aGlzLnZhbGlkYXRlSXRlbSwgdGhpcyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhIGZvciBNdWx0aVNlbGVjdGl2aXR5IGluc3RhbmNlIHNob3VsZCBiZSBhcnJheScpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWYWxpZGF0ZXMgYSB2YWx1ZSB0byBzZXQuIFRocm93cyBhbiBleGNlcHRpb24gaWYgdGhlIHZhbHVlIGlzIGludmFsaWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byB2YWxpZGF0ZS4gU2hvdWxkIGJlIGFuIGFycmF5IG9mIElEcy5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIFRoZSB2YWxpZGF0ZWQgdmFsdWUuIFRoaXMgbWF5IGRpZmZlciBmcm9tIHRoZSBpbnB1dCB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgdmFsaWRhdGVWYWx1ZTogZnVuY3Rpb24odmFsdWUpIHtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9IGVsc2UgaWYgKCQudHlwZSh2YWx1ZSkgPT09ICdhcnJheScpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlLmV2ZXJ5KFNlbGVjdGl2aXR5LmlzVmFsaWRJZCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVmFsdWUgY29udGFpbnMgaW52YWxpZCBJRHMnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVmFsdWUgZm9yIE11bHRpU2VsZWN0aXZpdHkgaW5zdGFuY2Ugc2hvdWxkIGJlIGFuIGFycmF5Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9iYWNrc3BhY2VQcmVzc2VkOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5iYWNrc3BhY2VIaWdobGlnaHRzQmVmb3JlRGVsZXRlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9oaWdobGlnaHRlZEl0ZW1JZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVsZXRlUHJlc3NlZCgpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3ZhbHVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faGlnaGxpZ2h0SXRlbSh0aGlzLl92YWx1ZS5zbGljZSgtMSlbMF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl92YWx1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmUodGhpcy5fdmFsdWUuc2xpY2UoLTEpWzBdKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2NsaWNrZWQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX29wZW4oKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2NyZWF0ZVRva2VuOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIHRlcm0gPSB0aGlzLiRzZWFyY2hJbnB1dC52YWwoKTtcclxuICAgICAgICB2YXIgY3JlYXRlVG9rZW5JdGVtID0gdGhpcy5vcHRpb25zLmNyZWF0ZVRva2VuSXRlbTtcclxuXHJcbiAgICAgICAgaWYgKHRlcm0gJiYgY3JlYXRlVG9rZW5JdGVtKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gY3JlYXRlVG9rZW5JdGVtKHRlcm0pO1xyXG4gICAgICAgICAgICBpZiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGQoaXRlbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2RlbGV0ZVByZXNzZWQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faGlnaGxpZ2h0ZWRJdGVtSWQpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmUodGhpcy5faGlnaGxpZ2h0ZWRJdGVtSWQpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfaGlnaGxpZ2h0SXRlbTogZnVuY3Rpb24oaWQpIHtcclxuXHJcbiAgICAgICAgdGhpcy5faGlnaGxpZ2h0ZWRJdGVtSWQgPSBpZDtcclxuICAgICAgICB0aGlzLiQoJy5zZWxlY3Rpdml0eS1tdWx0aXBsZS1zZWxlY3RlZC1pdGVtJykucmVtb3ZlQ2xhc3MoJ2hpZ2hsaWdodGVkJylcclxuICAgICAgICAgICAgLmZpbHRlcignW2RhdGEtaXRlbS1pZD0nICsgU2VsZWN0aXZpdHkucXVvdGVDc3NBdHRyKGlkKSArICddJykuYWRkQ2xhc3MoJ2hpZ2hsaWdodGVkJyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmhhc0tleWJvYXJkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2l0ZW1DbGlja2VkOiBmdW5jdGlvbihldmVudCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hpZ2hsaWdodEl0ZW0odGhpcy5fZ2V0SXRlbUlkKGV2ZW50KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9pdGVtUmVtb3ZlQ2xpY2tlZDogZnVuY3Rpb24oZXZlbnQpIHtcclxuXHJcbiAgICAgICAgdGhpcy5yZW1vdmUodGhpcy5fZ2V0SXRlbUlkKGV2ZW50KSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3VwZGF0ZUlucHV0V2lkdGgoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9rZXlIZWxkOiBmdW5jdGlvbihldmVudCkge1xyXG5cclxuICAgICAgICB0aGlzLl9vcmlnaW5hbFZhbHVlID0gdGhpcy4kc2VhcmNoSW5wdXQudmFsKCk7XHJcblxyXG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBLRVlfRU5URVIgJiYgIWV2ZW50LmN0cmxLZXkpIHtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2tleVJlbGVhc2VkOiBmdW5jdGlvbihldmVudCkge1xyXG5cclxuICAgICAgICB2YXIgaW5wdXRIYWRUZXh0ID0gISF0aGlzLl9vcmlnaW5hbFZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gS0VZX0VOVEVSICYmICFldmVudC5jdHJsS2V5KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY3JlYXRlVG9rZW5JdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVUb2tlbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSBLRVlfQkFDS1NQQUNFICYmICFpbnB1dEhhZFRleHQpIHtcclxuICAgICAgICAgICAgdGhpcy5fYmFja3NwYWNlUHJlc3NlZCgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PT0gS0VZX0RFTEVURSAmJiAhaW5wdXRIYWRUZXh0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RlbGV0ZVByZXNzZWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3VwZGF0ZUlucHV0V2lkdGgoKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfb25QYXN0ZTogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNyZWF0ZVRva2VuSXRlbSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlVG9rZW4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0uYmluZCh0aGlzKSwgMTApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9vcGVuOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93RHJvcGRvd24gIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3BlbigpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgX3JlbmRlclNlbGVjdGVkSXRlbTogZnVuY3Rpb24oaXRlbSkge1xyXG5cclxuICAgICAgICB0aGlzLiRzZWFyY2hJbnB1dC5iZWZvcmUodGhpcy50ZW1wbGF0ZSgnbXVsdGlwbGVTZWxlY3RlZEl0ZW0nLCAkLmV4dGVuZCh7XHJcbiAgICAgICAgICAgIGhpZ2hsaWdodGVkOiAoaXRlbS5pZCA9PT0gdGhpcy5faGlnaGxpZ2h0ZWRJdGVtSWQpLFxyXG4gICAgICAgICAgICByZW1vdmFibGU6ICF0aGlzLm9wdGlvbnMucmVhZE9ubHlcclxuICAgICAgICB9LCBpdGVtKSkpO1xyXG5cclxuICAgICAgICB2YXIgcXVvdGVkSWQgPSBTZWxlY3Rpdml0eS5xdW90ZUNzc0F0dHIoaXRlbS5pZCk7XHJcbiAgICAgICAgdGhpcy4kKCcuc2VsZWN0aXZpdHktbXVsdGlwbGUtc2VsZWN0ZWQtaXRlbVtkYXRhLWl0ZW0taWQ9JyArIHF1b3RlZElkICsgJ10nKVxyXG4gICAgICAgICAgICAuZmluZCgnLnNlbGVjdGl2aXR5LW11bHRpcGxlLXNlbGVjdGVkLWl0ZW0tcmVtb3ZlJylcclxuICAgICAgICAgICAgLm9uKCdjbGljaycsIHRoaXMuX2l0ZW1SZW1vdmVDbGlja2VkLmJpbmQodGhpcykpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9yZXN1bHRTZWxlY3RlZDogZnVuY3Rpb24oZXZlbnQpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3ZhbHVlLmluZGV4T2YoZXZlbnQuaWQpID09PSAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLmFkZChldmVudC5pdGVtKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZShldmVudC5pdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX3Njcm9sbFRvQm90dG9tOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyICRpbnB1dENvbnRhaW5lciA9IHRoaXMuJCgnLnNlbGVjdGl2aXR5LW11bHRpcGxlLWlucHV0LWNvbnRhaW5lcicpO1xyXG4gICAgICAgICRpbnB1dENvbnRhaW5lci5zY3JvbGxUb3AoJGlucHV0Q29udGFpbmVyLmhlaWdodCgpKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfdXBkYXRlSW5wdXRXaWR0aDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgICAgICAgdmFyICRpbnB1dCA9IHRoaXMuJHNlYXJjaElucHV0LCAkd2lkdGhEZXRlY3RvciA9IHRoaXMuJCgnLnNlbGVjdGl2aXR5LXdpZHRoLWRldGVjdG9yJyk7XHJcbiAgICAgICAgICAgICR3aWR0aERldGVjdG9yLnRleHQoJGlucHV0LnZhbCgpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIXRoaXMuX2RhdGEubGVuZ3RoICYmIHRoaXMub3B0aW9ucy5wbGFjZWhvbGRlciB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcnKTtcclxuICAgICAgICAgICAgJGlucHV0LndpZHRoKCR3aWR0aERldGVjdG9yLndpZHRoKCkgKyAyMCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uRHJvcGRvd24oKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX3VwZGF0ZVBsYWNlaG9sZGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gdGhpcy5fZGF0YS5sZW5ndGggPyAnJyA6IHRoaXMub3B0aW9ucy5wbGFjZWhvbGRlcjtcclxuICAgICAgICBpZiAodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJHNlYXJjaElucHV0LmF0dHIoJ3BsYWNlaG9sZGVyJywgcGxhY2Vob2xkZXIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuJCgnLnNlbGVjdGl2aXR5LXBsYWNlaG9sZGVyJykudGV4dChwbGFjZWhvbGRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFNlbGVjdGl2aXR5LklucHV0VHlwZXMuTXVsdGlwbGUgPSBNdWx0aXBsZVNlbGVjdGl2aXR5O1xyXG5cclxufSx7XCI4XCI6OCxcImpxdWVyeVwiOlwianF1ZXJ5XCJ9XSwxNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciAkID0gd2luZG93LmpRdWVyeSB8fCB3aW5kb3cuWmVwdG87XHJcblxyXG52YXIgU2VsZWN0aXZpdHkgPSBfZGVyZXFfKDgpO1xyXG5cclxuLyoqXHJcbiAqIFNpbmdsZVNlbGVjdGl2aXR5IENvbnN0cnVjdG9yLlxyXG4gKlxyXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIG9iamVjdC4gQWNjZXB0cyBhbGwgb3B0aW9ucyBmcm9tIHRoZSBTZWxlY3Rpdml0eSBCYXNlIENvbnN0cnVjdG9yIGluXHJcbiAqICAgICAgICAgICAgICAgIGFkZGl0aW9uIHRvIHRob3NlIGFjY2VwdGVkIGJ5IFNpbmdsZVNlbGVjdGl2aXR5LnNldE9wdGlvbnMoKS5cclxuICovXHJcbmZ1bmN0aW9uIFNpbmdsZVNlbGVjdGl2aXR5KG9wdGlvbnMpIHtcclxuXHJcbiAgICBTZWxlY3Rpdml0eS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xyXG5cclxuICAgIHRoaXMuJGVsLmh0bWwodGhpcy50ZW1wbGF0ZSgnc2luZ2xlU2VsZWN0SW5wdXQnLCB0aGlzLm9wdGlvbnMpKVxyXG4gICAgICAgICAgICAudHJpZ2dlcignc2VsZWN0aXZpdHktaW5pdCcsICdzaW5nbGUnKTtcclxuXHJcbiAgICB0aGlzLnJlcmVuZGVyU2VsZWN0aW9uKCk7XHJcblxyXG4gICAgaWYgKCFvcHRpb25zLnBvc2l0aW9uRHJvcGRvd24pIHtcclxuICAgICAgICAvLyBkcm9wZG93bnMgZm9yIHNpbmdsZS12YWx1ZSBpbnB1dHMgc2hvdWxkIG9wZW4gYmVsb3cgdGhlIHNlbGVjdCBib3gsXHJcbiAgICAgICAgLy8gdW5sZXNzIHRoZXJlIGlzIG5vdCBlbm91Z2ggc3BhY2UgYmVsb3csIGluIHdoaWNoIGNhc2UgdGhlIGRyb3Bkb3duIHNob3VsZCBiZSBtb3ZlZCB1cFxyXG4gICAgICAgIC8vIGp1c3QgZW5vdWdoIHNvIGl0IGZpdHMgaW4gdGhlIHdpbmRvdywgYnV0IG5ldmVyIHNvIG11Y2ggdGhhdCBpdCByZWFjaGVzIGFib3ZlIHRoZSB0b3BcclxuICAgICAgICB0aGlzLm9wdGlvbnMucG9zaXRpb25Ecm9wZG93biA9IGZ1bmN0aW9uKCRlbCwgJHNlbGVjdEVsKSB7XHJcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9ICRzZWxlY3RFbC5wb3NpdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgZHJvcGRvd25IZWlnaHQgPSAkZWwuaGVpZ2h0KCksXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RIZWlnaHQgPSAkc2VsZWN0RWwuaGVpZ2h0KCksXHJcbiAgICAgICAgICAgICAgICB0b3AgPSAkc2VsZWN0RWxbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wLFxyXG4gICAgICAgICAgICAgICAgYm90dG9tID0gdG9wICsgc2VsZWN0SGVpZ2h0ICsgZHJvcGRvd25IZWlnaHQsXHJcbiAgICAgICAgICAgICAgICBkZWx0YVVwID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgZGVsdGFVcCA9IE1hdGgubWluKE1hdGgubWF4KGJvdHRvbSAtICQod2luZG93KS5oZWlnaHQoKSwgMCksIHRvcCArIHNlbGVjdEhlaWdodCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciB3aWR0aCA9ICRzZWxlY3RFbC5vdXRlcldpZHRoID8gJHNlbGVjdEVsLm91dGVyV2lkdGgoKSA6ICRzZWxlY3RFbC53aWR0aCgpO1xyXG4gICAgICAgICAgICAkZWwuY3NzKHtcclxuICAgICAgICAgICAgICAgIGxlZnQ6IHBvc2l0aW9uLmxlZnQgKyAncHgnLFxyXG4gICAgICAgICAgICAgICAgdG9wOiAocG9zaXRpb24udG9wICsgc2VsZWN0SGVpZ2h0IC0gZGVsdGFVcCkgKyAncHgnXHJcbiAgICAgICAgICAgIH0pLndpZHRoKHdpZHRoKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLnNob3dTZWFyY2hJbnB1dEluRHJvcGRvd24gPT09IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy5pbml0U2VhcmNoSW5wdXQodGhpcy4kKCcuc2VsZWN0aXZpdHktc2luZ2xlLXNlbGVjdC1pbnB1dCcpLCB7IG5vU2VhcmNoOiB0cnVlIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogTWV0aG9kcy5cclxuICovXHJcbnZhciBjYWxsU3VwZXIgPSBTZWxlY3Rpdml0eS5pbmhlcml0cyhTaW5nbGVTZWxlY3Rpdml0eSwge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXZlbnRzIG1hcC5cclxuICAgICAqXHJcbiAgICAgKiBGb2xsb3dzIHRoZSBzYW1lIGZvcm1hdCBhcyBCYWNrYm9uZTogaHR0cDovL2JhY2tib25lanMub3JnLyNWaWV3LWRlbGVnYXRlRXZlbnRzXHJcbiAgICAgKi9cclxuICAgIGV2ZW50czoge1xyXG4gICAgICAgICdjaGFuZ2UnOiAncmVyZW5kZXJTZWxlY3Rpb24nLFxyXG4gICAgICAgICdjbGljayc6ICdfY2xpY2tlZCcsXHJcbiAgICAgICAgJ2ZvY3VzIC5zZWxlY3Rpdml0eS1zaW5nbGUtc2VsZWN0LWlucHV0JzogJ19mb2N1c2VkJyxcclxuICAgICAgICAnc2VsZWN0aXZpdHktc2VsZWN0ZWQnOiAnX3Jlc3VsdFNlbGVjdGVkJ1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIENsZWFycyB0aGUgZGF0YSBhbmQgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGNsZWFyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdGhpcy5kYXRhKG51bGwpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QuIE1heSBjb250YWluIHRoZSBmb2xsb3dpbmcgcHJvcGVydHk6XHJcbiAgICAgKiAgICAgICAgICAgICAgICBrZWVwRm9jdXMgLSBJZiBmYWxzZSwgdGhlIGZvY3VzIHdvbid0IHJlbWFpbiBvbiB0aGUgaW5wdXQuXHJcbiAgICAgKi9cclxuICAgIGNsb3NlOiBmdW5jdGlvbihvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX2Nsb3NpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICBjYWxsU3VwZXIodGhpcywgJ2Nsb3NlJyk7XHJcblxyXG4gICAgICAgIGlmICghb3B0aW9ucyB8fCBvcHRpb25zLmtlZXBGb2N1cyAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdGhpcy4kc2VhcmNoSW5wdXQuZm9jdXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2Nsb3NpbmcgPSBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBjb3JyZWN0IGRhdGEgZm9yIGEgZ2l2ZW4gdmFsdWUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBnZXQgdGhlIGRhdGEgZm9yLiBTaG91bGQgYmUgYW4gSUQuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiBUaGUgY29ycmVzcG9uZGluZyBkYXRhLiBXaWxsIGJlIGFuIG9iamVjdCB3aXRoICdpZCcgYW5kICd0ZXh0JyBwcm9wZXJ0aWVzLiBOb3RlIHRoYXRcclxuICAgICAqICAgICAgICAgaWYgbm8gaXRlbXMgYXJlIGRlZmluZWQsIHRoaXMgbWV0aG9kIGFzc3VtZXMgdGhlIHRleHQgbGFiZWwgd2lsbCBiZSBlcXVhbCB0byB0aGUgSUQuXHJcbiAgICAgKi9cclxuICAgIGdldERhdGFGb3JWYWx1ZTogZnVuY3Rpb24odmFsdWUpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SXRlbUZvcklkKHZhbHVlKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBjb3JyZWN0IHZhbHVlIGZvciB0aGUgZ2l2ZW4gZGF0YS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZGF0YSBUaGUgZGF0YSB0byBnZXQgdGhlIHZhbHVlIGZvci4gU2hvdWxkIGJlIGFuIG9iamVjdCB3aXRoICdpZCcgYW5kICd0ZXh0J1xyXG4gICAgICogICAgICAgICAgICAgcHJvcGVydGllcyBvciBudWxsLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUuIFdpbGwgYmUgYW4gSUQgb3IgbnVsbC5cclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWVGb3JEYXRhOiBmdW5jdGlvbihkYXRhKSB7XHJcblxyXG4gICAgICAgIHJldHVybiAoZGF0YSA/IGRhdGEuaWQgOiBudWxsKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdFxyXG4gICAgICovXHJcbiAgICBvcGVuOiBmdW5jdGlvbihvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX29wZW5pbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICB2YXIgc2hvd1NlYXJjaElucHV0ID0gKHRoaXMub3B0aW9ucy5zaG93U2VhcmNoSW5wdXRJbkRyb3Bkb3duICE9PSBmYWxzZSk7XHJcblxyXG4gICAgICAgIGNhbGxTdXBlcih0aGlzLCAnb3BlbicsICQuZXh0ZW5kKHsgc2hvd1NlYXJjaElucHV0OiBzaG93U2VhcmNoSW5wdXQgfSwgb3B0aW9ucykpO1xyXG5cclxuICAgICAgICBpZiAoIXNob3dTZWFyY2hJbnB1dCkge1xyXG4gICAgICAgICAgICB0aGlzLmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9vcGVuaW5nID0gZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmUtcmVuZGVycyB0aGUgc2VsZWN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIE5vcm1hbGx5IHRoZSBVSSBpcyBhdXRvbWF0aWNhbGx5IHVwZGF0ZWQgd2hlbmV2ZXIgdGhlIHNlbGVjdGlvbiBjaGFuZ2VzLCBidXQgeW91IG1heSB3YW50IHRvXHJcbiAgICAgKiBjYWxsIHRoaXMgbWV0aG9kIGV4cGxpY2l0bHkgaWYgeW91J3ZlIHVwZGF0ZWQgdGhlIHNlbGVjdGlvbiB3aXRoIHRoZSB0cmlnZ2VyQ2hhbmdlIG9wdGlvbiBzZXRcclxuICAgICAqIHRvIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICByZXJlbmRlclNlbGVjdGlvbjogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciAkY29udGFpbmVyID0gdGhpcy4kKCcuc2VsZWN0aXZpdHktc2luZ2xlLXJlc3VsdC1jb250YWluZXInKTtcclxuICAgICAgICBpZiAodGhpcy5fZGF0YSkge1xyXG4gICAgICAgICAgICAkY29udGFpbmVyLmh0bWwoXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlKCdzaW5nbGVTZWxlY3RlZEl0ZW0nLCAkLmV4dGVuZCh7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZhYmxlOiB0aGlzLm9wdGlvbnMuYWxsb3dDbGVhciAmJiAhdGhpcy5vcHRpb25zLnJlYWRPbmx5XHJcbiAgICAgICAgICAgICAgICB9LCB0aGlzLl9kYXRhKSlcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICRjb250YWluZXIuZmluZCgnLnNlbGVjdGl2aXR5LXNpbmdsZS1zZWxlY3RlZC1pdGVtLXJlbW92ZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAub24oJ2NsaWNrJywgdGhpcy5faXRlbVJlbW92ZUNsaWNrZWQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJGNvbnRhaW5lci5odG1sKFxyXG4gICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZSgnc2luZ2xlU2VsZWN0UGxhY2Vob2xkZXInLCB7IHBsYWNlaG9sZGVyOiB0aGlzLm9wdGlvbnMucGxhY2Vob2xkZXIgfSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIG9iamVjdC4gSW4gYWRkaXRpb24gdG8gdGhlIG9wdGlvbnMgc3VwcG9ydGVkIGluIHRoZSBiYXNlXHJcbiAgICAgKiAgICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbiwgdGhpcyBtYXkgY29udGFpbiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XHJcbiAgICAgKiAgICAgICAgICAgICAgICBhbGxvd0NsZWFyIC0gQm9vbGVhbiB3aGV0aGVyIHRoZSBzZWxlY3RlZCBpdGVtIG1heSBiZSByZW1vdmVkLlxyXG4gICAgICogICAgICAgICAgICAgICAgc2hvd1NlYXJjaElucHV0SW5Ecm9wZG93biAtIFNldCB0byBmYWxzZSB0byByZW1vdmUgdGhlIHNlYXJjaCBpbnB1dCB1c2VkIGluXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd25zLiBUaGUgZGVmYXVsdCBpcyB0cnVlLlxyXG4gICAgICovXHJcbiAgICBzZXRPcHRpb25zOiBmdW5jdGlvbihvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuICAgICAgICBvcHRpb25zLmFsbG93ZWRUeXBlcyA9ICQuZXh0ZW5kKG9wdGlvbnMuYWxsb3dlZFR5cGVzIHx8IHt9LCB7XHJcbiAgICAgICAgICAgIGFsbG93Q2xlYXI6ICdib29sZWFuJyxcclxuICAgICAgICAgICAgc2hvd1NlYXJjaElucHV0SW5Ecm9wZG93bjogJ2Jvb2xlYW4nXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNhbGxTdXBlcih0aGlzLCAnc2V0T3B0aW9ucycsIG9wdGlvbnMpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFZhbGlkYXRlcyBkYXRhIHRvIHNldC4gVGhyb3dzIGFuIGV4Y2VwdGlvbiBpZiB0aGUgZGF0YSBpcyBpbnZhbGlkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRvIHZhbGlkYXRlLiBTaG91bGQgYmUgYW4gb2JqZWN0IHdpdGggJ2lkJyBhbmQgJ3RleHQnIHByb3BlcnRpZXMgb3IgbnVsbFxyXG4gICAgICogICAgICAgICAgICAgdG8gaW5kaWNhdGUgbm8gaXRlbSBpcyBzZWxlY3RlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIFRoZSB2YWxpZGF0ZWQgZGF0YS4gVGhpcyBtYXkgZGlmZmVyIGZyb20gdGhlIGlucHV0IGRhdGEuXHJcbiAgICAgKi9cclxuICAgIHZhbGlkYXRlRGF0YTogZnVuY3Rpb24oZGF0YSkge1xyXG5cclxuICAgICAgICByZXR1cm4gKGRhdGEgPT09IG51bGwgPyBkYXRhIDogdGhpcy52YWxpZGF0ZUl0ZW0oZGF0YSkpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFZhbGlkYXRlcyBhIHZhbHVlIHRvIHNldC4gVGhyb3dzIGFuIGV4Y2VwdGlvbiBpZiB0aGUgdmFsdWUgaXMgaW52YWxpZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHZhbGlkYXRlLiBTaG91bGQgYmUgbnVsbCBvciBhIHZhbGlkIElELlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4gVGhlIHZhbGlkYXRlZCB2YWx1ZS4gVGhpcyBtYXkgZGlmZmVyIGZyb20gdGhlIGlucHV0IHZhbHVlLlxyXG4gICAgICovXHJcbiAgICB2YWxpZGF0ZVZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xyXG5cclxuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgU2VsZWN0aXZpdHkuaXNWYWxpZElkKHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdWYWx1ZSBmb3IgU2luZ2xlU2VsZWN0aXZpdHkgaW5zdGFuY2Ugc2hvdWxkIGJlIGEgdmFsaWQgSUQgb3IgbnVsbCcpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfY2xpY2tlZDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZHJvcGRvd24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuc2hvd0Ryb3Bkb3duICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2ZvY3VzZWQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5lbmFibGVkICYmICF0aGlzLl9jbG9zaW5nICYmICF0aGlzLl9vcGVuaW5nICYmXHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zaG93RHJvcGRvd24gIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3BlbigpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfaXRlbVJlbW92ZUNsaWNrZWQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB0aGlzLmRhdGEobnVsbCk7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfcmVzdWx0U2VsZWN0ZWQ6IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblxyXG4gICAgICAgIHRoaXMuZGF0YShldmVudC5pdGVtKTtcclxuXHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG5cclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFNlbGVjdGl2aXR5LklucHV0VHlwZXMuU2luZ2xlID0gU2luZ2xlU2VsZWN0aXZpdHk7XHJcblxyXG59LHtcIjhcIjo4LFwianF1ZXJ5XCI6XCJqcXVlcnlcIn1dLDE2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIFNlbGVjdGl2aXR5ID0gX2RlcmVxXyg4KTtcclxudmFyIFNlbGVjdGl2aXR5RHJvcGRvd24gPSBfZGVyZXFfKDEwKTtcclxuXHJcbi8qKlxyXG4gKiBFeHRlbmRlZCBkcm9wZG93biB0aGF0IHN1cHBvcnRzIHN1Ym1lbnVzLlxyXG4gKi9cclxuZnVuY3Rpb24gU2VsZWN0aXZpdHlTdWJtZW51KG9wdGlvbnMpIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE9wdGlvbmFsIHBhcmVudCBkcm9wZG93biBtZW51IGZyb20gd2hpY2ggdGhpcyBkcm9wZG93biB3YXMgb3BlbmVkLlxyXG4gICAgICovXHJcbiAgICB0aGlzLnBhcmVudE1lbnUgPSBvcHRpb25zLnBhcmVudE1lbnU7XHJcblxyXG4gICAgU2VsZWN0aXZpdHlEcm9wZG93bi5jYWxsKHRoaXMsIG9wdGlvbnMpO1xyXG5cclxuICAgIHRoaXMuX2Nsb3NlU3VibWVudVRpbWVvdXQgPSAwO1xyXG5cclxuICAgIHRoaXMuX29wZW5TdWJtZW51VGltZW91dCA9IDA7XHJcbn1cclxuXHJcbnZhciBjYWxsU3VwZXIgPSBTZWxlY3Rpdml0eS5pbmhlcml0cyhTZWxlY3Rpdml0eVN1Ym1lbnUsIFNlbGVjdGl2aXR5RHJvcGRvd24sIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0XHJcbiAgICAgKi9cclxuICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3VibWVudSkge1xyXG4gICAgICAgICAgICB0aGlzLnN1Ym1lbnUuY2xvc2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNhbGxTdXBlcih0aGlzLCAnY2xvc2UnKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucGFyZW50TWVudSkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudE1lbnUuc3VibWVudSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50TWVudSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fY2xvc2VTdWJtZW51VGltZW91dCk7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX29wZW5TdWJtZW51VGltZW91dCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBvcHRpb25zIG9iamVjdC4gTWF5IGNvbnRhaW4gdGhlIGZvbGxvd2luZyBwcm9wZXJ0eTpcclxuICAgICAqICAgICAgICAgICAgICAgIGRlbGF5IC0gSWYgdHJ1ZSwgaW5kaWNhdGVzIGFueSBzdWJtZW51IHNob3VsZCBub3QgYmUgb3BlbmVkIHVudGlsIGFmdGVyIHNvbWVcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXkuXHJcbiAgICAgKi9cclxuICAgIGhpZ2hsaWdodDogZnVuY3Rpb24oaXRlbSwgb3B0aW9ucykge1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmRlbGF5KSB7XHJcbiAgICAgICAgICAgIGNhbGxTdXBlcih0aGlzLCAnaGlnaGxpZ2h0JywgaXRlbSk7XHJcblxyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fb3BlblN1Ym1lbnVUaW1lb3V0KTtcclxuICAgICAgICAgICAgdGhpcy5fb3BlblN1Ym1lbnVUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLl9kb0hpZ2hsaWdodC5iaW5kKHRoaXMsIGl0ZW0pLCAzMDApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdWJtZW51KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhpZ2hsaWdodGVkUmVzdWx0ICYmIHRoaXMuaGlnaGxpZ2h0ZWRSZXN1bHQuaWQgPT09IGl0ZW0uaWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RvSGlnaGxpZ2h0KGl0ZW0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2Nsb3NlU3VibWVudVRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2xvc2VTdWJtZW51VGltZW91dCA9IHNldFRpbWVvdXQoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2xvc2VTdWJtZW51QW5kSGlnaGxpZ2h0LmJpbmQodGhpcywgaXRlbSksIDEwMFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudE1lbnUgJiYgdGhpcy5wYXJlbnRNZW51Ll9jbG9zZVN1Ym1lbnVUaW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5wYXJlbnRNZW51Ll9jbG9zZVN1Ym1lbnVUaW1lb3V0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50TWVudS5fY2xvc2VTdWJtZW51VGltZW91dCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2RvSGlnaGxpZ2h0KGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdFxyXG4gICAgICovXHJcbiAgICBzZWFyY2g6IGZ1bmN0aW9uKHRlcm0pIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3VibWVudSkge1xyXG4gICAgICAgICAgICB0aGlzLnN1Ym1lbnUuc2VhcmNoKHRlcm0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNhbGxTdXBlcih0aGlzLCAnc2VhcmNoJywgdGVybSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0XHJcbiAgICAgKi9cclxuICAgIHNlbGVjdEhpZ2hsaWdodDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN1Ym1lbnUpIHtcclxuICAgICAgICAgICAgdGhpcy5zdWJtZW51LnNlbGVjdEhpZ2hsaWdodCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNhbGxTdXBlcih0aGlzLCAnc2VsZWN0SGlnaGxpZ2h0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0XHJcbiAgICAgKi9cclxuICAgIHNlbGVjdEl0ZW06IGZ1bmN0aW9uKGlkKSB7XHJcblxyXG4gICAgICAgIHZhciBpdGVtID0gU2VsZWN0aXZpdHkuZmluZE5lc3RlZEJ5SWQodGhpcy5yZXN1bHRzLCBpZCk7XHJcbiAgICAgICAgaWYgKGl0ZW0gJiYgIWl0ZW0uZGlzYWJsZWQgJiYgIWl0ZW0uc3VibWVudSkge1xyXG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHsgaWQ6IGlkLCBpdGVtOiBpdGVtIH07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGl2aXR5LnRyaWdnZXJFdmVudCgnc2VsZWN0aXZpdHktc2VsZWN0aW5nJywgb3B0aW9ucykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0aXZpdHkudHJpZ2dlckV2ZW50KCdzZWxlY3Rpdml0eS1zZWxlY3RlZCcsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0XHJcbiAgICAgKi9cclxuICAgIHNob3dSZXN1bHRzOiBmdW5jdGlvbihyZXN1bHRzLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN1Ym1lbnUpIHtcclxuICAgICAgICAgICAgdGhpcy5zdWJtZW51LnNob3dSZXN1bHRzKHJlc3VsdHMsIG9wdGlvbnMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNhbGxTdXBlcih0aGlzLCAnc2hvd1Jlc3VsdHMnLCByZXN1bHRzLCBvcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXRcclxuICAgICAqL1xyXG4gICAgdHJpZ2dlckNsb3NlOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucGFyZW50TWVudSkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGl2aXR5LiRlbC50cmlnZ2VyKCdzZWxlY3Rpdml0eS1jbG9zZS1zdWJtZW51Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2FsbFN1cGVyKHRoaXMsICd0cmlnZ2VyQ2xvc2UnKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXRcclxuICAgICAqL1xyXG4gICAgdHJpZ2dlck9wZW46IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5wYXJlbnRNZW51KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aXZpdHkuJGVsLnRyaWdnZXIoJ3NlbGVjdGl2aXR5LW9wZW4tc3VibWVudScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNhbGxTdXBlcih0aGlzLCAndHJpZ2dlck9wZW4nKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2Nsb3NlU3VibWVudUFuZEhpZ2hsaWdodDogZnVuY3Rpb24oaXRlbSkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zdWJtZW51KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3VibWVudS5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fZG9IaWdobGlnaHQoaXRlbSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2RvSGlnaGxpZ2h0OiBmdW5jdGlvbihpdGVtKSB7XHJcblxyXG4gICAgICAgIGNhbGxTdXBlcih0aGlzLCAnaGlnaGxpZ2h0JywgaXRlbSk7XHJcblxyXG4gICAgICAgIGlmIChpdGVtLnN1Ym1lbnUgJiYgIXRoaXMuc3VibWVudSkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0aXZpdHkgPSB0aGlzLnNlbGVjdGl2aXR5O1xyXG4gICAgICAgICAgICB2YXIgRHJvcGRvd24gPSBzZWxlY3Rpdml0eS5vcHRpb25zLmRyb3Bkb3duIHx8IFNlbGVjdGl2aXR5LkRyb3Bkb3duO1xyXG4gICAgICAgICAgICBpZiAoRHJvcGRvd24pIHtcclxuICAgICAgICAgICAgICAgIHZhciBxdW90ZWRJZCA9IFNlbGVjdGl2aXR5LnF1b3RlQ3NzQXR0cihpdGVtLmlkKTtcclxuICAgICAgICAgICAgICAgIHZhciAkaXRlbSA9IHRoaXMuJCgnLnNlbGVjdGl2aXR5LXJlc3VsdC1pdGVtW2RhdGEtaXRlbS1pZD0nICsgcXVvdGVkSWQgKyAnXScpO1xyXG4gICAgICAgICAgICAgICAgdmFyICRkcm9wZG93bkVsID0gdGhpcy4kZWw7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJtZW51ID0gbmV3IERyb3Bkb3duKHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtczogaXRlbS5zdWJtZW51Lml0ZW1zIHx8IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50TWVudTogdGhpcyxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogaXRlbS5zdWJtZW51LnBvc2l0aW9uRHJvcGRvd24gfHwgZnVuY3Rpb24oJGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkcm9wZG93blBvc2l0aW9uID0gJGRyb3Bkb3duRWwucG9zaXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gJGRyb3Bkb3duRWwud2lkdGgoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGVsLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBkcm9wZG93blBvc2l0aW9uLmxlZnQgKyB3aWR0aCArICdweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6ICRpdGVtLnBvc2l0aW9uKCkudG9wICsgZHJvcGRvd25Qb3NpdGlvbi50b3AgKyAncHgnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLndpZHRoKHdpZHRoKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBpdGVtLnN1Ym1lbnUucXVlcnkgfHwgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpdml0eTogc2VsZWN0aXZpdHksXHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd1NlYXJjaElucHV0OiBpdGVtLnN1Ym1lbnUuc2hvd1NlYXJjaElucHV0XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1Ym1lbnUuc2VhcmNoKCcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0pO1xyXG5cclxuU2VsZWN0aXZpdHkuRHJvcGRvd24gPSBTZWxlY3Rpdml0eVN1Ym1lbnU7XHJcblxyXG5TZWxlY3Rpdml0eS5maW5kTmVzdGVkQnlJZCA9IGZ1bmN0aW9uKGFycmF5LCBpZCkge1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciBpdGVtID0gYXJyYXlbaV0sIHJlc3VsdDtcclxuICAgICAgICBpZiAoaXRlbS5pZCA9PT0gaWQpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gaXRlbTtcclxuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0uY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gU2VsZWN0aXZpdHkuZmluZE5lc3RlZEJ5SWQoaXRlbS5jaGlsZHJlbiwgaWQpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS5zdWJtZW51ICYmIGl0ZW0uc3VibWVudS5pdGVtcykge1xyXG4gICAgICAgICAgICByZXN1bHQgPSBTZWxlY3Rpdml0eS5maW5kTmVzdGVkQnlJZChpdGVtLnN1Ym1lbnUuaXRlbXMsIGlkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTZWxlY3Rpdml0eVN1Ym1lbnU7XHJcblxyXG59LHtcIjEwXCI6MTAsXCI4XCI6OH1dLDE3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGVzY2FwZSA9IF9kZXJlcV8oNCk7XHJcblxyXG52YXIgU2VsZWN0aXZpdHkgPSBfZGVyZXFfKDgpO1xyXG5cclxuX2RlcmVxXygxMyk7XHJcblxyXG4vKipcclxuICogRGVmYXVsdCBzZXQgb2YgdGVtcGxhdGVzIHRvIHVzZSB3aXRoIFNlbGVjdGl2aXR5LmpzLlxyXG4gKlxyXG4gKiBOb3RlIHRoYXQgZXZlcnkgdGVtcGxhdGUgY2FuIGJlIGRlZmluZWQgYXMgZWl0aGVyIGEgc3RyaW5nLCBhIGZ1bmN0aW9uIHJldHVybmluZyBhIHN0cmluZyAobGlrZVxyXG4gKiBIYW5kbGViYXJzIHRlbXBsYXRlcywgZm9yIGluc3RhbmNlKSBvciBhcyBhbiBvYmplY3QgY29udGFpbmluZyBhIHJlbmRlciBmdW5jdGlvbiAobGlrZSBIb2dhbi5qc1xyXG4gKiB0ZW1wbGF0ZXMsIGZvciBpbnN0YW5jZSkuXHJcbiAqL1xyXG5TZWxlY3Rpdml0eS5UZW1wbGF0ZXMgPSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXJzIHRoZSBkcm9wZG93bi5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgdGVtcGxhdGUgaXMgZXhwZWN0ZWQgdG8gaGF2ZSBhdCBsZWFzdCBvbmUgZWxlbWVudCB3aXRoIHRoZSBjbGFzc1xyXG4gICAgICogJ3NlbGVjdGl2aXR5LXJlc3VsdHMtY29udGFpbmVyJywgd2hpY2ggaXMgd2hlcmUgYWxsIHJlc3VsdHMgd2lsbCBiZSBhZGRlZCB0by5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIG9iamVjdCBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcclxuICAgICAqICAgICAgICAgICAgICAgIGRyb3Bkb3duQ3NzQ2xhc3MgLSBPcHRpb25hbCBDU1MgY2xhc3MgdG8gYWRkIHRvIHRoZSB0b3AtbGV2ZWwgZWxlbWVudC5cclxuICAgICAqICAgICAgICAgICAgICAgIHNlYXJjaElucHV0UGxhY2Vob2xkZXIgLSBPcHRpb25hbCBwbGFjZWhvbGRlciB0ZXh0IHRvIGRpc3BsYXkgaW4gdGhlIHNlYXJjaFxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0IGluIHRoZSBkcm9wZG93bi5cclxuICAgICAqICAgICAgICAgICAgICAgIHNob3dTZWFyY2hJbnB1dCAtIEJvb2xlYW4gd2hldGhlciBhIHNlYXJjaCBpbnB1dCBzaG91bGQgYmUgc2hvd24uIElmIHRydWUsXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbiBpbnB1dCBlbGVtZW50IHdpdGggdGhlICdzZWxlY3Rpdml0eS1zZWFyY2gtaW5wdXQnIGlzXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZC5cclxuICAgICAqL1xyXG4gICAgZHJvcGRvd246IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgZXh0cmFDbGFzcyA9IChvcHRpb25zLmRyb3Bkb3duQ3NzQ2xhc3MgPyAnICcgKyBvcHRpb25zLmRyb3Bkb3duQ3NzQ2xhc3MgOiAnJyksXHJcbiAgICAgICAgICAgIHNlYXJjaElucHV0ID0gJyc7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuc2hvd1NlYXJjaElucHV0KSB7XHJcbiAgICAgICAgICAgIGV4dHJhQ2xhc3MgKz0gJyBoYXMtc2VhcmNoLWlucHV0JztcclxuXHJcbiAgICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IG9wdGlvbnMuc2VhcmNoSW5wdXRQbGFjZWhvbGRlcjtcclxuICAgICAgICAgICAgc2VhcmNoSW5wdXQgPSAoXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlbGVjdGl2aXR5LXNlYXJjaC1pbnB1dC1jb250YWluZXJcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJzZWxlY3Rpdml0eS1zZWFyY2gtaW5wdXRcIicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBsYWNlaG9sZGVyID8gJyBwbGFjZWhvbGRlcj1cIicgKyBlc2NhcGUocGxhY2Vob2xkZXIpICsgJ1wiJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJycpICsgJz4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2VsZWN0aXZpdHktZHJvcGRvd24nICsgZXh0cmFDbGFzcyArICdcIj4nICtcclxuICAgICAgICAgICAgICAgIHNlYXJjaElucHV0ICtcclxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2VsZWN0aXZpdHktcmVzdWx0cy1jb250YWluZXJcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgJzwvZGl2PidcclxuICAgICAgICApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlcnMgYW4gZXJyb3IgbWVzc2FnZSBpbiB0aGUgZHJvcGRvd24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBvYmplY3QgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XHJcbiAgICAgKiAgICAgICAgICAgICAgICBlc2NhcGUgLSBCb29sZWFuIHdoZXRoZXIgdGhlIG1lc3NhZ2Ugc2hvdWxkIGJlIEhUTUwtZXNjYXBlZC5cclxuICAgICAqICAgICAgICAgICAgICAgIG1lc3NhZ2UgLSBUaGUgbWVzc2FnZSB0byBkaXNwbGF5LlxyXG4gICAgICovXHJcbiAgICBlcnJvcjogZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2VsZWN0aXZpdHktZXJyb3JcIj4nICtcclxuICAgICAgICAgICAgICAgIChvcHRpb25zLmVzY2FwZSA/IGVzY2FwZShvcHRpb25zLm1lc3NhZ2UpIDogb3B0aW9ucy5tZXNzYWdlKSArXHJcbiAgICAgICAgICAgICc8L2Rpdj4nXHJcbiAgICAgICAgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXJzIGEgbG9hZGluZyBpbmRpY2F0b3IgaW4gdGhlIGRyb3Bkb3duLlxyXG4gICAgICpcclxuICAgICAqIFRoaXMgdGVtcGxhdGUgaXMgZXhwZWN0ZWQgdG8gaGF2ZSBhbiBlbGVtZW50IHdpdGggYSAnc2VsZWN0aXZpdHktbG9hZGluZycgY2xhc3Mgd2hpY2ggbWF5IGJlXHJcbiAgICAgKiByZXBsYWNlZCB3aXRoIGFjdHVhbCByZXN1bHRzLlxyXG4gICAgICovXHJcbiAgICBsb2FkaW5nOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJzZWxlY3Rpdml0eS1sb2FkaW5nXCI+JyArIFNlbGVjdGl2aXR5LkxvY2FsZS5sb2FkaW5nICsgJzwvZGl2Pic7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTG9hZCBtb3JlIGluZGljYXRvci5cclxuICAgICAqXHJcbiAgICAgKiBUaGlzIHRlbXBsYXRlIGlzIGV4cGVjdGVkIHRvIGhhdmUgYW4gZWxlbWVudCB3aXRoIGEgJ3NlbGVjdGl2aXR5LWxvYWQtbW9yZScgY2xhc3Mgd2hpY2gsIHdoZW5cclxuICAgICAqIGNsaWNrZWQsIHdpbGwgbG9hZCBtb3JlIHJlc3VsdHMuXHJcbiAgICAgKi9cclxuICAgIGxvYWRNb3JlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJzZWxlY3Rpdml0eS1sb2FkLW1vcmVcIj4nICsgU2VsZWN0aXZpdHkuTG9jYWxlLmxvYWRNb3JlICsgJzwvZGl2Pic7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVycyBtdWx0aS1zZWxlY3Rpb24gaW5wdXQgYm94ZXMuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIHRlbXBsYXRlIGlzIGV4cGVjdGVkIHRvIGhhdmUgYXQgbGVhc3QgaGF2ZSBlbGVtZW50cyB3aXRoIHRoZSBmb2xsb3dpbmcgY2xhc3NlczpcclxuICAgICAqICdzZWxlY3Rpdml0eS1tdWx0aXBsZS1pbnB1dC1jb250YWluZXInIC0gVGhlIGVsZW1lbnQgY29udGFpbmluZyBhbGwgdGhlIHNlbGVjdGVkIGl0ZW1zIGFuZFxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgaW5wdXQgZm9yIHNlbGVjdGluZyBhZGRpdGlvbmFsIGl0ZW1zLlxyXG4gICAgICogJ3NlbGVjdGl2aXR5LW11bHRpcGxlLWlucHV0JyAtIFRoZSBhY3R1YWwgaW5wdXQgZWxlbWVudCB0aGF0IGFsbG93cyB0aGUgdXNlciB0byB0eXBlIHRvXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoIGZvciBtb3JlIGl0ZW1zLiBXaGVuIHNlbGVjdGVkIGl0ZW1zIGFyZSBhZGRlZCwgdGhleSBhcmVcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRlZCByaWdodCBiZWZvcmUgdGhpcyBlbGVtZW50LlxyXG4gICAgICogJ3NlbGVjdGl2aXR5LXdpZHRoLWRldGVjdG9yJyAtIFRoaXMgZWxlbWVudCBpcyBvcHRpb25hbCwgYnV0IGltcG9ydGFudCB0byBtYWtlIHN1cmUgdGhlXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy5zZWxlY3Rpdml0eS1tdWx0aXBsZS1pbnB1dCcgZWxlbWVudCB3aWxsIGZpdCBpbiB0aGVcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuIFRoZSB3aWR0aCBkZXRlY3RvciBhbHNvIGhhcyB0aGVcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2VsZWN0Mi1tdWx0aXBsZS1pbnB1dCcgY2xhc3Mgb24gcHVycG9zZSB0byBiZSBhYmxlIHRvIGRldGVjdFxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB3aWR0aCBvZiB0ZXh0IGVudGVyZWQgaW4gdGhlIGlucHV0IGVsZW1lbnQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBvYmplY3QgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIHByb3BlcnR5OlxyXG4gICAgICogICAgICAgICAgICAgICAgZW5hYmxlZCAtIEJvb2xlYW4gd2hldGhlciB0aGUgaW5wdXQgaXMgZW5hYmxlZC5cclxuICAgICAqL1xyXG4gICAgbXVsdGlwbGVTZWxlY3RJbnB1dDogZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2VsZWN0aXZpdHktbXVsdGlwbGUtaW5wdXQtY29udGFpbmVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAob3B0aW9ucy5lbmFibGVkID8gJzxpbnB1dCB0eXBlPVwidGV4dFwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIGF1dG9jb3JyZWN0PVwib2ZmXCIgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhdXRvY2FwaXRhbGl6ZT1cIm9mZlwiICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3M9XCJzZWxlY3Rpdml0eS1tdWx0aXBsZS1pbnB1dFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInNlbGVjdGl2aXR5LW11bHRpcGxlLWlucHV0ICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2VsZWN0aXZpdHktd2lkdGgtZGV0ZWN0b3JcIj48L3NwYW4+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICc8ZGl2IGNsYXNzPVwic2VsZWN0aXZpdHktbXVsdGlwbGUtaW5wdXQgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NlbGVjdGl2aXR5LXBsYWNlaG9sZGVyXCI+PC9kaXY+JykgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZWxlY3Rpdml0eS1jbGVhcmZpeFwiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPC9kaXY+J1xyXG4gICAgICAgICk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVycyBhIHNlbGVjdGVkIGl0ZW0gaW4gbXVsdGktc2VsZWN0aW9uIGlucHV0IGJveGVzLlxyXG4gICAgICpcclxuICAgICAqIFRoZSB0ZW1wbGF0ZSBpcyBleHBlY3RlZCB0byBoYXZlIGEgdG9wLWxldmVsIGVsZW1lbnQgd2l0aCB0aGUgY2xhc3NcclxuICAgICAqICdzZWxlY3Rpdml0eS1tdWx0aXBsZS1zZWxlY3RlZC1pdGVtJy4gVGhpcyBlbGVtZW50IGlzIGFsc28gcmVxdWlyZWQgdG8gaGF2ZSBhICdkYXRhLWl0ZW0taWQnXHJcbiAgICAgKiBhdHRyaWJ1dGUgd2l0aCB0aGUgSUQgc2V0IHRvIHRoYXQgcGFzc2VkIHRocm91Z2ggdGhlIG9wdGlvbnMgb2JqZWN0LlxyXG4gICAgICpcclxuICAgICAqIEFuIGVsZW1lbnQgd2l0aCB0aGUgY2xhc3MgJ3NlbGVjdGl2aXR5LW11bHRpcGxlLXNlbGVjdGVkLWl0ZW0tcmVtb3ZlJyBzaG91bGQgYmUgcHJlc2VudFxyXG4gICAgICogd2hpY2gsIHdoZW4gY2xpY2tlZCwgd2lsbCBjYXVzZSB0aGUgZWxlbWVudCB0byBiZSByZW1vdmVkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxyXG4gICAgICogICAgICAgICAgICAgICAgaGlnaGxpZ2h0ZWQgLSBCb29sZWFuIHdoZXRoZXIgdGhpcyBpdGVtIGlzIGN1cnJlbnRseSBoaWdobGlnaHRlZC5cclxuICAgICAqICAgICAgICAgICAgICAgIGlkIC0gSWRlbnRpZmllciBmb3IgdGhlIGl0ZW0uXHJcbiAgICAgKiAgICAgICAgICAgICAgICByZW1vdmFibGUgLSBCb29sZWFuIHdoZXRoZXIgYSByZW1vdmUgaWNvbiBzaG91bGQgYmUgZGlzcGxheWVkLlxyXG4gICAgICogICAgICAgICAgICAgICAgdGV4dCAtIFRleHQgbGFiZWwgd2hpY2ggdGhlIHVzZXIgc2Vlcy5cclxuICAgICAqL1xyXG4gICAgbXVsdGlwbGVTZWxlY3RlZEl0ZW06IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgZXh0cmFDbGFzcyA9IChvcHRpb25zLmhpZ2hsaWdodGVkID8gJyBoaWdobGlnaHRlZCcgOiAnJyk7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2VsZWN0aXZpdHktbXVsdGlwbGUtc2VsZWN0ZWQtaXRlbScgKyBleHRyYUNsYXNzICsgJ1wiICcgK1xyXG4gICAgICAgICAgICAgICAgICAnZGF0YS1pdGVtLWlkPVwiJyArIGVzY2FwZShvcHRpb25zLmlkKSArICdcIj4nICtcclxuICAgICAgICAgICAgICAgIChvcHRpb25zLnJlbW92YWJsZSA/ICc8YSBjbGFzcz1cInNlbGVjdGl2aXR5LW11bHRpcGxlLXNlbGVjdGVkLWl0ZW0tcmVtb3ZlXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxpIGNsYXNzPVwiZmEgZmEtcmVtb3ZlXCI+PC9pPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvYT4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJykgK1xyXG4gICAgICAgICAgICAgICAgZXNjYXBlKG9wdGlvbnMudGV4dCkgK1xyXG4gICAgICAgICAgICAnPC9zcGFuPidcclxuICAgICAgICApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlcnMgYSBtZXNzYWdlIHRoZXJlIGFyZSBubyByZXN1bHRzIGZvciB0aGUgZ2l2ZW4gcXVlcnkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBvYmplY3QgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIHByb3BlcnR5OlxyXG4gICAgICogICAgICAgICAgICAgICAgdGVybSAtIFNlYXJjaCB0ZXJtIHRoZSB1c2VyIGlzIHNlYXJjaGluZyBmb3IuXHJcbiAgICAgKi9cclxuICAgIG5vUmVzdWx0czogZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBMb2NhbGUgPSBTZWxlY3Rpdml0eS5Mb2NhbGU7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZWxlY3Rpdml0eS1lcnJvclwiPicgK1xyXG4gICAgICAgICAgICAgICAgKG9wdGlvbnMudGVybSA/IExvY2FsZS5ub1Jlc3VsdHNGb3JUZXJtKG9wdGlvbnMudGVybSkgOiBMb2NhbGUubm9SZXN1bHRzKSArXHJcbiAgICAgICAgICAgICc8L2Rpdj4nXHJcbiAgICAgICAgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXJzIGEgY29udGFpbmVyIGZvciBpdGVtIGNoaWxkcmVuLlxyXG4gICAgICpcclxuICAgICAqIFRoZSB0ZW1wbGF0ZSBpcyBleHBlY3RlZCB0byBoYXZlIGFuIGVsZW1lbnQgd2l0aCB0aGUgY2xhc3MgJ3NlbGVjdGl2aXR5LXJlc3VsdC1jaGlsZHJlbicuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBvYmplY3QgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIHByb3BlcnR5OlxyXG4gICAgICogICAgICAgICAgICAgICAgY2hpbGRyZW5IdG1sIC0gUmVuZGVyZWQgSFRNTCBmb3IgdGhlIGNoaWxkcmVuLlxyXG4gICAgICovXHJcbiAgICByZXN1bHRDaGlsZHJlbjogZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiAnPGRpdiBjbGFzcz1cInNlbGVjdGl2aXR5LXJlc3VsdC1jaGlsZHJlblwiPicgKyBvcHRpb25zLmNoaWxkcmVuSHRtbCArICc8L2Rpdj4nO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciBhIHJlc3VsdCBpdGVtIGluIHRoZSBkcm9wZG93bi5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgdGVtcGxhdGUgaXMgZXhwZWN0ZWQgdG8gaGF2ZSBhIHRvcC1sZXZlbCBlbGVtZW50IHdpdGggdGhlIGNsYXNzXHJcbiAgICAgKiAnc2VsZWN0aXZpdHktcmVzdWx0LWl0ZW0nLiBUaGlzIGVsZW1lbnQgaXMgYWxzbyByZXF1aXJlZCB0byBoYXZlIGEgJ2RhdGEtaXRlbS1pZCcgYXR0cmlidXRlXHJcbiAgICAgKiB3aXRoIHRoZSBJRCBzZXQgdG8gdGhhdCBwYXNzZWQgdGhyb3VnaCB0aGUgb3B0aW9ucyBvYmplY3QuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBvYmplY3QgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XHJcbiAgICAgKiAgICAgICAgICAgICAgICBpZCAtIElkZW50aWZpZXIgZm9yIHRoZSBpdGVtLlxyXG4gICAgICogICAgICAgICAgICAgICAgdGV4dCAtIFRleHQgbGFiZWwgd2hpY2ggdGhlIHVzZXIgc2Vlcy5cclxuICAgICAqICAgICAgICAgICAgICAgIGRpc2FibGVkIC0gVHJ1dGh5IGlmIHRoZSBpdGVtIHNob3VsZCBiZSBkaXNhYmxlZC5cclxuICAgICAqICAgICAgICAgICAgICAgIHN1Ym1lbnUgLSBUcnV0aHkgaWYgdGhlIHJlc3VsdCBpdGVtIGhhcyBhIG1lbnUgd2l0aCBzdWJyZXN1bHRzLlxyXG4gICAgICovXHJcbiAgICByZXN1bHRJdGVtOiBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZWxlY3Rpdml0eS1yZXN1bHQtaXRlbScgKyAob3B0aW9ucy5kaXNhYmxlZCA/ICcgZGlzYWJsZWQnIDogJycpICsgJ1wiJyArXHJcbiAgICAgICAgICAgICAgICAnIGRhdGEtaXRlbS1pZD1cIicgKyBlc2NhcGUob3B0aW9ucy5pZCkgKyAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICBlc2NhcGUob3B0aW9ucy50ZXh0KSArXHJcbiAgICAgICAgICAgICAgICAob3B0aW9ucy5zdWJtZW51ID8gJzxpIGNsYXNzPVwic2VsZWN0aXZpdHktc3VibWVudS1pY29uIGZhIGZhLWNoZXZyb24tcmlnaHRcIj48L2k+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnKSArXHJcbiAgICAgICAgICAgICc8L2Rpdj4nXHJcbiAgICAgICAgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgYSByZXN1bHQgbGFiZWwgaW4gdGhlIGRyb3Bkb3duLlxyXG4gICAgICpcclxuICAgICAqIFRoZSB0ZW1wbGF0ZSBpcyBleHBlY3RlZCB0byBoYXZlIGEgdG9wLWxldmVsIGVsZW1lbnQgd2l0aCB0aGUgY2xhc3NcclxuICAgICAqICdzZWxlY3Rpdml0eS1yZXN1bHQtbGFiZWwnLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxyXG4gICAgICogICAgICAgICAgICAgICAgdGV4dCAtIFRleHQgbGFiZWwuXHJcbiAgICAgKi9cclxuICAgIHJlc3VsdExhYmVsOiBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwic2VsZWN0aXZpdHktcmVzdWx0LWxhYmVsXCI+JyArIGVzY2FwZShvcHRpb25zLnRleHQpICsgJzwvZGl2Pic7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVycyBzaW5nbGUtc2VsZWN0IGlucHV0IGJveGVzLlxyXG4gICAgICpcclxuICAgICAqIFRoZSB0ZW1wbGF0ZSBpcyBleHBlY3RlZCB0byBoYXZlIGF0IGxlYXN0IG9uZSBlbGVtZW50IHdpdGggdGhlIGNsYXNzXHJcbiAgICAgKiAnc2VsZWN0aXZpdHktc2luZ2xlLXJlc3VsdC1jb250YWluZXInIHdoaWNoIGlzIHRoZSBlbGVtZW50IGNvbnRhaW5pbmcgdGhlIHNlbGVjdGVkIGl0ZW0gb3JcclxuICAgICAqIHRoZSBwbGFjZWhvbGRlci5cclxuICAgICAqL1xyXG4gICAgc2luZ2xlU2VsZWN0SW5wdXQ6IChcclxuICAgICAgICAnPGRpdiBjbGFzcz1cInNlbGVjdGl2aXR5LXNpbmdsZS1zZWxlY3RcIj4nICtcclxuICAgICAgICAgICAgJzxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwic2VsZWN0aXZpdHktc2luZ2xlLXNlbGVjdC1pbnB1dFwiPicgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlbGVjdGl2aXR5LXNpbmdsZS1yZXN1bHQtY29udGFpbmVyXCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8aSBjbGFzcz1cImZhIGZhLXNvcnQtZGVzYyBzZWxlY3Rpdml0eS1jYXJldFwiPjwvaT4nICtcclxuICAgICAgICAnPC9kaXY+J1xyXG4gICAgKSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlcnMgdGhlIHBsYWNlaG9sZGVyIGZvciBzaW5nbGUtc2VsZWN0IGlucHV0IGJveGVzLlxyXG4gICAgICpcclxuICAgICAqIFRoZSB0ZW1wbGF0ZSBpcyBleHBlY3RlZCB0byBoYXZlIGEgdG9wLWxldmVsIGVsZW1lbnQgd2l0aCB0aGUgY2xhc3NcclxuICAgICAqICdzZWxlY3Rpdml0eS1wbGFjZWhvbGRlcicuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBvYmplY3QgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIHByb3BlcnR5OlxyXG4gICAgICogICAgICAgICAgICAgICAgcGxhY2Vob2xkZXIgLSBUaGUgcGxhY2Vob2xkZXIgdGV4dC5cclxuICAgICAqL1xyXG4gICAgc2luZ2xlU2VsZWN0UGxhY2Vob2xkZXI6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlbGVjdGl2aXR5LXBsYWNlaG9sZGVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICBlc2NhcGUob3B0aW9ucy5wbGFjZWhvbGRlcikgK1xyXG4gICAgICAgICAgICAnPC9kaXY+J1xyXG4gICAgICAgICk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVycyB0aGUgc2VsZWN0ZWQgaXRlbSBpbiBzaW5nbGUtc2VsZWN0IGlucHV0IGJveGVzLlxyXG4gICAgICpcclxuICAgICAqIFRoZSB0ZW1wbGF0ZSBpcyBleHBlY3RlZCB0byBoYXZlIGEgdG9wLWxldmVsIGVsZW1lbnQgd2l0aCB0aGUgY2xhc3NcclxuICAgICAqICdzZWxlY3Rpdml0eS1zaW5nbGUtc2VsZWN0ZWQtaXRlbScuIFRoaXMgZWxlbWVudCBpcyBhbHNvIHJlcXVpcmVkIHRvIGhhdmUgYSAnZGF0YS1pdGVtLWlkJ1xyXG4gICAgICogYXR0cmlidXRlIHdpdGggdGhlIElEIHNldCB0byB0aGF0IHBhc3NlZCB0aHJvdWdoIHRoZSBvcHRpb25zIG9iamVjdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIG9iamVjdCBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcclxuICAgICAqICAgICAgICAgICAgICAgIGlkIC0gSWRlbnRpZmllciBmb3IgdGhlIGl0ZW0uXHJcbiAgICAgKiAgICAgICAgICAgICAgICByZW1vdmFibGUgLSBCb29sZWFuIHdoZXRoZXIgYSByZW1vdmUgaWNvbiBzaG91bGQgYmUgZGlzcGxheWVkLlxyXG4gICAgICogICAgICAgICAgICAgICAgdGV4dCAtIFRleHQgbGFiZWwgd2hpY2ggdGhlIHVzZXIgc2Vlcy5cclxuICAgICAqL1xyXG4gICAgc2luZ2xlU2VsZWN0ZWRJdGVtOiBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwic2VsZWN0aXZpdHktc2luZ2xlLXNlbGVjdGVkLWl0ZW1cIiAnICtcclxuICAgICAgICAgICAgICAgICAgJ2RhdGEtaXRlbS1pZD1cIicgKyBlc2NhcGUob3B0aW9ucy5pZCkgKyAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAob3B0aW9ucy5yZW1vdmFibGUgPyAnPGEgY2xhc3M9XCJzZWxlY3Rpdml0eS1zaW5nbGUtc2VsZWN0ZWQtaXRlbS1yZW1vdmVcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGkgY2xhc3M9XCJmYSBmYS1yZW1vdmVcIj48L2k+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9hPidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnKSArXHJcbiAgICAgICAgICAgICAgICBlc2NhcGUob3B0aW9ucy50ZXh0KSArXHJcbiAgICAgICAgICAgICc8L3NwYW4+J1xyXG4gICAgICAgICk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVycyBzZWxlY3QtYm94IGluc2lkZSBzaW5nbGUtc2VsZWN0IGlucHV0IHRoYXQgd2FzIGluaXRpYWxpemVkIG9uXHJcbiAgICAgKiB0cmFkaXRpb25hbCA8c2VsZWN0PiBlbGVtZW50LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxyXG4gICAgICogICAgICAgICAgICAgICAgbmFtZSAtIE5hbWUgb2YgdGhlIDxzZWxlY3Q+IGVsZW1lbnQuXHJcbiAgICAgKiAgICAgICAgICAgICAgICBtb2RlIC0gTW9kZSBpbiB3aGljaCBzZWxlY3QgZXhpc3RzLCBzaW5nbGUgb3IgbXVsdGlwbGUuXHJcbiAgICAgKi9cclxuICAgIHNlbGVjdENvbXBsaWFuY2U6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgbW9kZSA9IG9wdGlvbnMubW9kZTtcclxuICAgICAgICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZTtcclxuICAgICAgICBpZiAobW9kZSA9PT0gJ211bHRpcGxlJyAmJiBuYW1lLnNsaWNlKC0yKSAhPT0gJ1tdJykge1xyXG4gICAgICAgICAgICBuYW1lICs9ICdbXSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICc8c2VsZWN0IG5hbWU9XCInICsgbmFtZSArICdcIicgKyAobW9kZSA9PT0gJ211bHRpcGxlJyA/ICcgbXVsdGlwbGUnIDogJycpICsgJz48L3NlbGVjdD4nXHJcbiAgICAgICAgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXJzIHRoZSBzZWxlY3RlZCBpdGVtIGluIGNvbXBsaWFuY2UgPHNlbGVjdD4gZWxlbWVudCBhcyA8b3B0aW9uPi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIG9iamVjdCBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllc1xyXG4gICAgICogICAgICAgICAgICAgICAgaWQgLSBJZGVudGlmaWVyIGZvciB0aGUgaXRlbS5cclxuICAgICAqICAgICAgICAgICAgICAgIHRleHQgLSBUZXh0IGxhYmVsIHdoaWNoIHRoZSB1c2VyIHNlZXMuXHJcbiAgICAgKi9cclxuICAgIHNlbGVjdE9wdGlvbkNvbXBsaWFuY2U6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAnPG9wdGlvbiB2YWx1ZT1cIicgKyBlc2NhcGUob3B0aW9ucy5pZCkgKyAnXCIgc2VsZWN0ZWQ+JyArXHJcbiAgICAgICAgICAgICAgICBlc2NhcGUob3B0aW9ucy50ZXh0KSArXHJcbiAgICAgICAgICAgICc8L29wdGlvbj4nXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbn07XHJcblxyXG59LHtcIjEzXCI6MTMsXCI0XCI6NCxcIjhcIjo4fV0sMTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG52YXIgJCA9IHdpbmRvdy5qUXVlcnkgfHwgd2luZG93LlplcHRvO1xyXG5cclxudmFyIFNlbGVjdGl2aXR5ID0gX2RlcmVxXyg4KTtcclxuXHJcbmZ1bmN0aW9uIGRlZmF1bHRUb2tlbml6ZXIoaW5wdXQsIHNlbGVjdGlvbiwgY3JlYXRlVG9rZW4sIG9wdGlvbnMpIHtcclxuXHJcbiAgICB2YXIgY3JlYXRlVG9rZW5JdGVtID0gb3B0aW9ucy5jcmVhdGVUb2tlbkl0ZW0gfHwgZnVuY3Rpb24odG9rZW4pIHtcclxuICAgICAgICByZXR1cm4gdG9rZW4gPyB7IGlkOiB0b2tlbiwgdGV4dDogdG9rZW4gfSA6IG51bGw7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBzZXBhcmF0b3JzID0gb3B0aW9ucy50b2tlblNlcGFyYXRvcnM7XHJcblxyXG4gICAgZnVuY3Rpb24gaGFzVG9rZW4oaW5wdXQpIHtcclxuICAgICAgICByZXR1cm4gaW5wdXQgPyBzZXBhcmF0b3JzLnNvbWUoZnVuY3Rpb24oc2VwYXJhdG9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5pbmRleE9mKHNlcGFyYXRvcikgPiAtMTtcclxuICAgICAgICB9KSA6IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHRha2VUb2tlbihpbnB1dCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBpbnB1dC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoc2VwYXJhdG9ycy5pbmRleE9mKGlucHV0W2ldKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyB0ZXJtOiBpbnB1dC5zbGljZSgwLCBpKSwgaW5wdXQ6IGlucHV0LnNsaWNlKGkgKyAxKSB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7fTtcclxuICAgIH1cclxuXHJcbiAgICB3aGlsZSAoaGFzVG9rZW4oaW5wdXQpKSB7XHJcbiAgICAgICAgdmFyIHRva2VuID0gdGFrZVRva2VuKGlucHV0KTtcclxuICAgICAgICBpZiAodG9rZW4udGVybSkge1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IGNyZWF0ZVRva2VuSXRlbSh0b2tlbi50ZXJtKTtcclxuICAgICAgICAgICAgaWYgKGl0ZW0gJiYgIVNlbGVjdGl2aXR5LmZpbmRCeUlkKHNlbGVjdGlvbiwgaXRlbS5pZCkpIHtcclxuICAgICAgICAgICAgICAgIGNyZWF0ZVRva2VuKGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlucHV0ID0gdG9rZW4uaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlucHV0O1xyXG59XHJcblxyXG4vKipcclxuICogT3B0aW9uIGxpc3RlbmVyIHRoYXQgcHJvdmlkZXMgYSBkZWZhdWx0IHRva2VuaXplciB3aGljaCBpcyB1c2VkIHdoZW4gdGhlIHRva2VuU2VwYXJhdG9ycyBvcHRpb25cclxuICogaXMgc3BlY2lmaWVkLlxyXG4gKlxyXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIG9iamVjdC4gSW4gYWRkaXRpb24gdG8gdGhlIG9wdGlvbnMgc3VwcG9ydGVkIGluIHRoZSBtdWx0aS1pbnB1dFxyXG4gKiAgICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbiwgdGhpcyBtYXkgY29udGFpbiB0aGUgZm9sbG93aW5nIHByb3BlcnR5OlxyXG4gKiAgICAgICAgICAgICAgICB0b2tlblNlcGFyYXRvcnMgLSBBcnJheSBvZiBzdHJpbmcgc2VwYXJhdG9ycyB3aGljaCBhcmUgdXNlZCB0byBzZXBhcmF0ZSB0aGUgc2VhcmNoXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyBpbnRvIHRva2Vucy4gSWYgc3BlY2lmaWVkIGFuZCB0aGUgdG9rZW5pemVyIHByb3BlcnR5IGlzXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdCBzZXQsIHRoZSB0b2tlbml6ZXIgcHJvcGVydHkgd2lsbCBiZSBzZXQgdG8gYSBmdW5jdGlvbiB3aGljaFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGxpdHMgdGhlIHNlYXJjaCB0ZXJtIGludG8gdG9rZW5zIHNlcGFyYXRlZCBieSBhbnkgb2YgdGhlIGdpdmVuXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcGFyYXRvcnMuIFRoZSB0b2tlbnMgd2lsbCBiZSBjb252ZXJ0ZWQgaW50byBzZWxlY3RhYmxlIGl0ZW1zXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzaW5nIHRoZSAnY3JlYXRlVG9rZW5JdGVtJyBmdW5jdGlvbi4gVGhlIGRlZmF1bHQgdG9rZW5pemVyIGFsc29cclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVycyBvdXQgYWxyZWFkeSBzZWxlY3RlZCBpdGVtcy5cclxuICovXHJcblNlbGVjdGl2aXR5Lk9wdGlvbkxpc3RlbmVycy5wdXNoKGZ1bmN0aW9uKHNlbGVjdGl2aXR5LCBvcHRpb25zKSB7XHJcblxyXG4gICAgaWYgKG9wdGlvbnMudG9rZW5TZXBhcmF0b3JzKSB7XHJcbiAgICAgICAgb3B0aW9ucy5hbGxvd2VkVHlwZXMgPSAkLmV4dGVuZCh7IHRva2VuU2VwYXJhdG9yczogJ2FycmF5JyB9LCBvcHRpb25zLmFsbG93ZWRUeXBlcyk7XHJcblxyXG4gICAgICAgIG9wdGlvbnMudG9rZW5pemVyID0gb3B0aW9ucy50b2tlbml6ZXIgfHwgZGVmYXVsdFRva2VuaXplcjtcclxuICAgIH1cclxufSk7XHJcblxyXG59LHtcIjhcIjo4LFwianF1ZXJ5XCI6XCJqcXVlcnlcIn1dLDE5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyICQgPSB3aW5kb3cualF1ZXJ5IHx8IHdpbmRvdy5aZXB0bztcclxuXHJcbnZhciBTZWxlY3Rpdml0eSA9IF9kZXJlcV8oOCk7XHJcblxyXG5mdW5jdGlvbiByZXBsYWNlU2VsZWN0RWxlbWVudCgkZWwsIG9wdGlvbnMpIHtcclxuXHJcbiAgICB2YXIgZGF0YSA9IChvcHRpb25zLm11bHRpcGxlID8gW10gOiBudWxsKTtcclxuXHJcbiAgICB2YXIgbWFwT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XHJcbiAgICAgICAgaWYgKCR0aGlzLmlzKCdvcHRpb24nKSkge1xyXG4gICAgICAgICAgICB2YXIgdGV4dCA9ICR0aGlzLnRleHQoKTtcclxuICAgICAgICAgICAgdmFyIGlkID0gJHRoaXMuYXR0cigndmFsdWUnKSB8fCB0ZXh0O1xyXG4gICAgICAgICAgICBpZiAoJHRoaXMucHJvcCgnc2VsZWN0ZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB7IGlkOiBpZCwgdGV4dDogdGV4dCB9O1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubXVsdGlwbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBpdGVtO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogJHRoaXMuYXR0cignbGFiZWwnKSB8fCB0ZXh0XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHRleHQ6ICR0aGlzLmF0dHIoJ2xhYmVsJyksXHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogJHRoaXMuY2hpbGRyZW4oJ29wdGlvbixvcHRncm91cCcpLm1hcChtYXBPcHRpb25zKS5nZXQoKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgb3B0aW9ucy5hbGxvd0NsZWFyID0gKCdhbGxvd0NsZWFyJyBpbiBvcHRpb25zID8gb3B0aW9ucy5hbGxvd0NsZWFyIDogISRlbC5wcm9wKCdyZXF1aXJlZCcpKTtcclxuXHJcbiAgICB2YXIgaXRlbXMgPSAkZWwuY2hpbGRyZW4oJ29wdGlvbixvcHRncm91cCcpLm1hcChtYXBPcHRpb25zKS5nZXQoKTtcclxuICAgIG9wdGlvbnMuaXRlbXMgPSAob3B0aW9ucy5xdWVyeSA/IG51bGwgOiBpdGVtcyk7XHJcblxyXG4gICAgb3B0aW9ucy5wbGFjZWhvbGRlciA9IG9wdGlvbnMucGxhY2Vob2xkZXIgfHwgJGVsLmRhdGEoJ3BsYWNlaG9sZGVyJykgfHwgJyc7XHJcblxyXG4gICAgb3B0aW9ucy5kYXRhID0gZGF0YTtcclxuXHJcbiAgICB2YXIgY2xhc3NlcyA9ICgkZWwuYXR0cignY2xhc3MnKSB8fCAnc2VsZWN0aXZpdHktaW5wdXQnKS5zcGxpdCgnICcpO1xyXG4gICAgaWYgKGNsYXNzZXMuaW5kZXhPZignc2VsZWN0aXZpdHktaW5wdXQnKSA9PT0gLTEpIHtcclxuICAgICAgICBjbGFzc2VzLnB1c2goJ3NlbGVjdGl2aXR5LWlucHV0Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyICRkaXYgPSAkKCc8ZGl2PicpLmF0dHIoe1xyXG4gICAgICAgICdpZCc6ICRlbC5hdHRyKCdpZCcpLFxyXG4gICAgICAgICdjbGFzcyc6IGNsYXNzZXMuam9pbignICcpLFxyXG4gICAgICAgICdzdHlsZSc6ICRlbC5hdHRyKCdzdHlsZScpLFxyXG4gICAgICAgICdkYXRhLW5hbWUnOiAkZWwuYXR0cignbmFtZScpXHJcbiAgICB9KTtcclxuICAgICRlbC5yZXBsYWNlV2l0aCgkZGl2KTtcclxuICAgIHJldHVybiAkZGl2O1xyXG59XHJcblxyXG5mdW5jdGlvbiBiaW5kVHJhZGl0aW9uYWxTZWxlY3RFdmVudHMoc2VsZWN0aXZpdHkpIHtcclxuXHJcbiAgICB2YXIgJGVsID0gc2VsZWN0aXZpdHkuJGVsO1xyXG5cclxuICAgICRlbC5vbignc2VsZWN0aXZpdHktaW5pdCcsIGZ1bmN0aW9uKGV2ZW50LCBtb2RlKSB7XHJcbiAgICAgICAgJGVsLmFwcGVuZChzZWxlY3Rpdml0eS50ZW1wbGF0ZSgnc2VsZWN0Q29tcGxpYW5jZScsIHtcclxuICAgICAgICAgICAgbW9kZTogbW9kZSxcclxuICAgICAgICAgICAgbmFtZTogJGVsLmF0dHIoJ2RhdGEtbmFtZScpXHJcbiAgICAgICAgfSkpLnJlbW92ZUF0dHIoJ2RhdGEtbmFtZScpO1xyXG4gICAgfSkub24oJ3NlbGVjdGl2aXR5LWluaXQgY2hhbmdlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBzZWxlY3Rpdml0eS5fZGF0YTtcclxuICAgICAgICB2YXIgJHNlbGVjdCA9ICRlbC5maW5kKCdzZWxlY3QnKTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICAkc2VsZWN0LmVtcHR5KCk7XHJcblxyXG4gICAgICAgICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgJHNlbGVjdC5hcHBlbmQoc2VsZWN0aXZpdHkudGVtcGxhdGUoJ3NlbGVjdE9wdGlvbkNvbXBsaWFuY2UnLCBpdGVtKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAkc2VsZWN0Lmh0bWwoc2VsZWN0aXZpdHkudGVtcGxhdGUoJ3NlbGVjdE9wdGlvbkNvbXBsaWFuY2UnLCBkYXRhKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2VsZWN0LmVtcHR5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIE9wdGlvbiBsaXN0ZW5lciBwcm92aWRpbmcgc3VwcG9ydCBmb3IgY29udmVydGluZyB0cmFkaXRpb25hbCA8c2VsZWN0PiBib3hlcyBpbnRvIFNlbGVjdGl2aXR5XHJcbiAqIGluc3RhbmNlcy5cclxuICovXHJcblNlbGVjdGl2aXR5Lk9wdGlvbkxpc3RlbmVycy5wdXNoKGZ1bmN0aW9uKHNlbGVjdGl2aXR5LCBvcHRpb25zKSB7XHJcblxyXG4gICAgdmFyICRlbCA9IHNlbGVjdGl2aXR5LiRlbDtcclxuICAgIGlmICgkZWwuaXMoJ3NlbGVjdCcpKSB7XHJcbiAgICAgICAgaWYgKCRlbC5hdHRyKCdhdXRvZm9jdXMnKSkge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0aXZpdHkuZm9jdXMoKTtcclxuICAgICAgICAgICAgfSwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxlY3Rpdml0eS4kZWwgPSByZXBsYWNlU2VsZWN0RWxlbWVudCgkZWwsIG9wdGlvbnMpO1xyXG4gICAgICAgIHNlbGVjdGl2aXR5LiRlbFswXS5zZWxlY3Rpdml0eSA9IHNlbGVjdGl2aXR5O1xyXG5cclxuICAgICAgICBiaW5kVHJhZGl0aW9uYWxTZWxlY3RFdmVudHMoc2VsZWN0aXZpdHkpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbn0se1wiOFwiOjgsXCJqcXVlcnlcIjpcImpxdWVyeVwifV19LHt9LFsxXSkoMSlcclxufSk7IiwiIWZ1bmN0aW9uKHJvb3QsIGZhY3RvcnkpIHtcclxuICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZGVmaW5lICYmIGRlZmluZS5hbWQgPyAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUgdW5sZXNzIGFtZE1vZHVsZUlkIGlzIHNldFxyXG4gICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gcm9vdC5zdmc0ZXZlcnlib2R5ID0gZmFjdG9yeSgpO1xyXG4gICAgfSkgOiBcIm9iamVjdFwiID09IHR5cGVvZiBleHBvcnRzID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOiByb290LnN2ZzRldmVyeWJvZHkgPSBmYWN0b3J5KCk7XHJcbn0odGhpcywgZnVuY3Rpb24oKSB7XHJcbiAgICAvKiEgc3ZnNGV2ZXJ5Ym9keSB2Mi4wLjMgfCBnaXRodWIuY29tL2pvbmF0aGFudG5lYWwvc3ZnNGV2ZXJ5Ym9keSAqL1xyXG4gICAgZnVuY3Rpb24gZW1iZWQoc3ZnLCB0YXJnZXQpIHtcclxuICAgICAgICAvLyBpZiB0aGUgdGFyZ2V0IGV4aXN0c1xyXG4gICAgICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgLy8gY3JlYXRlIGEgZG9jdW1lbnQgZnJhZ21lbnQgdG8gaG9sZCB0aGUgY29udGVudHMgb2YgdGhlIHRhcmdldFxyXG4gICAgICAgICAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksIHZpZXdCb3ggPSAhc3ZnLmdldEF0dHJpYnV0ZShcInZpZXdCb3hcIikgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShcInZpZXdCb3hcIik7XHJcbiAgICAgICAgICAgIC8vIGNvbmRpdGlvbmFsbHkgc2V0IHRoZSB2aWV3Qm94IG9uIHRoZSBzdmdcclxuICAgICAgICAgICAgdmlld0JveCAmJiBzdmcuc2V0QXR0cmlidXRlKFwidmlld0JveFwiLCB2aWV3Qm94KTtcclxuICAgICAgICAgICAgLy8gY29weSB0aGUgY29udGVudHMgb2YgdGhlIGNsb25lIGludG8gdGhlIGZyYWdtZW50XHJcbiAgICAgICAgICAgIGZvciAoLy8gY2xvbmUgdGhlIHRhcmdldFxyXG4gICAgICAgICAgICB2YXIgY2xvbmUgPSB0YXJnZXQuY2xvbmVOb2RlKCEwKTsgY2xvbmUuY2hpbGROb2Rlcy5sZW5ndGg7ICkge1xyXG4gICAgICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoY2xvbmUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gYXBwZW5kIHRoZSBmcmFnbWVudCBpbnRvIHRoZSBzdmdcclxuICAgICAgICAgICAgc3ZnLmFwcGVuZENoaWxkKGZyYWdtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBsb2FkcmVhZHlzdGF0ZWNoYW5nZSh4aHIpIHtcclxuICAgICAgICAvLyBsaXN0ZW4gdG8gY2hhbmdlcyBpbiB0aGUgcmVxdWVzdFxyXG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gaWYgdGhlIHJlcXVlc3QgaXMgcmVhZHlcclxuICAgICAgICAgICAgaWYgKDQgPT09IHhoci5yZWFkeVN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBnZXQgdGhlIGNhY2hlZCBodG1sIGRvY3VtZW50XHJcbiAgICAgICAgICAgICAgICB2YXIgY2FjaGVkRG9jdW1lbnQgPSB4aHIuX2NhY2hlZERvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgLy8gZW5zdXJlIHRoZSBjYWNoZWQgaHRtbCBkb2N1bWVudCBiYXNlZCBvbiB0aGUgeGhyIHJlc3BvbnNlXHJcbiAgICAgICAgICAgICAgICBjYWNoZWREb2N1bWVudCB8fCAoY2FjaGVkRG9jdW1lbnQgPSB4aHIuX2NhY2hlZERvY3VtZW50ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpLCBcclxuICAgICAgICAgICAgICAgIGNhY2hlZERvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0geGhyLnJlc3BvbnNlVGV4dCwgeGhyLl9jYWNoZWRUYXJnZXQgPSB7fSksIC8vIGNsZWFyIHRoZSB4aHIgZW1iZWRzIGxpc3QgYW5kIGVtYmVkIGVhY2ggaXRlbVxyXG4gICAgICAgICAgICAgICAgeGhyLl9lbWJlZHMuc3BsaWNlKDApLm1hcChmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IHRoZSBjYWNoZWQgdGFyZ2V0XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHhoci5fY2FjaGVkVGFyZ2V0W2l0ZW0uaWRdO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVuc3VyZSB0aGUgY2FjaGVkIHRhcmdldFxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCB8fCAodGFyZ2V0ID0geGhyLl9jYWNoZWRUYXJnZXRbaXRlbS5pZF0gPSBjYWNoZWREb2N1bWVudC5nZXRFbGVtZW50QnlJZChpdGVtLmlkKSksIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVtYmVkIHRoZSB0YXJnZXQgaW50byB0aGUgc3ZnXHJcbiAgICAgICAgICAgICAgICAgICAgZW1iZWQoaXRlbS5zdmcsIHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIC8vIHRlc3QgdGhlIHJlYWR5IHN0YXRlIGNoYW5nZSBpbW1lZGlhdGVseVxyXG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UoKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHN2ZzRldmVyeWJvZHkocmF3b3B0cykge1xyXG4gICAgICAgIGZ1bmN0aW9uIG9uaW50ZXJ2YWwoKSB7XHJcbiAgICAgICAgICAgIC8vIHdoaWxlIHRoZSBpbmRleCBleGlzdHMgaW4gdGhlIGxpdmUgPHVzZT4gY29sbGVjdGlvblxyXG4gICAgICAgICAgICBmb3IgKC8vIGdldCB0aGUgY2FjaGVkIDx1c2U+IGluZGV4XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IDA7IGluZGV4IDwgdXNlcy5sZW5ndGg7ICkge1xyXG4gICAgICAgICAgICAgICAgLy8gZ2V0IHRoZSBjdXJyZW50IDx1c2U+XHJcbiAgICAgICAgICAgICAgICB2YXIgdXNlID0gdXNlc1tpbmRleF0sIHN2ZyA9IHVzZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN2ZyAmJiAvc3ZnL2kudGVzdChzdmcubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNyYyA9IHVzZS5nZXRBdHRyaWJ1dGUoXCJ4bGluazpocmVmXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwb2x5ZmlsbCAmJiAoIW9wdHMudmFsaWRhdGUgfHwgb3B0cy52YWxpZGF0ZShzcmMsIHN2ZywgdXNlKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSA8dXNlPiBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN2Zy5yZW1vdmVDaGlsZCh1c2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwYXJzZSB0aGUgc3JjIGFuZCBnZXQgdGhlIHVybCBhbmQgaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNyY1NwbGl0ID0gc3JjLnNwbGl0KFwiI1wiKSwgdXJsID0gc3JjU3BsaXQuc2hpZnQoKSwgaWQgPSBzcmNTcGxpdC5qb2luKFwiI1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGxpbmsgaXMgZXh0ZXJuYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVybC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgY2FjaGVkIHhociByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeGhyID0gcmVxdWVzdHNbdXJsXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuc3VyZSB0aGUgeGhyIHJlcXVlc3QgZXhpc3RzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIgfHwgKHhociA9IHJlcXVlc3RzW3VybF0gPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSwgeGhyLm9wZW4oXCJHRVRcIiwgdXJsKSwgeGhyLnNlbmQoKSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIuX2VtYmVkcyA9IFtdKSwgLy8gYWRkIHRoZSBzdmcgYW5kIGlkIGFzIGFuIGl0ZW0gdG8gdGhlIHhociBlbWJlZHMgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyLl9lbWJlZHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ZnOiBzdmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGlkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgLy8gcHJlcGFyZSB0aGUgeGhyIHJlYWR5IHN0YXRlIGNoYW5nZSBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZHJlYWR5c3RhdGVjaGFuZ2UoeGhyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVtYmVkIHRoZSBsb2NhbCBpZCBpbnRvIHRoZSBzdmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYmVkKHN2ZywgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGluZGV4IHdoZW4gdGhlIHByZXZpb3VzIHZhbHVlIHdhcyBub3QgXCJ2YWxpZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgKytpbmRleDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjb250aW51ZSB0aGUgaW50ZXJ2YWxcclxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKG9uaW50ZXJ2YWwsIDY3KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHBvbHlmaWxsLCBvcHRzID0gT2JqZWN0KHJhd29wdHMpLCBuZXdlcklFVUEgPSAvXFxiVHJpZGVudFxcL1s1NjddXFxifFxcYk1TSUUgKD86OXwxMClcXC4wXFxiLywgd2Via2l0VUEgPSAvXFxiQXBwbGVXZWJLaXRcXC8oXFxkKylcXGIvLCBvbGRlckVkZ2VVQSA9IC9cXGJFZGdlXFwvMTJcXC4oXFxkKylcXGIvO1xyXG4gICAgICAgIHBvbHlmaWxsID0gXCJwb2x5ZmlsbFwiIGluIG9wdHMgPyBvcHRzLnBvbHlmaWxsIDogbmV3ZXJJRVVBLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2gob2xkZXJFZGdlVUEpIHx8IFtdKVsxXSA8IDEwNTQ3IHx8IChuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKHdlYmtpdFVBKSB8fCBbXSlbMV0gPCA1Mzc7XHJcbiAgICAgICAgLy8gY3JlYXRlIHhociByZXF1ZXN0cyBvYmplY3RcclxuICAgICAgICB2YXIgcmVxdWVzdHMgPSB7fSwgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBzZXRUaW1lb3V0LCB1c2VzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ1c2VcIik7XHJcbiAgICAgICAgLy8gY29uZGl0aW9uYWxseSBzdGFydCB0aGUgaW50ZXJ2YWwgaWYgdGhlIHBvbHlmaWxsIGlzIGFjdGl2ZVxyXG4gICAgICAgIHBvbHlmaWxsICYmIG9uaW50ZXJ2YWwoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzdmc0ZXZlcnlib2R5O1xyXG59KTsiLCJ2YXIgdG9nZ2xlSWNvbnMgPSBmdW5jdGlvbihjb250YWluZXIpIHtcclxuXHJcbiAgICBpZighY29udGFpbmVyKSBjb25zb2xlLndhcm4oJ3RvZ2dsZUljb25zIG1pc3NpbmcgY29udGFpbmVyIGVsZW1lbnQnKTtcclxuXHJcbiAgICAkKGNvbnRhaW5lcikuZmluZCgnLnRvZ2dsZWFibGUtaWNvbicpLmVhY2goZnVuY3Rpb24oaW5keCwgaXRlbSkge1xyXG4gICAgICAgICQoaXRlbSkuaGFzQ2xhc3MoJ2lzLXZpc2libGUnKSA/ICQoaXRlbSkucmVtb3ZlQ2xhc3MoJ2lzLXZpc2libGUnKSA6ICQoaXRlbSkuYWRkQ2xhc3MoJ2lzLXZpc2libGUnKTtcclxuICAgIH0pO1xyXG5cclxufTtcclxuXHJcbmV4cG9ydCB7IHRvZ2dsZUljb25zIH07XHJcbiIsIi8qIVxyXG4gKiBaZXB0byBIVE1MNSBEcmFnIGFuZCBEcm9wIFNvcnRhYmxlXHJcbiAqIEF1dGhvcjogSmFtZXMgRG95bGUoQGphbWVzMmRveWxlKSBodHRwOi8vb2hkb3lsZXJ1bGVzLmNvbVxyXG4gKiBSZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vamFtZXMyZG95bGUvemVwdG8tZHJhZ3N3YXBcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5pbXBvcnQgeyBhbmFseXRpY3NFdmVudCB9IGZyb20gJy4vY29udHJvbGxlcnMvYW5hbHl0aWNzLWNvbnRyb2xsZXInOyBcclxuICBcclxuOyAoZnVuY3Rpb24gKCQpIHtcclxuICAgICQuZm4uZHJhZ3N3YXAgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBkcmFnU3JjRWw7XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UHJlZml4KCkge1xyXG4gICAgICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyksXHJcbiAgICAgICAgICAgIGdldFByZSwgdHJhbnNmb3JtcyA9IHtcclxuICAgICAgICAgICAgICAgICd3ZWJraXRBbmltYXRpb24nOiAnLXdlYmtpdC1hbmltYXRpb24nLFxyXG4gICAgICAgICAgICAgICAgJ09BbmltYXRpb24nOiAnLW8tYW5pbWF0aW9uJyxcclxuICAgICAgICAgICAgICAgICdtc0FuaW1hdGlvbic6ICctbXMtYW5pbWF0aW9uJyxcclxuICAgICAgICAgICAgICAgICdNb3pBbmltYXRpb24nOiAnLW1vei1hbmltYXRpb24nLFxyXG4gICAgICAgICAgICAgICAgJ2FuaW1hdGlvbic6ICdhbmltYXRpb24nXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QmVmb3JlKGVsLCBudWxsKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgdCBpbiB0cmFuc2Zvcm1zKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWwuc3R5bGVbdF0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlW3RdID0gXCJ0cmFuc2xhdGUzZCgxcHgsMXB4LDFweClcIjtcclxuICAgICAgICAgICAgICAgICAgICBnZXRQcmUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZ2V0UHJvcGVydHlWYWx1ZSh0cmFuc2Zvcm1zW3RdKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gdGhlIHN1Y2Nlc3NmdWwgcHJlZml4XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGVmYXVsdE9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQ6ICdsaScsXHJcbiAgICAgICAgICAgIG92ZXJDbGFzczogJ292ZXInLFxyXG4gICAgICAgICAgICBtb3ZlQ2xhc3M6ICdtb3ZpbmcnLFxyXG4gICAgICAgICAgICBkcm9wQ2xhc3M6ICdkcm9wJyxcclxuICAgICAgICAgICAgZHJvcEFuaW1hdGlvbjogZmFsc2UsXHJcbiAgICAgICAgICAgIGV4Y2x1ZGU6ICcuZGlzYWJsZWQnLFxyXG4gICAgICAgICAgICBwcmVmaXg6IGdldFByZWZpeCgpLFxyXG4gICAgICAgICAgICBkcm9wQ29tcGxldGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGV4Y2x1ZGVQYXR0ZXJuKGVsZW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW0uaXMoc2V0dGluZ3MuZXhjbHVkZVBhdHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb25BbmltRW5kKGVsZW0pIHtcclxuICAgICAgICAgICAgdmFyICRlbGVtID0gJChlbGVtKTtcclxuICAgICAgICAgICAgJGVsZW0uYWRkQ2xhc3Moc2V0dGluZ3MuZHJvcENsYXNzKTtcclxuICAgICAgICAgICAgLy8gYWRkIGFuIGV2ZW50IGZvciB3aGVuIHRoZSBhbmltYXRpb24gaGFzIGZpbmlzaGVkXHJcbiAgICAgICAgICAgICRlbGVtLm9uKHNldHRpbmdzLnByZWZpeCArICdFbmQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIGNsYXNzIG5vdyB0aGF0IHRoZSBhbmltYXRpb24gaXMgZG9uZVxyXG4gICAgICAgICAgICAgICAgJGVsZW0ucmVtb3ZlQ2xhc3Moc2V0dGluZ3MuZHJvcENsYXNzKTtcclxuICAgICAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlRHJhZ1N0YXJ0KGUpIHtcclxuICAgICAgICAgICAgaWYgKCFleGNsdWRlUGF0dGVybigkKHRoaXMpKSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKHNldHRpbmdzLm1vdmVDbGFzcyk7XHJcbiAgICAgICAgICAgIC8vIGdldCB0aGUgZHJhZ2dpbmcgZWxlbWVudFxyXG4gICAgICAgICAgICBkcmFnU3JjRWwgPSB0aGlzO1xyXG4gICAgICAgICAgICAvLyBpdCBpcyBtb3ZpbmdcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgaWYgKGUub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXIpIHtcclxuICAgICAgICAgICAgICB2YXIgZHQgPSBlLm9yaWdpbmFsRXZlbnQuZGF0YVRyYW5zZmVyO1xyXG4gICAgICAgICAgICAgIGR0LmVmZmVjdEFsbG93ZWQgPSAnbW92ZSc7ICAgICAgICBcclxuICAgICAgICAgICAgICBkdC5zZXREYXRhKCd0ZXh0JywgdGhpcy5pbm5lckhUTUwpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihlLmRhdGFUcmFuc2Zlcil7XHJcbiAgICAgICAgICAgICAgdmFyIGR0ID0gZS5kYXRhVHJhbnNmZXI7XHJcbiAgICAgICAgICAgICAgZHQuZWZmZWN0QWxsb3dlZCA9ICdtb3ZlJzsgICAgICAgIFxyXG4gICAgICAgICAgICAgIGR0LnNldERhdGEoJ3RleHQnLCB0aGlzLmlubmVySFRNTCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZURyYWdFbnRlcihlKSB7XHJcbiAgICAgICAgICAgIC8vIHRoaXMgLyBlLnRhcmdldCBpcyB0aGUgY3VycmVudCBob3ZlciB0YXJnZXQuXHJcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3Moc2V0dGluZ3Mub3ZlckNsYXNzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZURyYWdMZWF2ZShlKSB7XHJcbiAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3Moc2V0dGluZ3Mub3ZlckNsYXNzKTsgLy8gdGhpcyAvIGUudGFyZ2V0IGlzIHByZXZpb3VzIHRhcmdldCBlbGVtZW50LlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlRHJhZ092ZXIoZSkge1xyXG4gICAgICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBOZWNlc3NhcnkuIEFsbG93cyB1cyB0byBkcm9wLlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgaWYgKGUub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXIpIHtcclxuICAgICAgICAgICAgICAgIGUub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdtb3ZlJzsgLy8gU2VlIHRoZSBzZWN0aW9uIG9uIHRoZSBEYXRhVHJhbnNmZXIgb2JqZWN0LlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYoZS5kYXRhVHJhbnNmZXIpe1xyXG4gICAgICAgICAgICAgICAgZS5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdtb3ZlJzsgLy8gU2VlIHRoZSBzZWN0aW9uIG9uIHRoZSBEYXRhVHJhbnNmZXIgb2JqZWN0LlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZURyb3AoZSkge1xyXG4gICAgICAgICAgICAvLyB0aGlzIC8gZS50YXJnZXQgaXMgY3VycmVudCB0YXJnZXQgZWxlbWVudC5cclxuICAgICAgICAgICAgaWYgKGUuc3RvcFByb3BhZ2F0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOyAvLyBTdG9wcyBzb21lIGJyb3dzZXJzIGZyb20gcmVkaXJlY3RpbmcuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFleGNsdWRlUGF0dGVybigkKHRoaXMpKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3ByZXZlbnQgZHJvcCcpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBkcm9wcGluZyB0aGUgc2FtZSBjb2x1bW4gd2UncmUgZHJhZ2dpLlxyXG4gICAgICAgICAgICBpZiAoZHJhZ1NyY0VsICE9IHRoaXMpIHtcclxuICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgc291cmNlIGNvbHVtbidzIEhUTUwgdG8gdGhlIEhUTUwgb2YgdGhlIGNvbHVtbiBkcm9wcGVkIG9uLlxyXG4gICAgICAgICAgICAgICAgdmFyIG9sZEVsID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWw6IHRoaXMuaW5uZXJIVE1MLFxyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB0aGlzLmlkXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld0VsID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWw6IGRyYWdTcmNFbC5pbm5lckhUTUwsXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGRyYWdTcmNFbC5pZFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vIHN3YXAgYWxsIHRoZSBkYXRhXHJcbiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAvLyBzd2FwIGFsbCB0aGUgZGF0YVxyXG5cdFx0XHRcdHRoaXMuaW5uZXJIVE1MID0gbmV3RWwuaHRtbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaWQgPSBuZXdFbC5pZDtcclxuXHRcdFx0XHQkKGRyYWdTcmNFbCkuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgZHJhZ1NyY0VsLmlubmVySFRNTCA9IG9sZEVsLmh0bWw7XHJcbiAgICAgICAgICAgICAgICBkcmFnU3JjRWwuaWQgPSBvbGRFbC5pZDtcclxuXHRcdFx0XHRpZigkKHRoaXMpLmluZGV4KCkgPiAkKGRyYWdTcmNFbCkuaW5kZXgoKSl7XHJcblx0XHRcdFx0XHQkKGRyYWdTcmNFbCkuaW5zZXJ0QmVmb3JlKHRoYXQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNle1xyXG5cdFx0XHRcdFx0JChkcmFnU3JjRWwpLmluc2VydEFmdGVyKHRoYXQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQkKGRyYWdTcmNFbCkuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLmRyb3BBbmltYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBvbkFuaW1FbmQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgb25BbmltRW5kKGRyYWdTcmNFbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnNpYmxpbmdzKCkucmVtb3ZlQXR0cignZHJhZ2dhYmxlJyk7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnNpYmxpbmdzKCkuZmlsdGVyKHNldHRpbmdzLmV4Y2x1ZGVQYXR0KS5hdHRyKCdkcmFnZ2FibGUnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkcm9wcGVkJyk7XHJcblx0XHRcdFx0JCgnI3ZhbGlkYXRlUHJlZmVyZW5jZScpLnZhbCgxKTtcclxuXHRcdFx0XHQkKCcjdmFsaWRhdGVNeVZpZXdQcmlvcml0eScpLnZhbCh0cnVlKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHR2YXIgY2hhbm5lbFR4dCA9ICQudHJpbSgkKHRoaXMpLmZpbmQoJ3RkOm50aC1jaGlsZCgxKScpLmh0bWwoKS5zcGxpdCgnPGlucHV0JylbMF0pO1xyXG5cdFx0XHRcdHZhciBldmVudERldGFpbHMgPSB7XHJcblx0XHRcdFx0XHRldmVudF9uYW1lOiBcInRvcGljX3Bvc2l0aW9uX2NoYW5nZVwiLFxyXG5cdFx0XHRcdFx0XCJwYWdlX25hbWVcIjogYW5hbHl0aWNzX2RhdGFbXCJwYWdlX25hbWVcIl0sXHJcblx0XHRcdFx0XHRcImdhX2V2ZW50Q2F0ZWdvcnlcIjpcIk15IFZpZXcgU2V0dGluZ3MgTGlua1wiLFxyXG5cdFx0XHRcdFx0XCJnYV9ldmVudEFjdGlvblwiOmNoYW5uZWxUeHRcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdGFuYWx5dGljc0V2ZW50KCAkLmV4dGVuZChhbmFseXRpY3NfZGF0YSwgZXZlbnREZXRhaWxzKSApO1xyXG5cdFx0XHRcdGV2ZW50RGV0YWlscyA9IHt9O1xyXG5cdFx0XHRcdFxyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3MuZHJvcENvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHNldHRpbmdzID0gJC5leHRlbmQoe30sIHRoaXMuZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIGlmIChzZXR0aW5ncy5leGNsdWRlKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2V0dGluZ3MuZXhjbHVkZSAhPSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV4Y2x1ZGVQYXR0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNldHRpbmdzLmV4Y2x1ZGUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBleGNsdWRlUGF0dCArPSAnOm5vdCgnICsgc2V0dGluZ3MuZXhjbHVkZVtpXSArICcpJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNldHRpbmdzLmV4Y2x1ZGVQYXR0ID0gZXhjbHVkZVBhdHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5leGNsdWRlUGF0dCA9ICc6bm90KCcgKyBzZXR0aW5ncy5leGNsdWRlICsgJyknO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbWV0aG9kID0gU3RyaW5nKG9wdGlvbnMpO1xyXG4gICAgICAgIHZhciBpdGVtcyA9IFtdO1xyXG4gICAgICAgIC8vIGNoZWNrIGZvciB0aGUgbWV0aG9kc1xyXG4gICAgICAgIGlmICgvXih0b0FycmF5fHRvSlNPTikkLy50ZXN0KG1ldGhvZCkpIHtcclxuICAgICAgICAgICAgaWYgKG1ldGhvZCA9PSAndG9BcnJheScpIHtcclxuICAgICAgICAgICAgICAgICQodGhpcykuZmluZChzZXR0aW5ncy5lbGVtZW50KS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2godGhpcy5pZCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtcztcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT0gJ3RvSlNPTicpIHtcclxuICAgICAgICAgICAgICAgICQodGhpcykuZmluZChzZXR0aW5ncy5lbGVtZW50KS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zW2luZGV4XSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMuaWRcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoaXRlbXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcclxuICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcclxuICAgICAgICAgICAgLy8gc2VsZWN0IGFsbCBidXQgdGhlIGRpc2FibGVkIHRoaW5nc1xyXG4gICAgICAgICAgICB2YXIgJGVsZW0gPSAkdGhpcy5maW5kKHNldHRpbmdzLmVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBjb25maWcgPSB7IGNoaWxkTGlzdDogdHJ1ZSB9O1xyXG4gICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtdXRhdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7IGk8bXV0YXRpb25zLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgICAgaWYobXV0YXRpb25zW2ldLmFkZGVkTm9kZXMubGVuZ3RoICE9IDApe1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaj0wOyBqPG11dGF0aW9uc1tpXS5hZGRlZE5vZGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICQobXV0YXRpb25zW2ldLmFkZGVkTm9kZXNbal0pLnNpYmxpbmdzKCkucmVtb3ZlQXR0cignZHJhZ2dhYmxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkKG11dGF0aW9uc1tpXS5hZGRlZE5vZGVzW2pdKS5zaWJsaW5ncygpLmZpbHRlcihzZXR0aW5ncy5leGNsdWRlUGF0dCkuYXR0cignZHJhZ2dhYmxlJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCwgY29uZmlnKTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZURyYWdFbmQoZSkge1xyXG4gICAgICAgICAgICAgICAgJHRoaXMucmVtb3ZlQ2xhc3Moc2V0dGluZ3MubW92ZUNsYXNzKTtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMvZS50YXJnZXQgaXMgdGhlIHNvdXJjZSBub2RlLlxyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnaGFuZGxlRHJhZ0VuZCcpO1xyXG4gICAgICAgICAgICAgICAgJGVsZW0gPSAkdGhpcy5maW5kKHNldHRpbmdzLmVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgJGVsZW0uZWFjaChmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAkKGl0ZW0pLnJlbW92ZUNsYXNzKHNldHRpbmdzLm92ZXJDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJChpdGVtKS5yZW1vdmVDbGFzcyhzZXR0aW5ncy5tb3ZlQ2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gc2V0IHRoZSBpdGVtcyB0byBkcmFnZ2FibGVcclxuICAgICAgICAgICAgJGVsZW0uZmlsdGVyKHNldHRpbmdzLmV4Y2x1ZGVQYXR0KS5hdHRyKCdkcmFnZ2FibGUnLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICR0aGlzLm9mZignZHJhZ3N0YXJ0Jyk7XHJcbiAgICAgICAgICAgICR0aGlzLm9mZignZHJhZ2VudGVyJyk7XHJcbiAgICAgICAgICAgICR0aGlzLm9mZignZHJhZ292ZXInKTtcclxuICAgICAgICAgICAgJHRoaXMub2ZmKCdkcmFnbGVhdmUnKTtcclxuICAgICAgICAgICAgJHRoaXMub2ZmKCdkcm9wJyk7XHJcbiAgICAgICAgICAgICR0aGlzLm9mZignZHJhZ2VuZCcpO1xyXG5cclxuICAgICAgICAgICAgJHRoaXMub24oJ2RyYWdzdGFydCcsIHNldHRpbmdzLmVsZW1lbnQsIGhhbmRsZURyYWdTdGFydCk7XHJcbiAgICAgICAgICAgICR0aGlzLm9uKCdkcmFnZW50ZXInLCBzZXR0aW5ncy5lbGVtZW50LCBoYW5kbGVEcmFnRW50ZXIpO1xyXG4gICAgICAgICAgICAkdGhpcy5vbignZHJhZ292ZXInLCBzZXR0aW5ncy5lbGVtZW50LCBoYW5kbGVEcmFnT3Zlcik7XHJcbiAgICAgICAgICAgICR0aGlzLm9uKCdkcmFnbGVhdmUnLCBzZXR0aW5ncy5lbGVtZW50LCBoYW5kbGVEcmFnTGVhdmUpO1xyXG4gICAgICAgICAgICAkdGhpcy5vbignZHJvcCcsIHNldHRpbmdzLmVsZW1lbnQsIGhhbmRsZURyb3ApO1xyXG4gICAgICAgICAgICAkdGhpcy5vbignZHJhZ2VuZCcsIHNldHRpbmdzLmVsZW1lbnQsIGhhbmRsZURyYWdFbmQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufSkoWmVwdG8pOyIsIi8qIFplcHRvIHYxLjEuNiAtIHplcHRvIGV2ZW50IGFqYXggZm9ybSBpZSAtIHplcHRvanMuY29tL2xpY2Vuc2UgKi9cclxudmFyIFplcHRvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gTCh0KXtyZXR1cm4gbnVsbD09dD9TdHJpbmcodCk6altTLmNhbGwodCldfHxcIm9iamVjdFwifWZ1bmN0aW9uIFoodCl7cmV0dXJuXCJmdW5jdGlvblwiPT1MKHQpfWZ1bmN0aW9uIF8odCl7cmV0dXJuIG51bGwhPXQmJnQ9PXQud2luZG93fWZ1bmN0aW9uICQodCl7cmV0dXJuIG51bGwhPXQmJnQubm9kZVR5cGU9PXQuRE9DVU1FTlRfTk9ERX1mdW5jdGlvbiBEKHQpe3JldHVyblwib2JqZWN0XCI9PUwodCl9ZnVuY3Rpb24gTSh0KXtyZXR1cm4gRCh0KSYmIV8odCkmJk9iamVjdC5nZXRQcm90b3R5cGVPZih0KT09T2JqZWN0LnByb3RvdHlwZX1mdW5jdGlvbiBSKHQpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiB0Lmxlbmd0aH1mdW5jdGlvbiBrKHQpe3JldHVybiBzLmNhbGwodCxmdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9dH0pfWZ1bmN0aW9uIHoodCl7cmV0dXJuIHQubGVuZ3RoPjA/bi5mbi5jb25jYXQuYXBwbHkoW10sdCk6dH1mdW5jdGlvbiBGKHQpe3JldHVybiB0LnJlcGxhY2UoLzo6L2csXCIvXCIpLnJlcGxhY2UoLyhbQS1aXSspKFtBLVpdW2Etel0pL2csXCIkMV8kMlwiKS5yZXBsYWNlKC8oW2EtelxcZF0pKFtBLVpdKS9nLFwiJDFfJDJcIikucmVwbGFjZSgvXy9nLFwiLVwiKS50b0xvd2VyQ2FzZSgpfWZ1bmN0aW9uIHEodCl7cmV0dXJuIHQgaW4gZj9mW3RdOmZbdF09bmV3IFJlZ0V4cChcIihefFxcXFxzKVwiK3QrXCIoXFxcXHN8JClcIil9ZnVuY3Rpb24gSCh0LGUpe3JldHVyblwibnVtYmVyXCIhPXR5cGVvZiBlfHxjW0YodCldP2U6ZStcInB4XCJ9ZnVuY3Rpb24gSSh0KXt2YXIgZSxuO3JldHVybiB1W3RdfHwoZT1hLmNyZWF0ZUVsZW1lbnQodCksYS5ib2R5LmFwcGVuZENoaWxkKGUpLG49Z2V0Q29tcHV0ZWRTdHlsZShlLFwiXCIpLmdldFByb3BlcnR5VmFsdWUoXCJkaXNwbGF5XCIpLGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKSxcIm5vbmVcIj09biYmKG49XCJibG9ja1wiKSx1W3RdPW4pLHVbdF19ZnVuY3Rpb24gVih0KXtyZXR1cm5cImNoaWxkcmVuXCJpbiB0P28uY2FsbCh0LmNoaWxkcmVuKTpuLm1hcCh0LmNoaWxkTm9kZXMsZnVuY3Rpb24odCl7cmV0dXJuIDE9PXQubm9kZVR5cGU/dDp2b2lkIDB9KX1mdW5jdGlvbiBCKG4saSxyKXtmb3IoZSBpbiBpKXImJihNKGlbZV0pfHxBKGlbZV0pKT8oTShpW2VdKSYmIU0obltlXSkmJihuW2VdPXt9KSxBKGlbZV0pJiYhQShuW2VdKSYmKG5bZV09W10pLEIobltlXSxpW2VdLHIpKTppW2VdIT09dCYmKG5bZV09aVtlXSl9ZnVuY3Rpb24gVSh0LGUpe3JldHVybiBudWxsPT1lP24odCk6bih0KS5maWx0ZXIoZSl9ZnVuY3Rpb24gSih0LGUsbixpKXtyZXR1cm4gWihlKT9lLmNhbGwodCxuLGkpOmV9ZnVuY3Rpb24gWCh0LGUsbil7bnVsbD09bj90LnJlbW92ZUF0dHJpYnV0ZShlKTp0LnNldEF0dHJpYnV0ZShlLG4pfWZ1bmN0aW9uIFcoZSxuKXt2YXIgaT1lLmNsYXNzTmFtZXx8XCJcIixyPWkmJmkuYmFzZVZhbCE9PXQ7cmV0dXJuIG49PT10P3I/aS5iYXNlVmFsOmk6dm9pZChyP2kuYmFzZVZhbD1uOmUuY2xhc3NOYW1lPW4pfWZ1bmN0aW9uIFkodCl7dHJ5e3JldHVybiB0P1widHJ1ZVwiPT10fHwoXCJmYWxzZVwiPT10PyExOlwibnVsbFwiPT10P251bGw6K3QrXCJcIj09dD8rdDovXltcXFtcXHtdLy50ZXN0KHQpP24ucGFyc2VKU09OKHQpOnQpOnR9Y2F0Y2goZSl7cmV0dXJuIHR9fWZ1bmN0aW9uIEcodCxlKXtlKHQpO2Zvcih2YXIgbj0wLGk9dC5jaGlsZE5vZGVzLmxlbmd0aDtpPm47bisrKUcodC5jaGlsZE5vZGVzW25dLGUpfXZhciB0LGUsbixpLEMsTixyPVtdLG89ci5zbGljZSxzPXIuZmlsdGVyLGE9d2luZG93LmRvY3VtZW50LHU9e30sZj17fSxjPXtcImNvbHVtbi1jb3VudFwiOjEsY29sdW1uczoxLFwiZm9udC13ZWlnaHRcIjoxLFwibGluZS1oZWlnaHRcIjoxLG9wYWNpdHk6MSxcInotaW5kZXhcIjoxLHpvb206MX0sbD0vXlxccyo8KFxcdyt8ISlbXj5dKj4vLGg9L148KFxcdyspXFxzKlxcLz8+KD86PFxcL1xcMT58KSQvLHA9LzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzpdKylbXj5dKilcXC8+L2dpLGQ9L14oPzpib2R5fGh0bWwpJC9pLG09LyhbQS1aXSkvZyxnPVtcInZhbFwiLFwiY3NzXCIsXCJodG1sXCIsXCJ0ZXh0XCIsXCJkYXRhXCIsXCJ3aWR0aFwiLFwiaGVpZ2h0XCIsXCJvZmZzZXRcIl0sdj1bXCJhZnRlclwiLFwicHJlcGVuZFwiLFwiYmVmb3JlXCIsXCJhcHBlbmRcIl0seT1hLmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiKSx4PWEuY3JlYXRlRWxlbWVudChcInRyXCIpLGI9e3RyOmEuY3JlYXRlRWxlbWVudChcInRib2R5XCIpLHRib2R5OnksdGhlYWQ6eSx0Zm9vdDp5LHRkOngsdGg6eCxcIipcIjphLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIil9LHc9L2NvbXBsZXRlfGxvYWRlZHxpbnRlcmFjdGl2ZS8sRT0vXltcXHctXSokLyxqPXt9LFM9ai50b1N0cmluZyxUPXt9LE89YS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFA9e3RhYmluZGV4OlwidGFiSW5kZXhcIixyZWFkb25seTpcInJlYWRPbmx5XCIsXCJmb3JcIjpcImh0bWxGb3JcIixcImNsYXNzXCI6XCJjbGFzc05hbWVcIixtYXhsZW5ndGg6XCJtYXhMZW5ndGhcIixjZWxsc3BhY2luZzpcImNlbGxTcGFjaW5nXCIsY2VsbHBhZGRpbmc6XCJjZWxsUGFkZGluZ1wiLHJvd3NwYW46XCJyb3dTcGFuXCIsY29sc3BhbjpcImNvbFNwYW5cIix1c2VtYXA6XCJ1c2VNYXBcIixmcmFtZWJvcmRlcjpcImZyYW1lQm9yZGVyXCIsY29udGVudGVkaXRhYmxlOlwiY29udGVudEVkaXRhYmxlXCJ9LEE9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBBcnJheX07cmV0dXJuIFQubWF0Y2hlcz1mdW5jdGlvbih0LGUpe2lmKCFlfHwhdHx8MSE9PXQubm9kZVR5cGUpcmV0dXJuITE7dmFyIG49dC53ZWJraXRNYXRjaGVzU2VsZWN0b3J8fHQubW96TWF0Y2hlc1NlbGVjdG9yfHx0Lm9NYXRjaGVzU2VsZWN0b3J8fHQubWF0Y2hlc1NlbGVjdG9yO2lmKG4pcmV0dXJuIG4uY2FsbCh0LGUpO3ZhciBpLHI9dC5wYXJlbnROb2RlLG89IXI7cmV0dXJuIG8mJihyPU8pLmFwcGVuZENoaWxkKHQpLGk9flQucXNhKHIsZSkuaW5kZXhPZih0KSxvJiZPLnJlbW92ZUNoaWxkKHQpLGl9LEM9ZnVuY3Rpb24odCl7cmV0dXJuIHQucmVwbGFjZSgvLSsoLik/L2csZnVuY3Rpb24odCxlKXtyZXR1cm4gZT9lLnRvVXBwZXJDYXNlKCk6XCJcIn0pfSxOPWZ1bmN0aW9uKHQpe3JldHVybiBzLmNhbGwodCxmdW5jdGlvbihlLG4pe3JldHVybiB0LmluZGV4T2YoZSk9PW59KX0sVC5mcmFnbWVudD1mdW5jdGlvbihlLGkscil7dmFyIHMsdSxmO3JldHVybiBoLnRlc3QoZSkmJihzPW4oYS5jcmVhdGVFbGVtZW50KFJlZ0V4cC4kMSkpKSxzfHwoZS5yZXBsYWNlJiYoZT1lLnJlcGxhY2UocCxcIjwkMT48LyQyPlwiKSksaT09PXQmJihpPWwudGVzdChlKSYmUmVnRXhwLiQxKSxpIGluIGJ8fChpPVwiKlwiKSxmPWJbaV0sZi5pbm5lckhUTUw9XCJcIitlLHM9bi5lYWNoKG8uY2FsbChmLmNoaWxkTm9kZXMpLGZ1bmN0aW9uKCl7Zi5yZW1vdmVDaGlsZCh0aGlzKX0pKSxNKHIpJiYodT1uKHMpLG4uZWFjaChyLGZ1bmN0aW9uKHQsZSl7Zy5pbmRleE9mKHQpPi0xP3VbdF0oZSk6dS5hdHRyKHQsZSl9KSksc30sVC5aPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ9dHx8W10sdC5fX3Byb3RvX189bi5mbix0LnNlbGVjdG9yPWV8fFwiXCIsdH0sVC5pc1o9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBULlp9LFQuaW5pdD1mdW5jdGlvbihlLGkpe3ZhciByO2lmKCFlKXJldHVybiBULlooKTtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlpZihlPWUudHJpbSgpLFwiPFwiPT1lWzBdJiZsLnRlc3QoZSkpcj1ULmZyYWdtZW50KGUsUmVnRXhwLiQxLGkpLGU9bnVsbDtlbHNle2lmKGkhPT10KXJldHVybiBuKGkpLmZpbmQoZSk7cj1ULnFzYShhLGUpfWVsc2V7aWYoWihlKSlyZXR1cm4gbihhKS5yZWFkeShlKTtpZihULmlzWihlKSlyZXR1cm4gZTtpZihBKGUpKXI9ayhlKTtlbHNlIGlmKEQoZSkpcj1bZV0sZT1udWxsO2Vsc2UgaWYobC50ZXN0KGUpKXI9VC5mcmFnbWVudChlLnRyaW0oKSxSZWdFeHAuJDEsaSksZT1udWxsO2Vsc2V7aWYoaSE9PXQpcmV0dXJuIG4oaSkuZmluZChlKTtyPVQucXNhKGEsZSl9fXJldHVybiBULloocixlKX0sbj1mdW5jdGlvbih0LGUpe3JldHVybiBULmluaXQodCxlKX0sbi5leHRlbmQ9ZnVuY3Rpb24odCl7dmFyIGUsbj1vLmNhbGwoYXJndW1lbnRzLDEpO3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgdCYmKGU9dCx0PW4uc2hpZnQoKSksbi5mb3JFYWNoKGZ1bmN0aW9uKG4pe0IodCxuLGUpfSksdH0sVC5xc2E9ZnVuY3Rpb24odCxlKXt2YXIgbixpPVwiI1wiPT1lWzBdLHI9IWkmJlwiLlwiPT1lWzBdLHM9aXx8cj9lLnNsaWNlKDEpOmUsYT1FLnRlc3Qocyk7cmV0dXJuICQodCkmJmEmJmk/KG49dC5nZXRFbGVtZW50QnlJZChzKSk/W25dOltdOjEhPT10Lm5vZGVUeXBlJiY5IT09dC5ub2RlVHlwZT9bXTpvLmNhbGwoYSYmIWk/cj90LmdldEVsZW1lbnRzQnlDbGFzc05hbWUocyk6dC5nZXRFbGVtZW50c0J5VGFnTmFtZShlKTp0LnF1ZXJ5U2VsZWN0b3JBbGwoZSkpfSxuLmNvbnRhaW5zPWEuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zP2Z1bmN0aW9uKHQsZSl7cmV0dXJuIHQhPT1lJiZ0LmNvbnRhaW5zKGUpfTpmdW5jdGlvbih0LGUpe2Zvcig7ZSYmKGU9ZS5wYXJlbnROb2RlKTspaWYoZT09PXQpcmV0dXJuITA7cmV0dXJuITF9LG4udHlwZT1MLG4uaXNGdW5jdGlvbj1aLG4uaXNXaW5kb3c9XyxuLmlzQXJyYXk9QSxuLmlzUGxhaW5PYmplY3Q9TSxuLmlzRW1wdHlPYmplY3Q9ZnVuY3Rpb24odCl7dmFyIGU7Zm9yKGUgaW4gdClyZXR1cm4hMTtyZXR1cm4hMH0sbi5pbkFycmF5PWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gci5pbmRleE9mLmNhbGwoZSx0LG4pfSxuLmNhbWVsQ2FzZT1DLG4udHJpbT1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09dD9cIlwiOlN0cmluZy5wcm90b3R5cGUudHJpbS5jYWxsKHQpfSxuLnV1aWQ9MCxuLnN1cHBvcnQ9e30sbi5leHByPXt9LG4ubWFwPWZ1bmN0aW9uKHQsZSl7dmFyIG4scixvLGk9W107aWYoUih0KSlmb3Iocj0wO3I8dC5sZW5ndGg7cisrKW49ZSh0W3JdLHIpLG51bGwhPW4mJmkucHVzaChuKTtlbHNlIGZvcihvIGluIHQpbj1lKHRbb10sbyksbnVsbCE9biYmaS5wdXNoKG4pO3JldHVybiB6KGkpfSxuLmVhY2g9ZnVuY3Rpb24odCxlKXt2YXIgbixpO2lmKFIodCkpe2ZvcihuPTA7bjx0Lmxlbmd0aDtuKyspaWYoZS5jYWxsKHRbbl0sbix0W25dKT09PSExKXJldHVybiB0fWVsc2UgZm9yKGkgaW4gdClpZihlLmNhbGwodFtpXSxpLHRbaV0pPT09ITEpcmV0dXJuIHQ7cmV0dXJuIHR9LG4uZ3JlcD1mdW5jdGlvbih0LGUpe3JldHVybiBzLmNhbGwodCxlKX0sd2luZG93LkpTT04mJihuLnBhcnNlSlNPTj1KU09OLnBhcnNlKSxuLmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yXCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKHQsZSl7altcIltvYmplY3QgXCIrZStcIl1cIl09ZS50b0xvd2VyQ2FzZSgpfSksbi5mbj17Zm9yRWFjaDpyLmZvckVhY2gscmVkdWNlOnIucmVkdWNlLHB1c2g6ci5wdXNoLHNvcnQ6ci5zb3J0LGluZGV4T2Y6ci5pbmRleE9mLGNvbmNhdDpyLmNvbmNhdCxtYXA6ZnVuY3Rpb24odCl7cmV0dXJuIG4obi5tYXAodGhpcyxmdW5jdGlvbihlLG4pe3JldHVybiB0LmNhbGwoZSxuLGUpfSkpfSxzbGljZTpmdW5jdGlvbigpe3JldHVybiBuKG8uYXBwbHkodGhpcyxhcmd1bWVudHMpKX0scmVhZHk6ZnVuY3Rpb24odCl7cmV0dXJuIHcudGVzdChhLnJlYWR5U3RhdGUpJiZhLmJvZHk/dChuKTphLmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsZnVuY3Rpb24oKXt0KG4pfSwhMSksdGhpc30sZ2V0OmZ1bmN0aW9uKGUpe3JldHVybiBlPT09dD9vLmNhbGwodGhpcyk6dGhpc1tlPj0wP2U6ZSt0aGlzLmxlbmd0aF19LHRvQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXQoKX0sc2l6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxlbmd0aH0scmVtb3ZlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe251bGwhPXRoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMpfSl9LGVhY2g6ZnVuY3Rpb24odCl7cmV0dXJuIHIuZXZlcnkuY2FsbCh0aGlzLGZ1bmN0aW9uKGUsbil7cmV0dXJuIHQuY2FsbChlLG4sZSkhPT0hMX0pLHRoaXN9LGZpbHRlcjpmdW5jdGlvbih0KXtyZXR1cm4gWih0KT90aGlzLm5vdCh0aGlzLm5vdCh0KSk6bihzLmNhbGwodGhpcyxmdW5jdGlvbihlKXtyZXR1cm4gVC5tYXRjaGVzKGUsdCl9KSl9LGFkZDpmdW5jdGlvbih0LGUpe3JldHVybiBuKE4odGhpcy5jb25jYXQobih0LGUpKSkpfSxpczpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5sZW5ndGg+MCYmVC5tYXRjaGVzKHRoaXNbMF0sdCl9LG5vdDpmdW5jdGlvbihlKXt2YXIgaT1bXTtpZihaKGUpJiZlLmNhbGwhPT10KXRoaXMuZWFjaChmdW5jdGlvbih0KXtlLmNhbGwodGhpcyx0KXx8aS5wdXNoKHRoaXMpfSk7ZWxzZXt2YXIgcj1cInN0cmluZ1wiPT10eXBlb2YgZT90aGlzLmZpbHRlcihlKTpSKGUpJiZaKGUuaXRlbSk/by5jYWxsKGUpOm4oZSk7dGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3IuaW5kZXhPZih0KTwwJiZpLnB1c2godCl9KX1yZXR1cm4gbihpKX0saGFzOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbigpe3JldHVybiBEKHQpP24uY29udGFpbnModGhpcyx0KTpuKHRoaXMpLmZpbmQodCkuc2l6ZSgpfSl9LGVxOmZ1bmN0aW9uKHQpe3JldHVybi0xPT09dD90aGlzLnNsaWNlKHQpOnRoaXMuc2xpY2UodCwrdCsxKX0sZmlyc3Q6ZnVuY3Rpb24oKXt2YXIgdD10aGlzWzBdO3JldHVybiB0JiYhRCh0KT90Om4odCl9LGxhc3Q6ZnVuY3Rpb24oKXt2YXIgdD10aGlzW3RoaXMubGVuZ3RoLTFdO3JldHVybiB0JiYhRCh0KT90Om4odCl9LGZpbmQ6ZnVuY3Rpb24odCl7dmFyIGUsaT10aGlzO3JldHVybiBlPXQ/XCJvYmplY3RcIj09dHlwZW9mIHQ/bih0KS5maWx0ZXIoZnVuY3Rpb24oKXt2YXIgdD10aGlzO3JldHVybiByLnNvbWUuY2FsbChpLGZ1bmN0aW9uKGUpe3JldHVybiBuLmNvbnRhaW5zKGUsdCl9KX0pOjE9PXRoaXMubGVuZ3RoP24oVC5xc2EodGhpc1swXSx0KSk6dGhpcy5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gVC5xc2EodGhpcyx0KX0pOm4oKX0sY2xvc2VzdDpmdW5jdGlvbih0LGUpe3ZhciBpPXRoaXNbMF0scj0hMTtmb3IoXCJvYmplY3RcIj09dHlwZW9mIHQmJihyPW4odCkpO2kmJiEocj9yLmluZGV4T2YoaSk+PTA6VC5tYXRjaGVzKGksdCkpOylpPWkhPT1lJiYhJChpKSYmaS5wYXJlbnROb2RlO3JldHVybiBuKGkpfSxwYXJlbnRzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxpPXRoaXM7aS5sZW5ndGg+MDspaT1uLm1hcChpLGZ1bmN0aW9uKHQpe3JldHVybih0PXQucGFyZW50Tm9kZSkmJiEkKHQpJiZlLmluZGV4T2YodCk8MD8oZS5wdXNoKHQpLHQpOnZvaWQgMH0pO3JldHVybiBVKGUsdCl9LHBhcmVudDpmdW5jdGlvbih0KXtyZXR1cm4gVShOKHRoaXMucGx1Y2soXCJwYXJlbnROb2RlXCIpKSx0KX0sY2hpbGRyZW46ZnVuY3Rpb24odCl7cmV0dXJuIFUodGhpcy5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gVih0aGlzKX0pLHQpfSxjb250ZW50czpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe3JldHVybiBvLmNhbGwodGhpcy5jaGlsZE5vZGVzKX0pfSxzaWJsaW5nczpmdW5jdGlvbih0KXtyZXR1cm4gVSh0aGlzLm1hcChmdW5jdGlvbih0LGUpe3JldHVybiBzLmNhbGwoVihlLnBhcmVudE5vZGUpLGZ1bmN0aW9uKHQpe3JldHVybiB0IT09ZX0pfSksdCl9LGVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3RoaXMuaW5uZXJIVE1MPVwiXCJ9KX0scGx1Y2s6ZnVuY3Rpb24odCl7cmV0dXJuIG4ubWFwKHRoaXMsZnVuY3Rpb24oZSl7cmV0dXJuIGVbdF19KX0sc2hvdzpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtcIm5vbmVcIj09dGhpcy5zdHlsZS5kaXNwbGF5JiYodGhpcy5zdHlsZS5kaXNwbGF5PVwiXCIpLFwibm9uZVwiPT1nZXRDb21wdXRlZFN0eWxlKHRoaXMsXCJcIikuZ2V0UHJvcGVydHlWYWx1ZShcImRpc3BsYXlcIikmJih0aGlzLnN0eWxlLmRpc3BsYXk9SSh0aGlzLm5vZGVOYW1lKSl9KX0scmVwbGFjZVdpdGg6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuYmVmb3JlKHQpLnJlbW92ZSgpfSx3cmFwOmZ1bmN0aW9uKHQpe3ZhciBlPVoodCk7aWYodGhpc1swXSYmIWUpdmFyIGk9bih0KS5nZXQoMCkscj1pLnBhcmVudE5vZGV8fHRoaXMubGVuZ3RoPjE7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihvKXtuKHRoaXMpLndyYXBBbGwoZT90LmNhbGwodGhpcyxvKTpyP2kuY2xvbmVOb2RlKCEwKTppKX0pfSx3cmFwQWxsOmZ1bmN0aW9uKHQpe2lmKHRoaXNbMF0pe24odGhpc1swXSkuYmVmb3JlKHQ9bih0KSk7Zm9yKHZhciBlOyhlPXQuY2hpbGRyZW4oKSkubGVuZ3RoOyl0PWUuZmlyc3QoKTtuKHQpLmFwcGVuZCh0aGlzKX1yZXR1cm4gdGhpc30sd3JhcElubmVyOmZ1bmN0aW9uKHQpe3ZhciBlPVoodCk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpKXt2YXIgcj1uKHRoaXMpLG89ci5jb250ZW50cygpLHM9ZT90LmNhbGwodGhpcyxpKTp0O28ubGVuZ3RoP28ud3JhcEFsbChzKTpyLmFwcGVuZChzKX0pfSx1bndyYXA6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKGZ1bmN0aW9uKCl7bih0aGlzKS5yZXBsYWNlV2l0aChuKHRoaXMpLmNoaWxkcmVuKCkpfSksdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jbG9uZU5vZGUoITApfSl9LGhpZGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jc3MoXCJkaXNwbGF5XCIsXCJub25lXCIpfSx0b2dnbGU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBpPW4odGhpcyk7KGU9PT10P1wibm9uZVwiPT1pLmNzcyhcImRpc3BsYXlcIik6ZSk/aS5zaG93KCk6aS5oaWRlKCl9KX0scHJldjpmdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLnBsdWNrKFwicHJldmlvdXNFbGVtZW50U2libGluZ1wiKSkuZmlsdGVyKHR8fFwiKlwiKX0sbmV4dDpmdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLnBsdWNrKFwibmV4dEVsZW1lbnRTaWJsaW5nXCIpKS5maWx0ZXIodHx8XCIqXCIpfSxodG1sOmZ1bmN0aW9uKHQpe3JldHVybiAwIGluIGFyZ3VtZW50cz90aGlzLmVhY2goZnVuY3Rpb24oZSl7dmFyIGk9dGhpcy5pbm5lckhUTUw7bih0aGlzKS5lbXB0eSgpLmFwcGVuZChKKHRoaXMsdCxlLGkpKX0pOjAgaW4gdGhpcz90aGlzWzBdLmlubmVySFRNTDpudWxsfSx0ZXh0OmZ1bmN0aW9uKHQpe3JldHVybiAwIGluIGFyZ3VtZW50cz90aGlzLmVhY2goZnVuY3Rpb24oZSl7dmFyIG49Sih0aGlzLHQsZSx0aGlzLnRleHRDb250ZW50KTt0aGlzLnRleHRDb250ZW50PW51bGw9PW4/XCJcIjpcIlwiK259KTowIGluIHRoaXM/dGhpc1swXS50ZXh0Q29udGVudDpudWxsfSxhdHRyOmZ1bmN0aW9uKG4saSl7dmFyIHI7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIG58fDEgaW4gYXJndW1lbnRzP3RoaXMuZWFjaChmdW5jdGlvbih0KXtpZigxPT09dGhpcy5ub2RlVHlwZSlpZihEKG4pKWZvcihlIGluIG4pWCh0aGlzLGUsbltlXSk7ZWxzZSBYKHRoaXMsbixKKHRoaXMsaSx0LHRoaXMuZ2V0QXR0cmlidXRlKG4pKSl9KTp0aGlzLmxlbmd0aCYmMT09PXRoaXNbMF0ubm9kZVR5cGU/IShyPXRoaXNbMF0uZ2V0QXR0cmlidXRlKG4pKSYmbiBpbiB0aGlzWzBdP3RoaXNbMF1bbl06cjp0fSxyZW1vdmVBdHRyOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXsxPT09dGhpcy5ub2RlVHlwZSYmdC5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbih0KXtYKHRoaXMsdCl9LHRoaXMpfSl9LHByb3A6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdD1QW3RdfHx0LDEgaW4gYXJndW1lbnRzP3RoaXMuZWFjaChmdW5jdGlvbihuKXt0aGlzW3RdPUoodGhpcyxlLG4sdGhpc1t0XSl9KTp0aGlzWzBdJiZ0aGlzWzBdW3RdfSxkYXRhOmZ1bmN0aW9uKGUsbil7dmFyIGk9XCJkYXRhLVwiK2UucmVwbGFjZShtLFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkscj0xIGluIGFyZ3VtZW50cz90aGlzLmF0dHIoaSxuKTp0aGlzLmF0dHIoaSk7cmV0dXJuIG51bGwhPT1yP1kocik6dH0sdmFsOmZ1bmN0aW9uKHQpe3JldHVybiAwIGluIGFyZ3VtZW50cz90aGlzLmVhY2goZnVuY3Rpb24oZSl7dGhpcy52YWx1ZT1KKHRoaXMsdCxlLHRoaXMudmFsdWUpfSk6dGhpc1swXSYmKHRoaXNbMF0ubXVsdGlwbGU/bih0aGlzWzBdKS5maW5kKFwib3B0aW9uXCIpLmZpbHRlcihmdW5jdGlvbigpe3JldHVybiB0aGlzLnNlbGVjdGVkfSkucGx1Y2soXCJ2YWx1ZVwiKTp0aGlzWzBdLnZhbHVlKX0sb2Zmc2V0OmZ1bmN0aW9uKHQpe2lmKHQpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihlKXt2YXIgaT1uKHRoaXMpLHI9Sih0aGlzLHQsZSxpLm9mZnNldCgpKSxvPWkub2Zmc2V0UGFyZW50KCkub2Zmc2V0KCkscz17dG9wOnIudG9wLW8udG9wLGxlZnQ6ci5sZWZ0LW8ubGVmdH07XCJzdGF0aWNcIj09aS5jc3MoXCJwb3NpdGlvblwiKSYmKHMucG9zaXRpb249XCJyZWxhdGl2ZVwiKSxpLmNzcyhzKX0pO2lmKCF0aGlzLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgZT10aGlzWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO3JldHVybntsZWZ0OmUubGVmdCt3aW5kb3cucGFnZVhPZmZzZXQsdG9wOmUudG9wK3dpbmRvdy5wYWdlWU9mZnNldCx3aWR0aDpNYXRoLnJvdW5kKGUud2lkdGgpLGhlaWdodDpNYXRoLnJvdW5kKGUuaGVpZ2h0KX19LGNzczpmdW5jdGlvbih0LGkpe2lmKGFyZ3VtZW50cy5sZW5ndGg8Mil7dmFyIHIsbz10aGlzWzBdO2lmKCFvKXJldHVybjtpZihyPWdldENvbXB1dGVkU3R5bGUobyxcIlwiKSxcInN0cmluZ1wiPT10eXBlb2YgdClyZXR1cm4gby5zdHlsZVtDKHQpXXx8ci5nZXRQcm9wZXJ0eVZhbHVlKHQpO2lmKEEodCkpe3ZhciBzPXt9O3JldHVybiBuLmVhY2godCxmdW5jdGlvbih0LGUpe3NbZV09by5zdHlsZVtDKGUpXXx8ci5nZXRQcm9wZXJ0eVZhbHVlKGUpfSksc319dmFyIGE9XCJcIjtpZihcInN0cmluZ1wiPT1MKHQpKWl8fDA9PT1pP2E9Rih0KStcIjpcIitIKHQsaSk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShGKHQpKX0pO2Vsc2UgZm9yKGUgaW4gdCl0W2VdfHwwPT09dFtlXT9hKz1GKGUpK1wiOlwiK0goZSx0W2VdKStcIjtcIjp0aGlzLmVhY2goZnVuY3Rpb24oKXt0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KEYoZSkpfSk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3RoaXMuc3R5bGUuY3NzVGV4dCs9XCI7XCIrYX0pfSxpbmRleDpmdW5jdGlvbih0KXtyZXR1cm4gdD90aGlzLmluZGV4T2Yobih0KVswXSk6dGhpcy5wYXJlbnQoKS5jaGlsZHJlbigpLmluZGV4T2YodGhpc1swXSl9LGhhc0NsYXNzOmZ1bmN0aW9uKHQpe3JldHVybiB0P3Iuc29tZS5jYWxsKHRoaXMsZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGVzdChXKHQpKX0scSh0KSk6ITF9LGFkZENsYXNzOmZ1bmN0aW9uKHQpe3JldHVybiB0P3RoaXMuZWFjaChmdW5jdGlvbihlKXtpZihcImNsYXNzTmFtZVwiaW4gdGhpcyl7aT1bXTt2YXIgcj1XKHRoaXMpLG89Sih0aGlzLHQsZSxyKTtvLnNwbGl0KC9cXHMrL2cpLmZvckVhY2goZnVuY3Rpb24odCl7bih0aGlzKS5oYXNDbGFzcyh0KXx8aS5wdXNoKHQpfSx0aGlzKSxpLmxlbmd0aCYmVyh0aGlzLHIrKHI/XCIgXCI6XCJcIikraS5qb2luKFwiIFwiKSl9fSk6dGhpc30scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihuKXtpZihcImNsYXNzTmFtZVwiaW4gdGhpcyl7aWYoZT09PXQpcmV0dXJuIFcodGhpcyxcIlwiKTtpPVcodGhpcyksSih0aGlzLGUsbixpKS5zcGxpdCgvXFxzKy9nKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2k9aS5yZXBsYWNlKHEodCksXCIgXCIpfSksVyh0aGlzLGkudHJpbSgpKX19KX0sdG9nZ2xlQ2xhc3M6ZnVuY3Rpb24oZSxpKXtyZXR1cm4gZT90aGlzLmVhY2goZnVuY3Rpb24ocil7dmFyIG89bih0aGlzKSxzPUoodGhpcyxlLHIsVyh0aGlzKSk7cy5zcGxpdCgvXFxzKy9nKS5mb3JFYWNoKGZ1bmN0aW9uKGUpeyhpPT09dD8hby5oYXNDbGFzcyhlKTppKT9vLmFkZENsYXNzKGUpOm8ucmVtb3ZlQ2xhc3MoZSl9KX0pOnRoaXN9LHNjcm9sbFRvcDpmdW5jdGlvbihlKXtpZih0aGlzLmxlbmd0aCl7dmFyIG49XCJzY3JvbGxUb3BcImluIHRoaXNbMF07cmV0dXJuIGU9PT10P24/dGhpc1swXS5zY3JvbGxUb3A6dGhpc1swXS5wYWdlWU9mZnNldDp0aGlzLmVhY2gobj9mdW5jdGlvbigpe3RoaXMuc2Nyb2xsVG9wPWV9OmZ1bmN0aW9uKCl7dGhpcy5zY3JvbGxUbyh0aGlzLnNjcm9sbFgsZSl9KX19LHNjcm9sbExlZnQ6ZnVuY3Rpb24oZSl7aWYodGhpcy5sZW5ndGgpe3ZhciBuPVwic2Nyb2xsTGVmdFwiaW4gdGhpc1swXTtyZXR1cm4gZT09PXQ/bj90aGlzWzBdLnNjcm9sbExlZnQ6dGhpc1swXS5wYWdlWE9mZnNldDp0aGlzLmVhY2gobj9mdW5jdGlvbigpe3RoaXMuc2Nyb2xsTGVmdD1lfTpmdW5jdGlvbigpe3RoaXMuc2Nyb2xsVG8oZSx0aGlzLnNjcm9sbFkpfSl9fSxwb3NpdGlvbjpmdW5jdGlvbigpe2lmKHRoaXMubGVuZ3RoKXt2YXIgdD10aGlzWzBdLGU9dGhpcy5vZmZzZXRQYXJlbnQoKSxpPXRoaXMub2Zmc2V0KCkscj1kLnRlc3QoZVswXS5ub2RlTmFtZSk/e3RvcDowLGxlZnQ6MH06ZS5vZmZzZXQoKTtyZXR1cm4gaS50b3AtPXBhcnNlRmxvYXQobih0KS5jc3MoXCJtYXJnaW4tdG9wXCIpKXx8MCxpLmxlZnQtPXBhcnNlRmxvYXQobih0KS5jc3MoXCJtYXJnaW4tbGVmdFwiKSl8fDAsci50b3ArPXBhcnNlRmxvYXQobihlWzBdKS5jc3MoXCJib3JkZXItdG9wLXdpZHRoXCIpKXx8MCxyLmxlZnQrPXBhcnNlRmxvYXQobihlWzBdKS5jc3MoXCJib3JkZXItbGVmdC13aWR0aFwiKSl8fDAse3RvcDppLnRvcC1yLnRvcCxsZWZ0OmkubGVmdC1yLmxlZnR9fX0sb2Zmc2V0UGFyZW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMub2Zmc2V0UGFyZW50fHxhLmJvZHk7dCYmIWQudGVzdCh0Lm5vZGVOYW1lKSYmXCJzdGF0aWNcIj09bih0KS5jc3MoXCJwb3NpdGlvblwiKTspdD10Lm9mZnNldFBhcmVudDtyZXR1cm4gdH0pfX0sbi5mbi5kZXRhY2g9bi5mbi5yZW1vdmUsW1wid2lkdGhcIixcImhlaWdodFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciBpPWUucmVwbGFjZSgvLi8sZnVuY3Rpb24odCl7cmV0dXJuIHRbMF0udG9VcHBlckNhc2UoKX0pO24uZm5bZV09ZnVuY3Rpb24ocil7dmFyIG8scz10aGlzWzBdO3JldHVybiByPT09dD9fKHMpP3NbXCJpbm5lclwiK2ldOiQocyk/cy5kb2N1bWVudEVsZW1lbnRbXCJzY3JvbGxcIitpXToobz10aGlzLm9mZnNldCgpKSYmb1tlXTp0aGlzLmVhY2goZnVuY3Rpb24odCl7cz1uKHRoaXMpLHMuY3NzKGUsSih0aGlzLHIsdCxzW2VdKCkpKX0pfX0pLHYuZm9yRWFjaChmdW5jdGlvbih0LGUpe3ZhciBpPWUlMjtuLmZuW3RdPWZ1bmN0aW9uKCl7dmFyIHQsbyxyPW4ubWFwKGFyZ3VtZW50cyxmdW5jdGlvbihlKXtyZXR1cm4gdD1MKGUpLFwib2JqZWN0XCI9PXR8fFwiYXJyYXlcIj09dHx8bnVsbD09ZT9lOlQuZnJhZ21lbnQoZSl9KSxzPXRoaXMubGVuZ3RoPjE7cmV0dXJuIHIubGVuZ3RoPDE/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24odCx1KXtvPWk/dTp1LnBhcmVudE5vZGUsdT0wPT1lP3UubmV4dFNpYmxpbmc6MT09ZT91LmZpcnN0Q2hpbGQ6Mj09ZT91Om51bGw7dmFyIGY9bi5jb250YWlucyhhLmRvY3VtZW50RWxlbWVudCxvKTtyLmZvckVhY2goZnVuY3Rpb24odCl7aWYocyl0PXQuY2xvbmVOb2RlKCEwKTtlbHNlIGlmKCFvKXJldHVybiBuKHQpLnJlbW92ZSgpO28uaW5zZXJ0QmVmb3JlKHQsdSksZiYmRyh0LGZ1bmN0aW9uKHQpe251bGw9PXQubm9kZU5hbWV8fFwiU0NSSVBUXCIhPT10Lm5vZGVOYW1lLnRvVXBwZXJDYXNlKCl8fHQudHlwZSYmXCJ0ZXh0L2phdmFzY3JpcHRcIiE9PXQudHlwZXx8dC5zcmN8fHdpbmRvdy5ldmFsLmNhbGwod2luZG93LHQuaW5uZXJIVE1MKX0pfSl9KX0sbi5mbltpP3QrXCJUb1wiOlwiaW5zZXJ0XCIrKGU/XCJCZWZvcmVcIjpcIkFmdGVyXCIpXT1mdW5jdGlvbihlKXtyZXR1cm4gbihlKVt0XSh0aGlzKSx0aGlzfX0pLFQuWi5wcm90b3R5cGU9bi5mbixULnVuaXE9TixULmRlc2VyaWFsaXplVmFsdWU9WSxuLnplcHRvPVQsbn0oKTt3aW5kb3cuWmVwdG89WmVwdG8sdm9pZCAwPT09d2luZG93LiQmJih3aW5kb3cuJD1aZXB0byksZnVuY3Rpb24odCl7ZnVuY3Rpb24gbCh0KXtyZXR1cm4gdC5femlkfHwodC5femlkPWUrKyl9ZnVuY3Rpb24gaCh0LGUsbixpKXtpZihlPXAoZSksZS5ucyl2YXIgcj1kKGUubnMpO3JldHVybihzW2wodCldfHxbXSkuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiEoIXR8fGUuZSYmdC5lIT1lLmV8fGUubnMmJiFyLnRlc3QodC5ucyl8fG4mJmwodC5mbikhPT1sKG4pfHxpJiZ0LnNlbCE9aSl9KX1mdW5jdGlvbiBwKHQpe3ZhciBlPShcIlwiK3QpLnNwbGl0KFwiLlwiKTtyZXR1cm57ZTplWzBdLG5zOmUuc2xpY2UoMSkuc29ydCgpLmpvaW4oXCIgXCIpfX1mdW5jdGlvbiBkKHQpe3JldHVybiBuZXcgUmVnRXhwKFwiKD86XnwgKVwiK3QucmVwbGFjZShcIiBcIixcIiAuKiA/XCIpK1wiKD86IHwkKVwiKX1mdW5jdGlvbiBtKHQsZSl7cmV0dXJuIHQuZGVsJiYhdSYmdC5lIGluIGZ8fCEhZX1mdW5jdGlvbiBnKHQpe3JldHVybiBjW3RdfHx1JiZmW3RdfHx0fWZ1bmN0aW9uIHYoZSxpLHIsbyxhLHUsZil7dmFyIGg9bChlKSxkPXNbaF18fChzW2hdPVtdKTtpLnNwbGl0KC9cXHMvKS5mb3JFYWNoKGZ1bmN0aW9uKGkpe2lmKFwicmVhZHlcIj09aSlyZXR1cm4gdChkb2N1bWVudCkucmVhZHkocik7dmFyIHM9cChpKTtzLmZuPXIscy5zZWw9YSxzLmUgaW4gYyYmKHI9ZnVuY3Rpb24oZSl7dmFyIG49ZS5yZWxhdGVkVGFyZ2V0O3JldHVybiFufHxuIT09dGhpcyYmIXQuY29udGFpbnModGhpcyxuKT9zLmZuLmFwcGx5KHRoaXMsYXJndW1lbnRzKTp2b2lkIDB9KSxzLmRlbD11O3ZhciBsPXV8fHI7cy5wcm94eT1mdW5jdGlvbih0KXtpZih0PWoodCksIXQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSl7dC5kYXRhPW87dmFyIGk9bC5hcHBseShlLHQuX2FyZ3M9PW4/W3RdOlt0XS5jb25jYXQodC5fYXJncykpO3JldHVybiBpPT09ITEmJih0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSksaX19LHMuaT1kLmxlbmd0aCxkLnB1c2gocyksXCJhZGRFdmVudExpc3RlbmVyXCJpbiBlJiZlLmFkZEV2ZW50TGlzdGVuZXIoZyhzLmUpLHMucHJveHksbShzLGYpKX0pfWZ1bmN0aW9uIHkodCxlLG4saSxyKXt2YXIgbz1sKHQpOyhlfHxcIlwiKS5zcGxpdCgvXFxzLykuZm9yRWFjaChmdW5jdGlvbihlKXtoKHQsZSxuLGkpLmZvckVhY2goZnVuY3Rpb24oZSl7ZGVsZXRlIHNbb11bZS5pXSxcInJlbW92ZUV2ZW50TGlzdGVuZXJcImluIHQmJnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihnKGUuZSksZS5wcm94eSxtKGUscikpfSl9KX1mdW5jdGlvbiBqKGUsaSl7cmV0dXJuKGl8fCFlLmlzRGVmYXVsdFByZXZlbnRlZCkmJihpfHwoaT1lKSx0LmVhY2goRSxmdW5jdGlvbih0LG4pe3ZhciByPWlbdF07ZVt0XT1mdW5jdGlvbigpe3JldHVybiB0aGlzW25dPXgsciYmci5hcHBseShpLGFyZ3VtZW50cyl9LGVbbl09Yn0pLChpLmRlZmF1bHRQcmV2ZW50ZWQhPT1uP2kuZGVmYXVsdFByZXZlbnRlZDpcInJldHVyblZhbHVlXCJpbiBpP2kucmV0dXJuVmFsdWU9PT0hMTppLmdldFByZXZlbnREZWZhdWx0JiZpLmdldFByZXZlbnREZWZhdWx0KCkpJiYoZS5pc0RlZmF1bHRQcmV2ZW50ZWQ9eCkpLGV9ZnVuY3Rpb24gUyh0KXt2YXIgZSxpPXtvcmlnaW5hbEV2ZW50OnR9O2ZvcihlIGluIHQpdy50ZXN0KGUpfHx0W2VdPT09bnx8KGlbZV09dFtlXSk7cmV0dXJuIGooaSx0KX12YXIgbixlPTEsaT1BcnJheS5wcm90b3R5cGUuc2xpY2Uscj10LmlzRnVuY3Rpb24sbz1mdW5jdGlvbih0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdH0scz17fSxhPXt9LHU9XCJvbmZvY3VzaW5cImluIHdpbmRvdyxmPXtmb2N1czpcImZvY3VzaW5cIixibHVyOlwiZm9jdXNvdXRcIn0sYz17bW91c2VlbnRlcjpcIm1vdXNlb3ZlclwiLG1vdXNlbGVhdmU6XCJtb3VzZW91dFwifTthLmNsaWNrPWEubW91c2Vkb3duPWEubW91c2V1cD1hLm1vdXNlbW92ZT1cIk1vdXNlRXZlbnRzXCIsdC5ldmVudD17YWRkOnYscmVtb3ZlOnl9LHQucHJveHk9ZnVuY3Rpb24oZSxuKXt2YXIgcz0yIGluIGFyZ3VtZW50cyYmaS5jYWxsKGFyZ3VtZW50cywyKTtpZihyKGUpKXt2YXIgYT1mdW5jdGlvbigpe3JldHVybiBlLmFwcGx5KG4scz9zLmNvbmNhdChpLmNhbGwoYXJndW1lbnRzKSk6YXJndW1lbnRzKX07cmV0dXJuIGEuX3ppZD1sKGUpLGF9aWYobyhuKSlyZXR1cm4gcz8ocy51bnNoaWZ0KGVbbl0sZSksdC5wcm94eS5hcHBseShudWxsLHMpKTp0LnByb3h5KGVbbl0sZSk7dGhyb3cgbmV3IFR5cGVFcnJvcihcImV4cGVjdGVkIGZ1bmN0aW9uXCIpfSx0LmZuLmJpbmQ9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0aGlzLm9uKHQsZSxuKX0sdC5mbi51bmJpbmQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5vZmYodCxlKX0sdC5mbi5vbmU9ZnVuY3Rpb24odCxlLG4saSl7cmV0dXJuIHRoaXMub24odCxlLG4saSwxKX07dmFyIHg9ZnVuY3Rpb24oKXtyZXR1cm4hMH0sYj1mdW5jdGlvbigpe3JldHVybiExfSx3PS9eKFtBLVpdfHJldHVyblZhbHVlJHxsYXllcltYWV0kKS8sRT17cHJldmVudERlZmF1bHQ6XCJpc0RlZmF1bHRQcmV2ZW50ZWRcIixzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246XCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZFwiLHN0b3BQcm9wYWdhdGlvbjpcImlzUHJvcGFnYXRpb25TdG9wcGVkXCJ9O3QuZm4uZGVsZWdhdGU9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0aGlzLm9uKGUsdCxuKX0sdC5mbi51bmRlbGVnYXRlPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdGhpcy5vZmYoZSx0LG4pfSx0LmZuLmxpdmU9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdChkb2N1bWVudC5ib2R5KS5kZWxlZ2F0ZSh0aGlzLnNlbGVjdG9yLGUsbiksdGhpc30sdC5mbi5kaWU9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdChkb2N1bWVudC5ib2R5KS51bmRlbGVnYXRlKHRoaXMuc2VsZWN0b3IsZSxuKSx0aGlzfSx0LmZuLm9uPWZ1bmN0aW9uKGUscyxhLHUsZil7dmFyIGMsbCxoPXRoaXM7cmV0dXJuIGUmJiFvKGUpPyh0LmVhY2goZSxmdW5jdGlvbih0LGUpe2gub24odCxzLGEsZSxmKX0pLGgpOihvKHMpfHxyKHUpfHx1PT09ITF8fCh1PWEsYT1zLHM9biksKHIoYSl8fGE9PT0hMSkmJih1PWEsYT1uKSx1PT09ITEmJih1PWIpLGguZWFjaChmdW5jdGlvbihuLHIpe2YmJihjPWZ1bmN0aW9uKHQpe3JldHVybiB5KHIsdC50eXBlLHUpLHUuYXBwbHkodGhpcyxhcmd1bWVudHMpfSkscyYmKGw9ZnVuY3Rpb24oZSl7dmFyIG4sbz10KGUudGFyZ2V0KS5jbG9zZXN0KHMscikuZ2V0KDApO3JldHVybiBvJiZvIT09cj8obj10LmV4dGVuZChTKGUpLHtjdXJyZW50VGFyZ2V0Om8sbGl2ZUZpcmVkOnJ9KSwoY3x8dSkuYXBwbHkobyxbbl0uY29uY2F0KGkuY2FsbChhcmd1bWVudHMsMSkpKSk6dm9pZCAwfSksdihyLGUsdSxhLHMsbHx8Yyl9KSl9LHQuZm4ub2ZmPWZ1bmN0aW9uKGUsaSxzKXt2YXIgYT10aGlzO3JldHVybiBlJiYhbyhlKT8odC5lYWNoKGUsZnVuY3Rpb24odCxlKXthLm9mZih0LGksZSl9KSxhKToobyhpKXx8cihzKXx8cz09PSExfHwocz1pLGk9bikscz09PSExJiYocz1iKSxhLmVhY2goZnVuY3Rpb24oKXt5KHRoaXMsZSxzLGkpfSkpfSx0LmZuLnRyaWdnZXI9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gZT1vKGUpfHx0LmlzUGxhaW5PYmplY3QoZSk/dC5FdmVudChlKTpqKGUpLGUuX2FyZ3M9bix0aGlzLmVhY2goZnVuY3Rpb24oKXtlLnR5cGUgaW4gZiYmXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpc1tlLnR5cGVdP3RoaXNbZS50eXBlXSgpOlwiZGlzcGF0Y2hFdmVudFwiaW4gdGhpcz90aGlzLmRpc3BhdGNoRXZlbnQoZSk6dCh0aGlzKS50cmlnZ2VySGFuZGxlcihlLG4pfSl9LHQuZm4udHJpZ2dlckhhbmRsZXI9ZnVuY3Rpb24oZSxuKXt2YXIgaSxyO3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24ocyxhKXtpPVMobyhlKT90LkV2ZW50KGUpOmUpLGkuX2FyZ3M9bixpLnRhcmdldD1hLHQuZWFjaChoKGEsZS50eXBlfHxlKSxmdW5jdGlvbih0LGUpe3JldHVybiByPWUucHJveHkoaSksaS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpPyExOnZvaWQgMH0pfSkscn0sXCJmb2N1c2luIGZvY3Vzb3V0IGZvY3VzIGJsdXIgbG9hZCByZXNpemUgc2Nyb2xsIHVubG9hZCBjbGljayBkYmxjbGljayBtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBjaGFuZ2Ugc2VsZWN0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3JcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihlKXt0LmZuW2VdPWZ1bmN0aW9uKHQpe3JldHVybiAwIGluIGFyZ3VtZW50cz90aGlzLmJpbmQoZSx0KTp0aGlzLnRyaWdnZXIoZSl9fSksdC5FdmVudD1mdW5jdGlvbih0LGUpe28odCl8fChlPXQsdD1lLnR5cGUpO3ZhciBuPWRvY3VtZW50LmNyZWF0ZUV2ZW50KGFbdF18fFwiRXZlbnRzXCIpLGk9ITA7aWYoZSlmb3IodmFyIHIgaW4gZSlcImJ1YmJsZXNcIj09cj9pPSEhZVtyXTpuW3JdPWVbcl07cmV0dXJuIG4uaW5pdEV2ZW50KHQsaSwhMCksaihuKX19KFplcHRvKSxmdW5jdGlvbih0KXtmdW5jdGlvbiBoKGUsbixpKXt2YXIgcj10LkV2ZW50KG4pO3JldHVybiB0KGUpLnRyaWdnZXIocixpKSwhci5pc0RlZmF1bHRQcmV2ZW50ZWQoKX1mdW5jdGlvbiBwKHQsZSxpLHIpe3JldHVybiB0Lmdsb2JhbD9oKGV8fG4saSxyKTp2b2lkIDB9ZnVuY3Rpb24gZChlKXtlLmdsb2JhbCYmMD09PXQuYWN0aXZlKysmJnAoZSxudWxsLFwiYWpheFN0YXJ0XCIpfWZ1bmN0aW9uIG0oZSl7ZS5nbG9iYWwmJiEtLXQuYWN0aXZlJiZwKGUsbnVsbCxcImFqYXhTdG9wXCIpfWZ1bmN0aW9uIGcodCxlKXt2YXIgbj1lLmNvbnRleHQ7cmV0dXJuIGUuYmVmb3JlU2VuZC5jYWxsKG4sdCxlKT09PSExfHxwKGUsbixcImFqYXhCZWZvcmVTZW5kXCIsW3QsZV0pPT09ITE/ITE6dm9pZCBwKGUsbixcImFqYXhTZW5kXCIsW3QsZV0pfWZ1bmN0aW9uIHYodCxlLG4saSl7dmFyIHI9bi5jb250ZXh0LG89XCJzdWNjZXNzXCI7bi5zdWNjZXNzLmNhbGwocix0LG8sZSksaSYmaS5yZXNvbHZlV2l0aChyLFt0LG8sZV0pLHAobixyLFwiYWpheFN1Y2Nlc3NcIixbZSxuLHRdKSx4KG8sZSxuKX1mdW5jdGlvbiB5KHQsZSxuLGkscil7dmFyIG89aS5jb250ZXh0O2kuZXJyb3IuY2FsbChvLG4sZSx0KSxyJiZyLnJlamVjdFdpdGgobyxbbixlLHRdKSxwKGksbyxcImFqYXhFcnJvclwiLFtuLGksdHx8ZV0pLHgoZSxuLGkpfWZ1bmN0aW9uIHgodCxlLG4pe3ZhciBpPW4uY29udGV4dDtuLmNvbXBsZXRlLmNhbGwoaSxlLHQpLHAobixpLFwiYWpheENvbXBsZXRlXCIsW2Usbl0pLG0obil9ZnVuY3Rpb24gYigpe31mdW5jdGlvbiB3KHQpe3JldHVybiB0JiYodD10LnNwbGl0KFwiO1wiLDIpWzBdKSx0JiYodD09Zj9cImh0bWxcIjp0PT11P1wianNvblwiOnMudGVzdCh0KT9cInNjcmlwdFwiOmEudGVzdCh0KSYmXCJ4bWxcIil8fFwidGV4dFwifWZ1bmN0aW9uIEUodCxlKXtyZXR1cm5cIlwiPT1lP3Q6KHQrXCImXCIrZSkucmVwbGFjZSgvWyY/XXsxLDJ9LyxcIj9cIil9ZnVuY3Rpb24gaihlKXtlLnByb2Nlc3NEYXRhJiZlLmRhdGEmJlwic3RyaW5nXCIhPXQudHlwZShlLmRhdGEpJiYoZS5kYXRhPXQucGFyYW0oZS5kYXRhLGUudHJhZGl0aW9uYWwpKSwhZS5kYXRhfHxlLnR5cGUmJlwiR0VUXCIhPWUudHlwZS50b1VwcGVyQ2FzZSgpfHwoZS51cmw9RShlLnVybCxlLmRhdGEpLGUuZGF0YT12b2lkIDApfWZ1bmN0aW9uIFMoZSxuLGkscil7cmV0dXJuIHQuaXNGdW5jdGlvbihuKSYmKHI9aSxpPW4sbj12b2lkIDApLHQuaXNGdW5jdGlvbihpKXx8KHI9aSxpPXZvaWQgMCkse3VybDplLGRhdGE6bixzdWNjZXNzOmksZGF0YVR5cGU6cn19ZnVuY3Rpb24gQyhlLG4saSxyKXt2YXIgbyxzPXQuaXNBcnJheShuKSxhPXQuaXNQbGFpbk9iamVjdChuKTt0LmVhY2gobixmdW5jdGlvbihuLHUpe289dC50eXBlKHUpLHImJihuPWk/cjpyK1wiW1wiKyhhfHxcIm9iamVjdFwiPT1vfHxcImFycmF5XCI9PW8/bjpcIlwiKStcIl1cIiksIXImJnM/ZS5hZGQodS5uYW1lLHUudmFsdWUpOlwiYXJyYXlcIj09b3x8IWkmJlwib2JqZWN0XCI9PW8/QyhlLHUsaSxuKTplLmFkZChuLHUpfSl9dmFyIGkscixlPTAsbj13aW5kb3cuZG9jdW1lbnQsbz0vPHNjcmlwdFxcYltePF0qKD86KD8hPFxcL3NjcmlwdD4pPFtePF0qKSo8XFwvc2NyaXB0Pi9naSxzPS9eKD86dGV4dHxhcHBsaWNhdGlvbilcXC9qYXZhc2NyaXB0L2ksYT0vXig/OnRleHR8YXBwbGljYXRpb24pXFwveG1sL2ksdT1cImFwcGxpY2F0aW9uL2pzb25cIixmPVwidGV4dC9odG1sXCIsYz0vXlxccyokLyxsPW4uY3JlYXRlRWxlbWVudChcImFcIik7bC5ocmVmPXdpbmRvdy5sb2NhdGlvbi5ocmVmLHQuYWN0aXZlPTAsdC5hamF4SlNPTlA9ZnVuY3Rpb24oaSxyKXtpZighKFwidHlwZVwiaW4gaSkpcmV0dXJuIHQuYWpheChpKTt2YXIgZixoLG89aS5qc29ucENhbGxiYWNrLHM9KHQuaXNGdW5jdGlvbihvKT9vKCk6byl8fFwianNvbnBcIisgKytlLGE9bi5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpLHU9d2luZG93W3NdLGM9ZnVuY3Rpb24oZSl7dChhKS50cmlnZ2VySGFuZGxlcihcImVycm9yXCIsZXx8XCJhYm9ydFwiKX0sbD17YWJvcnQ6Y307cmV0dXJuIHImJnIucHJvbWlzZShsKSx0KGEpLm9uKFwibG9hZCBlcnJvclwiLGZ1bmN0aW9uKGUsbil7Y2xlYXJUaW1lb3V0KGgpLHQoYSkub2ZmKCkucmVtb3ZlKCksXCJlcnJvclwiIT1lLnR5cGUmJmY/dihmWzBdLGwsaSxyKTp5KG51bGwsbnx8XCJlcnJvclwiLGwsaSxyKSx3aW5kb3dbc109dSxmJiZ0LmlzRnVuY3Rpb24odSkmJnUoZlswXSksdT1mPXZvaWQgMH0pLGcobCxpKT09PSExPyhjKFwiYWJvcnRcIiksbCk6KHdpbmRvd1tzXT1mdW5jdGlvbigpe2Y9YXJndW1lbnRzfSxhLnNyYz1pLnVybC5yZXBsYWNlKC9cXD8oLispPVxcPy8sXCI/JDE9XCIrcyksbi5oZWFkLmFwcGVuZENoaWxkKGEpLGkudGltZW91dD4wJiYoaD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YyhcInRpbWVvdXRcIil9LGkudGltZW91dCkpLGwpfSx0LmFqYXhTZXR0aW5ncz17dHlwZTpcIkdFVFwiLGJlZm9yZVNlbmQ6YixzdWNjZXNzOmIsZXJyb3I6Yixjb21wbGV0ZTpiLGNvbnRleHQ6bnVsbCxnbG9iYWw6ITAseGhyOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3R9LGFjY2VwdHM6e3NjcmlwdDpcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgYXBwbGljYXRpb24veC1qYXZhc2NyaXB0XCIsanNvbjp1LHhtbDpcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixodG1sOmYsdGV4dDpcInRleHQvcGxhaW5cIn0sY3Jvc3NEb21haW46ITEsdGltZW91dDowLHByb2Nlc3NEYXRhOiEwLGNhY2hlOiEwfSx0LmFqYXg9ZnVuY3Rpb24oZSl7dmFyIGEsbz10LmV4dGVuZCh7fSxlfHx7fSkscz10LkRlZmVycmVkJiZ0LkRlZmVycmVkKCk7Zm9yKGkgaW4gdC5hamF4U2V0dGluZ3Mpdm9pZCAwPT09b1tpXSYmKG9baV09dC5hamF4U2V0dGluZ3NbaV0pO2Qobyksby5jcm9zc0RvbWFpbnx8KGE9bi5jcmVhdGVFbGVtZW50KFwiYVwiKSxhLmhyZWY9by51cmwsYS5ocmVmPWEuaHJlZixvLmNyb3NzRG9tYWluPWwucHJvdG9jb2wrXCIvL1wiK2wuaG9zdCE9YS5wcm90b2NvbCtcIi8vXCIrYS5ob3N0KSxvLnVybHx8KG8udXJsPXdpbmRvdy5sb2NhdGlvbi50b1N0cmluZygpKSxqKG8pO3ZhciB1PW8uZGF0YVR5cGUsZj0vXFw/Lis9XFw/Ly50ZXN0KG8udXJsKTtpZihmJiYodT1cImpzb25wXCIpLG8uY2FjaGUhPT0hMSYmKGUmJmUuY2FjaGU9PT0hMHx8XCJzY3JpcHRcIiE9dSYmXCJqc29ucFwiIT11KXx8KG8udXJsPUUoby51cmwsXCJfPVwiK0RhdGUubm93KCkpKSxcImpzb25wXCI9PXUpcmV0dXJuIGZ8fChvLnVybD1FKG8udXJsLG8uanNvbnA/by5qc29ucCtcIj0/XCI6by5qc29ucD09PSExP1wiXCI6XCJjYWxsYmFjaz0/XCIpKSx0LmFqYXhKU09OUChvLHMpO3ZhciBDLGg9by5hY2NlcHRzW3VdLHA9e30sbT1mdW5jdGlvbih0LGUpe3BbdC50b0xvd2VyQ2FzZSgpXT1bdCxlXX0seD0vXihbXFx3LV0rOilcXC9cXC8vLnRlc3Qoby51cmwpP1JlZ0V4cC4kMTp3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wsUz1vLnhocigpLFQ9Uy5zZXRSZXF1ZXN0SGVhZGVyO2lmKHMmJnMucHJvbWlzZShTKSxvLmNyb3NzRG9tYWlufHxtKFwiWC1SZXF1ZXN0ZWQtV2l0aFwiLFwiWE1MSHR0cFJlcXVlc3RcIiksbShcIkFjY2VwdFwiLGh8fFwiKi8qXCIpLChoPW8ubWltZVR5cGV8fGgpJiYoaC5pbmRleE9mKFwiLFwiKT4tMSYmKGg9aC5zcGxpdChcIixcIiwyKVswXSksUy5vdmVycmlkZU1pbWVUeXBlJiZTLm92ZXJyaWRlTWltZVR5cGUoaCkpLChvLmNvbnRlbnRUeXBlfHxvLmNvbnRlbnRUeXBlIT09ITEmJm8uZGF0YSYmXCJHRVRcIiE9by50eXBlLnRvVXBwZXJDYXNlKCkpJiZtKFwiQ29udGVudC1UeXBlXCIsby5jb250ZW50VHlwZXx8XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiksby5oZWFkZXJzKWZvcihyIGluIG8uaGVhZGVycyltKHIsby5oZWFkZXJzW3JdKTtpZihTLnNldFJlcXVlc3RIZWFkZXI9bSxTLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2lmKDQ9PVMucmVhZHlTdGF0ZSl7Uy5vbnJlYWR5c3RhdGVjaGFuZ2U9YixjbGVhclRpbWVvdXQoQyk7dmFyIGUsbj0hMTtpZihTLnN0YXR1cz49MjAwJiZTLnN0YXR1czwzMDB8fDMwND09Uy5zdGF0dXN8fDA9PVMuc3RhdHVzJiZcImZpbGU6XCI9PXgpe3U9dXx8dyhvLm1pbWVUeXBlfHxTLmdldFJlc3BvbnNlSGVhZGVyKFwiY29udGVudC10eXBlXCIpKSxlPVMucmVzcG9uc2VUZXh0O3RyeXtcInNjcmlwdFwiPT11PygxLGV2YWwpKGUpOlwieG1sXCI9PXU/ZT1TLnJlc3BvbnNlWE1MOlwianNvblwiPT11JiYoZT1jLnRlc3QoZSk/bnVsbDp0LnBhcnNlSlNPTihlKSl9Y2F0Y2goaSl7bj1pfW4/eShuLFwicGFyc2VyZXJyb3JcIixTLG8scyk6dihlLFMsbyxzKX1lbHNlIHkoUy5zdGF0dXNUZXh0fHxudWxsLFMuc3RhdHVzP1wiZXJyb3JcIjpcImFib3J0XCIsUyxvLHMpfX0sZyhTLG8pPT09ITEpcmV0dXJuIFMuYWJvcnQoKSx5KG51bGwsXCJhYm9ydFwiLFMsbyxzKSxTO2lmKG8ueGhyRmllbGRzKWZvcihyIGluIG8ueGhyRmllbGRzKVNbcl09by54aHJGaWVsZHNbcl07dmFyIE49XCJhc3luY1wiaW4gbz9vLmFzeW5jOiEwO1Mub3BlbihvLnR5cGUsby51cmwsTixvLnVzZXJuYW1lLG8ucGFzc3dvcmQpO2ZvcihyIGluIHApVC5hcHBseShTLHBbcl0pO3JldHVybiBvLnRpbWVvdXQ+MCYmKEM9c2V0VGltZW91dChmdW5jdGlvbigpe1Mub25yZWFkeXN0YXRlY2hhbmdlPWIsUy5hYm9ydCgpLHkobnVsbCxcInRpbWVvdXRcIixTLG8scyl9LG8udGltZW91dCkpLFMuc2VuZChvLmRhdGE/by5kYXRhOm51bGwpLFN9LHQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIHQuYWpheChTLmFwcGx5KG51bGwsYXJndW1lbnRzKSl9LHQucG9zdD1mdW5jdGlvbigpe3ZhciBlPVMuYXBwbHkobnVsbCxhcmd1bWVudHMpO3JldHVybiBlLnR5cGU9XCJQT1NUXCIsdC5hamF4KGUpfSx0LmdldEpTT049ZnVuY3Rpb24oKXt2YXIgZT1TLmFwcGx5KG51bGwsYXJndW1lbnRzKTtyZXR1cm4gZS5kYXRhVHlwZT1cImpzb25cIix0LmFqYXgoZSl9LHQuZm4ubG9hZD1mdW5jdGlvbihlLG4saSl7aWYoIXRoaXMubGVuZ3RoKXJldHVybiB0aGlzO3ZhciBhLHI9dGhpcyxzPWUuc3BsaXQoL1xccy8pLHU9UyhlLG4saSksZj11LnN1Y2Nlc3M7cmV0dXJuIHMubGVuZ3RoPjEmJih1LnVybD1zWzBdLGE9c1sxXSksdS5zdWNjZXNzPWZ1bmN0aW9uKGUpe3IuaHRtbChhP3QoXCI8ZGl2PlwiKS5odG1sKGUucmVwbGFjZShvLFwiXCIpKS5maW5kKGEpOmUpLGYmJmYuYXBwbHkocixhcmd1bWVudHMpfSx0LmFqYXgodSksdGhpc307dmFyIFQ9ZW5jb2RlVVJJQ29tcG9uZW50O3QucGFyYW09ZnVuY3Rpb24oZSxuKXt2YXIgaT1bXTtyZXR1cm4gaS5hZGQ9ZnVuY3Rpb24oZSxuKXt0LmlzRnVuY3Rpb24obikmJihuPW4oKSksbnVsbD09biYmKG49XCJcIiksdGhpcy5wdXNoKFQoZSkrXCI9XCIrVChuKSl9LEMoaSxlLG4pLGkuam9pbihcIiZcIikucmVwbGFjZSgvJTIwL2csXCIrXCIpfX0oWmVwdG8pLGZ1bmN0aW9uKHQpe3QuZm4uc2VyaWFsaXplQXJyYXk9ZnVuY3Rpb24oKXt2YXIgZSxuLGk9W10scj1mdW5jdGlvbih0KXtyZXR1cm4gdC5mb3JFYWNoP3QuZm9yRWFjaChyKTp2b2lkIGkucHVzaCh7bmFtZTplLHZhbHVlOnR9KX07cmV0dXJuIHRoaXNbMF0mJnQuZWFjaCh0aGlzWzBdLmVsZW1lbnRzLGZ1bmN0aW9uKGksbyl7bj1vLnR5cGUsZT1vLm5hbWUsZSYmXCJmaWVsZHNldFwiIT1vLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJiFvLmRpc2FibGVkJiZcInN1Ym1pdFwiIT1uJiZcInJlc2V0XCIhPW4mJlwiYnV0dG9uXCIhPW4mJlwiZmlsZVwiIT1uJiYoXCJyYWRpb1wiIT1uJiZcImNoZWNrYm94XCIhPW58fG8uY2hlY2tlZCkmJnIodChvKS52YWwoKSl9KSxpfSx0LmZuLnNlcmlhbGl6ZT1mdW5jdGlvbigpe3ZhciB0PVtdO3JldHVybiB0aGlzLnNlcmlhbGl6ZUFycmF5KCkuZm9yRWFjaChmdW5jdGlvbihlKXt0LnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGUubmFtZSkrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KGUudmFsdWUpKX0pLHQuam9pbihcIiZcIil9LHQuZm4uc3VibWl0PWZ1bmN0aW9uKGUpe2lmKDAgaW4gYXJndW1lbnRzKXRoaXMuYmluZChcInN1Ym1pdFwiLGUpO2Vsc2UgaWYodGhpcy5sZW5ndGgpe3ZhciBuPXQuRXZlbnQoXCJzdWJtaXRcIik7dGhpcy5lcSgwKS50cmlnZ2VyKG4pLG4uaXNEZWZhdWx0UHJldmVudGVkKCl8fHRoaXMuZ2V0KDApLnN1Ym1pdCgpfXJldHVybiB0aGlzfX0oWmVwdG8pLGZ1bmN0aW9uKHQpe1wiX19wcm90b19fXCJpbnt9fHx0LmV4dGVuZCh0LnplcHRvLHtaOmZ1bmN0aW9uKGUsbil7cmV0dXJuIGU9ZXx8W10sdC5leHRlbmQoZSx0LmZuKSxlLnNlbGVjdG9yPW58fFwiXCIsZS5fX1o9ITAsZX0saXNaOmZ1bmN0aW9uKGUpe3JldHVyblwiYXJyYXlcIj09PXQudHlwZShlKSYmXCJfX1pcImluIGV9fSk7dHJ5e2dldENvbXB1dGVkU3R5bGUodm9pZCAwKX1jYXRjaChlKXt2YXIgbj1nZXRDb21wdXRlZFN0eWxlO3dpbmRvdy5nZXRDb21wdXRlZFN0eWxlPWZ1bmN0aW9uKHQpe3RyeXtyZXR1cm4gbih0KX1jYXRjaChlKXtyZXR1cm4gbnVsbH19fX0oWmVwdG8pO1xyXG5cclxuLy8gICAgIFplcHRvLmpzXHJcbi8vICAgICAoYykgMjAxMC0yMDE2IFRob21hcyBGdWNoc1xyXG4vLyAgICAgWmVwdG8uanMgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXHJcbi8vXHJcbi8vICAgICBodHRwczovL2dpdGh1Yi5jb20vbWFkcm9iYnkvemVwdG8vYmxvYi9tYXN0ZXIvc3JjL3NlbGVjdG9yLmpzXHJcblxyXG4hZnVuY3Rpb24odCl7ZnVuY3Rpb24gbihuKXtyZXR1cm4gbj10KG4pLCEoIW4ud2lkdGgoKSYmIW4uaGVpZ2h0KCkpJiZcIm5vbmVcIiE9PW4uY3NzKFwiZGlzcGxheVwiKX1mdW5jdGlvbiBlKHQsbil7dD10LnJlcGxhY2UoLz0jXFxdL2csJz1cIiNcIl0nKTt2YXIgZSxpLHI9dS5leGVjKHQpO2lmKHImJnJbMl1pbiBzJiYoZT1zW3JbMl1dLGk9clszXSx0PXJbMV0saSkpe3ZhciBvPU51bWJlcihpKTtpPWlzTmFOKG8pP2kucmVwbGFjZSgvXltcIiddfFtcIiddJC9nLFwiXCIpOm99cmV0dXJuIG4odCxlLGkpfXZhciBpPXQuemVwdG8scj1pLnFzYSxvPWkubWF0Y2hlcyxzPXQuZXhwcltcIjpcIl09e3Zpc2libGU6ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzKT90aGlzOnZvaWQgMH0saGlkZGVuOmZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyk/dm9pZCAwOnRoaXN9LHNlbGVjdGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VsZWN0ZWQ/dGhpczp2b2lkIDB9LGNoZWNrZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaGVja2VkP3RoaXM6dm9pZCAwfSxwYXJlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXJlbnROb2RlfSxmaXJzdDpmdW5jdGlvbih0KXtyZXR1cm4gMD09PXQ/dGhpczp2b2lkIDB9LGxhc3Q6ZnVuY3Rpb24odCxuKXtyZXR1cm4gdD09PW4ubGVuZ3RoLTE/dGhpczp2b2lkIDB9LGVxOmZ1bmN0aW9uKHQsbixlKXtyZXR1cm4gdD09PWU/dGhpczp2b2lkIDB9LGNvbnRhaW5zOmZ1bmN0aW9uKG4sZSxpKXtyZXR1cm4gdCh0aGlzKS50ZXh0KCkuaW5kZXhPZihpKT4tMT90aGlzOnZvaWQgMH0saGFzOmZ1bmN0aW9uKHQsbixlKXtyZXR1cm4gaS5xc2EodGhpcyxlKS5sZW5ndGg/dGhpczp2b2lkIDB9fSx1PW5ldyBSZWdFeHAoXCIoLiopOihcXFxcdyspKD86XFxcXCgoW14pXSspXFxcXCkpPyRcXFxccypcIiksYz0vXlxccyo+LyxoPVwiWmVwdG9cIisgK25ldyBEYXRlO2kucXNhPWZ1bmN0aW9uKG4sbyl7cmV0dXJuIGUobyxmdW5jdGlvbihlLHMsdSl7dHJ5e3ZhciBhOyFlJiZzP2U9XCIqXCI6Yy50ZXN0KGUpJiYoYT10KG4pLmFkZENsYXNzKGgpLGU9XCIuXCIraCtcIiBcIitlKTt2YXIgZj1yKG4sZSl9Y2F0Y2goZCl7dGhyb3cgY29uc29sZS5lcnJvcihcImVycm9yIHBlcmZvcm1pbmcgc2VsZWN0b3I6ICVvXCIsbyksZH1maW5hbGx5e2EmJmEucmVtb3ZlQ2xhc3MoaCl9cmV0dXJuIHM/aS51bmlxKHQubWFwKGYsZnVuY3Rpb24odCxuKXtyZXR1cm4gcy5jYWxsKHQsbixmLHUpfSkpOmZ9KX0saS5tYXRjaGVzPWZ1bmN0aW9uKHQsbil7cmV0dXJuIGUobixmdW5jdGlvbihuLGUsaSl7cmV0dXJuKCFufHxvKHQsbikpJiYoIWV8fGUuY2FsbCh0LG51bGwsaSk9PT10KX0pfX0oWmVwdG8pO1xyXG4iXX0=