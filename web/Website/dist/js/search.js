(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// * * *
//  ANALYTICS CONTROLLER
//  For ease-of-use, better DRY, better prevention of JS errors when ads are blocked
// * * *

'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
function analyticsEvent(dataObj) {
    if (typeof utag !== 'undefined') {
        utag.link(dataObj);
    }
};

exports.analyticsEvent = analyticsEvent;

},{}],2:[function(require,module,exports){
/* global angular */

// set up controller and pass data source
// note: a controller is usually destroyed & recreated when the route changes
'use strict';

var InformaTypeaheadController = function InformaTypeaheadController($scope, getCompaniesService) {

    $scope.$watch('pageId', function () {
        getCompaniesService.fetchCompanies($scope.pageId).then(function (response) {

            var companies = [];
            companies = $.map(response.data, function (value, index) {
                return value.companyName;
            });

            $scope.companies = companies;
        })['catch'](function (reason) {
            console.log("error");
            console.log(reason);
        });
    });
};

var informaSearchApp = angular.module('informaSearchApp');
informaSearchApp.controller("InformaTypeaheadController", ['$scope', 'getCompaniesService', InformaTypeaheadController]);

},{}],3:[function(require,module,exports){
/* global angular */

"use strict";

var EmailRssController = function EmailRssController($scope, $location) {
    "use strict";

    $scope.$watch(function () {
        return $location.search();
    }, function (params) {
        var params = $location.search();

        var nUrl = "";
        for (var idxkey in params) {
            if (idxkey == "sortBy") {
                nUrl = nUrl + "&" + "sortBy=date";
            }

            if (idxkey == "sortOrder") {
                nUrl = nUrl + "&" + "sortOrder=desc";
            }

            if (idxkey != "sortBy" && idxkey != "sortOrder") {
                nUrl = nUrl + "&" + idxkey + "=" + params[idxkey];
            }
        }
        // strip leading &
        if (nUrl.startsWith('&')) {
            nUrl = nUrl.substr(1);
        }
        $scope.currentLocation = "?" + nUrl;
    });

    $scope.testvar = 'hello';
};
var informaSearchApp = angular.module('informaSearchApp');
informaSearchApp.controller("EmailRssController", ['$scope', '$location', EmailRssController]);

},{}],4:[function(require,module,exports){
/* global analytics_data */
'use strict';

var _controllersAnalyticsController = require('../../controllers/analytics-controller');

var HeadlineSearchController = function HeadlineSearchController($scope, searchService, searchBootstrapper) {
    "use strict";

    var vm = this;

    vm.searchService = searchService;
    vm.searchBootstrapper = searchBootstrapper;

    vm.update = function () {
        var filter = vm.searchService.getFilter('headlinesOnly');

        if (!filter) {
            vm.searchBootstrapper.createFilter('headlinesOnly', '1');
        } else {
            if (filter._value === '1') {

                filter.setValue('');
            } else {

                filter.setValue('1');
                (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, {
                    event_name: 'search_utility',
                    search_utility: 'search_headlines_only'
                }));
            }
        }
    };

    vm.init = function () {
        var filter = vm.searchService.getFilter('headlinesOnly');
        return filter !== undefined;
    };
};
var informaSearchApp = angular.module('informaSearchApp');
informaSearchApp.controller("HeadlineSearchController", ['$scope', 'searchService', 'searchBootstrapper', HeadlineSearchController]);

},{"../../controllers/analytics-controller":1}],5:[function(require,module,exports){
"use strict";

var HeadlineToggleController = function HeadlineToggleController($scope, viewHeadlinesStateService) {
    "use strict";

    $scope.headlinesOnly = viewHeadlinesStateService;
};
var informaSearchApp = angular.module('informaSearchApp');
informaSearchApp.controller("HeadlineToggleController", ['$scope', 'viewHeadlinesStateService', HeadlineToggleController]);

},{}],6:[function(require,module,exports){
'use strict';

var informaDatesController = function informaDatesController($scope, $location) {
  'use strict';

  /*
    $scope.dateValues and $scope.datepickers are in InformaFacetsController.js
    Using ng-if creates a new scope for the data in this controller, which
    causes the date values to reset on change. By storing in the parent,
    those values survive any scope resets here.
  */

  // grab today and inject into field
  $scope.today = function () {
    $scope.dateValues.dtFrom = new Date();
    $scope.dateValues.dtTo = new Date();
  };

  // run today() function
  // $scope.today();

  // setup clear
  $scope.clear = function () {
    $scope.dateValues.dtFrom = '';
    $scope.dateValues.dtTo = '';
  };

  $scope.fromDateOptions = {
    showWeeks: false,
    formatDayHeader: 'EEE',
    formatDay: 'd',
    startingDay: 0, // Sunday
    dateDisabled: disabledFrom,
    formatYear: 'yy',
    maxDate: new Date(),
    minDate: new Date(1900, 1, 1)
  };

  $scope.toDateOptions = {
    showWeeks: false,
    formatDayHeader: 'EEE',
    formatDay: 'd',
    startingDay: 0, // Sunday
    dateDisabled: disabledTo,
    formatYear: 'yy',
    maxDate: new Date(),
    minDate: new Date(1900, 1, 1)
  };

  // Prevent user from selecting date if date is in the future, OR if the date
  // is later than the selected 'to' date. 'from' can't be later than 'to'
  function disabledFrom(data) {
    var date = data.date;
    var tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);

    // If no end-time exists, use a very large number so all timestamps are valid
    var toTimestamp = $scope.dateValues.dtTo ? $scope.dateValues.dtTo.getTime() : Math.pow(99, 9);
    return date.getTime() > tomorrow.getTime() || date.getTime() > toTimestamp;
  };

  // Prevent user from selecting date if date is in the future, OR if date
  // is before selected 'from' date. 'to' must be later than 'from'
  function disabledTo(data) {
    var date = data.date;
    var tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);

    // If no start-time exists, use a very large number so all timestamps are valid
    var fromTimestamp = $scope.dateValues.dtFrom ? $scope.dateValues.dtFrom.getTime() : 0;
    return date.getTime() > tomorrow.getTime() || date.getTime() < fromTimestamp;
  };

  // open min-cal
  $scope.open = function ($event, which) {
    $event.preventDefault();
    $event.stopPropagation();

    // Datepicker popups will close when clicked outside, but it's possible to
    // open both at the same time. This prevents that.
    switch (which) {
      case 'dtFrom':
        $scope.datepickers.dtFrom = true;
        $scope.datepickers.dtTo = false;
        break;
      case 'dtTo':
        $scope.datepickers.dtFrom = false;
        $scope.datepickers.dtTo = true;
        break;
      default:
        $scope.datepickers.dtFrom = false;
        $scope.datepickers.dtTo = false;
        break;
    }
  };
};

var informaSearchApp = angular.module('informaSearchApp');
informaSearchApp.controller("InformaDatesController", ["$scope", "$location", informaDatesController]);

},{}],7:[function(require,module,exports){
/* global _, datesObject, angular, analytics_data */
"use strict";

var _controllersAnalyticsController = require('../../controllers/analytics-controller');

var InformaFacetController = function InformaFacetController($scope, $rootScope, $location, $http, $anchorScroll, $timeout, searchService, searchBootstrapper, facetAvailabilityService) {
    "use strict";

    // Bind `this` to vm - a representation of the view model
    var vm = this;

    // General Facet stuff
    vm.facetGroups = searchService.getFacetGroups();
    vm.searchService = searchService;
    vm.location = $location;
    vm.anchorScroll = $anchorScroll;
    vm.searchBootstrapper = searchBootstrapper;
    vm.MaxFacetShow = 5;
    vm.showingOnlySubscriptions = false;

    vm.companies = { "companies": "", "isCompanySelected": false };
    $rootScope.$watch('facetAvailability', function () {
        vm.areFacetsDisabled = facetAvailabilityService.facetsAreEnabled();
    });

    // Date Facet stuff
    vm.DateFilters = [{ label: 'Last 24 hours', key: 'day', selected: false }, { label: 'Last 3 days', key: 'threedays', selected: false }, { label: 'Last week', key: 'week', selected: false }, { label: 'Last month', key: 'month', selected: false }, { label: 'Last year', key: 'year', selected: false }, { label: 'Select date range', key: 'custom', selected: false }];

    vm.originalGroup = [];

    var dToday = function dToday() {
        return new Date().clearTime();
    };

    var jsDates = {
        minus1Year: function minus1Year() {
            var jsDateToday = new Date();
            return new Date(jsDateToday.setFullYear(jsDateToday.getFullYear() - 1));
        },
        minus1Month: function minus1Month() {
            var jsDateToday = new Date();
            var m = jsDateToday.getMonth();
            jsDateToday.setMonth(jsDateToday.getMonth() - 1);

            // If still in same month, set date to last day of previous month
            if (jsDateToday.getMonth() == m) {
                jsDateToday.setDate(0);
            }
            return new Date(jsDateToday.setHours(0, 0, 0));
        },
        minusXdays: function minusXdays(days) {
            var jsDateToday = new Date();
            return new Date(jsDateToday.setDate(jsDateToday.getDate() - days));
        }
    };

    var formatDateObject = function formatDateObject(d) {
        return d.getMonth() + 1 + '/' + d.getDate() + '/' + d.getFullYear();
    };

    vm.datesObject = {
        year: formatDateObject(jsDates.minus1Year()),
        day: formatDateObject(jsDates.minusXdays(1)),
        threedays: formatDateObject(jsDates.minusXdays(3)),
        month: formatDateObject(jsDates.minus1Month()),
        week: formatDateObject(jsDates.minusXdays(7))
    };

    vm.timesObject = {
        year: { id: "year", value: "1" },
        day: { id: "hour", value: "24" },
        threedays: { id: "day", value: "3" },
        month: { id: "month", value: "1" },
        week: { id: "week", value: "1" }
    };

    // Create placeholder values for From: and To: date values
    $scope.dateValues = {
        dtFrom: '',
        dtTo: ''
    };

    // need to differentiate the 2 datepickers
    $scope.datepickers = {
        dtFrom: false,
        dtTo: false
    };

    // On first run, check all date filters against date filter set in URL
    for (var i = 0; i < vm.DateFilters.length; i++) {
        if ($location.search().dateFilterLabel == vm.DateFilters[i].key) {

            // Mark date filter as selected to match URL
            vm.DateFilters[i].selected = true;

            // If date filter is a date range filter...
            if (vm.DateFilters[i].key === 'custom') {
                // ...convert the date data in the URL to `Date`s...
                // example: date=3/29/2015;4/5/2016
                var splitDates = $location.search().date.split(';');
                // ...and update the model so the UI shows the right data.
                $scope.dateValues.dtFrom = new Date(splitDates[0]);
                $scope.dateValues.dtTo = new Date(splitDates[1]);
            }
        }
    }

    $scope.$watch(function () {
        return searchService.getPager();
    }, function () {
        vm.facetGroups = searchService.getFacetGroups();
        vm.originalGroup = searchService.getFacetGroups();

        if (searchService.getNewSearch()) {

            vm.facetGroups = vm.originalGroup;
            vm.clearAllFacets();

            searchService._isNewSearch = false;
        }
    }, true);

    //** This collects the user's saved companies **//
    vm.savedCompanies = {};

    vm.saveCompany = function ($item, model, label) {
        vm.savedCompanies[$item] = {
            selected: true,
            label: $item
        };
    };

    $scope.removeCompany = function ($item, model, label) {
        delete $scope.savedCompanies[$item.label];
    };

    var facetsForAnalytics = false;
    //** This updates the router/url with the latest search parameters **//
    vm.update = function (facetGroupId) {

        if (facetGroupId) {

            var facetGroup;
            facetsForAnalytics = false;

            _.each(vm.facetGroups, function (group) {
                if (group.id === facetGroupId) {
                    facetGroup = group;
                }
            });

            _.each(facetGroup.getSelectedFacets(), function (facet) {
                if (facet) {
                    if (!facetsForAnalytics) {
                        facetsForAnalytics = facet.label;
                    } else {
                        facetsForAnalytics += '|' + facet.label;
                    }
                }
            });

            var event_data = {
                event_name: 'search_facets',
                search_facet_category: facetGroup.label
            };

            if (facetsForAnalytics) {
                event_data.search_facet = facetGroup.label + ": " + facetsForAnalytics;
            }

            (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, event_data));
        }

        // Disable all facet options while updating search results
        facetAvailabilityService.disableFacets();

        var params = this.searchService.getRouteBuilder().getRoute().split('&');
        if (this.searchService.getRouteBuilder().getRoute().indexOf("companies") >= 0) {
            for (var idx_param in params) {
                if (params[idx_param].indexOf("companies") >= 0) {
                    var compValue = params[idx_param].split('=')[1];
                    vm.companies["isCompanySelected"] = true;
                    vm.companies["companies"] = compValue;
                }
            }
        } else {
            vm.companies["isCompanySelected"] = false;
            vm.companies["companies"] = "";
        }

        vm.searchService.getFilter('page').setValue('1');
        var routeBuilder = this.searchService.getRouteBuilder();
        vm.location.search(routeBuilder.getRoute());
        vm.searchService.query();
        //Scroll to the top of the results when a new page is chosen
        vm.location.hash("searchTop");
        vm.anchorScroll();
    };

    vm.updateTime = function (filter) {
        vm.searchService.getFilter('page').setValue('1');
        var routeBuilder = this.searchService.getRouteBuilder();

        var hash = {};
        var urlQuery = "&";
        var h = decodeURIComponent(routeBuilder.getRoute()).split("&");
        for (var idx in h) {
            if (h[idx] != "") {
                var currentParameter = h[idx].split("=");

                if (currentParameter[0] == "dateFilterLabel") {
                    hash[currentParameter[0]] = vm.timesObject[filter].id;
                    urlQuery = urlQuery + "&" + currentParameter[0] + "=" + vm.timesObject[filter].id;
                } else {
                    if (currentParameter[0] != "date") {
                        hash[currentParameter[0]] = currentParameter[1];
                        urlQuery = urlQuery + "&" + currentParameter[0] + "=" + currentParameter[1];
                    }
                }
            }
        }
        hash["time"] = vm.timesObject[filter].value;
        urlQuery = urlQuery + "&time=" + vm.timesObject[filter].value;

        if (vm.companies["isCompanySelected"]) {
            hash["companies"] = vm.companies["companies"];
        }

        if ("companies" in hash) {
            vm.isCompanySelected = true;
            hash["companies"] = hash["companies"].replace(/%20/g, " ").replace(/%3B/g, ';');
            vm.companies["companies"] = hash["companies"].replace(/%20/g, " ").replace(/%3B/g, ';');
        }

        vm.location.search(urlQuery);

        vm.searchService.queryTimePeriod(hash);
        //Scroll to the top of the results when a new page is chosen
        vm.location.hash("searchTop");
        vm.anchorScroll();
    };

    vm.facetChange = function (facet) {

        vm.searchService.getFacetGroup(facet.parentId).getFacet(facet.id).selected = facet.selected;
        vm.update(facet.parentId);
    };

    // facetGroupId: 'publication'
    // facetIds: ['In Vivo', 'Rose Sheet']
    vm.facetChangeMultiple = function (facetGroupId, facetIds) {

        var facets;

        _.each(vm.facetGroups, function (group) {
            if (group.id === facetGroupId) {
                facets = group;
            }
        });

        _.each(facets.getSelectedFacets(), function (facet) {
            if (facet) {
                facet.selected = false;
            }
        });

        _.each(facetIds, function (id) {
            var facet = facets.getFacet(id);
            if (facet) {
                facet.selected = true;
            }
        });

        vm.update(facetGroupId);
    };

    // TODO: this comes from a diff search app, and needs jquery to work.
    //       either hook up jq to this controller or move this elsewhere
    vm.scrollTop = function () {
        // var location = jq(".search-facets__header").offset().top;
        //window.scrollTo(0, location - 80);
    };

    vm.hasSelected = function (values) {
        return _.find(values, { selected: true }) ? true : false;
    };

    vm.getFilter = function (filterKey) {
        var filter = vm.searchService.getFilter(filterKey);
        if (!filter) {
            vm.searchBootstrapper.createFilter(filterKey, "");
            filter = vm.searchService.getFilter(filterKey);
        }
        return filter;
    };

    /* This deselects any selected facet checkboxes, clears all facet parameters
        from the search query, and runs the clearDateRange function */
    vm.clearAllFacets = function () {
        var facetClear = this;
        var facetGroups = facetClear.facetGroups;
        _.each(facetGroups, function (group) {
            var facets = vm.searchService.getFacetGroup(group.id).getSelectedFacets();
            _.each(facets, function (facet) {
                facet.selected = false;
            });
        });
        vm.clearDateRange();
        vm.update();
    };

    vm.clearFilter = function (filterKey) {
        var filter = vm.getFilter(filterKey);
        filter.setValue("");
    };

    /* This clears the date parameters from the search, deselcts any date radio
    buttons, and clears both custom date input fields **/
    vm.clearDateRange = function () {
        var filter = vm.getFilter('date');
        filter.setValue("");
        filter.selected = false;
        var filterDateLabel = vm.getFilter('dateFilterLabel');
        filterDateLabel.setValue("");
        var dates = vm.DateFilters;
        _.each(dates, function (date) {
            date.selected = false;
        });
    };

    vm.getDateFilterLabel = function () {
        var filterDateLabel = vm.getFilter('dateFilterLabel');
        return filterDateLabel._value;
    };

    vm.searchForCompany = function (selectedCompany) {

        //This is not correct right now, should be using facet groups instead
        //will fix later
        var facets = vm.searchService.getFacetGroup('companies').getSelectedFacets();

        var filter = vm.getFilter('companies');

        var companyFilter = selectedCompany;
        var sep = ';';

        for (var i = 0; i < facets.length; i++) {
            companyFilter += sep + facets[i].id;
        }

        filter.setValue(companyFilter);

        vm.update();
    };

    vm.validateFormat = function (date, type) {
        if (date == undefined) alert("The '" + type + "' date value isn't properly formatted");
    };

    vm.customDateRangeSearch = function (filterKey, startDate, endDate, sourceControl) {

        var filter = vm.getFilter(filterKey);
        var filterDateLabel = vm.getFilter('dateFilterLabel');
        filterDateLabel.setValue('custom');

        if (startDate > new Date()) {
            alert("From date can not be greater than today"); //  you can't select date bigger than today");
            $scope.dateValues.dtFrom = "";
        }

        if (endDate > new Date()) {
            alert("To date can not be greater than today"); //
            $scope.dateValues.dtTo = "";
        }

        if (startDate > 0 && endDate > 0 && startDate < endDate) {
            var date1Unparsed = new Date(startDate);
            var date1 = date1Unparsed.getMonth() + 1 + '/' + date1Unparsed.getDate() + '/' + date1Unparsed.getFullYear();

            var date2Unparsed = new Date(endDate);
            var date2 = date2Unparsed.getMonth() + 1 + '/' + date2Unparsed.getDate() + '/' + date2Unparsed.getFullYear();

            filter.setValue(date1 + ";" + date2);

            vm.update();
        } else {
            if (startDate != "" && startDate != undefined && endDate != "" && endDate != undefined) {
                if (startDate > endDate) {
                    alert("From date can not be greater than To date"); //  You cant put 'from' date bigger than 'to' date");
                    if (sourceControl == 'from') {
                        $scope.dateValues.dtFrom = "";
                    } else {
                        $scope.dateValues.dtTo = "";
                    }
                }
            }
        }
    };

    $scope.options = {
        showWeeks: false
    };

    //** This builds date parameters for the search query **//
    vm.dateRangeSearch = function (filterKey, dateFilter) {

        if (dateFilter == 'custom') {
            return;
        }

        var filter = vm.getFilter(filterKey);
        var filterDateLabel = vm.getFilter('dateFilterLabel');

        var startDate = vm.datesObject[dateFilter];
        var endDate = formatDateObject(new Date());

        filterDateLabel.setValue(dateFilter);
        filter.setValue(startDate + ";" + endDate);

        vm.updateSelectedDate(dateFilter);
        vm.updateTime(dateFilter);
        //vm.update();
    };

    vm.updateSelectedDate = function (dateFilter) {

        for (var i = 0; i < vm.DateFilters.length; i++) {
            if (dateFilter == vm.DateFilters[i].key) {

                vm.DateFilters[i].selected = true;
            } else {

                vm.DateFilters[i].selected = false;
            }
        }
    };
};

var informaSearchApp = angular.module('informaSearchApp');
informaSearchApp.controller("InformaFacetController", ['$scope', '$rootScope', '$location', '$http', '$anchorScroll', '$timeout', 'searchService', 'searchBootstrapper', 'facetAvailabilityService', InformaFacetController]);

},{"../../controllers/analytics-controller":1}],8:[function(require,module,exports){
/* global angular, analytics_data, utag */

'use strict';

var informaSearchApp = angular.module('informaSearchApp');

var InformaResultsController = function InformaResultsController($scope, $sanitize, searchService, viewHeadlinesStateService, $timeout, $window, facetAvailabilityService) {

    var vm = this;

    vm.service = searchService;
    vm.docs = [];

    $scope.headlinesOnly = viewHeadlinesStateService;
    var count = 0;

    $scope.utagAnalytics = function () {
        if (count > 0) {
            var eventDetails = {
                Number_of_Results: '"' + $(".js-searchTotalResults").text() + '"',
                search_Keyword: '"' + $(".js-searchKeyword").text() + '"'
            };
            var dataObj = $.extend(analytics_data, eventDetails);
            if (typeof utag !== 'undefined') {
                utag.link(dataObj);
            }
        }
        count = count + 1;
    };

    $scope.$watchCollection(function () {
        return searchService.getResults();
    }, function () {
        vm.docs = searchService.getResults();
        $scope.utagAnalytics();
    });

    $scope.filterResult = function (url) {
        window.location = url;
        window.location.reload();
    };

    $scope.fireBookmark = function (article, event, key) {
        $timeout(function () {
            vm.docs[key].isArticleBookmarked = vm.docs[key].isArticleBookmarked ? false : true;
        }, 500);
    };

    $scope.$on('refreshPopOuts', function (ngRepeatFinishedEvent) {

        // Enable all facet options when search results land
        // $('.facets__section input').attr('disabled', null);
        facetAvailabilityService.enableFacets();

        window.indexPopOuts();
        window.indexBookmarks();
        window.autoBookmark();
        window.findTooltips();
    });

    this.forceRefresh = function () {
        $window.location.reload(false);
    };
};

informaSearchApp.directive('onFinishRender', function ($timeout) {
    return {
        restrict: 'A',
        link: function link(scope, element, attr) {
            if (scope.$last === true) {
                $timeout(function () {
                    scope.$emit('refreshPopOuts');
                });
            }
        }
    };
});

informaSearchApp.controller("InformaResultsController", ['$scope', '$sanitize', 'searchService', 'viewHeadlinesStateService', '$timeout', '$window', 'facetAvailabilityService', InformaResultsController]);

},{}],9:[function(require,module,exports){
/* global angular, analytics_data */
'use strict';

var _controllersAnalyticsController = require('../../controllers/analytics-controller');

var PageSizeController = function PageSizeController($scope, $location, $anchorScroll, searchService, searchBootstrapper) {
    "use strict";

    var perPageKey = 'perPage';

    var vm = this;

    vm.location = $location;
    vm.anchorScroll = $anchorScroll;
    vm.searchService = searchService;
    vm.searchBootstrapper = searchBootstrapper;

    vm.update = function (pageSize) {
        var filter = vm.searchService.getFilter(perPageKey);

        if (!filter) {
            vm.searchBootstrapper.createFilter(perPageKey, pageSize);
        } else {
            filter.setValue(pageSize);
        }

        vm.searchService.getFilter('page').setValue('1');
        var routeBuilder = this.searchService.getRouteBuilder();
        vm.location.search(routeBuilder.getRoute());
        vm.searchService.query();

        //Scroll to the top of the results when a new page is chosen
        vm.location.hash("searchTop");
        vm.anchorScroll();

        (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, {
            event_name: 'search_utility',
            search_utility: 'results_per_page_' + pageSize
        }));
    };

    vm.init = function () {
        var filter = vm.searchService.getFilter(perPageKey);

        $scope.pageSize = filter ? filter._value : '10';
    };
};
var informaSearchApp = angular.module('informaSearchApp');
informaSearchApp.controller("PageSizeController", ['$scope', '$location', '$anchorScroll', 'searchService', 'searchBootstrapper', PageSizeController]);

},{"../../controllers/analytics-controller":1}],10:[function(require,module,exports){
/* global angular */

"use strict";

var SavedSearchController = function SavedSearchController($scope, $location, $timeout, $http, searchService, savedSearchService) {
    "use strict";

    var vm = this;

    vm.searchService = searchService;
    $scope.searchIsSaved = false;

    $scope.oneClickSaveFocus = false;

    // A user can land on the search page from a "1-click Subscribe" link in an email
    // This handles detection of that query parameter, triggers appropriate UI changes
    function openSaveSearchIf1Click() {

        var urlQuery = $location.search();
        var clickKey = Object.keys(urlQuery).filter(function (cur) {
            return cur.toLowerCase() === "1click";
        });

        if (clickKey.length > 0 && urlQuery[clickKey[0]] === "1") {
            jQuery(".js-save-search").click();
            $location.search(clickKey[0], null);
            $scope.oneClickSaveFocus = true;
        }
    }

    $timeout(function () {
        openSaveSearchIf1Click();
    }, 1000);

    $scope.$watch(function () {
        return searchService.getPager();
    }, function () {
        $('.js-save-search-url').val(window.location.hash.substring(1));
        $scope.title = searchService.getFilter('q').getValue();
        $scope.currentLocation = $location.url();
        if ($scope.isAuthenticated) {
            savedSearchService.isSaved().then(function (response) {
                $scope.searchIsSaved = response.data;
            });
        }
    }, true);

    // Depending on how quickly Angular bootstraps, some lightbox trigger classes
    // might not be added before the lightbox event listners are bound. This
    // manually fires the Saved Search lightbox, in case the normal listener wasn't
    // bound in time.
    vm.showLightbox = function (e) {
        $('.js-save-search-title').val('');
        if ($scope.searchIsSaved) {
            window.lightboxController.showLightbox($(e.target).closest('.angular-lightbox-modal-trigger'));
        }
    };

    vm.searchIsSaved = function () {
        $scope.searchIsSaved = true;
        $scope.$apply();
    };
};

var informaSearchApp = angular.module('informaSearchApp');
informaSearchApp.controller("SavedSearchController", ['$scope', '$location', '$timeout', '$http', 'searchService', 'savedSearchService', SavedSearchController]);

},{}],11:[function(require,module,exports){
/* global angular, analytics_data */
'use strict';

var _controllersAnalyticsController = require('../../controllers/analytics-controller');

var SortByDateController = function SortByDateController($scope, $location, $timeout, $http, searchService, savedSearchService) {
	"use strict";

	var vm = this;

	vm.resultsSorted = function (sortingAsc) {
		if (sortingAsc) {
			(0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, {
				event_name: 'search_utility',
				search_utility: 'sort_by_date:asc'
			}));
		} else {
			(0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, {
				event_name: 'search_utility',
				search_utility: 'sort_by_date:desc'
			}));
		}
	};
};

var informaSearchApp = angular.module('informaSearchApp');
informaSearchApp.controller("SortByDateController", ['$scope', '$location', '$timeout', '$http', 'searchService', 'savedSearchService', SortByDateController]);

},{"../../controllers/analytics-controller":1}],12:[function(require,module,exports){
'use strict';

var informaSearchApp = angular.module('informaSearchApp');

// factory to handle call to companies service
// note: a factory lives through the entire application lifecycle
informaSearchApp.factory('getCompaniesService', ['$http', '$location', function ($http, $location) {

    var fetchCompanies = function fetchCompanies(pageId) {

        var fullUrl = '/api/typeahead/getcompanies?pId=' + pageId;

        if ($location.url()) {
            fullUrl += '&' + $location.url().replace('?', '');
        }

        return $http({
            method: 'GET',
            url: fullUrl
        });
    };

    return { fetchCompanies: fetchCompanies };
}]);

},{}],13:[function(require,module,exports){
'use strict';

var informaSearchApp = angular.module('informaSearchApp');

// factory to handle call to companies service
// note: a factory lives through the entire application lifecycle
informaSearchApp.factory('savedSearchService', ['$http', '$location', function ($http, $location) {

    var isSaved = function isSaved() {
        var fullUrl = '/api/SavedSearches?url=' + escape($location.url());

        return $http({
            method: 'GET',
            url: fullUrl
        });
    };

    return {
        isSaved: isSaved
    };
}]);

},{}],14:[function(require,module,exports){
/* global angular, analytics_data */
'use strict';

var _controllersAnalyticsController = require('../controllers/analytics-controller');

(function () {
    'use strict';

    var informaSearchApp = angular.module('informaSearchApp', ['velir.search', 'ui.bootstrap', 'ngSanitize', 'ngAnimate']).constant('apiEndpoints', {
        API_BASE: '/api',
        SEARCH_ENDPOINT: '/search'
    }).config(['$logProvider', function ($logProvider) {
        // All debugging should be done via $log instead of directly to console
        // This flag disables $log.debug() output
        //$logProvider.debugEnabled(false);
    }]).config(['$compileProvider', function ($compileProvider) {

        // https://docs.angularjs.org/api/ng/provider/$compileProvider#debugInfoEnabled
        // UNCOMMENT THE LINE BELOW IN PRODUCTION FOR PERFORMANCE GAINS

        // $compileProvider.debugInfoEnabled(false);

    }]);

    informaSearchApp.factory('viewHeadlinesStateService', function () {
        var headlines = false;

        return {
            showOnlyHeadlines: function showOnlyHeadlines() {
                return headlines;
            },
            updateValue: function updateValue() {

                if (!headlines) {
                    (0, _controllersAnalyticsController.analyticsEvent)($.extend(analytics_data, {
                        event_name: 'search_utility',
                        search_utility: 'view_headlines_only'
                    }));
                }

                headlines = !headlines;
            }
        };
    });

    informaSearchApp.factory('facetAvailabilityService', function ($rootScope) {

        var facetsState = false;

        return {
            facetsAreEnabled: function facetsAreEnabled() {
                return facetsState;
            },
            enableFacets: function enableFacets() {
                facetsState = false;
                $rootScope.facetAvailability = facetsState;
            },
            disableFacets: function disableFacets() {
                facetsState = true;
                $rootScope.facetAvailability = facetsState;
            },
            toggleFacets: function toggleFacets() {
                facetsState = !facetsState;
                $rootScope.facetAvailability = facetsState;
            }
        };
    });
})();

},{"../controllers/analytics-controller":1}],15:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _informaSearchAppJs = require('./informaSearchApp.js');

var _informaSearchAppJs2 = _interopRequireDefault(_informaSearchAppJs);

var _factoriesCompaniesFactoryJs = require('./factories/companiesFactory.js');

var _factoriesCompaniesFactoryJs2 = _interopRequireDefault(_factoriesCompaniesFactoryJs);

var _factoriesSavedSearchFactoryJs = require('./factories/savedSearchFactory.js');

var _factoriesSavedSearchFactoryJs2 = _interopRequireDefault(_factoriesSavedSearchFactoryJs);

var _controllersHeadlineToggleControllerJs = require('./controllers/headlineToggleController.js');

var _controllersHeadlineToggleControllerJs2 = _interopRequireDefault(_controllersHeadlineToggleControllerJs);

var _controllersInformaFacetsControllerJs = require('./controllers/informaFacetsController.js');

var _controllersInformaFacetsControllerJs2 = _interopRequireDefault(_controllersInformaFacetsControllerJs);

var _controllersInformaDatesControllerJs = require('./controllers/informaDatesController.js');

var _controllersInformaDatesControllerJs2 = _interopRequireDefault(_controllersInformaDatesControllerJs);

var _controllersInformaResultsControllerJs = require('./controllers/informaResultsController.js');

var _controllersInformaResultsControllerJs2 = _interopRequireDefault(_controllersInformaResultsControllerJs);

var _controllersEmailRssControllerJs = require('./controllers/emailRssController.js');

var _controllersEmailRssControllerJs2 = _interopRequireDefault(_controllersEmailRssControllerJs);

var _controllersTypeaheadControllerJs = require('./controllers/TypeaheadController.js');

var _controllersTypeaheadControllerJs2 = _interopRequireDefault(_controllersTypeaheadControllerJs);

var _controllersHeadlineSearchControllerJs = require('./controllers/headlineSearchController.js');

var _controllersHeadlineSearchControllerJs2 = _interopRequireDefault(_controllersHeadlineSearchControllerJs);

var _controllersPageSizeControllerJs = require('./controllers/pageSizeController.js');

var _controllersPageSizeControllerJs2 = _interopRequireDefault(_controllersPageSizeControllerJs);

var _controllersSavedSearchControllerJs = require('./controllers/savedSearchController.js');

var _controllersSavedSearchControllerJs2 = _interopRequireDefault(_controllersSavedSearchControllerJs);

var _controllersSortByDateControllerJs = require('./controllers/sortByDateController.js');

var _controllersSortByDateControllerJs2 = _interopRequireDefault(_controllersSortByDateControllerJs);

var _uiBootstrapCustomTpls124MinJs = require('./ui-bootstrap-custom-tpls-1.2.4.min.js');

var _uiBootstrapCustomTpls124MinJs2 = _interopRequireDefault(_uiBootstrapCustomTpls124MinJs);

},{"./controllers/TypeaheadController.js":2,"./controllers/emailRssController.js":3,"./controllers/headlineSearchController.js":4,"./controllers/headlineToggleController.js":5,"./controllers/informaDatesController.js":6,"./controllers/informaFacetsController.js":7,"./controllers/informaResultsController.js":8,"./controllers/pageSizeController.js":9,"./controllers/savedSearchController.js":10,"./controllers/sortByDateController.js":11,"./factories/companiesFactory.js":12,"./factories/savedSearchFactory.js":13,"./informaSearchApp.js":14,"./ui-bootstrap-custom-tpls-1.2.4.min.js":16}],16:[function(require,module,exports){
/*
 * angular-ui-bootstrap
 * http://angular-ui.github.io/bootstrap/

 * Version: 1.2.4 - 2016-03-06
 * License: MIT
 */"use strict";

angular.module("ui.bootstrap", ["ui.bootstrap.tpls", "ui.bootstrap.datepicker", "ui.bootstrap.dateparser", "ui.bootstrap.isClass", "ui.bootstrap.position", "ui.bootstrap.typeahead", "ui.bootstrap.debounce"]), angular.module("ui.bootstrap.tpls", ["uib/template/datepicker/datepicker.html", "uib/template/datepicker/day.html", "uib/template/datepicker/month.html", "uib/template/datepicker/popup.html", "uib/template/datepicker/year.html", "uib/template/typeahead/typeahead-match.html", "uib/template/typeahead/typeahead-popup.html"]), angular.module("ui.bootstrap.datepicker", ["ui.bootstrap.dateparser", "ui.bootstrap.isClass", "ui.bootstrap.position"]).value("$datepickerSuppressError", !1).value("uibDatepickerAttributeWarning", !0).constant("uibDatepickerConfig", { datepickerMode: "day", formatDay: "dd", formatMonth: "MMMM", formatYear: "yyyy", formatDayHeader: "EEE", formatDayTitle: "MMMM yyyy", formatMonthTitle: "yyyy", maxDate: null, maxMode: "year", minDate: null, minMode: "day", ngModelOptions: {}, shortcutPropagation: !1, showWeeks: !0, yearColumns: 5, yearRows: 4 }).controller("UibDatepickerController", ["$scope", "$attrs", "$parse", "$interpolate", "$locale", "$log", "dateFilter", "uibDatepickerConfig", "$datepickerSuppressError", "uibDatepickerAttributeWarning", "uibDateParser", function (e, t, a, i, n, r, o, s, l, u, p) {
  function c(t) {
    e.datepickerMode = t, g && (e.datepickerOptions.datepickerMode = t);
  }var d = this,
      h = { $setViewValue: angular.noop },
      f = {},
      m = [],
      g = !!t.datepickerOptions;if ((this.modes = ["day", "month", "year"], g)) ["customClass", "dateDisabled", "datepickerMode", "formatDay", "formatDayHeader", "formatDayTitle", "formatMonth", "formatMonthTitle", "formatYear", "initDate", "maxDate", "maxMode", "minDate", "minMode", "showWeeks", "shortcutPropagation", "startingDay", "yearColumns", "yearRows"].forEach(function (t) {
    switch (t) {case "customClass":case "dateDisabled":
        e[t] = e.datepickerOptions[t] || angular.noop;break;case "datepickerMode":
        e.datepickerMode = angular.isDefined(e.datepickerOptions.datepickerMode) ? e.datepickerOptions.datepickerMode : s.datepickerMode;break;case "formatDay":case "formatDayHeader":case "formatDayTitle":case "formatMonth":case "formatMonthTitle":case "formatYear":
        d[t] = angular.isDefined(e.datepickerOptions[t]) ? i(e.datepickerOptions[t])(e.$parent) : s[t];break;case "showWeeks":case "shortcutPropagation":case "yearColumns":case "yearRows":
        d[t] = angular.isDefined(e.datepickerOptions[t]) ? e.datepickerOptions[t] : s[t];break;case "startingDay":
        d.startingDay = angular.isDefined(e.datepickerOptions.startingDay) ? e.datepickerOptions.startingDay : angular.isNumber(s.startingDay) ? s.startingDay : (n.DATETIME_FORMATS.FIRSTDAYOFWEEK + 8) % 7;break;case "maxDate":case "minDate":
        e.datepickerOptions[t] ? e.$watch(function () {
          return e.datepickerOptions[t];
        }, function (e) {
          d[t] = e ? angular.isDate(e) ? p.fromTimezone(new Date(e), f.timezone) : new Date(o(e, "medium")) : null, d.refreshView();
        }) : d[t] = s[t] ? p.fromTimezone(new Date(s[t]), f.timezone) : null;break;case "maxMode":case "minMode":
        e.datepickerOptions[t] ? e.$watch(function () {
          return e.datepickerOptions[t];
        }, function (a) {
          d[t] = e[t] = angular.isDefined(a) ? a : datepickerOptions[t], ("minMode" === t && d.modes.indexOf(e.datepickerOptions.datepickerMode) < d.modes.indexOf(d[t]) || "maxMode" === t && d.modes.indexOf(e.datepickerOptions.datepickerMode) > d.modes.indexOf(d[t])) && (e.datepickerMode = d[t], e.datepickerOptions.datepickerMode = d[t]);
        }) : d[t] = e[t] = s[t] || null;break;case "initDate":
        e.datepickerOptions.initDate ? (d.activeDate = p.fromTimezone(e.datepickerOptions.initDate, f.timezone) || new Date(), e.$watch(function () {
          return e.datepickerOptions.initDate;
        }, function (e) {
          e && (h.$isEmpty(h.$modelValue) || h.$invalid) && (d.activeDate = p.fromTimezone(e, f.timezone), d.refreshView());
        })) : d.activeDate = new Date();}
  });else {
    if ((angular.forEach(["formatDay", "formatMonth", "formatYear", "formatDayHeader", "formatDayTitle", "formatMonthTitle"], function (a) {
      d[a] = angular.isDefined(t[a]) ? i(t[a])(e.$parent) : s[a], angular.isDefined(t[a]) && u && r.warn("uib-datepicker " + a + " attribute usage is deprecated, use datepicker-options attribute instead");
    }), angular.forEach(["showWeeks", "yearRows", "yearColumns", "shortcutPropagation"], function (a) {
      d[a] = angular.isDefined(t[a]) ? e.$parent.$eval(t[a]) : s[a], angular.isDefined(t[a]) && u && r.warn("uib-datepicker " + a + " attribute usage is deprecated, use datepicker-options attribute instead");
    }), angular.forEach(["dateDisabled", "customClass"], function (e) {
      angular.isDefined(t[e]) && u && r.warn("uib-datepicker " + e + " attribute usage is deprecated, use datepicker-options attribute instead");
    }), angular.isDefined(t.startingDay) ? (u && r.warn("uib-datepicker startingDay attribute usage is deprecated, use datepicker-options attribute instead"), d.startingDay = e.$parent.$eval(t.startingDay)) : d.startingDay = angular.isNumber(s.startingDay) ? s.startingDay : (n.DATETIME_FORMATS.FIRSTDAYOFWEEK + 8) % 7, angular.forEach(["minDate", "maxDate"], function (a) {
      t[a] ? (u && r.warn("uib-datepicker " + a + " attribute usage is deprecated, use datepicker-options attribute instead"), m.push(e.$parent.$watch(t[a], function (e) {
        d[a] = e ? angular.isDate(e) ? p.fromTimezone(new Date(e), f.timezone) : new Date(o(e, "medium")) : null, d.refreshView();
      }))) : d[a] = s[a] ? p.fromTimezone(new Date(s[a]), f.timezone) : null;
    }), angular.forEach(["minMode", "maxMode"], function (a) {
      t[a] ? (u && r.warn("uib-datepicker " + a + " attribute usage is deprecated, use datepicker-options attribute instead"), m.push(e.$parent.$watch(t[a], function (i) {
        d[a] = e[a] = angular.isDefined(i) ? i : t[a], ("minMode" === a && d.modes.indexOf(e.datepickerMode) < d.modes.indexOf(d[a]) || "maxMode" === a && d.modes.indexOf(e.datepickerMode) > d.modes.indexOf(d[a])) && (e.datepickerMode = d[a]);
      }))) : d[a] = e[a] = s[a] || null;
    }), angular.isDefined(t.initDate))) {
      u && r.warn("uib-datepicker initDate attribute usage is deprecated, use datepicker-options attribute instead");var b = p.fromTimezone(e.$parent.$eval(t.initDate), f.timezone);this.activeDate = isNaN(b) ? new Date() : b, m.push(e.$parent.$watch(t.initDate, function (e) {
        e && (h.$isEmpty(h.$modelValue) || h.$invalid) && (e = p.fromTimezone(e, f.timezone), d.activeDate = isNaN(e) ? new Date() : e, d.refreshView());
      }));
    } else this.activeDate = new Date();t.datepickerMode && u && r.warn("uib-datepicker datepickerMode attribute usage is deprecated, use datepicker-options attribute instead"), e.datepickerMode = e.datepickerMode || s.datepickerMode;
  }e.uniqueId = "datepicker-" + e.$id + "-" + Math.floor(1e4 * Math.random()), e.disabled = angular.isDefined(t.disabled) || !1, angular.isDefined(t.ngDisabled) && m.push(e.$parent.$watch(t.ngDisabled, function (t) {
    e.disabled = t, d.refreshView();
  })), e.isActive = function (t) {
    return 0 === d.compare(t.date, d.activeDate) ? (e.activeDateId = t.uid, !0) : !1;
  }, this.init = function (e) {
    h = e, f = e.$options || s.ngModelOptions, this.activeDate = h.$modelValue || new Date(), h.$render = function () {
      d.render();
    };
  }, this.render = function () {
    if (h.$viewValue) {
      var e = new Date(h.$viewValue),
          t = !isNaN(e);t ? this.activeDate = p.fromTimezone(e, f.timezone) : l || r.error('Datepicker directive: "ng-model" value must be a Date object');
    }this.refreshView();
  }, this.refreshView = function () {
    if (this.element) {
      e.selectedDt = null, this._refreshView(), e.activeDt && (e.activeDateId = e.activeDt.uid);var t = h.$viewValue ? new Date(h.$viewValue) : null;t = p.fromTimezone(t, f.timezone), h.$setValidity("dateDisabled", !t || this.element && !this.isDisabled(t));
    }
  }, this.createDateObject = function (t, a) {
    var i = h.$viewValue ? new Date(h.$viewValue) : null;i = p.fromTimezone(i, f.timezone);var n = new Date();n = p.fromTimezone(n, f.timezone);var r = this.compare(t, n),
        o = { date: t, label: p.filter(t, a), selected: i && 0 === this.compare(t, i), disabled: this.isDisabled(t), past: 0 > r, current: 0 === r, future: r > 0, customClass: this.customClass(t) || null };return i && 0 === this.compare(t, i) && (e.selectedDt = o), d.activeDate && 0 === this.compare(o.date, d.activeDate) && (e.activeDt = o), o;
  }, this.isDisabled = function (t) {
    return e.disabled || this.minDate && this.compare(t, this.minDate) < 0 || this.maxDate && this.compare(t, this.maxDate) > 0 || e.dateDisabled && e.dateDisabled({ date: t, mode: e.datepickerMode });
  }, this.customClass = function (t) {
    return e.customClass({ date: t, mode: e.datepickerMode });
  }, this.split = function (e, t) {
    for (var a = []; e.length > 0;) a.push(e.splice(0, t));return a;
  }, e.select = function (t) {
    if (e.datepickerMode === d.minMode) {
      var a = h.$viewValue ? p.fromTimezone(new Date(h.$viewValue), f.timezone) : new Date(0, 0, 0, 0, 0, 0, 0);a.setFullYear(t.getFullYear(), t.getMonth(), t.getDate()), a = p.toTimezone(a, f.timezone), h.$setViewValue(a), h.$render();
    } else d.activeDate = t, c(d.modes[d.modes.indexOf(e.datepickerMode) - 1]), e.$emit("uib:datepicker.mode");
  }, e.move = function (e) {
    var t = d.activeDate.getFullYear() + e * (d.step.years || 0),
        a = d.activeDate.getMonth() + e * (d.step.months || 0);d.activeDate.setFullYear(t, a, 1), d.refreshView();
  }, e.toggleMode = function (t) {
    t = t || 1, e.datepickerMode === d.maxMode && 1 === t || e.datepickerMode === d.minMode && -1 === t || (c(d.modes[d.modes.indexOf(e.datepickerMode) + t]), e.$emit("uib:datepicker.mode"));
  }, e.keys = { 13: "enter", 32: "space", 33: "pageup", 34: "pagedown", 35: "end", 36: "home", 37: "left", 38: "up", 39: "right", 40: "down" };var y = function y() {
    d.element[0].focus();
  };e.$on("uib:datepicker.focus", y), e.keydown = function (t) {
    var a = e.keys[t.which];if (a && !t.shiftKey && !t.altKey && !e.disabled) if ((t.preventDefault(), d.shortcutPropagation || t.stopPropagation(), "enter" === a || "space" === a)) {
      if (d.isDisabled(d.activeDate)) return;e.select(d.activeDate);
    } else !t.ctrlKey || "up" !== a && "down" !== a ? (d.handleKeyDown(a, t), d.refreshView()) : e.toggleMode("up" === a ? 1 : -1);
  }, e.$on("$destroy", function () {
    for (; m.length;) m.shift()();
  });
}]).controller("UibDaypickerController", ["$scope", "$element", "dateFilter", function (e, t, a) {
  function i(e, t) {
    return 1 !== t || e % 4 !== 0 || e % 100 === 0 && e % 400 !== 0 ? r[t] : 29;
  }function n(e) {
    var t = new Date(e);t.setDate(t.getDate() + 4 - (t.getDay() || 7));var a = t.getTime();return t.setMonth(0), t.setDate(1), Math.floor(Math.round((a - t) / 864e5) / 7) + 1;
  }var r = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];this.step = { months: 1 }, this.element = t, this.init = function (t) {
    angular.extend(t, this), e.showWeeks = t.showWeeks, t.refreshView();
  }, this.getDates = function (e, t) {
    for (var a, i = new Array(t), n = new Date(e), r = 0; t > r;) a = new Date(n), i[r++] = a, n.setDate(n.getDate() + 1);return i;
  }, this._refreshView = function () {
    var t = this.activeDate.getFullYear(),
        i = this.activeDate.getMonth(),
        r = new Date(this.activeDate);r.setFullYear(t, i, 1);var o = this.startingDay - r.getDay(),
        s = o > 0 ? 7 - o : -o,
        l = new Date(r);s > 0 && l.setDate(-s + 1);for (var u = this.getDates(l, 42), p = 0; 42 > p; p++) u[p] = angular.extend(this.createDateObject(u[p], this.formatDay), { secondary: u[p].getMonth() !== i, uid: e.uniqueId + "-" + p });e.labels = new Array(7);for (var c = 0; 7 > c; c++) e.labels[c] = { abbr: a(u[c].date, this.formatDayHeader), full: a(u[c].date, "EEEE") };if ((e.title = a(this.activeDate, this.formatDayTitle), e.rows = this.split(u, 7), e.showWeeks)) {
      e.weekNumbers = [];for (var d = (11 - this.startingDay) % 7, h = e.rows.length, f = 0; h > f; f++) e.weekNumbers.push(n(e.rows[f][d].date));
    }
  }, this.compare = function (e, t) {
    var a = new Date(e.getFullYear(), e.getMonth(), e.getDate()),
        i = new Date(t.getFullYear(), t.getMonth(), t.getDate());return a.setFullYear(e.getFullYear()), i.setFullYear(t.getFullYear()), a - i;
  }, this.handleKeyDown = function (e) {
    var t = this.activeDate.getDate();if ("left" === e) t -= 1;else if ("up" === e) t -= 7;else if ("right" === e) t += 1;else if ("down" === e) t += 7;else if ("pageup" === e || "pagedown" === e) {
      var a = this.activeDate.getMonth() + ("pageup" === e ? -1 : 1);this.activeDate.setMonth(a, 1), t = Math.min(i(this.activeDate.getFullYear(), this.activeDate.getMonth()), t);
    } else "home" === e ? t = 1 : "end" === e && (t = i(this.activeDate.getFullYear(), this.activeDate.getMonth()));this.activeDate.setDate(t);
  };
}]).controller("UibMonthpickerController", ["$scope", "$element", "dateFilter", function (e, t, a) {
  this.step = { years: 1 }, this.element = t, this.init = function (e) {
    angular.extend(e, this), e.refreshView();
  }, this._refreshView = function () {
    for (var t, i = new Array(12), n = this.activeDate.getFullYear(), r = 0; 12 > r; r++) t = new Date(this.activeDate), t.setFullYear(n, r, 1), i[r] = angular.extend(this.createDateObject(t, this.formatMonth), { uid: e.uniqueId + "-" + r });e.title = a(this.activeDate, this.formatMonthTitle), e.rows = this.split(i, 3);
  }, this.compare = function (e, t) {
    var a = new Date(e.getFullYear(), e.getMonth()),
        i = new Date(t.getFullYear(), t.getMonth());return a.setFullYear(e.getFullYear()), i.setFullYear(t.getFullYear()), a - i;
  }, this.handleKeyDown = function (e) {
    var t = this.activeDate.getMonth();if ("left" === e) t -= 1;else if ("up" === e) t -= 3;else if ("right" === e) t += 1;else if ("down" === e) t += 3;else if ("pageup" === e || "pagedown" === e) {
      var a = this.activeDate.getFullYear() + ("pageup" === e ? -1 : 1);this.activeDate.setFullYear(a);
    } else "home" === e ? t = 0 : "end" === e && (t = 11);this.activeDate.setMonth(t);
  };
}]).controller("UibYearpickerController", ["$scope", "$element", "dateFilter", function (e, t) {
  function a(e) {
    return parseInt((e - 1) / n, 10) * n + 1;
  }var i, n;this.element = t, this.yearpickerInit = function () {
    i = this.yearColumns, n = this.yearRows * i, this.step = { years: n };
  }, this._refreshView = function () {
    for (var t, r = new Array(n), o = 0, s = a(this.activeDate.getFullYear()); n > o; o++) t = new Date(this.activeDate), t.setFullYear(s + o, 0, 1), r[o] = angular.extend(this.createDateObject(t, this.formatYear), { uid: e.uniqueId + "-" + o });e.title = [r[0].label, r[n - 1].label].join(" - "), e.rows = this.split(r, i), e.columns = i;
  }, this.compare = function (e, t) {
    return e.getFullYear() - t.getFullYear();
  }, this.handleKeyDown = function (e) {
    var t = this.activeDate.getFullYear();"left" === e ? t -= 1 : "up" === e ? t -= i : "right" === e ? t += 1 : "down" === e ? t += i : "pageup" === e || "pagedown" === e ? t += ("pageup" === e ? -1 : 1) * n : "home" === e ? t = a(this.activeDate.getFullYear()) : "end" === e && (t = a(this.activeDate.getFullYear()) + n - 1), this.activeDate.setFullYear(t);
  };
}]).directive("uibDatepicker", function () {
  return { replace: !0, templateUrl: function templateUrl(e, t) {
      return t.templateUrl || "uib/template/datepicker/datepicker.html";
    }, scope: { datepickerMode: "=?", datepickerOptions: "=?", dateDisabled: "&", customClass: "&", shortcutPropagation: "&?" }, require: ["uibDatepicker", "^ngModel"], controller: "UibDatepickerController", controllerAs: "datepicker", link: function link(e, t, a, i) {
      var n = i[0],
          r = i[1];n.init(r);
    } };
}).directive("uibDaypicker", function () {
  return { replace: !0, templateUrl: function templateUrl(e, t) {
      return t.templateUrl || "uib/template/datepicker/day.html";
    }, require: ["^uibDatepicker", "uibDaypicker"], controller: "UibDaypickerController", link: function link(e, t, a, i) {
      var n = i[0],
          r = i[1];r.init(n);
    } };
}).directive("uibMonthpicker", function () {
  return { replace: !0, templateUrl: function templateUrl(e, t) {
      return t.templateUrl || "uib/template/datepicker/month.html";
    }, require: ["^uibDatepicker", "uibMonthpicker"], controller: "UibMonthpickerController", link: function link(e, t, a, i) {
      var n = i[0],
          r = i[1];r.init(n);
    } };
}).directive("uibYearpicker", function () {
  return { replace: !0, templateUrl: function templateUrl(e, t) {
      return t.templateUrl || "uib/template/datepicker/year.html";
    }, require: ["^uibDatepicker", "uibYearpicker"], controller: "UibYearpickerController", link: function link(e, t, a, i) {
      var n = i[0];angular.extend(n, i[1]), n.yearpickerInit(), n.refreshView();
    } };
}).value("uibDatepickerPopupAttributeWarning", !0).constant("uibDatepickerPopupConfig", { altInputFormats: [], appendToBody: !1, clearText: "Clear", closeOnDateSelection: !0, closeText: "Done", currentText: "Today", datepickerPopup: "yyyy-MM-dd", datepickerPopupTemplateUrl: "uib/template/datepicker/popup.html", datepickerTemplateUrl: "uib/template/datepicker/datepicker.html", html5Types: { date: "yyyy-MM-dd", "datetime-local": "yyyy-MM-ddTHH:mm:ss.sss", month: "yyyy-MM" }, onOpenFocus: !0, showButtonBar: !0, placement: "auto bottom-left" }).controller("UibDatepickerPopupController", ["$scope", "$element", "$attrs", "$compile", "$log", "$parse", "$window", "$document", "$rootScope", "$uibPosition", "dateFilter", "uibDateParser", "uibDatepickerPopupConfig", "$timeout", "uibDatepickerConfig", "uibDatepickerPopupAttributeWarning", function (e, t, a, i, n, r, o, s, l, u, p, c, d, h, f, m) {
  function g(e) {
    return e.replace(/([A-Z])/g, function (e) {
      return "-" + e.toLowerCase();
    });
  }function b(t) {
    var a = c.parse(t, $, e.date);if (isNaN(a)) for (var i = 0; i < N.length; i++) if ((a = c.parse(t, N[i], e.date), !isNaN(a))) return a;return a;
  }function y(e) {
    if ((angular.isNumber(e) && (e = new Date(e)), !e)) return null;if (angular.isDate(e) && !isNaN(e)) return e;if (angular.isString(e)) {
      var t = b(e);if (!isNaN(t)) return c.toTimezone(t, P.timezone);
    }return C.$options && C.$options.allowInvalid ? e : void 0;
  }function v(e, t) {
    var i = e || t;return a.ngRequired || i ? (angular.isNumber(i) && (i = new Date(i)), i ? angular.isDate(i) && !isNaN(i) ? !0 : angular.isString(i) ? !isNaN(b(t)) : !1 : !0) : !0;
  }function D(a) {
    if (e.isOpen || !e.disabled) {
      var i = A[0],
          n = t[0].contains(a.target),
          r = void 0 !== i.contains && i.contains(a.target);!e.isOpen || n || r || e.$apply(function () {
        e.isOpen = !1;
      });
    }
  }function k(a) {
    27 === a.which && e.isOpen ? (a.preventDefault(), a.stopPropagation(), e.$apply(function () {
      e.isOpen = !1;
    }), t[0].focus()) : 40 !== a.which || e.isOpen || (a.preventDefault(), a.stopPropagation(), e.$apply(function () {
      e.isOpen = !0;
    }));
  }function w() {
    if (e.isOpen) {
      var i = angular.element(A[0].querySelector(".uib-datepicker-popup")),
          n = a.popupPlacement ? a.popupPlacement : d.placement,
          r = u.positionElements(t, i, n, x);i.css({ top: r.top + "px", left: r.left + "px" }), i.hasClass("uib-position-measure") && i.removeClass("uib-position-measure");
    }
  }var $,
      M,
      x,
      T,
      O,
      E,
      F,
      S,
      I,
      C,
      P,
      A,
      N,
      U = {},
      Y = !1,
      z = [];e.watchData = {}, this.init = function (u) {
    if ((C = u, P = u.$options || f.ngModelOptions, M = angular.isDefined(a.closeOnDateSelection) ? e.$parent.$eval(a.closeOnDateSelection) : d.closeOnDateSelection, x = angular.isDefined(a.datepickerAppendToBody) ? e.$parent.$eval(a.datepickerAppendToBody) : d.appendToBody, T = angular.isDefined(a.onOpenFocus) ? e.$parent.$eval(a.onOpenFocus) : d.onOpenFocus, O = angular.isDefined(a.datepickerPopupTemplateUrl) ? a.datepickerPopupTemplateUrl : d.datepickerPopupTemplateUrl, E = angular.isDefined(a.datepickerTemplateUrl) ? a.datepickerTemplateUrl : d.datepickerTemplateUrl, N = angular.isDefined(a.altInputFormats) ? e.$parent.$eval(a.altInputFormats) : d.altInputFormats, e.showButtonBar = angular.isDefined(a.showButtonBar) ? e.$parent.$eval(a.showButtonBar) : d.showButtonBar, d.html5Types[a.type] ? ($ = d.html5Types[a.type], Y = !0) : ($ = a.uibDatepickerPopup || d.datepickerPopup, a.$observe("uibDatepickerPopup", function (e) {
      var t = e || d.datepickerPopup;if (t !== $ && ($ = t, C.$modelValue = null, !$)) throw new Error("uibDatepickerPopup must have a date format specified.");
    })), !$)) throw new Error("uibDatepickerPopup must have a date format specified.");if (Y && a.uibDatepickerPopup) throw new Error("HTML5 date input types do not support custom formats.");F = angular.element("<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>"), e.ngModelOptions = angular.copy(P), e.ngModelOptions.timezone = null, e.ngModelOptions.updateOnDefault === !0 && (e.ngModelOptions.updateOn = e.ngModelOptions.updateOn ? e.ngModelOptions.updateOn + " default" : "default"), F.attr({ "ng-model": "date", "ng-model-options": "ngModelOptions", "ng-change": "dateSelection(date)", "template-url": O }), S = angular.element(F.children()[0]), S.attr("template-url", E), Y && "month" === a.type && (S.attr("datepicker-mode", '"month"'), S.attr("min-mode", "month")), e.datepickerOptions && S.attr("datepicker-options", "datepickerOptions"), angular.forEach(["minMode", "maxMode", "datepickerMode", "shortcutPropagation"], function (t) {
      if (a[t]) {
        m && n.warn("uib-datepicker settings via uib-datepicker-popup attributes are deprecated and will be removed in UI Bootstrap 1.3, use datepicker-options attribute instead");var i = r(a[t]),
            o = { get: function get() {
            return i(e.$parent);
          } };if ((S.attr(g(t), "watchData." + t), "datepickerMode" === t)) {
          var s = i.assign;o.set = function (t) {
            s(e.$parent, t);
          };
        }Object.defineProperty(e.watchData, t, o);
      }
    }), angular.forEach(["minDate", "maxDate", "initDate"], function (t) {
      if (a[t]) {
        m && n.warn("uib-datepicker settings via uib-datepicker-popup attributes are deprecated and will be removed in UI Bootstrap 1.3, use datepicker-options attribute instead");var i = r(a[t]);z.push(e.$parent.$watch(i, function (a) {
          if ("minDate" === t || "maxDate" === t) U[t] = null === a ? null : angular.isDate(a) ? c.fromTimezone(new Date(a), P.timezone) : new Date(p(a, "medium")), e.watchData[t] = null === a ? null : U[t];else {
            var i = a ? new Date(a) : new Date();e.watchData[t] = c.fromTimezone(i, P.timezone);
          }
        })), S.attr(g(t), "watchData." + t);
      }
    }), a.dateDisabled && (m && n.warn("uib-datepicker settings via uib-datepicker-popup attributes are deprecated and will be removed in UI Bootstrap 1.3, use datepicker-options attribute instead"), S.attr("date-disabled", "dateDisabled({ date: date, mode: mode })")), angular.forEach(["formatDay", "formatMonth", "formatYear", "formatDayHeader", "formatDayTitle", "formatMonthTitle", "showWeeks", "startingDay", "yearRows", "yearColumns"], function (e) {
      angular.isDefined(a[e]) && (m && n.warn("uib-datepicker settings via uib-datepicker-popup attributes are deprecated and will be removed in UI Bootstrap 1.3, use datepicker-options attribute instead"), S.attr(g(e), a[e]));
    }), a.customClass && (m && n.warn("uib-datepicker settings via uib-datepicker-popup attributes are deprecated and will be removed in UI Bootstrap 1.3, use datepicker-options attribute instead"), S.attr("custom-class", "customClass({ date: date, mode: mode })")), Y ? C.$formatters.push(function (t) {
      return e.date = c.fromTimezone(t, P.timezone), t;
    }) : (C.$$parserName = "date", C.$validators.date = v, C.$parsers.unshift(y), C.$formatters.push(function (t) {
      return C.$isEmpty(t) ? (e.date = t, t) : (e.date = c.fromTimezone(t, P.timezone), angular.isNumber(e.date) && (e.date = new Date(e.date)), c.filter(e.date, $));
    })), C.$viewChangeListeners.push(function () {
      e.date = b(C.$viewValue);
    }), t.on("keydown", k), A = i(F)(e), F.remove(), x ? s.find("body").append(A) : t.after(A), e.$on("$destroy", function () {
      for (e.isOpen === !0 && (l.$$phase || e.$apply(function () {
        e.isOpen = !1;
      })), A.remove(), t.off("keydown", k), s.off("click", D), I && I.off("scroll", w), angular.element(o).off("resize", w); z.length;) z.shift()();
    });
  }, e.getText = function (t) {
    return e[t + "Text"] || d[t + "Text"];
  }, e.isDisabled = function (t) {
    return "today" === t && (t = new Date()), e.watchData.minDate && e.compare(t, U.minDate) < 0 || e.watchData.maxDate && e.compare(t, U.maxDate) > 0;
  }, e.compare = function (e, t) {
    return new Date(e.getFullYear(), e.getMonth(), e.getDate()) - new Date(t.getFullYear(), t.getMonth(), t.getDate());
  }, e.dateSelection = function (a) {
    angular.isDefined(a) && (e.date = a);var i = e.date ? c.filter(e.date, $) : null;t.val(i), C.$setViewValue(i), M && (e.isOpen = !1, t[0].focus());
  }, e.keydown = function (a) {
    27 === a.which && (a.stopPropagation(), e.isOpen = !1, t[0].focus());
  }, e.select = function (t, a) {
    if ((a.stopPropagation(), "today" === t)) {
      var i = new Date();angular.isDate(e.date) ? (t = new Date(e.date), t.setFullYear(i.getFullYear(), i.getMonth(), i.getDate())) : t = new Date(i.setHours(0, 0, 0, 0));
    }e.dateSelection(t);
  }, e.close = function (a) {
    a.stopPropagation(), e.isOpen = !1, t[0].focus();
  }, e.disabled = angular.isDefined(a.disabled) || !1, a.ngDisabled && z.push(e.$parent.$watch(r(a.ngDisabled), function (t) {
    e.disabled = t;
  })), e.$watch("isOpen", function (i) {
    i ? e.disabled ? e.isOpen = !1 : h(function () {
      w(), T && e.$broadcast("uib:datepicker.focus"), s.on("click", D);var i = a.popupPlacement ? a.popupPlacement : d.placement;x || u.parsePlacement(i)[2] ? (I = I || angular.element(u.scrollParent(t)), I && I.on("scroll", w)) : I = null, angular.element(o).on("resize", w);
    }, 0, !1) : (s.off("click", D), I && I.off("scroll", w), angular.element(o).off("resize", w));
  }), e.$on("uib:datepicker.mode", function () {
    h(w, 0, !1);
  });
}]).directive("uibDatepickerPopup", function () {
  return { require: ["ngModel", "uibDatepickerPopup"], controller: "UibDatepickerPopupController", scope: { datepickerOptions: "=?", isOpen: "=?", currentText: "@", clearText: "@", closeText: "@", dateDisabled: "&", customClass: "&" }, link: function link(e, t, a, i) {
      var n = i[0],
          r = i[1];r.init(n);
    } };
}).directive("uibDatepickerPopupWrap", function () {
  return { replace: !0, transclude: !0, templateUrl: function templateUrl(e, t) {
      return t.templateUrl || "uib/template/datepicker/popup.html";
    } };
}), angular.module("ui.bootstrap.dateparser", []).service("uibDateParser", ["$log", "$locale", "dateFilter", "orderByFilter", function (e, t, a, i) {
  function n(e, t) {
    var a = [],
        n = e.split(""),
        r = e.indexOf("'");if (r > -1) {
      var o = !1;e = e.split("");for (var s = r; s < e.length; s++) o ? ("'" === e[s] && (s + 1 < e.length && "'" === e[s + 1] ? (e[s + 1] = "$", n[s + 1] = "") : (n[s] = "", o = !1)), e[s] = "$") : "'" === e[s] && (e[s] = "$", n[s] = "", o = !0);e = e.join("");
    }return angular.forEach(h, function (i) {
      var r = e.indexOf(i.key);if (r > -1) {
        e = e.split(""), n[r] = "(" + i.regex + ")", e[r] = "$";for (var o = r + 1, s = r + i.key.length; s > o; o++) n[o] = "", e[o] = "$";e = e.join(""), a.push({ index: r, key: i.key, apply: i[t], matcher: i.regex });
      }
    }), { regex: new RegExp("^" + n.join("") + "$"), map: i(a, "index") };
  }function r(e, t, a) {
    return 1 > a ? !1 : 1 === t && a > 28 ? 29 === a && (e % 4 === 0 && e % 100 !== 0 || e % 400 === 0) : 3 === t || 5 === t || 8 === t || 10 === t ? 31 > a : !0;
  }function o(e) {
    return parseInt(e, 10);
  }function s(e, t) {
    return e && t ? c(e, t) : e;
  }function l(e, t) {
    return e && t ? c(e, t, !0) : e;
  }function u(e, t) {
    var a = Date.parse("Jan 01, 1970 00:00:00 " + e) / 6e4;return isNaN(a) ? t : a;
  }function p(e, t) {
    return e = new Date(e.getTime()), e.setMinutes(e.getMinutes() + t), e;
  }function c(e, t, a) {
    a = a ? -1 : 1;var i = u(t, e.getTimezoneOffset());return p(e, a * (i - e.getTimezoneOffset()));
  }var d,
      h,
      f = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;this.init = function () {
    d = t.id, this.parsers = {}, this.formatters = {}, h = [{ key: "yyyy", regex: "\\d{4}", apply: function apply(e) {
        this.year = +e;
      }, formatter: function formatter(e) {
        var t = new Date();return t.setFullYear(Math.abs(e.getFullYear())), a(t, "yyyy");
      } }, { key: "yy", regex: "\\d{2}", apply: function apply(e) {
        this.year = +e + 2e3;
      }, formatter: function formatter(e) {
        var t = new Date();return t.setFullYear(Math.abs(e.getFullYear())), a(t, "yy");
      } }, { key: "y", regex: "\\d{1,4}", apply: function apply(e) {
        this.year = +e;
      }, formatter: function formatter(e) {
        var t = new Date();return t.setFullYear(Math.abs(e.getFullYear())), a(t, "y");
      } }, { key: "M!", regex: "0?[1-9]|1[0-2]", apply: function apply(e) {
        this.month = e - 1;
      }, formatter: function formatter(e) {
        var t = e.getMonth();return (/^[0-9]$/.test(t) ? a(e, "MM") : a(e, "M")
        );
      } }, { key: "MMMM", regex: t.DATETIME_FORMATS.MONTH.join("|"), apply: function apply(e) {
        this.month = t.DATETIME_FORMATS.MONTH.indexOf(e);
      }, formatter: function formatter(e) {
        return a(e, "MMMM");
      } }, { key: "MMM", regex: t.DATETIME_FORMATS.SHORTMONTH.join("|"), apply: function apply(e) {
        this.month = t.DATETIME_FORMATS.SHORTMONTH.indexOf(e);
      }, formatter: function formatter(e) {
        return a(e, "MMM");
      } }, { key: "MM", regex: "0[1-9]|1[0-2]", apply: function apply(e) {
        this.month = e - 1;
      }, formatter: function formatter(e) {
        return a(e, "MM");
      } }, { key: "M", regex: "[1-9]|1[0-2]", apply: function apply(e) {
        this.month = e - 1;
      }, formatter: function formatter(e) {
        return a(e, "M");
      } }, { key: "d!", regex: "[0-2]?[0-9]{1}|3[0-1]{1}", apply: function apply(e) {
        this.date = +e;
      }, formatter: function formatter(e) {
        var t = e.getDate();return (/^[1-9]$/.test(t) ? a(e, "dd") : a(e, "d")
        );
      } }, { key: "dd", regex: "[0-2][0-9]{1}|3[0-1]{1}", apply: function apply(e) {
        this.date = +e;
      }, formatter: function formatter(e) {
        return a(e, "dd");
      } }, { key: "d", regex: "[1-2]?[0-9]{1}|3[0-1]{1}", apply: function apply(e) {
        this.date = +e;
      }, formatter: function formatter(e) {
        return a(e, "d");
      } }, { key: "EEEE", regex: t.DATETIME_FORMATS.DAY.join("|"), formatter: function formatter(e) {
        return a(e, "EEEE");
      } }, { key: "EEE", regex: t.DATETIME_FORMATS.SHORTDAY.join("|"), formatter: function formatter(e) {
        return a(e, "EEE");
      } }, { key: "HH", regex: "(?:0|1)[0-9]|2[0-3]", apply: function apply(e) {
        this.hours = +e;
      }, formatter: function formatter(e) {
        return a(e, "HH");
      } }, { key: "hh", regex: "0[0-9]|1[0-2]", apply: function apply(e) {
        this.hours = +e;
      }, formatter: function formatter(e) {
        return a(e, "hh");
      } }, { key: "H", regex: "1?[0-9]|2[0-3]", apply: function apply(e) {
        this.hours = +e;
      }, formatter: function formatter(e) {
        return a(e, "H");
      } }, { key: "h", regex: "[0-9]|1[0-2]", apply: function apply(e) {
        this.hours = +e;
      }, formatter: function formatter(e) {
        return a(e, "h");
      } }, { key: "mm", regex: "[0-5][0-9]", apply: function apply(e) {
        this.minutes = +e;
      }, formatter: function formatter(e) {
        return a(e, "mm");
      } }, { key: "m", regex: "[0-9]|[1-5][0-9]", apply: function apply(e) {
        this.minutes = +e;
      }, formatter: function formatter(e) {
        return a(e, "m");
      } }, { key: "sss", regex: "[0-9][0-9][0-9]", apply: function apply(e) {
        this.milliseconds = +e;
      }, formatter: function formatter(e) {
        return a(e, "sss");
      } }, { key: "ss", regex: "[0-5][0-9]", apply: function apply(e) {
        this.seconds = +e;
      }, formatter: function formatter(e) {
        return a(e, "ss");
      } }, { key: "s", regex: "[0-9]|[1-5][0-9]", apply: function apply(e) {
        this.seconds = +e;
      }, formatter: function formatter(e) {
        return a(e, "s");
      } }, { key: "a", regex: t.DATETIME_FORMATS.AMPMS.join("|"), apply: function apply(e) {
        12 === this.hours && (this.hours = 0), "PM" === e && (this.hours += 12);
      }, formatter: function formatter(e) {
        return a(e, "a");
      } }, { key: "Z", regex: "[+-]\\d{4}", apply: function apply(e) {
        var t = e.match(/([+-])(\d{2})(\d{2})/),
            a = t[1],
            i = t[2],
            n = t[3];this.hours += o(a + i), this.minutes += o(a + n);
      }, formatter: function formatter(e) {
        return a(e, "Z");
      } }, { key: "ww", regex: "[0-4][0-9]|5[0-3]", formatter: function formatter(e) {
        return a(e, "ww");
      } }, { key: "w", regex: "[0-9]|[1-4][0-9]|5[0-3]", formatter: function formatter(e) {
        return a(e, "w");
      } }, { key: "GGGG", regex: t.DATETIME_FORMATS.ERANAMES.join("|").replace(/\s/g, "\\s"), formatter: function formatter(e) {
        return a(e, "GGGG");
      } }, { key: "GGG", regex: t.DATETIME_FORMATS.ERAS.join("|"), formatter: function formatter(e) {
        return a(e, "GGG");
      } }, { key: "GG", regex: t.DATETIME_FORMATS.ERAS.join("|"), formatter: function formatter(e) {
        return a(e, "GG");
      } }, { key: "G", regex: t.DATETIME_FORMATS.ERAS.join("|"), formatter: function formatter(e) {
        return a(e, "G");
      } }];
  }, this.init(), this.filter = function (e, a) {
    if (!angular.isDate(e) || isNaN(e) || !a) return "";a = t.DATETIME_FORMATS[a] || a, t.id !== d && this.init(), this.formatters[a] || (this.formatters[a] = n(a, "formatter"));var i = this.formatters[a],
        r = i.map,
        o = a;return r.reduce(function (t, a, i) {
      var n = o.match(new RegExp("(.*)" + a.key));n && angular.isString(n[1]) && (t += n[1], o = o.replace(n[1] + a.key, ""));var s = i === r.length - 1 ? o : "";return a.apply ? t + a.apply.call(null, e) + s : t + s;
    }, "");
  }, this.parse = function (a, i, o) {
    if (!angular.isString(a) || !i) return a;i = t.DATETIME_FORMATS[i] || i, i = i.replace(f, "\\$&"), t.id !== d && this.init(), this.parsers[i] || (this.parsers[i] = n(i, "apply"));var s = this.parsers[i],
        l = s.regex,
        u = s.map,
        p = a.match(l),
        c = !1;if (p && p.length) {
      var h, m;angular.isDate(o) && !isNaN(o.getTime()) ? h = { year: o.getFullYear(), month: o.getMonth(), date: o.getDate(), hours: o.getHours(), minutes: o.getMinutes(), seconds: o.getSeconds(), milliseconds: o.getMilliseconds() } : (o && e.warn("dateparser:", "baseDate is not a valid date"), h = { year: 1900, month: 0, date: 1, hours: 0, minutes: 0, seconds: 0, milliseconds: 0 });for (var g = 1, b = p.length; b > g; g++) {
        var y = u[g - 1];"Z" === y.matcher && (c = !0), y.apply && y.apply.call(h, p[g]);
      }var v = c ? Date.prototype.setUTCFullYear : Date.prototype.setFullYear,
          D = c ? Date.prototype.setUTCHours : Date.prototype.setHours;return r(h.year, h.month, h.date) && (!angular.isDate(o) || isNaN(o.getTime()) || c ? (m = new Date(0), v.call(m, h.year, h.month, h.date), D.call(m, h.hours || 0, h.minutes || 0, h.seconds || 0, h.milliseconds || 0)) : (m = new Date(o), v.call(m, h.year, h.month, h.date), D.call(m, h.hours, h.minutes, h.seconds, h.milliseconds))), m;
    }
  }, this.toTimezone = s, this.fromTimezone = l, this.timezoneToOffset = u, this.addDateMinutes = p, this.convertTimezoneToLocal = c;
}]), angular.module("ui.bootstrap.isClass", []).directive("uibIsClass", ["$animate", function (e) {
  var t = /^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/,
      a = /^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/;return { restrict: "A", compile: function compile(i, n) {
      function r(e, t) {
        l.push(e), u.push({ scope: e, element: t }), f.forEach(function (t) {
          o(t, e);
        }), e.$on("$destroy", s);
      }function o(t, i) {
        var n = t.match(a),
            r = i.$eval(n[1]),
            o = n[2],
            s = p[t];if (!s) {
          var l = function l(t) {
            var a = null;u.some(function (e) {
              var i = e.scope.$eval(d);return i === t ? (a = e, !0) : void 0;
            }), s.lastActivated !== a && (s.lastActivated && e.removeClass(s.lastActivated.element, r), a && e.addClass(a.element, r), s.lastActivated = a);
          };p[t] = s = { lastActivated: null, scope: i, watchFn: l, compareWithExp: o, watcher: i.$watch(o, l) };
        }s.watchFn(i.$eval(o));
      }function s(e) {
        var t = e.targetScope,
            a = l.indexOf(t);if ((l.splice(a, 1), u.splice(a, 1), l.length)) {
          var i = l[0];angular.forEach(p, function (e) {
            e.scope === t && (e.watcher = i.$watch(e.compareWithExp, e.watchFn), e.scope = i);
          });
        } else p = {};
      }var l = [],
          u = [],
          p = {},
          c = n.uibIsClass.match(t),
          d = c[2],
          h = c[1],
          f = h.split(",");return r;
    } };
}]), angular.module("ui.bootstrap.position", []).factory("$uibPosition", ["$document", "$window", function (e, t) {
  var a,
      i = { normal: /(auto|scroll)/, hidden: /(auto|scroll|hidden)/ },
      n = { auto: /\s?auto?\s?/i, primary: /^(top|bottom|left|right)$/, secondary: /^(top|bottom|left|right|center)$/, vertical: /^(top|bottom)$/ };return { getRawNode: function getRawNode(e) {
      return e.nodeName ? e : e[0] || e;
    }, parseStyle: function parseStyle(e) {
      return e = parseFloat(e), isFinite(e) ? e : 0;
    }, offsetParent: function offsetParent(a) {
      function i(e) {
        return "static" === (t.getComputedStyle(e).position || "static");
      }a = this.getRawNode(a);for (var n = a.offsetParent || e[0].documentElement; n && n !== e[0].documentElement && i(n);) n = n.offsetParent;return n || e[0].documentElement;
    }, scrollbarWidth: function scrollbarWidth() {
      if (angular.isUndefined(a)) {
        var t = angular.element('<div class="uib-position-scrollbar-measure"></div>');e.find("body").append(t), a = t[0].offsetWidth - t[0].clientWidth, a = isFinite(a) ? a : 0, t.remove();
      }return a;
    }, isScrollable: function isScrollable(e, a) {
      e = this.getRawNode(e);var n = a ? i.hidden : i.normal,
          r = t.getComputedStyle(e);return n.test(r.overflow + r.overflowY + r.overflowX);
    }, scrollParent: function scrollParent(a, n) {
      a = this.getRawNode(a);var r = n ? i.hidden : i.normal,
          o = e[0].documentElement,
          s = t.getComputedStyle(a),
          l = "absolute" === s.position,
          u = a.parentElement || o;if (u === o || "fixed" === s.position) return o;for (; u.parentElement && u !== o;) {
        var p = t.getComputedStyle(u);if ((l && "static" !== p.position && (l = !1), !l && r.test(p.overflow + p.overflowY + p.overflowX))) break;
        u = u.parentElement;
      }return u;
    }, position: function position(a, i) {
      a = this.getRawNode(a);var n = this.offset(a);if (i) {
        var r = t.getComputedStyle(a);n.top -= this.parseStyle(r.marginTop), n.left -= this.parseStyle(r.marginLeft);
      }var o = this.offsetParent(a),
          s = { top: 0, left: 0 };return o !== e[0].documentElement && (s = this.offset(o), s.top += o.clientTop - o.scrollTop, s.left += o.clientLeft - o.scrollLeft), { width: Math.round(angular.isNumber(n.width) ? n.width : a.offsetWidth), height: Math.round(angular.isNumber(n.height) ? n.height : a.offsetHeight), top: Math.round(n.top - s.top), left: Math.round(n.left - s.left) };
    }, offset: function offset(a) {
      a = this.getRawNode(a);var i = a.getBoundingClientRect();return { width: Math.round(angular.isNumber(i.width) ? i.width : a.offsetWidth), height: Math.round(angular.isNumber(i.height) ? i.height : a.offsetHeight), top: Math.round(i.top + (t.pageYOffset || e[0].documentElement.scrollTop)), left: Math.round(i.left + (t.pageXOffset || e[0].documentElement.scrollLeft)) };
    }, viewportOffset: function viewportOffset(a, i, n) {
      a = this.getRawNode(a), n = n !== !1 ? !0 : !1;var r = a.getBoundingClientRect(),
          o = { top: 0, left: 0, bottom: 0, right: 0 },
          s = i ? e[0].documentElement : this.scrollParent(a),
          l = s.getBoundingClientRect();if ((o.top = l.top + s.clientTop, o.left = l.left + s.clientLeft, s === e[0].documentElement && (o.top += t.pageYOffset, o.left += t.pageXOffset), o.bottom = o.top + s.clientHeight, o.right = o.left + s.clientWidth, n)) {
        var u = t.getComputedStyle(s);o.top += this.parseStyle(u.paddingTop), o.bottom -= this.parseStyle(u.paddingBottom), o.left += this.parseStyle(u.paddingLeft), o.right -= this.parseStyle(u.paddingRight);
      }return { top: Math.round(r.top - o.top), bottom: Math.round(o.bottom - r.bottom), left: Math.round(r.left - o.left), right: Math.round(o.right - r.right) };
    }, parsePlacement: function parsePlacement(e) {
      var t = n.auto.test(e);return t && (e = e.replace(n.auto, "")), e = e.split("-"), e[0] = e[0] || "top", n.primary.test(e[0]) || (e[0] = "top"), e[1] = e[1] || "center", n.secondary.test(e[1]) || (e[1] = "center"), e[2] = t ? !0 : !1, e;
    }, positionElements: function positionElements(e, a, i, r) {
      e = this.getRawNode(e), a = this.getRawNode(a);var o = angular.isDefined(a.offsetWidth) ? a.offsetWidth : a.prop("offsetWidth"),
          s = angular.isDefined(a.offsetHeight) ? a.offsetHeight : a.prop("offsetHeight");i = this.parsePlacement(i);var l = r ? this.offset(e) : this.position(e),
          u = { top: 0, left: 0, placement: "" };if (i[2]) {
        var p = this.viewportOffset(e, r),
            c = t.getComputedStyle(a),
            d = { width: o + Math.round(Math.abs(this.parseStyle(c.marginLeft) + this.parseStyle(c.marginRight))), height: s + Math.round(Math.abs(this.parseStyle(c.marginTop) + this.parseStyle(c.marginBottom))) };if ((i[0] = "top" === i[0] && d.height > p.top && d.height <= p.bottom ? "bottom" : "bottom" === i[0] && d.height > p.bottom && d.height <= p.top ? "top" : "left" === i[0] && d.width > p.left && d.width <= p.right ? "right" : "right" === i[0] && d.width > p.right && d.width <= p.left ? "left" : i[0], i[1] = "top" === i[1] && d.height - l.height > p.bottom && d.height - l.height <= p.top ? "bottom" : "bottom" === i[1] && d.height - l.height > p.top && d.height - l.height <= p.bottom ? "top" : "left" === i[1] && d.width - l.width > p.right && d.width - l.width <= p.left ? "right" : "right" === i[1] && d.width - l.width > p.left && d.width - l.width <= p.right ? "left" : i[1], "center" === i[1])) if (n.vertical.test(i[0])) {
          var h = l.width / 2 - o / 2;p.left + h < 0 && d.width - l.width <= p.right ? i[1] = "left" : p.right + h < 0 && d.width - l.width <= p.left && (i[1] = "right");
        } else {
          var f = l.height / 2 - d.height / 2;p.top + f < 0 && d.height - l.height <= p.bottom ? i[1] = "top" : p.bottom + f < 0 && d.height - l.height <= p.top && (i[1] = "bottom");
        }
      }switch (i[0]) {case "top":
          u.top = l.top - s;break;case "bottom":
          u.top = l.top + l.height;break;case "left":
          u.left = l.left - o;break;case "right":
          u.left = l.left + l.width;}switch (i[1]) {case "top":
          u.top = l.top;break;case "bottom":
          u.top = l.top + l.height - s;break;case "left":
          u.left = l.left;break;case "right":
          u.left = l.left + l.width - o;break;case "center":
          n.vertical.test(i[0]) ? u.left = l.left + l.width / 2 - o / 2 : u.top = l.top + l.height / 2 - s / 2;}return u.top = Math.round(u.top), u.left = Math.round(u.left), u.placement = "center" === i[1] ? i[0] : i[0] + "-" + i[1], u;
    }, positionArrow: function positionArrow(e, a) {
      e = this.getRawNode(e);var i = e.querySelector(".tooltip-inner, .popover-inner");if (i) {
        var r = angular.element(i).hasClass("tooltip-inner"),
            o = e.querySelector(r ? ".tooltip-arrow" : ".arrow");if (o) {
          var s = { top: "", bottom: "", left: "", right: "" };if ((a = this.parsePlacement(a), "center" === a[1])) return void angular.element(o).css(s);var l = "border-" + a[0] + "-width",
              u = t.getComputedStyle(o)[l],
              p = "border-";p += n.vertical.test(a[0]) ? a[0] + "-" + a[1] : a[1] + "-" + a[0], p += "-radius";var c = t.getComputedStyle(r ? i : e)[p];switch (a[0]) {case "top":
              s.bottom = r ? "0" : "-" + u;break;case "bottom":
              s.top = r ? "0" : "-" + u;break;case "left":
              s.right = r ? "0" : "-" + u;break;case "right":
              s.left = r ? "0" : "-" + u;}s[a[1]] = c, angular.element(o).css(s);
        }
      }
    } };
}]), angular.module("ui.bootstrap.typeahead", ["ui.bootstrap.debounce", "ui.bootstrap.position"]).factory("uibTypeaheadParser", ["$parse", function (e) {
  var t = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return { parse: function parse(a) {
      var i = a.match(t);if (!i) throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "' + a + '".');return { itemName: i[3], source: e(i[4]), viewMapper: e(i[2] || i[1]), modelMapper: e(i[1]) };
    } };
}]).controller("UibTypeaheadController", ["$scope", "$element", "$attrs", "$compile", "$parse", "$q", "$timeout", "$document", "$window", "$rootScope", "$$debounce", "$uibPosition", "uibTypeaheadParser", function (e, t, a, i, n, r, o, s, l, u, p, c, d) {
  function h() {
    R.moveInProgress || (R.moveInProgress = !0, R.$digest()), X();
  }function f() {
    R.position = F ? c.offset(t) : c.position(t), R.position.top += t.prop("offsetHeight");
  }var m,
      g,
      b = [9, 13, 27, 38, 40],
      y = 200,
      v = e.$eval(a.typeaheadMinLength);v || 0 === v || (v = 1), e.$watch(a.typeaheadMinLength, function (e) {
    v = e || 0 === e ? e : 1;
  });var D = e.$eval(a.typeaheadWaitMs) || 0,
      k = e.$eval(a.typeaheadEditable) !== !1;e.$watch(a.typeaheadEditable, function (e) {
    k = e !== !1;
  });var w,
      $,
      M = n(a.typeaheadLoading).assign || angular.noop,
      x = n(a.typeaheadOnSelect),
      T = angular.isDefined(a.typeaheadSelectOnBlur) ? e.$eval(a.typeaheadSelectOnBlur) : !1,
      O = n(a.typeaheadNoResults).assign || angular.noop,
      E = a.typeaheadInputFormatter ? n(a.typeaheadInputFormatter) : void 0,
      F = a.typeaheadAppendToBody ? e.$eval(a.typeaheadAppendToBody) : !1,
      S = a.typeaheadAppendTo ? e.$eval(a.typeaheadAppendTo) : null,
      I = e.$eval(a.typeaheadFocusFirst) !== !1,
      C = a.typeaheadSelectOnExact ? e.$eval(a.typeaheadSelectOnExact) : !1,
      P = n(a.typeaheadIsOpen).assign || angular.noop,
      A = e.$eval(a.typeaheadShowHint) || !1,
      N = n(a.ngModel),
      U = n(a.ngModel + "($$$p)"),
      Y = function Y(t, a) {
    return angular.isFunction(N(e)) && g && g.$options && g.$options.getterSetter ? U(t, { $$$p: a }) : N.assign(t, a);
  },
      z = d.parse(a.uibTypeahead),
      R = e.$new(),
      V = e.$on("$destroy", function () {
    R.$destroy();
  });R.$on("$destroy", V);var H = "typeahead-" + R.$id + "-" + Math.floor(1e4 * Math.random());t.attr({ "aria-autocomplete": "list", "aria-expanded": !1, "aria-owns": H });var B, W;A && (B = angular.element("<div></div>"), B.css("position", "relative"), t.after(B), W = t.clone(), W.attr("placeholder", ""), W.attr("tabindex", "-1"), W.val(""), W.css({ position: "absolute", top: "0px", left: "0px", "border-color": "transparent", "box-shadow": "none", opacity: 1, background: "none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)", color: "#999" }), t.css({ position: "relative", "vertical-align": "top", "background-color": "transparent" }), B.append(W), W.after(t));var q = angular.element("<div uib-typeahead-popup></div>");q.attr({ id: H, matches: "matches", active: "activeIdx", select: "select(activeIdx, evt)", "move-in-progress": "moveInProgress", query: "query", position: "position", "assign-is-open": "assignIsOpen(isOpen)", debounce: "debounceUpdate" }), angular.isDefined(a.typeaheadTemplateUrl) && q.attr("template-url", a.typeaheadTemplateUrl), angular.isDefined(a.typeaheadPopupTemplateUrl) && q.attr("popup-template-url", a.typeaheadPopupTemplateUrl);var _ = function _() {
    A && W.val("");
  },
      j = function j() {
    R.matches = [], R.activeIdx = -1, t.attr("aria-expanded", !1), _();
  },
      G = function G(e) {
    return H + "-option-" + e;
  };R.$watch("activeIdx", function (e) {
    0 > e ? t.removeAttr("aria-activedescendant") : t.attr("aria-activedescendant", G(e));
  });var L = function L(e, t) {
    return R.matches.length > t && e ? e.toUpperCase() === R.matches[t].label.toUpperCase() : !1;
  },
      K = function K(a, i) {
    var n = { $viewValue: a };M(e, !0), O(e, !1), r.when(z.source(e, n)).then(function (r) {
      var o = a === m.$viewValue;if (o && w) if (r && r.length > 0) {
        R.activeIdx = I ? 0 : -1, O(e, !1), R.matches.length = 0;for (var s = 0; s < r.length; s++) n[z.itemName] = r[s], R.matches.push({ id: G(s), label: z.viewMapper(R, n), model: r[s] });if ((R.query = a, f(), t.attr("aria-expanded", !0), C && 1 === R.matches.length && L(a, 0) && (angular.isNumber(R.debounceUpdate) || angular.isObject(R.debounceUpdate) ? p(function () {
          R.select(0, i);
        }, angular.isNumber(R.debounceUpdate) ? R.debounceUpdate : R.debounceUpdate["default"]) : R.select(0, i)), A)) {
          var l = R.matches[0].label;W.val(angular.isString(a) && a.length > 0 && l.slice(0, a.length).toUpperCase() === a.toUpperCase() ? a + l.slice(a.length) : "");
        }
      } else j(), O(e, !0);o && M(e, !1);
    }, function () {
      j(), M(e, !1), O(e, !0);
    });
  };F && (angular.element(l).on("resize", h), s.find("body").on("scroll", h));var X = p(function () {
    R.matches.length && f(), R.moveInProgress = !1;
  }, y);R.moveInProgress = !1, R.query = void 0;var Z,
      J = function J(e) {
    Z = o(function () {
      K(e);
    }, D);
  },
      Q = function Q() {
    Z && o.cancel(Z);
  };j(), R.assignIsOpen = function (t) {
    P(e, t);
  }, R.select = function (i, n) {
    var r,
        s,
        l = {};$ = !0, l[z.itemName] = s = R.matches[i].model, r = z.modelMapper(e, l), Y(e, r), m.$setValidity("editable", !0), m.$setValidity("parse", !0), x(e, { $item: s, $model: r, $label: z.viewMapper(e, l), $event: n }), j(), R.$eval(a.typeaheadFocusOnSelect) !== !1 && o(function () {
      t[0].focus();
    }, 0, !1);
  }, t.on("keydown", function (t) {
    if (0 !== R.matches.length && -1 !== b.indexOf(t.which)) {
      if (-1 === R.activeIdx && (9 === t.which || 13 === t.which) || 9 === t.which && t.shiftKey) return j(), void R.$digest();t.preventDefault();var a;switch (t.which) {case 9:case 13:
          R.$apply(function () {
            angular.isNumber(R.debounceUpdate) || angular.isObject(R.debounceUpdate) ? p(function () {
              R.select(R.activeIdx, t);
            }, angular.isNumber(R.debounceUpdate) ? R.debounceUpdate : R.debounceUpdate["default"]) : R.select(R.activeIdx, t);
          });break;case 27:
          t.stopPropagation(), j(), e.$digest();break;case 38:
          R.activeIdx = (R.activeIdx > 0 ? R.activeIdx : R.matches.length) - 1, R.$digest(), a = q.find("li")[R.activeIdx], a.parentNode.scrollTop = a.offsetTop;break;case 40:
          R.activeIdx = (R.activeIdx + 1) % R.matches.length, R.$digest(), a = q.find("li")[R.activeIdx], a.parentNode.scrollTop = a.offsetTop;}
    }
  }), t.bind("focus", function (e) {
    w = !0, 0 !== v || m.$viewValue || o(function () {
      K(m.$viewValue, e);
    }, 0);
  }), t.bind("blur", function (e) {
    T && R.matches.length && -1 !== R.activeIdx && !$ && ($ = !0, R.$apply(function () {
      angular.isObject(R.debounceUpdate) && angular.isNumber(R.debounceUpdate.blur) ? p(function () {
        R.select(R.activeIdx, e);
      }, R.debounceUpdate.blur) : R.select(R.activeIdx, e);
    })), !k && m.$error.editable && (m.$viewValue = "", t.val("")), w = !1, $ = !1;
  });var et = function et(a) {
    t[0] !== a.target && 3 !== a.which && 0 !== R.matches.length && (j(), u.$$phase || e.$digest());
  };s.on("click", et), e.$on("$destroy", function () {
    s.off("click", et), (F || S) && tt.remove(), F && (angular.element(l).off("resize", h), s.find("body").off("scroll", h)), q.remove(), A && B.remove();
  });var tt = i(q)(R);F ? s.find("body").append(tt) : S ? angular.element(S).eq(0).append(tt) : t.after(tt), this.init = function (t, a) {
    m = t, g = a, R.debounceUpdate = m.$options && n(m.$options.debounce)(e), m.$parsers.unshift(function (t) {
      return w = !0, 0 === v || t && t.length >= v ? D > 0 ? (Q(), J(t)) : K(t) : (M(e, !1), Q(), j()), k ? t : t ? void m.$setValidity("editable", !1) : (m.$setValidity("editable", !0), null);
    }), m.$formatters.push(function (t) {
      var a,
          i,
          n = {};return k || m.$setValidity("editable", !0), E ? (n.$model = t, E(e, n)) : (n[z.itemName] = t, a = z.viewMapper(e, n), n[z.itemName] = void 0, i = z.viewMapper(e, n), a !== i ? a : t);
    });
  };
}]).directive("uibTypeahead", function () {
  return { controller: "UibTypeaheadController", require: ["ngModel", "^?ngModelOptions", "uibTypeahead"], link: function link(e, t, a, i) {
      i[2].init(i[0], i[1]);
    } };
}).directive("uibTypeaheadPopup", ["$$debounce", function (e) {
  return { scope: { matches: "=", query: "=", active: "=", position: "&", moveInProgress: "=", select: "&", assignIsOpen: "&", debounce: "&" }, replace: !0, templateUrl: function templateUrl(e, t) {
      return t.popupTemplateUrl || "uib/template/typeahead/typeahead-popup.html";
    }, link: function link(t, a, i) {
      t.templateUrl = i.templateUrl, t.isOpen = function () {
        var e = t.matches.length > 0;return t.assignIsOpen({ isOpen: e }), e;
      }, t.isActive = function (e) {
        return t.active === e;
      }, t.selectActive = function (e) {
        t.active = e;
      }, t.selectMatch = function (a, i) {
        var n = t.debounce();angular.isNumber(n) || angular.isObject(n) ? e(function () {
          t.select({ activeIdx: a, evt: i });
        }, angular.isNumber(n) ? n : n["default"]) : t.select({ activeIdx: a, evt: i });
      };
    } };
}]).directive("uibTypeaheadMatch", ["$templateRequest", "$compile", "$parse", function (e, t, a) {
  return { scope: { index: "=", match: "=", query: "=" }, link: function link(i, n, r) {
      var o = a(r.templateUrl)(i.$parent) || "uib/template/typeahead/typeahead-match.html";e(o).then(function (e) {
        var a = angular.element(e.trim());n.replaceWith(a), t(a)(i);
      });
    } };
}]).filter("uibTypeaheadHighlight", ["$sce", "$injector", "$log", function (e, t, a) {
  function i(e) {
    return e.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
  }function n(e) {
    return (/<.*>/g.test(e)
    );
  }var r;return r = t.has("$sanitize"), function (t, o) {
    return !r && n(t) && a.warn("Unsafe use of typeahead please use ngSanitize"), t = o ? ("" + t).replace(new RegExp(i(o), "gi"), "<strong>$&</strong>") : t, r || (t = e.trustAsHtml(t)), t;
  };
}]), angular.module("ui.bootstrap.debounce", []).factory("$$debounce", ["$timeout", function (e) {
  return function (t, a) {
    var i;return function () {
      var n = this,
          r = Array.prototype.slice.call(arguments);i && e.cancel(i), i = e(function () {
        t.apply(n, r);
      }, a);
    };
  };
}]), angular.module("uib/template/datepicker/datepicker.html", []).run(["$templateCache", function (e) {
  e.put("uib/template/datepicker/datepicker.html", '<div class="uib-datepicker" ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <uib-daypicker ng-switch-when="day" tabindex="0"></uib-daypicker>\n  <uib-monthpicker ng-switch-when="month" tabindex="0"></uib-monthpicker>\n  <uib-yearpicker ng-switch-when="year" tabindex="0"></uib-yearpicker>\n</div>\n');
}]), angular.module("uib/template/datepicker/day.html", []).run(["$templateCache", function (e) {
  e.put("uib/template/datepicker/day.html", '<table class="uib-daypicker" role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-weeks" ng-repeat="row in rows track by $index">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row" class="uib-day text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default btn-sm"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n');
}]), angular.module("uib/template/datepicker/month.html", []).run(["$templateCache", function (e) {
  e.put("uib/template/datepicker/month.html", '<table class="uib-monthpicker" role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-months" ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row" class="uib-month text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n');
}]), angular.module("uib/template/datepicker/popup.html", []).run(["$templateCache", function (e) {
  e.put("uib/template/datepicker/popup.html", '<div>\n  <ul class="uib-datepicker-popup dropdown-menu uib-position-measure" dropdown-nested ng-if="isOpen" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n    <li ng-transclude></li>\n    <li ng-if="showButtonBar" class="uib-button-bar">\n      <span class="btn-group pull-left">\n        <button type="button" class="btn btn-sm btn-info uib-datepicker-current" ng-click="select(\'today\', $event)" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n        <button type="button" class="btn btn-sm btn-danger uib-clear" ng-click="select(null, $event)">{{ getText(\'clear\') }}</button>\n      </span>\n      <button type="button" class="btn btn-sm btn-success pull-right uib-close" ng-click="close($event)">{{ getText(\'close\') }}</button>\n    </li>\n  </ul>\n</div>\n');
}]), angular.module("uib/template/datepicker/year.html", []).run(["$templateCache", function (e) {
  e.put("uib/template/datepicker/year.html", '<table class="uib-yearpicker" role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::columns - 2}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-years" ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row" class="uib-year text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n');
}]), angular.module("uib/template/typeahead/typeahead-match.html", []).run(["$templateCache", function (e) {
  e.put("uib/template/typeahead/typeahead-match.html", '<a href\n   tabindex="-1"\n   ng-bind-html="match.label | uibTypeaheadHighlight:query"\n   ng-attr-title="{{match.label}}"></a>\n');
}]), angular.module("uib/template/typeahead/typeahead-popup.html", []).run(["$templateCache", function (e) {
  e.put("uib/template/typeahead/typeahead-popup.html", '<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index, $event)" role="option" id="{{::match.id}}">\n        <div uib-typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n');
}]), angular.module("ui.bootstrap.datepicker").run(function () {
  !angular.$$csp().noInlineStyle && !angular.$$uibDatepickerCss && angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-datepicker-popup.dropdown-menu{display:block;float:none;margin:0;}.uib-button-bar{padding:10px 9px 2px;}.uib-left,.uib-right{width:100%}</style>'), angular.$$uibDatepickerCss = !0;
}), angular.module("ui.bootstrap.position").run(function () {
  !angular.$$csp().noInlineStyle && !angular.$$uibPositionCss && angular.element(document).find("head").prepend('<style type="text/css">.uib-position-measure{display:block !important;visibility:hidden !important;position:absolute !important;top:-9999px !important;left:-9999px !important;}.uib-position-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll;}</style>'), angular.$$uibPositionCss = !0;
}), angular.module("ui.bootstrap.typeahead").run(function () {
  !angular.$$csp().noInlineStyle && !angular.$$uibTypeaheadCss && angular.element(document).find("head").prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>'), angular.$$uibTypeaheadCss = !0;
});

},{}]},{},[15])

//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJEOi9JbnNpZ2h0c19Qcm9kdWN0L3dlYi9XZWJzaXRlL2pzL2NvbnRyb2xsZXJzL2FuYWx5dGljcy1jb250cm9sbGVyLmpzIiwiRDovSW5zaWdodHNfUHJvZHVjdC93ZWIvV2Vic2l0ZS9qcy9zZWFyY2gvY29udHJvbGxlcnMvVHlwZWFoZWFkQ29udHJvbGxlci5qcyIsIkQ6L0luc2lnaHRzX1Byb2R1Y3Qvd2ViL1dlYnNpdGUvanMvc2VhcmNoL2NvbnRyb2xsZXJzL2VtYWlsUnNzQ29udHJvbGxlci5qcyIsIkQ6L0luc2lnaHRzX1Byb2R1Y3Qvd2ViL1dlYnNpdGUvanMvc2VhcmNoL2NvbnRyb2xsZXJzL2hlYWRsaW5lU2VhcmNoQ29udHJvbGxlci5qcyIsIkQ6L0luc2lnaHRzX1Byb2R1Y3Qvd2ViL1dlYnNpdGUvanMvc2VhcmNoL2NvbnRyb2xsZXJzL2hlYWRsaW5lVG9nZ2xlQ29udHJvbGxlci5qcyIsIkQ6L0luc2lnaHRzX1Byb2R1Y3Qvd2ViL1dlYnNpdGUvanMvc2VhcmNoL2NvbnRyb2xsZXJzL2luZm9ybWFEYXRlc0NvbnRyb2xsZXIuanMiLCJEOi9JbnNpZ2h0c19Qcm9kdWN0L3dlYi9XZWJzaXRlL2pzL3NlYXJjaC9jb250cm9sbGVycy9pbmZvcm1hRmFjZXRzQ29udHJvbGxlci5qcyIsIkQ6L0luc2lnaHRzX1Byb2R1Y3Qvd2ViL1dlYnNpdGUvanMvc2VhcmNoL2NvbnRyb2xsZXJzL2luZm9ybWFSZXN1bHRzQ29udHJvbGxlci5qcyIsIkQ6L0luc2lnaHRzX1Byb2R1Y3Qvd2ViL1dlYnNpdGUvanMvc2VhcmNoL2NvbnRyb2xsZXJzL3BhZ2VTaXplQ29udHJvbGxlci5qcyIsIkQ6L0luc2lnaHRzX1Byb2R1Y3Qvd2ViL1dlYnNpdGUvanMvc2VhcmNoL2NvbnRyb2xsZXJzL3NhdmVkU2VhcmNoQ29udHJvbGxlci5qcyIsIkQ6L0luc2lnaHRzX1Byb2R1Y3Qvd2ViL1dlYnNpdGUvanMvc2VhcmNoL2NvbnRyb2xsZXJzL3NvcnRCeURhdGVDb250cm9sbGVyLmpzIiwiRDovSW5zaWdodHNfUHJvZHVjdC93ZWIvV2Vic2l0ZS9qcy9zZWFyY2gvZmFjdG9yaWVzL2NvbXBhbmllc0ZhY3RvcnkuanMiLCJEOi9JbnNpZ2h0c19Qcm9kdWN0L3dlYi9XZWJzaXRlL2pzL3NlYXJjaC9mYWN0b3JpZXMvc2F2ZWRTZWFyY2hGYWN0b3J5LmpzIiwiRDovSW5zaWdodHNfUHJvZHVjdC93ZWIvV2Vic2l0ZS9qcy9zZWFyY2gvaW5mb3JtYVNlYXJjaEFwcC5qcyIsIkQ6L0luc2lnaHRzX1Byb2R1Y3Qvd2ViL1dlYnNpdGUvanMvc2VhcmNoL3NlYXJjaC5qcyIsIkQ6L0luc2lnaHRzX1Byb2R1Y3Qvd2ViL1dlYnNpdGUvanMvc2VhcmNoL3VpLWJvb3RzdHJhcC1jdXN0b20tdHBscy0xLjIuNC5taW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FDS0EsU0FBUyxjQUFjLENBQUMsT0FBTyxFQUFFO0FBQzdCLFFBQUcsT0FBTyxJQUFJLEtBQUssV0FBVyxFQUFFO0FBQzVCLFlBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDdEI7Q0FDSixDQUFDOztRQUVPLGNBQWMsR0FBZCxjQUFjOzs7Ozs7Ozs7QUNQdkIsSUFBSSwwQkFBMEIsR0FBRyxTQUE3QiwwQkFBMEIsQ0FBWSxNQUFNLEVBQUUsbUJBQW1CLEVBQUU7O0FBRW5FLFVBQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFlBQVc7QUFDL0IsMkJBQW1CLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBUyxRQUFRLEVBQUU7O0FBRXRFLGdCQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDbkIscUJBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBUyxLQUFLLEVB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QUFDLFdBQVcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxHQUFDLENBQUMsQ0FBQSxHQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUksU0FBUyxDQUFDLEtBQUksU0FBUztBQUFDLFNBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVU7QUFBQyxpQkFBTyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsV0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsUUFBUSxDQUFDLENBQUMsR0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO1NBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSSxTQUFTLENBQUMsS0FBSSxTQUFTO0FBQUMsU0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBVTtBQUFDLGlCQUFPLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxXQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsU0FBUyxLQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsY0FBYyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsU0FBUyxLQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsY0FBYyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsS0FBSSxDQUFDLENBQUMsY0FBYyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsY0FBYyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUE7U0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLE1BQU0sS0FBSSxVQUFVO0FBQUMsU0FBQyxDQUFDLGlCQUFpQixDQUFDLFFBQVEsSUFBRSxDQUFDLENBQUMsVUFBVSxHQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUUsSUFBSSxJQUFJLEVBQUEsRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVU7QUFBQyxpQkFBTyxDQUFDLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFBO1NBQUMsRUFBQyxVQUFTLENBQUMsRUFBQztBQUFDLFdBQUMsS0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxXQUFX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QUFDLEVBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxTQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxRQUFRLENBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7T0FBQyxDQUFDLENBQUMsQ0FBQSxHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUMsSUFBSSxDQUFBO0tBQUMsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUMsU0FBUyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxPQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEdBQUMsQ0FBQyxHQUFDLDBFQUEwRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxTQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLFNBQVMsS0FBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLFNBQVMsS0FBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEtBQUksQ0FBQyxDQUFDLGNBQWMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBO09BQUMsQ0FBQyxDQUFDLENBQUEsR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxJQUFJLENBQUE7S0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUEsRUFBQztBQUFDLE9BQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGlHQUFpRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksSUFBSSxFQUFBLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBQyxVQUFTLENBQUMsRUFBQztBQUFDLFNBQUMsS0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBRSxDQUFDLENBQUMsUUFBUSxDQUFBLEFBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksSUFBSSxFQUFBLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQSxBQUFDLENBQUE7T0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFDLE1BQUssSUFBSSxDQUFDLFVBQVUsR0FBQyxJQUFJLElBQUksRUFBQSxDQUFDLENBQUMsQ0FBQyxjQUFjLElBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsdUdBQXVHLENBQUMsRUFBQyxDQUFDLENBQUMsY0FBYyxHQUFDLENBQUMsQ0FBQyxjQUFjLElBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQTtHQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUMsYUFBYSxHQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsR0FBRyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUUsQ0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsS0FBQyxDQUFDLFFBQVEsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO0dBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFdBQU8sQ0FBQyxLQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUUsQ0FBQyxDQUFDLFlBQVksR0FBQyxDQUFDLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxDQUFBLEdBQUUsQ0FBQyxDQUFDLENBQUE7R0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxLQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsUUFBUSxJQUFFLENBQUMsQ0FBQyxjQUFjLEVBQUMsSUFBSSxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsV0FBVyxJQUFFLElBQUksSUFBSSxFQUFBLEVBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBQyxZQUFVO0FBQUMsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO0tBQUMsQ0FBQTtHQUFDLEVBQUMsSUFBSSxDQUFDLE1BQU0sR0FBQyxZQUFVO0FBQUMsUUFBRyxDQUFDLENBQUMsVUFBVSxFQUFDO0FBQUMsVUFBSSxDQUFDLEdBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztVQUFDLENBQUMsR0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsOERBQThELENBQUMsQ0FBQTtLQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtHQUFDLEVBQUMsSUFBSSxDQUFDLFdBQVcsR0FBQyxZQUFVO0FBQUMsUUFBRyxJQUFJLENBQUMsT0FBTyxFQUFDO0FBQUMsT0FBQyxDQUFDLFVBQVUsR0FBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFDLENBQUMsQ0FBQyxRQUFRLEtBQUcsQ0FBQyxDQUFDLFlBQVksR0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQSxBQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUMsQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLE9BQU8sSUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFDO0dBQUMsRUFBQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxJQUFJLEVBQUEsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUFDLENBQUMsR0FBQyxFQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLFFBQVEsRUFBQyxDQUFDLElBQUUsQ0FBQyxLQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLFFBQVEsRUFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBQyxDQUFDLEtBQUcsQ0FBQyxFQUFDLE1BQU0sRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLFdBQVcsRUFBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFFLElBQUksRUFBQyxDQUFDLE9BQU8sQ0FBQyxJQUFFLENBQUMsS0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsVUFBVSxHQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFDLFVBQVUsSUFBRSxDQUFDLEtBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBRyxDQUFDLENBQUMsUUFBUSxHQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFBO0dBQUMsRUFBQyxJQUFJLENBQUMsVUFBVSxHQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLENBQUMsUUFBUSxJQUFFLElBQUksQ0FBQyxPQUFPLElBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsT0FBTyxJQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLFlBQVksSUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBQyxDQUFDLENBQUE7R0FBQyxFQUFDLElBQUksQ0FBQyxXQUFXLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxXQUFPLENBQUMsQ0FBQyxXQUFXLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsY0FBYyxFQUFDLENBQUMsQ0FBQTtHQUFDLEVBQUMsSUFBSSxDQUFDLEtBQUssR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxTQUFJLElBQUksQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsR0FBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxRQUFHLENBQUMsQ0FBQyxjQUFjLEtBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBQztBQUFDLFVBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFDLElBQUksSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO0tBQUMsTUFBSyxDQUFDLENBQUMsVUFBVSxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxRQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxHQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBRSxDQUFDLENBQUEsQUFBQztRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxHQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBRSxDQUFDLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO0dBQUMsRUFBQyxDQUFDLENBQUMsVUFBVSxHQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsS0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLGNBQWMsS0FBRyxDQUFDLENBQUMsT0FBTyxJQUFFLENBQUMsS0FBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLGNBQWMsS0FBRyxDQUFDLENBQUMsT0FBTyxJQUFFLENBQUMsQ0FBQyxLQUFHLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUEsQUFBQyxDQUFBO0dBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxHQUFDLEVBQUMsRUFBRSxFQUFDLE9BQU8sRUFBQyxFQUFFLEVBQUMsT0FBTyxFQUFDLEVBQUUsRUFBQyxRQUFRLEVBQUMsRUFBRSxFQUFDLFVBQVUsRUFBQyxFQUFFLEVBQUMsS0FBSyxFQUFDLEVBQUUsRUFBQyxNQUFNLEVBQUMsRUFBRSxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUMsSUFBSSxFQUFDLEVBQUUsRUFBQyxPQUFPLEVBQUMsRUFBRSxFQUFDLE1BQU0sRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFDLFNBQUYsQ0FBQyxHQUFXO0FBQUMsS0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtHQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsT0FBTyxHQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUMsS0FBRyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUMsQ0FBQyxDQUFDLG1CQUFtQixJQUFFLENBQUMsQ0FBQyxlQUFlLEVBQUUsRUFBQyxPQUFPLEtBQUcsQ0FBQyxJQUFFLE9BQU8sS0FBRyxDQUFDLENBQUEsRUFBQztBQUFDLFVBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQTtLQUFDLE1BQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFFLElBQUksS0FBRyxDQUFDLElBQUUsTUFBTSxLQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUEsR0FBRSxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksS0FBRyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFDLFlBQVU7QUFBQyxXQUFLLENBQUMsQ0FBQyxNQUFNLEdBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUE7R0FBQyxDQUFDLENBQUE7Q0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsd0JBQXdCLEVBQUMsQ0FBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLFlBQVksRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFdBQU8sQ0FBQyxLQUFHLENBQUMsSUFBRSxDQUFDLEdBQUMsQ0FBQyxLQUFHLENBQUMsSUFBRSxDQUFDLEdBQUMsR0FBRyxLQUFHLENBQUMsSUFBRSxDQUFDLEdBQUMsR0FBRyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDLEdBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBRSxDQUFDLENBQUEsQUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsR0FBRSxLQUFLLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUE7R0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBQyxFQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUMsRUFBQyxJQUFJLENBQUMsT0FBTyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxHQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtHQUFDLEVBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxTQUFJLElBQUksQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxHQUFFLENBQUMsR0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUE7R0FBQyxFQUFDLElBQUksQ0FBQyxZQUFZLEdBQUMsWUFBVTtBQUFDLFFBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFO1FBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFO1FBQUMsQ0FBQyxHQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLFdBQVcsR0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFO1FBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUM7UUFBQyxDQUFDLEdBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUksSUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFDLEVBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsS0FBRyxDQUFDLEVBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUMsR0FBRyxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFJLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxNQUFNLENBQUMsRUFBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsU0FBUyxDQUFBLEVBQUM7QUFBQyxPQUFDLENBQUMsV0FBVyxHQUFDLEVBQUUsQ0FBQyxLQUFJLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxXQUFXLENBQUEsR0FBRSxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0tBQUM7R0FBQyxFQUFDLElBQUksQ0FBQyxPQUFPLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDLEdBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFBQyxDQUFDLEdBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBO0dBQUMsRUFBQyxJQUFJLENBQUMsYUFBYSxHQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFHLE1BQU0sS0FBRyxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxLQUFLLElBQUcsSUFBSSxLQUFHLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEtBQUssSUFBRyxPQUFPLEtBQUcsQ0FBQyxFQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBSyxJQUFHLE1BQU0sS0FBRyxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxLQUFLLElBQUcsUUFBUSxLQUFHLENBQUMsSUFBRSxVQUFVLEtBQUcsQ0FBQyxFQUFDO0FBQUMsVUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsSUFBRSxRQUFRLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQSxBQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxFQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtLQUFDLE1BQUksTUFBTSxLQUFHLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLEtBQUssS0FBRyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxFQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQSxBQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQyxDQUFBO0NBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLDBCQUEwQixFQUFDLENBQUMsUUFBUSxFQUFDLFVBQVUsRUFBQyxZQUFZLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLE1BQUksQ0FBQyxJQUFJLEdBQUMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLEVBQUMsSUFBSSxDQUFDLE9BQU8sR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksR0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFdBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtHQUFDLEVBQUMsSUFBSSxDQUFDLFlBQVksR0FBQyxZQUFVO0FBQUMsU0FBSSxJQUFJLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFDLEVBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUMsR0FBRyxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBO0dBQUMsRUFBQyxJQUFJLENBQUMsT0FBTyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFFBQUksQ0FBQyxHQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFBQyxDQUFDLEdBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUE7R0FBQyxFQUFDLElBQUksQ0FBQyxhQUFhLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxRQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUcsTUFBTSxLQUFHLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEtBQUssSUFBRyxJQUFJLEtBQUcsQ0FBQyxFQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBSyxJQUFHLE9BQU8sS0FBRyxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxLQUFLLElBQUcsTUFBTSxLQUFHLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEtBQUssSUFBRyxRQUFRLEtBQUcsQ0FBQyxJQUFFLFVBQVUsS0FBRyxDQUFDLEVBQUM7QUFBQyxVQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxJQUFFLFFBQVEsS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFDLE1BQUksTUFBTSxLQUFHLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLEtBQUssS0FBRyxDQUFDLEtBQUcsQ0FBQyxHQUFDLEVBQUUsQ0FBQSxBQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQyxDQUFBO0NBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLHlCQUF5QixFQUFDLENBQUMsUUFBUSxFQUFDLFVBQVUsRUFBQyxZQUFZLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLEdBQUUsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUE7R0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLGNBQWMsR0FBQyxZQUFVO0FBQUMsS0FBQyxHQUFDLElBQUksQ0FBQyxXQUFXLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxRQUFRLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLENBQUE7R0FBQyxFQUFDLElBQUksQ0FBQyxZQUFZLEdBQUMsWUFBVTtBQUFDLFNBQUksSUFBSSxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxHQUFHLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUMsQ0FBQyxDQUFBO0dBQUMsRUFBQyxJQUFJLENBQUMsT0FBTyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFdBQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtHQUFDLEVBQUMsSUFBSSxDQUFDLGFBQWEsR0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFFBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxLQUFHLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLElBQUksS0FBRyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxPQUFPLEtBQUcsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLEdBQUMsTUFBTSxLQUFHLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLFFBQVEsS0FBRyxDQUFDLElBQUUsVUFBVSxLQUFHLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxRQUFRLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQSxHQUFFLENBQUMsR0FBQyxNQUFNLEtBQUcsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFDLEtBQUssS0FBRyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENB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Q0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBQyxVQUFTLENBQUMsRUFBQztBQUFDLGFBQU0sR0FBRyxHQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtLQUFDLENBQUMsQ0FBQTtHQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQztBQUFDLFFBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQSxFQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsU0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsRUFBQyxPQUFPLElBQUksQ0FBQyxJQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLENBQUMsSUFBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsVUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUE7S0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLElBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxZQUFZLEdBQUMsQ0FBQyxHQUFDLEtBQUssQ0FBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFFBQUksQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxJQUFFLENBQUMsSUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxHQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQSxHQUFFLENBQUMsQ0FBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBRyxDQUFDLENBQUMsTUFBTSxJQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBQztBQUFDLFVBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7VUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1VBQUMsQ0FBQyxHQUFDLEtBQUssQ0FBQyxLQUFHLENBQUMsQ0FBQyxRQUFRLElBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFFLENBQUMsSUFBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFVO0FBQUMsU0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsQ0FBQTtPQUFDLENBQUMsQ0FBQTtLQUFDO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsTUFBRSxLQUFHLENBQUMsQ0FBQyxLQUFLLElBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBRSxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUMsQ0FBQyxDQUFDLGVBQWUsRUFBRSxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBVTtBQUFDLE9BQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBLEdBQUUsRUFBRSxLQUFHLENBQUMsQ0FBQyxLQUFLLElBQUUsQ0FBQyxDQUFDLE1BQU0sS0FBRyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUMsQ0FBQyxDQUFDLGVBQWUsRUFBRSxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBVTtBQUFDLE9BQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLEdBQUU7QUFBQyxRQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUM7QUFBQyxVQUFJLENBQUMsR0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsdUJBQXVCLENBQUMsQ0FBQztVQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsY0FBYyxHQUFDLENBQUMsQ0FBQyxjQUFjLEdBQUMsQ0FBQyxDQUFDLFNBQVM7VUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxJQUFJLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUFDLElBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBO0tBQUM7R0FBQyxJQUFJLENBQUM7TUFBQyxDQUFDO01BQUMsQ0FBQztNQUFDLENBQUM7TUFBQyxDQUFDO01BQUMsQ0FBQztNQUFDLENBQUM7TUFBQyxDQUFDO01BQUMsQ0FBQztNQUFDLENBQUM7TUFBQyxDQUFDO01BQUMsQ0FBQztNQUFDLENBQUM7TUFBQyxDQUFDLEdBQUMsRUFBRTtNQUFDLENBQUMsR0FBQyxDQUFDLENBQUM7TUFBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxTQUFHLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRLElBQUUsQ0FBQyxDQUFDLGNBQWMsRUFBQyxDQUFDLEdBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsR0FBQyxDQUFDLENBQUMsb0JBQW9CLEVBQUMsQ0FBQyxHQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLEdBQUMsQ0FBQyxDQUFDLFlBQVksRUFBQyxDQUFDLEdBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUMsQ0FBQyxHQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLEdBQUMs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VUFBUyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLDhKQUE4SixDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBO0tBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxXQUFXLEtBQUcsQ0FBQyxJQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsOEpBQThKLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBQyx5Q0FBeUMsQ0FBQyxDQUFBLEFBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFDLENBQUMsQ0FBQTtLQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsWUFBWSxHQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLElBQUksR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBLElBQUcsQ0FBQyxDQUFDLElBQUksR0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUcsQ0FBQyxDQUFDLElBQUksR0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUE7S0FBQyxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsWUFBVTtBQUFDLE9BQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQTtLQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBQyxZQUFVO0FBQUMsV0FBSSxDQUFDLENBQUMsTUFBTSxLQUFHLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxPQUFPLElBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFVO0FBQUMsU0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsQ0FBQTtPQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUMsRUFBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQTtLQUFDLENBQUMsQ0FBQTtHQUFDLEVBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFdBQU8sQ0FBQyxDQUFDLENBQUMsR0FBQyxNQUFNLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFDLE1BQU0sQ0FBQyxDQUFBO0dBQUMsRUFBQyxDQUFDLENBQUMsVUFBVSxHQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsV0FBTSxPQUFPLEtBQUcsQ0FBQyxLQUFHLENBQUMsR0FBQyxJQUFJLElBQUksRUFBQSxDQUFBLEFBQUMsRUFBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sSUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxJQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBQyxDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxhQUFhLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxXQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQSxBQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxNQUFFLEtBQUcsQ0FBQyxDQUFDLEtBQUssS0FBRyxDQUFDLENBQUMsZUFBZSxFQUFFLEVBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUEsQUFBQyxDQUFBO0dBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFNBQUcsQ0FBQyxDQUFDLGVBQWUsRUFBRSxFQUFDLE9BQU8sS0FBRyxDQUFDLENBQUEsRUFBQztBQUFDLFVBQUksQ0FBQyxHQUFDLElBQUksSUFBSSxFQUFBLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUUsQ0FBQyxHQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUEsR0FBRSxDQUFDLEdBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtHQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUssR0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLEtBQUMsQ0FBQyxlQUFlLEVBQUUsRUFBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtHQUFDLEVBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsVUFBVSxJQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBQyxVQUFTLENBQUMsRUFBQztBQUFDLEtBQUMsQ0FBQyxRQUFRLEdBQUMsQ0FBQyxDQUFBO0dBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxLQUFDLEdBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxZQUFVO0FBQUMsT0FBQyxFQUFFLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsY0FBYyxHQUFDLENBQUMsQ0FBQyxjQUFjLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLEdBQUMsQ0FBQyxJQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUMsQ0FBQSxHQUFFLENBQUMsR0FBQyxJQUFJLEVBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQTtHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFDLFlBQVU7QUFBQyxLQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0dBQUMsQ0FBQyxDQUFBO0NBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLG9CQUFvQixFQUFDLFlBQVU7QUFBQyxTQUFNLEVBQUMsT0FBTyxFQUFDLENBQUMsU0FBUyxFQUFDLG9CQUFvQixDQUFDLEVBQUMsVUFBVSxFQUFDLDhCQUE4QixFQUFDLEtBQUssRUFBQyxFQUFDLGlCQUFpQixFQUFDLElBQUksRUFBQyxNQUFNLEVBQUMsSUFBSSxFQUFDLFdBQVcsRUFBQyxHQUFHLEVBQUMsU0FBUyxFQUFDLEdBQUcsRUFBQyxTQUFTLEVBQUMsR0FBRyxFQUFDLFlBQVksRUFBQyxHQUFHLEVBQUMsV0FBVyxFQUFDLEdBQUcsRUFBQyxFQUFDLElBQUksRUFBQyxjQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFVBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7VUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxFQUFDLENBQUE7Q0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLHdCQUF3QixFQUFDLFlBQVU7QUFBQyxTQUFNLEVBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxFQUFDLFVBQVUsRUFBQyxDQUFDLENBQUMsRUFBQyxXQUFXLEVBQUMscUJBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLGFBQU8sQ0FBQyxDQUFDLFdBQVcsSUFBRSxvQ0FBb0MsQ0FBQTtLQUFDLEVBQUMsQ0FBQTtDQUFDLENBQUMsRUFBQyxPQUFPLENBQUMsTUFBTSxDQUFDLHlCQUF5QixFQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUMsQ0FBQyxNQUFNLEVBQUMsU0FBUyxFQUFDLFlBQVksRUFBQyxlQUFlLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxXQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDLEdBQUMsRUFBRTtRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsVUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxJQUFFLEdBQUcsS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxJQUFFLEdBQUcsS0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFBLElBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxBQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQSxHQUFFLEdBQUcsS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7S0FBQyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsVUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUM7QUFBQyxTQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxDQUFDLENBQUE7T0FBQztLQUFDLENBQUMsRUFBQyxFQUFDLEtBQUssRUFBQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBQyxHQUFHLENBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLENBQUMsRUFBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxXQUFPLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxLQUFHLENBQUMsSUFBRSxDQUFDLEdBQUMsRUFBRSxHQUFDLEVBQUUsS0FBRyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsS0FBRyxDQUFDLElBQUUsQ0FBQyxHQUFDLEdBQUcsS0FBRyxDQUFDLElBQUUsQ0FBQyxHQUFDLEdBQUcsS0FBRyxDQUFDLENBQUEsQUFBQyxHQUFDLENBQUMsS0FBRyxDQUFDLElBQUUsQ0FBQyxLQUFHLENBQUMsSUFBRSxDQUFDLEtBQUcsQ0FBQyxJQUFFLEVBQUUsS0FBRyxDQUFDLEdBQUMsRUFBRSxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQTtHQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQztBQUFDLFdBQU8sUUFBUSxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQTtHQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxXQUFPLENBQUMsSUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUE7R0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFFBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsd0JBQXdCLEdBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFDLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUE7R0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLEdBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxLQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUEsQUFBQyxDQUFDLENBQUE7R0FBQyxJQUFJLENBQUM7TUFBQyxDQUFDO01BQUMsQ0FBQyxHQUFDLGlDQUFpQyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsWUFBVTtBQUFDLEtBQUMsR0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxPQUFPLEdBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxVQUFVLEdBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsR0FBRyxFQUFDLE1BQU0sRUFBQyxLQUFLLEVBQUMsUUFBUSxFQUFDLEtBQUssRUFBQyxlQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLENBQUE7T0FBQyxFQUFDLFNBQVMsRUFBQyxtQkFBUyxDQUFDLEVBQUM7QUFBQyxZQUFJLENBQUMsR0FBQyxJQUFJLElBQUksRUFBQSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLENBQUMsQ0FBQTtPQUFDLEVBQUMsRUFBQyxFQUFDLEdBQUcsRUFBQyxJQUFJLEVBQUMsS0FBSyxFQUFDLFFBQVEsRUFBQyxLQUFLLEVBQUMsZUFBUyxDQUFDLEVBQUM7QUFBQyxZQUFJLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQTtPQUFDLEVBQUMsU0FBUyxFQUFDLG1CQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxHQUFDLElBQUksSUFBSSxFQUFBLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFBO09BQUMsRUFBQyxFQUFDLEVBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxLQUFLLEVBQUMsVUFBVSxFQUFDLEtBQUssRUFBQyxlQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLENBQUE7T0FBQyxFQUFDLFNBQVMsRUFBQyxtQkFBUyxDQUFDLEVBQUM7QUFBQyxZQUFJLENBQUMsR0FBQyxJQUFJLElBQUksRUFBQSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsQ0FBQTtPQUFDLEVBQUMsRUFBQyxFQUFDLEdBQUcsRUFBQyxJQUFJLEVBQUMsS0FBSyxFQUFDLGdCQUFnQixFQUFDLEtBQUssRUFBQyxlQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQTtPQUFDLEVBQUMsU0FBUyxFQUFDLG1CQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFNLFVBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQztVQUFBO09BQUMsRUFBQyxFQUFDLEVBQUMsR0FBRyxFQUFDLE1BQU0sRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUMsS0FBSyxFQUFDLGVBQVMsQ0FBQyxFQUFDO0FBQUMsWUFBSSxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtPQUFDLEVBQUMsU0FBUyxFQUFDLG1CQUFTLENBQUMsRUFBQztBQUFDLGVBQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLENBQUMsQ0FBQTtPQUFDLEVBQUMsRUFBQyxFQUFDLEdBQUcsRUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFDLEtBQUssRUFBQyxlQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7T0FBQyxFQUFDLFNBQVMsRUFBQyxtQkFBUyxDQUFDLEVBQUM7QUFBQyxlQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsS0FBSyxDQUFDLENBQUE7T0FBQyxFQUFDLEVBQUMsRUFBQyxHQUFHLEVBQUMsSUFBSSxFQUFDLEtBQUssRUFBQyxlQUFlLEVBQUMsS0FBSyxFQUFDLGVBQVMsQ0FBQyxFQUFDO0FBQUMsWUFBSSxDQUFDLEtBQUssR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBO09BQUMsRUFBQyxTQUFTLEVBQUMsbUJBQVMsQ0FBQyxFQUFDO0FBQUMsZUFBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFBO09BQUMsRUFBQyxFQUFDLEVBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxLQUFLLEVBQUMsY0FBYyxFQUFDLEtBQUssRUFBQyxlQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQTtPQUFDLEVBQUMsU0FBUyxFQUFDLG1CQUFTLENBQUMsRUFBQztBQUFDLGVBQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsQ0FBQTtPQUFDLEVBQUMsRUFBQyxFQUFDLEdBQUcsRUFBQyxJQUFJLEVBQUMsS0FBSyxFQUFDLDBCQUEwQixFQUFDLEtBQUssRUFBQyxlQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLENBQUE7T0FBQyxFQUFDLFNBQVMsRUFBQyxtQkFBUyxDQUFDLEVBQUM7QUFBQyxZQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTSxVQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUM7VUFBQTtPQUFDLEVBQUMsRUFBQyxFQUFDLEdBQUcsRUFBQyxJQUFJLEVBQUMsS0FBSyxFQUFDLHlCQUF5QixFQUFDLEtBQUssRUFBQyxlQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLENBQUE7T0FBQyxFQUFDLFNBQVMsRUFBQyxtQkFBUyxDQUFDLEVBQUM7QUFBQyxlQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUE7T0FBQyxFQUFDLEVBQUMsRUFBQyxHQUFHLEVBQUMsR0FBRyxFQUFDLEtBQUssRUFBQywwQkFBMEIsRUFBQyxLQUFLLEVBQUMsZUFBUyxDQUFDLEVBQUM7QUFBQyxZQUFJLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxDQUFBO09BQUMsRUFBQyxTQUFTLEVBQUMsbUJBQVMsQ0FBQyxFQUFDO0FBQUMsZUFBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxDQUFBO09BQUMsRUFBQyxFQUFDLEVBQUMsR0FBRyxFQUFDLE1BQU0sRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUMsU0FBUyxFQUFDLG1CQUFTLENBQUMsRUFBQztBQUFDLGVBQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLENBQUMsQ0FBQTtPQUFDLEVBQUMsRUFBQyxFQUFDLEdBQUcsRUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFDLFNBQVMsRUFBQyxtQkFBUyxDQUFDLEVBQUM7QUFBQyxlQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsS0FBSyxDQUFDLENBQUE7T0FBQyxFQUFDLEVBQUMsRUFBQyxHQUFHLEVBQUMsSUFBSSxFQUFDLEtBQUssRUFBQyxxQkFBcUIsRUFBQyxLQUFLLEVBQUMsZUFBUyxDQUFDLEVBQUM7QUFBQyxZQUFJLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxDQUFBO09BQUMsRUFBQyxTQUFTLEVBQUMsbUJBQVMsQ0FBQyxFQUFDO0FBQUMsZUFBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFB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QUFHLElBQUksQ0FBQyxLQUFLLEtBQUcsSUFBSSxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUEsQUFBQyxFQUFDLElBQUksS0FBRyxDQUFDLEtBQUcsSUFBSSxDQUFDLEtBQUssSUFBRSxFQUFFLENBQUEsQUFBQyxDQUFBO09BQUMsRUFBQyxTQUFTLEVBQUMsbUJBQVMsQ0FBQyxFQUFDO0FBQUMsZUFBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxDQUFBO09BQUMsRUFBQyxFQUFDLEVBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxLQUFLLEVBQUMsWUFBWSxFQUFDLEtBQUssRUFBQyxlQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUM7WUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLE9BQU8sSUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFBO09BQUMsRUFBQyxTQUFTLEVBQUMsbUJBQVMsQ0FBQyxFQUFDO0FBQUMsZUFBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxDQUFBO09BQUMsRUFBQyxFQUFDLEVBQUMsR0FBRyxFQUFDLElBQUksRUFBQyxLQUFLLEVBQUMsbUJBQW1CLEVBQUMsU0FBUyxFQUFDLG1CQUFTLENBQUMsRUFBQztBQUFDLGVBQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQTtPQUFDLEVBQUMsRUFBQyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsS0FBSyxFQUFDLHlCQUF5QixFQUFDLFNBQVMsRUFBQyxtQkFBUyxDQUFDLEVBQUM7QUFBQyxlQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLENBQUE7T0FBQyxFQUFDLEVBQUMsRUFBQyxHQUFHLEVBQUMsTUFBTSxFQUFDLEtBQUssRUFBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFDLEtBQUssQ0FBQyxFQUFDLFNBQVMsRUFBQyxtQkFBUyxDQUFDLEVBQUM7QUFBQyxlQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsTUFBTSxDQUFDLENBQUE7T0FBQyxFQUFDLEVBQUMsRUFBQyxHQUFHLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBQyxTQUFTLEVBQUMsbUJBQVMsQ0FBQyxFQUFDO0FBQUMsZUFBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLEtBQUssQ0FBQyxDQUFBO09BQUMsRUFBQyxFQUFDLEVBQUMsR0FBRyxFQUFDLElBQUksRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUMsU0FBUyxFQUFDLG1CQUFTLENBQUMsRUFBQztBQUFDLGVBQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQTtPQUFDLEVBQUMsRUFBQyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFDLFNBQVMsRUFBQyxtQkFBUyxDQUFDLEVBQUM7QUFBQyxlQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLENBQUE7T0FBQyxFQUFDLENBQUMsQ0FBQTtHQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFDLElBQUksQ0FBQyxNQUFNLEdBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxFQUFDLE9BQU0sRUFBRSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUcsQ0FBQyxJQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxXQUFXLENBQUMsQ0FBQSxBQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUc7UUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsVUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBQyxFQUFFLENBQUMsQ0FBQSxBQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUE7S0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFBO0dBQUMsRUFBQyxJQUFJLENBQUMsS0FBSyxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxRQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsTUFBTSxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBRyxDQUFDLElBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxDQUFBLEFBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSztRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBRztRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsTUFBTSxFQUFDO0FBQUMsVUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUMsQ0FBQyxHQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFDLE9BQU8sRUFBQyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQyxlQUFlLEVBQUUsRUFBQyxJQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBQyw4QkFBOEIsQ0FBQyxFQUFDLENBQUMsR0FBQyxFQUFDLElBQUksRUFBQyxJQUFJLEVBQUMsS0FBSyxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsRUFBQyxPQUFPLEVBQUMsQ0FBQyxFQUFDLFlBQVksRUFBQyxDQUFDLEVBQUMsQ0FBQSxBQUFDLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQztBQUFDLFlBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFHLENBQUMsQ0FBQyxPQUFPLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsRUFBQyxDQUFDLENBQUMsS0FBSyxJQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtPQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVc7VUFBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBRSxDQUFDLElBQUUsQ0FBQyxHQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLFlBQVksSUFBRSxDQUFDLENBQUMsQ0FBQSxJQUFHLENBQUMsR0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBQyxDQUFDLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQSxDQUFDLEFBQUMsRUFBQyxDQUFDLENBQUE7S0FBQztHQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFlBQVksR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLGdCQUFnQixHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsY0FBYyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsc0JBQXNCLEdBQUMsQ0FBQyxDQUFBO0NBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsRUFBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFDLENBQUMsVUFBVSxFQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsTUFBSSxDQUFDLEdBQUMsc0NBQXNDO01BQUMsQ0FBQyxHQUFDLHVDQUF1QyxDQUFDLE9BQU0sRUFBQyxRQUFRLEVBQUMsR0FBRyxFQUFDLE9BQU8sRUFBQyxpQkFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsZUFBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFNBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7U0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDLENBQUE7T0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsWUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsRUFBQztBQUFDLGNBQUksQ0FBQyxHQUFDLFNBQUYsQ0FBQyxDQUFVLENBQUMsRUFBQztBQUFDLGdCQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLGtCQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBRyxDQUFDLElBQUUsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxHQUFFLEtBQUssQ0FBQyxDQUFBO2FBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxhQUFhLEtBQUcsQ0FBQyxLQUFHLENBQUMsQ0FBQyxhQUFhLElBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxhQUFhLEdBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQTtXQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxFQUFDLGFBQWEsRUFBQyxJQUFJLEVBQUMsS0FBSyxFQUFDLENBQUMsRUFBQyxPQUFPLEVBQUMsQ0FBQyxFQUFDLGNBQWMsRUFBQyxDQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUE7U0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtPQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxXQUFXO1lBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFBLEVBQUM7QUFBQyxjQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxhQUFDLENBQUMsS0FBSyxLQUFHLENBQUMsS0FBRyxDQUFDLENBQUMsT0FBTyxHQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBO1dBQUMsQ0FBQyxDQUFBO1NBQUMsTUFBSyxDQUFDLEdBQUMsRUFBRSxDQUFBO09BQUMsSUFBSSxDQUFDLEdBQUMsRUFBRTtVQUFDLENBQUMsR0FBQyxFQUFFO1VBQUMsQ0FBQyxHQUFDLEVBQUU7VUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1VBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7VUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztVQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0tBQUMsRUFBQyxDQUFBO0NBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsRUFBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFDLENBQUMsV0FBVyxFQUFDLFNBQVMsRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxNQUFJLENBQUM7TUFBQyxDQUFDLEdBQUMsRUFBQyxNQUFNLEVBQUMsZUFBZSxFQUFDLE1BQU0sRUFBQyxzQkFBc0IsRUFBQztNQUFDLENBQUMsR0FBQyxFQUFDLElBQUksRUFBQyxjQUFjLEVBQUMsT0FBTyxFQUFDLDJCQUEyQixFQUFDLFNBQVMsRUFBQyxrQ0FBa0MsRUFBQyxRQUFRLEVBQUMsZ0JBQWdCLEVBQUMsQ0FBQyxPQUFNLEVBQUMsVUFBVSxFQUFDLG9CQUFTLENBQUMsRUFBQztBQUFDLGFBQU8sQ0FBQyxDQUFDLFFBQVEsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQTtLQUFDLEVBQUMsVUFBVSxFQUFDLG9CQUFTLENBQUMsRUFBQztBQUFDLGFBQU8sQ0FBQyxHQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQTtLQUFDLEVBQUMsWUFBWSxFQUFDLHNCQUFTLENBQUMsRUFBQztBQUFDLGVBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQztBQUFDLGVBQU0sUUFBUSxNQUFJLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUUsUUFBUSxDQUFBLEFBQUMsQ0FBQTtPQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLFlBQVksSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxFQUFDLENBQUMsSUFBRSxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQTtLQUFDLEVBQUMsY0FBYyxFQUFDLDBCQUFVO0FBQUMsVUFBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsWUFBSSxDQUFDLEdBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxvREFBb0QsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUMsQ0FBQyxHQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtPQUFDLE9BQU8sQ0FBQyxDQUFBO0tBQUMsRUFBQyxZQUFZLEVBQUMsc0JBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLE9BQUMsR0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxNQUFNO1VBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtLQUFDLEVBQUMsWUFBWSxFQUFDLHNCQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxPQUFDLEdBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsTUFBTTtVQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZTtVQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1VBQUMsQ0FBQyxHQUFDLFVBQVUsS0FBRyxDQUFDLENBQUMsUUFBUTtVQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsYUFBYSxJQUFFLENBQUMsQ0FBQyxJQUFHLENBQUMsS0FBRyxDQUFDLElBQUUsT0FBTyxLQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUMsT0FBTyxDQUFDLENBQUMsT0FBSyxDQUFDLENBQUMsYUFBYSxJQUFFLENBQUMsS0FBRyxDQUFDLEdBQUU7QUFBQyxZQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBRyxDQUFDLElBQUUsUUFBUSxLQUFHLENBQUMsQ0FBQyxRQUFRLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsRUFBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUEsRUFBQyxNQUFNO0FBQ3YwK0IsU0FBQyxHQUFDLENBQUMsQ0FBQyxhQUFhLENBQUE7T0FBQyxPQUFPLENBQUMsQ0FBQTtLQUFDLEVBQUMsUUFBUSxFQUFDLGtCQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxPQUFDLEdBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxFQUFDO0FBQUMsWUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksSUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQTtPQUFDLElBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1VBQUMsQ0FBQyxHQUFDLEVBQUMsR0FBRyxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLENBQUMsT0FBTyxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsS0FBRyxDQUFDLEdBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxJQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUMsSUFBSSxJQUFFLENBQUMsQ0FBQyxVQUFVLEdBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQSxBQUFDLEVBQUMsRUFBQyxLQUFLLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsRUFBQyxNQUFNLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFBQyxHQUFHLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFBO0tBQUMsRUFBQyxNQUFNLEVBQUMsZ0JBQVMsQ0FBQyxFQUFDO0FBQUMsT0FBQyxHQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLHFCQUFxQixFQUFFLENBQUMsT0FBTSxFQUFDLEtBQUssRUFBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxFQUFDLE1BQU0sRUFBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFDLEdBQUcsRUFBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUUsQ0FBQyxDQUFDLFdBQVcsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQSxBQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFFLENBQUMsQ0FBQyxXQUFXLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUEsQUFBQyxDQUFDLEVBQUMsQ0FBQTtLQUFDLEVBQUMsY0FBYyxFQUFDLHdCQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsT0FBQyxHQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMscUJBQXFCLEVBQUU7VUFBQyxDQUFDLEdBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxFQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsTUFBTSxFQUFDLENBQUMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDO1VBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxHQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1VBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEtBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxDQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLEtBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBRSxDQUFDLENBQUMsV0FBVyxFQUFDLENBQUMsQ0FBQyxJQUFJLElBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUMsQ0FBQyxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUMsQ0FBQyxDQUFBLEVBQUM7QUFBQyxZQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxJQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLElBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQTtPQUFDLE9BQU0sRUFBQyxHQUFHLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxNQUFNLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxLQUFLLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUFBO0tBQUMsRUFBQyxjQUFjLEVBQUMsd0JBQVMsQ0FBQyxFQUFDO0FBQUMsVUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxFQUFFLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEtBQUssQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxRQUFRLEVBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLFFBQVEsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUE7S0FBQyxFQUFDLGdCQUFnQixFQUFDLDBCQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLE9BQUMsR0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7VUFBQyxDQUFDLEdBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUMsQ0FBQyxDQUFDLFlBQVksR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1VBQUMsQ0FBQyxHQUFDLEVBQUMsR0FBRyxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLFNBQVMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxHQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztZQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1lBQUMsQ0FBQyxHQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEtBQUssS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsR0FBRyxJQUFFLENBQUMsQ0FBQyxNQUFNLElBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBQyxRQUFRLEdBQUMsUUFBUSxLQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxNQUFNLElBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBRSxDQUFDLENBQUMsR0FBRyxHQUFDLEtBQUssR0FBQyxNQUFNLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLElBQUksSUFBRSxDQUFDLENBQUMsS0FBSyxJQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUMsT0FBTyxHQUFDLE9BQU8sS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsS0FBSyxJQUFFLENBQUMsQ0FBQyxLQUFLLElBQUUsQ0FBQyxDQUFDLElBQUksR0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxLQUFLLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsTUFBTSxJQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBRSxDQUFDLENBQUMsR0FBRyxHQUFDLFFBQVEsR0FBQyxRQUFRLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsR0FBRyxJQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBRSxDQUFDLENBQUMsTUFBTSxHQUFDLEtBQUssR0FBQyxNQUFNLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsS0FBSyxJQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRSxDQUFDLENBQUMsSUFBSSxHQUFDLE9BQU8sR0FBQyxPQUFPLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsSUFBSSxJQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRSxDQUFDLENBQUMsS0FBSyxHQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsUUFBUSxLQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxFQUFDLElBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUM7QUFBQyxjQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxLQUFLLElBQUUsQ0FBQyxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxLQUFLLElBQUUsQ0FBQyxDQUFDLElBQUksS0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsT0FBTyxDQUFBLEFBQUMsQ0FBQTtTQUFDLE1BQUk7QUFBQyxjQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsTUFBTSxJQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsTUFBTSxJQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLFFBQVEsQ0FBQSxBQUFDLENBQUE7U0FBQztPQUFDLFFBQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFFLEtBQUksS0FBSztBQUFDLFdBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsTUFBTSxLQUFJLFFBQVE7QUFBQyxXQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUksTUFBTTtBQUFDLFdBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxDQUFDLENBQUMsTUFBTSxLQUFJLE9BQU87QUFBQyxXQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQSxDQUFDLFFBQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFFLEtBQUksS0FBSztBQUFDLFdBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEtBQUksUUFBUTtBQUFDLFdBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUksTUFBTTtBQUFDLFdBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUksT0FBTztBQUFDLFdBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUksUUFBUTtBQUFDLFdBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBQyxRQUFRLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUE7S0FBQyxFQUFDLGFBQWEsRUFBQyx1QkFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsT0FBQyxHQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDLElBQUcsQ0FBQyxFQUFDO0FBQUMsWUFBSSxDQUFDLEdBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDO1lBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFDLGdCQUFnQixHQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUcsQ0FBQyxFQUFDO0FBQUMsY0FBSSxDQUFDLEdBQUMsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUMsSUFBSSxFQUFDLEVBQUUsRUFBQyxLQUFLLEVBQUMsRUFBRSxFQUFDLENBQUMsS0FBRyxDQUFDLEdBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBQyxRQUFRLEtBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEVBQUMsT0FBTyxLQUFLLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLFNBQVMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsUUFBUTtjQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2NBQUMsQ0FBQyxHQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRSxLQUFJLEtBQUs7QUFBQyxlQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsR0FBQyxHQUFHLEdBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUksUUFBUTtBQUFDLGVBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSSxNQUFNO0FBQUMsZUFBQyxDQUFDLEtBQUssR0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsTUFBTSxLQUFJLE9BQU87QUFBQyxlQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsR0FBQyxHQUFHLEdBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FBQztPQUFDO0tBQUMsRUFBQyxDQUFBO0NBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsRUFBQyxDQUFDLHVCQUF1QixFQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUMsQ0FBQyxRQUFRLEVBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxNQUFJLENBQUMsR0FBQyx3RkFBd0YsQ0FBQyxPQUFNLEVBQUMsS0FBSyxFQUFDLGVBQVMsQ0FBQyxFQUFDO0FBQUMsVUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxFQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsK0dBQStHLEdBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLE9BQU0sRUFBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsVUFBVSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsV0FBVyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFBO0tBQUMsRUFBQyxDQUFBO0NBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLHdCQUF3QixFQUFDLENBQUMsUUFBUSxFQUFDLFVBQVUsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxJQUFJLEVBQUMsVUFBVSxFQUFDLFdBQVcsRUFBQyxTQUFTLEVBQUMsWUFBWSxFQUFDLFlBQVksRUFBQyxjQUFjLEVBQUMsb0JBQW9CLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxXQUFTLENBQUMsR0FBRTtBQUFDLEtBQUMsQ0FBQyxjQUFjLEtBQUcsQ0FBQyxDQUFDLGNBQWMsR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUEsQUFBQyxFQUFDLENBQUMsRUFBRSxDQUFBO0dBQUMsU0FBUyxDQUFDLEdBQUU7QUFBQyxLQUFDLENBQUMsUUFBUSxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQTtHQUFDLElBQUksQ0FBQztNQUFDLENBQUM7TUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxDQUFDO01BQUMsQ0FBQyxHQUFDLEdBQUc7TUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxLQUFHLENBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFBLEFBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsRUFBQyxVQUFTLENBQUMsRUFBQztBQUFDLEtBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBO0dBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFFLENBQUM7TUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsS0FBRyxD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QUMsTUFBTSxFQUFDLGVBQWUsRUFBQyxDQUFDLENBQUMsRUFBQyxXQUFXLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFDLFVBQVUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBQyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBQyxJQUFJLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLEdBQUcsRUFBQyxLQUFLLEVBQUMsSUFBSSxFQUFDLEtBQUssRUFBQyxjQUFjLEVBQUMsYUFBYSxFQUFDLFlBQVksRUFBQyxNQUFNLEVBQUMsT0FBTyxFQUFDLENBQUMsRUFBQyxVQUFVLEVBQUMsMkVBQTJFLEVBQUMsS0FBSyxFQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsZ0JBQWdCLEVBQUMsS0FBSyxFQUFDLGtCQUFrQixFQUFDLGFBQWEsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGlDQUFpQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLEVBQUMsV0FBVyxFQUFDLE1BQU0sRUFBQyx3QkFBd0IsRUFBQyxrQkFBa0IsRUFBQyxnQkFBZ0IsRUFBQyxLQUFLLEVBQUMsT0FBTyxFQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsZ0JBQWdCLEVBQUMsc0JBQXNCLEVBQUMsUUFBUSxFQUFDLGdCQUFnQixFQUFDLENBQUMsRUFBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLHlCQUF5QixDQUFDLElBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBQyxDQUFDLENBQUMseUJBQXlCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxTQUFGLENBQUMsR0FBVztBQUFDLEtBQUMsSUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0dBQUM7TUFBQyxDQUFDLEdBQUMsU0FBRixDQUFDLEdBQVc7QUFBQyxLQUFDLENBQUMsT0FBTyxHQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUE7R0FBQztNQUFDLENBQUMsR0FBQyxTQUFGLENBQUMsQ0FBVSxDQUFDLEVBQUM7QUFBQyxXQUFPLENBQUMsR0FBQyxVQUFVLEdBQUMsQ0FBQyxDQUFBO0dBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBQyxVQUFTLENBQUMsRUFBQztBQUFDLEtBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsU0FBRixDQUFDLENBQVUsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFdBQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUMsQ0FBQyxJQUFFLENBQUMsR0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEtBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQztNQUFDLENBQUMsR0FBQyxTQUFGLENBQUMsQ0FBVSxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDLEdBQUMsRUFBQyxVQUFVLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsVUFBSSxDQUFDLEdBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBRyxDQUFDLElBQUUsQ0FBQyxFQUFDLElBQUcsQ0FBQyxJQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxFQUFDO0FBQUMsU0FBQyxDQUFDLFNBQVMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsS0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxZQUFVO0FBQUMsV0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7U0FBQyxFQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxjQUFjLEdBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsRUFBQyxDQUFDLENBQUEsRUFBQztBQUFDLGNBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLEtBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQTtTQUFDO09BQUMsTUFBSyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFDLEVBQUMsWUFBVTtBQUFDLE9BQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxDQUFDLENBQUE7R0FBQyxDQUFDLENBQUMsS0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsWUFBVTtBQUFDLEtBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFFLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxjQUFjLEdBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLEdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUssR0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUM7TUFBQyxDQUFDLEdBQUMsU0FBRixDQUFDLENBQVUsQ0FBQyxFQUFDO0FBQUMsS0FBQyxHQUFDLENBQUMsQ0FBQyxZQUFVO0FBQUMsT0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtHQUFDO01BQUMsQ0FBQyxHQUFDLFNBQUYsQ0FBQyxHQUFXO0FBQUMsS0FBQyxJQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxZQUFZLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxLQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBO0dBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxHQUFDLFVBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFFBQUksQ0FBQztRQUFDLENBQUM7UUFBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsTUFBTSxFQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsTUFBTSxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsS0FBRyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsWUFBVTtBQUFDLE9BQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtLQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsUUFBRyxDQUFDLEtBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUUsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUM7QUFBQyxVQUFHLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxTQUFTLEtBQUcsQ0FBQyxLQUFHLENBQUMsQ0FBQyxLQUFLLElBQUUsRUFBRSxLQUFHLENBQUMsQ0FBQyxLQUFLLENBQUEsQUFBQyxJQUFFLENBQUMsS0FBRyxDQUFDLENBQUMsS0FBSyxJQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUMsT0FBTyxDQUFDLEVBQUUsRUFBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBTyxDQUFDLENBQUMsS0FBSyxHQUFFLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRTtBQUFDLFdBQUMsQ0FBQyxNQUFNLENBQUMsWUFBVTtBQUFDLG1CQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsSUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsR0FBQyxDQUFDLENBQUMsWUFBVTtBQUFDLGVBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUMsQ0FBQTthQUFDLEVBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEdBQUMsQ0FBQyxDQUFDLGNBQWMsR0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQyxDQUFBO1dBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxFQUFFO0FBQUMsV0FBQyxDQUFDLGVBQWUsRUFBRSxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLEtBQUssRUFBRTtBQUFDLFdBQUMsQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFBLEdBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEtBQUssRUFBRTtBQUFDLFdBQUMsQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQSxHQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQSxDQUFDO0tBQUM7R0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxLQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxLQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsVUFBVSxJQUFFLENBQUMsQ0FBQyxZQUFVO0FBQUMsT0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBO0dBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsS0FBQyxJQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFFLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxTQUFTLElBQUUsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBVTtBQUFDLGFBQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsWUFBVTtBQUFDLFNBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUMsQ0FBQTtPQUFDLEVBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxLQUFHLENBQUMsQ0FBQyxVQUFVLEdBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUE7R0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUMsU0FBSCxFQUFFLENBQVUsQ0FBQyxFQUFDO0FBQUMsS0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxNQUFNLElBQUUsQ0FBQyxLQUFHLENBQUMsQ0FBQyxLQUFLLElBQUUsQ0FBQyxLQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFHLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxPQUFPLElBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBLEFBQUMsQ0FBQTtHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUMsWUFBVTtBQUFDLEtBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQSxJQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBQyxDQUFDLEtBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7R0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBQyxDQUFDLEdBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUMsSUFBSSxDQUFDLElBQUksR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxLQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLGNBQWMsR0FBQyxDQUFDLENBQUMsUUFBUSxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsYUFBTyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxLQUFHLENBQUMsSUFBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBRSxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsRUFBRSxDQUFBLEFBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUEsQUFBQyxDQUFBO0tBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsVUFBSSxDQUFDO1VBQUMsQ0FBQztVQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxJQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQUFBQyxDQUFBO0tBQUMsQ0FBQyxDQUFBO0dBQUMsQ0FBQTtDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUMsWUFBVTtBQUFDLFNBQU0sRUFBQyxVQUFVLEVBQUMsd0JBQXdCLEVBQUMsT0FBTyxFQUFDLENBQUMsU0FBUyxFQUFDLGtCQUFrQixFQUFDLGNBQWMsQ0FBQyxFQUFDLElBQUksRUFBQyxjQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLE9BQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUMsRUFBQyxDQUFBO0NBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBQyxDQUFDLFlBQVksRUFBQyxVQUFTLENBQUMsRUFBQztBQUFDLFNBQU0sRUFBQyxLQUFLLEVBQUMsRUFBQyxPQUFPLEVBQUMsR0FBRyxFQUFDLEtBQUssRUFBQyxHQUFHLEVBQUMsTUFBTSxFQUFDLEdBQUcsRUFBQyxRQUFRLEVBQUMsR0FBRyxFQUFDLGNBQWMsRUFBQyxHQUFHLEVBQUMsTUFBTSxFQUFDLEdBQUcsRUFBQyxZQUFZLEVBQUMsR0FBRyxFQUFDLFFBQVEsRUFBQyxHQUFHLEVBQUMsRUFBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDLEVBQUMsV0FBVyxFQUFDLHFCQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxhQUFPLENBQUMsQ0FBQyxnQkFBZ0IsSUFBRSw2Q0FBNkMsQ0FBQTtLQUFDLEVBQUMsSUFBSSxFQUFDLGNBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxPQUFDLENBQUMsV0FBVyxHQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxZQUFVO0FBQUMsWUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQTtPQUFDLEVBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLGVBQU8sQ0FBQyxDQUFDLE1BQU0sS0FBRyxDQUFDLENBQUE7T0FBQyxFQUFDLENBQUMsQ0FBQyxZQUFZLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxTQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQTtPQUFDLEVBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxZQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxZQUFVO0FBQUMsV0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFDLFNBQVMsRUFBQyxDQUFDLEVBQUMsR0FBRyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUE7U0FBQyxFQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBQyxTQUFTLEVBQUMsQ0FBQyxFQUFDLEdBQUcsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBO09BQUMsQ0FBQTtLQUFDLEVBQUMsQ0FBQTtDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBQyxDQUFDLGtCQUFrQixFQUFDLFVBQVUsRUFBQyxRQUFRLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFNBQU0sRUFBQyxLQUFLLEVBQUMsRUFBQyxLQUFLLEVBQUMsR0FBRyxFQUFDLEtBQUssRUFBQyxHQUFHLEVBQUMsS0FBSyxFQUFDLEdBQUcsRUFBQyxFQUFDLElBQUksRUFBQyxjQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsVUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUUsNkNBQTZDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLFlBQUksQ0FBQyxHQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7T0FBQyxDQUFDLENBQUE7S0FBQyxFQUFDLENBQUE7Q0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsdUJBQXVCLEVBQUMsQ0FBQyxNQUFNLEVBQUMsV0FBVyxFQUFDLE1BQU0sRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLHdCQUF3QixFQUFDLE1BQU0sQ0FBQyxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUMsV0FBTSxRQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztNQUFBO0dBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxXQUFNLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLCtDQUErQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUEsQ0FBRSxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFDLHFCQUFxQixDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsS0FBRyxDQUFDLEdBQUMs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RSxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsd1JBQXdSLENBQUMsRUFBQyxPQUFPLENBQUMsa0JBQWtCLEdBQUMsQ0FBQyxDQUFDLENBQUE7Q0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxZQUFVO0FBQUMsR0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsYUFBYSxJQUFFLENBQUMsT0FBTyxDQUFDLGdCQUFnQixJQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnU0FBZ1MsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBQyxDQUFDLENBQUMsQ0FBQTtDQUFDLENBQUMsRUFBQyxPQUFPLENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVU7QUFBQyxHQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxhQUFhLElBQUUsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLElBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLG9GQUFvRixDQUFDLEVBQUMsT0FBTyxDQUFDLGlCQUFpQixHQUFDLENBQUMsQ0FBQyxDQUFBO0NBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8vICogKiAqXHJcbi8vICBBTkFMWVRJQ1MgQ09OVFJPTExFUlxyXG4vLyAgRm9yIGVhc2Utb2YtdXNlLCBiZXR0ZXIgRFJZLCBiZXR0ZXIgcHJldmVudGlvbiBvZiBKUyBlcnJvcnMgd2hlbiBhZHMgYXJlIGJsb2NrZWRcclxuLy8gKiAqICpcclxuXHJcbmZ1bmN0aW9uIGFuYWx5dGljc0V2ZW50KGRhdGFPYmopIHtcclxuICAgIGlmKHR5cGVvZiB1dGFnICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHV0YWcubGluayhkYXRhT2JqKTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCB7IGFuYWx5dGljc0V2ZW50IH07XHJcbiIsIi8qIGdsb2JhbCBhbmd1bGFyICovXHJcblxyXG4vLyBzZXQgdXAgY29udHJvbGxlciBhbmQgcGFzcyBkYXRhIHNvdXJjZVxyXG4vLyBub3RlOiBhIGNvbnRyb2xsZXIgaXMgdXN1YWxseSBkZXN0cm95ZWQgJiByZWNyZWF0ZWQgd2hlbiB0aGUgcm91dGUgY2hhbmdlc1xyXG52YXIgSW5mb3JtYVR5cGVhaGVhZENvbnRyb2xsZXIgPSBmdW5jdGlvbigkc2NvcGUsIGdldENvbXBhbmllc1NlcnZpY2UpIHtcclxuXHJcbiAgICAkc2NvcGUuJHdhdGNoKCdwYWdlSWQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBnZXRDb21wYW5pZXNTZXJ2aWNlLmZldGNoQ29tcGFuaWVzKCRzY29wZS5wYWdlSWQpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBjb21wYW5pZXMgPSBbXTtcclxuICAgICAgICAgICAgY29tcGFuaWVzID0gJC5tYXAocmVzcG9uc2UuZGF0YSwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuY29tcGFueU5hbWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmNvbXBhbmllcyA9IGNvbXBhbmllcztcclxuXHJcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3JcIik7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlYXNvbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbnZhciBpbmZvcm1hU2VhcmNoQXBwID0gYW5ndWxhci5tb2R1bGUoJ2luZm9ybWFTZWFyY2hBcHAnKTtcclxuaW5mb3JtYVNlYXJjaEFwcC5jb250cm9sbGVyKFwiSW5mb3JtYVR5cGVhaGVhZENvbnRyb2xsZXJcIiwgWyckc2NvcGUnLCAnZ2V0Q29tcGFuaWVzU2VydmljZScsIEluZm9ybWFUeXBlYWhlYWRDb250cm9sbGVyXSk7IiwiLyogZ2xvYmFsIGFuZ3VsYXIgKi9cclxuXHJcbnZhciBFbWFpbFJzc0NvbnRyb2xsZXIgPSBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24pIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuXHJcbiAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJGxvY2F0aW9uLnNlYXJjaCgpO1xyXG4gICAgfSwgZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICAgIHZhciBwYXJhbXMgPSAkbG9jYXRpb24uc2VhcmNoKCk7XHJcbiAgICAgICBcclxuICAgICAgICB2YXIgblVybCA9IFwiXCI7XHJcbiAgICAgICAgZm9yICh2YXIgaWR4a2V5IGluIHBhcmFtcykge1xyXG4gICAgICAgICAgICBpZiAoaWR4a2V5ID09IFwic29ydEJ5XCIpIHtcclxuICAgICAgICAgICAgICAgIG5VcmwgPSBuVXJsICsgXCImXCIgKyBcInNvcnRCeT1kYXRlXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpZHhrZXkgPT0gXCJzb3J0T3JkZXJcIikge1xyXG4gICAgICAgICAgICAgICAgblVybCA9IG5VcmwgKyBcIiZcIiArIFwic29ydE9yZGVyPWRlc2NcIjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGlkeGtleSAhPSBcInNvcnRCeVwiICYmIGlkeGtleSAhPSBcInNvcnRPcmRlclwiKSB7XHJcbiAgICAgICAgICAgICAgICBuVXJsID0gblVybCArIFwiJlwiICsgaWR4a2V5ICsgXCI9XCIgKyBwYXJhbXNbaWR4a2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHRcdFx0XHQvLyBzdHJpcCBsZWFkaW5nICZcclxuICAgICAgICBpZiAoblVybC5zdGFydHNXaXRoKCcmJykpIHtcclxuXHQgICAgICAgIG5VcmwgPSBuVXJsLnN1YnN0cigxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHNjb3BlLmN1cnJlbnRMb2NhdGlvbiA9IFwiP1wiICsgblVybDtcclxuICAgIH0pO1xyXG5cclxuICAgICRzY29wZS50ZXN0dmFyID0gJ2hlbGxvJztcclxuXHJcbn07XHJcbnZhciBpbmZvcm1hU2VhcmNoQXBwID0gYW5ndWxhci5tb2R1bGUoJ2luZm9ybWFTZWFyY2hBcHAnKTtcclxuaW5mb3JtYVNlYXJjaEFwcC5jb250cm9sbGVyKFwiRW1haWxSc3NDb250cm9sbGVyXCIsIFsnJHNjb3BlJywgJyRsb2NhdGlvbicsIEVtYWlsUnNzQ29udHJvbGxlcl0pO1xyXG4iLCIvKiBnbG9iYWwgYW5hbHl0aWNzX2RhdGEgKi9cclxuaW1wb3J0IHsgYW5hbHl0aWNzRXZlbnQgfSBmcm9tICcuLi8uLi9jb250cm9sbGVycy9hbmFseXRpY3MtY29udHJvbGxlcic7XHJcblxyXG52YXIgSGVhZGxpbmVTZWFyY2hDb250cm9sbGVyID0gZnVuY3Rpb24gKCRzY29wZSwgc2VhcmNoU2VydmljZSwgc2VhcmNoQm9vdHN0cmFwcGVyKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICAgIHZtLnNlYXJjaFNlcnZpY2UgPSBzZWFyY2hTZXJ2aWNlO1xyXG4gICAgdm0uc2VhcmNoQm9vdHN0cmFwcGVyID0gc2VhcmNoQm9vdHN0cmFwcGVyO1xyXG5cclxuICAgIHZtLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZmlsdGVyID0gdm0uc2VhcmNoU2VydmljZS5nZXRGaWx0ZXIoJ2hlYWRsaW5lc09ubHknKTtcclxuXHJcbiAgICAgICAgaWYgKCFmaWx0ZXIpIHtcclxuICAgICAgICAgICAgdm0uc2VhcmNoQm9vdHN0cmFwcGVyLmNyZWF0ZUZpbHRlcignaGVhZGxpbmVzT25seScsICcxJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGZpbHRlci5fdmFsdWUgPT09ICcxJykge1xyXG5cclxuXHRcdFx0XHRmaWx0ZXIuc2V0VmFsdWUoJycpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICBmaWx0ZXIuc2V0VmFsdWUoJzEnKTtcclxuXHRcdFx0XHRhbmFseXRpY3NFdmVudCggJC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsIHtcclxuXHRcdFx0XHRcdGV2ZW50X25hbWU6ICdzZWFyY2hfdXRpbGl0eScsXHJcblx0XHRcdFx0XHRzZWFyY2hfdXRpbGl0eTogJ3NlYXJjaF9oZWFkbGluZXNfb25seSdcclxuXHRcdFx0XHR9KSApO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdm0uaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZmlsdGVyID0gdm0uc2VhcmNoU2VydmljZS5nZXRGaWx0ZXIoJ2hlYWRsaW5lc09ubHknKTtcclxuICAgICAgICByZXR1cm4gZmlsdGVyICE9PSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbn07XHJcbnZhciBpbmZvcm1hU2VhcmNoQXBwID0gYW5ndWxhci5tb2R1bGUoJ2luZm9ybWFTZWFyY2hBcHAnKTtcclxuaW5mb3JtYVNlYXJjaEFwcC5jb250cm9sbGVyKFwiSGVhZGxpbmVTZWFyY2hDb250cm9sbGVyXCIsIFsnJHNjb3BlJywgJ3NlYXJjaFNlcnZpY2UnLCAnc2VhcmNoQm9vdHN0cmFwcGVyJywgSGVhZGxpbmVTZWFyY2hDb250cm9sbGVyXSk7XHJcbiIsIu+7v3ZhciBIZWFkbGluZVRvZ2dsZUNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoJHNjb3BlLCB2aWV3SGVhZGxpbmVzU3RhdGVTZXJ2aWNlKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAkc2NvcGUuaGVhZGxpbmVzT25seSA9IHZpZXdIZWFkbGluZXNTdGF0ZVNlcnZpY2U7XHJcblxyXG59O1xyXG52YXIgaW5mb3JtYVNlYXJjaEFwcCA9IGFuZ3VsYXIubW9kdWxlKCdpbmZvcm1hU2VhcmNoQXBwJyk7XHJcbmluZm9ybWFTZWFyY2hBcHAuY29udHJvbGxlcihcIkhlYWRsaW5lVG9nZ2xlQ29udHJvbGxlclwiLCBbJyRzY29wZScsICd2aWV3SGVhZGxpbmVzU3RhdGVTZXJ2aWNlJywgSGVhZGxpbmVUb2dnbGVDb250cm9sbGVyXSk7XHJcbiIsInZhciBpbmZvcm1hRGF0ZXNDb250cm9sbGVyID0gZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAvKlxyXG4gICAgJHNjb3BlLmRhdGVWYWx1ZXMgYW5kICRzY29wZS5kYXRlcGlja2VycyBhcmUgaW4gSW5mb3JtYUZhY2V0c0NvbnRyb2xsZXIuanNcclxuICAgIFVzaW5nIG5nLWlmIGNyZWF0ZXMgYSBuZXcgc2NvcGUgZm9yIHRoZSBkYXRhIGluIHRoaXMgY29udHJvbGxlciwgd2hpY2hcclxuICAgIGNhdXNlcyB0aGUgZGF0ZSB2YWx1ZXMgdG8gcmVzZXQgb24gY2hhbmdlLiBCeSBzdG9yaW5nIGluIHRoZSBwYXJlbnQsXHJcbiAgICB0aG9zZSB2YWx1ZXMgc3Vydml2ZSBhbnkgc2NvcGUgcmVzZXRzIGhlcmUuXHJcbiAgKi9cclxuICBcclxuICAvLyBncmFiIHRvZGF5IGFuZCBpbmplY3QgaW50byBmaWVsZFxyXG4gICRzY29wZS50b2RheSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHNjb3BlLmRhdGVWYWx1ZXMuZHRGcm9tID0gbmV3IERhdGUoKTtcclxuICAgICRzY29wZS5kYXRlVmFsdWVzLmR0VG8gPSBuZXcgRGF0ZSgpO1xyXG4gIH07XHJcblxyXG4gIC8vIHJ1biB0b2RheSgpIGZ1bmN0aW9uXHJcbiAgLy8gJHNjb3BlLnRvZGF5KCk7XHJcblxyXG4gIC8vIHNldHVwIGNsZWFyXHJcbiAgJHNjb3BlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgJHNjb3BlLmRhdGVWYWx1ZXMuZHRGcm9tID0gJyc7XHJcbiAgICAkc2NvcGUuZGF0ZVZhbHVlcy5kdFRvID0gJyc7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmZyb21EYXRlT3B0aW9ucyA9IHtcclxuICAgIHNob3dXZWVrczogZmFsc2UsXHJcbiAgICBmb3JtYXREYXlIZWFkZXI6ICdFRUUnLFxyXG4gICAgZm9ybWF0RGF5OiAnZCcsXHJcbiAgICBzdGFydGluZ0RheTogMCwgLy8gU3VuZGF5XHJcbiAgICBkYXRlRGlzYWJsZWQ6IGRpc2FibGVkRnJvbSxcclxuICAgIGZvcm1hdFllYXI6ICd5eScsXHJcbiAgICBtYXhEYXRlOiBuZXcgRGF0ZSgpLFxyXG4gICAgbWluRGF0ZTogbmV3IERhdGUoMTkwMCwgMSwgMSlcclxuICB9O1xyXG5cclxuICAkc2NvcGUudG9EYXRlT3B0aW9ucyA9IHtcclxuICAgIHNob3dXZWVrczogZmFsc2UsXHJcbiAgICBmb3JtYXREYXlIZWFkZXI6ICdFRUUnLFxyXG4gICAgZm9ybWF0RGF5OiAnZCcsXHJcbiAgICBzdGFydGluZ0RheTogMCwgLy8gU3VuZGF5XHJcbiAgICBkYXRlRGlzYWJsZWQ6IGRpc2FibGVkVG8sXHJcbiAgICBmb3JtYXRZZWFyOiAneXknLFxyXG4gICAgbWF4RGF0ZTogbmV3IERhdGUoKSxcclxuICAgIG1pbkRhdGU6IG5ldyBEYXRlKDE5MDAsIDEsIDEpXHJcbiAgfTtcclxuXHJcbiAgLy8gUHJldmVudCB1c2VyIGZyb20gc2VsZWN0aW5nIGRhdGUgaWYgZGF0ZSBpcyBpbiB0aGUgZnV0dXJlLCBPUiBpZiB0aGUgZGF0ZVxyXG4gIC8vIGlzIGxhdGVyIHRoYW4gdGhlIHNlbGVjdGVkICd0bycgZGF0ZS4gJ2Zyb20nIGNhbid0IGJlIGxhdGVyIHRoYW4gJ3RvJ1xyXG4gIGZ1bmN0aW9uIGRpc2FibGVkRnJvbShkYXRhKSB7XHJcbiAgICAgIHZhciBkYXRlID0gZGF0YS5kYXRlO1xyXG4gICAgICB2YXIgdG9tb3Jyb3cgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICB0b21vcnJvdy5zZXREYXRlKHRvbW9ycm93LmdldERhdGUoKSArIDEpO1xyXG5cclxuICAgICAgLy8gSWYgbm8gZW5kLXRpbWUgZXhpc3RzLCB1c2UgYSB2ZXJ5IGxhcmdlIG51bWJlciBzbyBhbGwgdGltZXN0YW1wcyBhcmUgdmFsaWRcclxuICAgICAgdmFyIHRvVGltZXN0YW1wID0gJHNjb3BlLmRhdGVWYWx1ZXMuZHRUbyA/ICRzY29wZS5kYXRlVmFsdWVzLmR0VG8uZ2V0VGltZSgpIDogTWF0aC5wb3coOTksIDkpO1xyXG4gICAgICByZXR1cm4gKGRhdGUuZ2V0VGltZSgpID4gdG9tb3Jyb3cuZ2V0VGltZSgpXHJcbiAgICAgICAgfHwgZGF0ZS5nZXRUaW1lKCkgPiB0b1RpbWVzdGFtcCk7XHJcbiAgfTtcclxuXHJcbiAgLy8gUHJldmVudCB1c2VyIGZyb20gc2VsZWN0aW5nIGRhdGUgaWYgZGF0ZSBpcyBpbiB0aGUgZnV0dXJlLCBPUiBpZiBkYXRlXHJcbiAgLy8gaXMgYmVmb3JlIHNlbGVjdGVkICdmcm9tJyBkYXRlLiAndG8nIG11c3QgYmUgbGF0ZXIgdGhhbiAnZnJvbSdcclxuICBmdW5jdGlvbiBkaXNhYmxlZFRvKGRhdGEpIHtcclxuICAgICAgdmFyIGRhdGUgPSBkYXRhLmRhdGU7XHJcbiAgICAgIHZhciB0b21vcnJvdyA9IG5ldyBEYXRlKCk7XHJcbiAgICAgIHRvbW9ycm93LnNldERhdGUodG9tb3Jyb3cuZ2V0RGF0ZSgpICsgMSk7XHJcblxyXG4gICAgICAvLyBJZiBubyBzdGFydC10aW1lIGV4aXN0cywgdXNlIGEgdmVyeSBsYXJnZSBudW1iZXIgc28gYWxsIHRpbWVzdGFtcHMgYXJlIHZhbGlkXHJcbiAgICAgIHZhciBmcm9tVGltZXN0YW1wID0gJHNjb3BlLmRhdGVWYWx1ZXMuZHRGcm9tID8gJHNjb3BlLmRhdGVWYWx1ZXMuZHRGcm9tLmdldFRpbWUoKSA6IDA7XHJcbiAgICAgIHJldHVybiAoZGF0ZS5nZXRUaW1lKCkgPiB0b21vcnJvdy5nZXRUaW1lKClcclxuICAgICAgICB8fCBkYXRlLmdldFRpbWUoKSA8IGZyb21UaW1lc3RhbXApO1xyXG4gIH07XHJcblxyXG4gIC8vIG9wZW4gbWluLWNhbFxyXG4gICRzY29wZS5vcGVuID0gZnVuY3Rpb24oJGV2ZW50LCB3aGljaCkge1xyXG4gICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgLy8gRGF0ZXBpY2tlciBwb3B1cHMgd2lsbCBjbG9zZSB3aGVuIGNsaWNrZWQgb3V0c2lkZSwgYnV0IGl0J3MgcG9zc2libGUgdG9cclxuICAgIC8vIG9wZW4gYm90aCBhdCB0aGUgc2FtZSB0aW1lLiBUaGlzIHByZXZlbnRzIHRoYXQuXHJcbiAgICBzd2l0Y2ggKHdoaWNoKSB7XHJcbiAgICAgIGNhc2UgJ2R0RnJvbSc6XHJcbiAgICAgICAgJHNjb3BlLmRhdGVwaWNrZXJzLmR0RnJvbSA9IHRydWU7XHJcbiAgICAgICAgJHNjb3BlLmRhdGVwaWNrZXJzLmR0VG8gPSBmYWxzZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnZHRUbyc6XHJcbiAgICAgICAgJHNjb3BlLmRhdGVwaWNrZXJzLmR0RnJvbSA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5kYXRlcGlja2Vycy5kdFRvID0gdHJ1ZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICAkc2NvcGUuZGF0ZXBpY2tlcnMuZHRGcm9tID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLmRhdGVwaWNrZXJzLmR0VG8gPSBmYWxzZTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9O1xyXG5cclxufTtcclxuXHJcbnZhciBpbmZvcm1hU2VhcmNoQXBwID0gYW5ndWxhci5tb2R1bGUoJ2luZm9ybWFTZWFyY2hBcHAnKTtcclxuaW5mb3JtYVNlYXJjaEFwcC5jb250cm9sbGVyKFwiSW5mb3JtYURhdGVzQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCIkbG9jYXRpb25cIiwgaW5mb3JtYURhdGVzQ29udHJvbGxlcl0pO1xyXG4iLCLvu78vKiBnbG9iYWwgXywgZGF0ZXNPYmplY3QsIGFuZ3VsYXIsIGFuYWx5dGljc19kYXRhICovXHJcbmltcG9ydCB7IGFuYWx5dGljc0V2ZW50IH0gZnJvbSAnLi4vLi4vY29udHJvbGxlcnMvYW5hbHl0aWNzLWNvbnRyb2xsZXInO1xyXG5cclxudmFyIEluZm9ybWFGYWNldENvbnRyb2xsZXIgPSBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkbG9jYXRpb24sICRodHRwLCAkYW5jaG9yU2Nyb2xsLCAkdGltZW91dCwgIHNlYXJjaFNlcnZpY2UsIHNlYXJjaEJvb3RzdHJhcHBlciwgZmFjZXRBdmFpbGFiaWxpdHlTZXJ2aWNlKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAvLyBCaW5kIGB0aGlzYCB0byB2bSAtIGEgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZpZXcgbW9kZWxcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gICAgLy8gR2VuZXJhbCBGYWNldCBzdHVmZlxyXG4gICAgdm0uZmFjZXRHcm91cHMgPSBzZWFyY2hTZXJ2aWNlLmdldEZhY2V0R3JvdXBzKCk7XHJcbiAgICB2bS5zZWFyY2hTZXJ2aWNlID0gc2VhcmNoU2VydmljZTtcclxuICAgIHZtLmxvY2F0aW9uID0gJGxvY2F0aW9uO1xyXG4gICAgdm0uYW5jaG9yU2Nyb2xsID0gJGFuY2hvclNjcm9sbDtcclxuICAgIHZtLnNlYXJjaEJvb3RzdHJhcHBlciA9IHNlYXJjaEJvb3RzdHJhcHBlcjtcclxuICAgIHZtLk1heEZhY2V0U2hvdyA9IDU7XHJcbiAgICB2bS5zaG93aW5nT25seVN1YnNjcmlwdGlvbnMgPSBmYWxzZTtcclxuXHJcbiAgICBcclxuICAgIHZtLmNvbXBhbmllcyA9IHsgXCJjb21wYW5pZXNcIjogXCJcIiwgXCJpc0NvbXBhbnlTZWxlY3RlZFwiOiBmYWxzZSB9O1xyXG5cdCRyb290U2NvcGUuJHdhdGNoKCdmYWNldEF2YWlsYWJpbGl0eScsIGZ1bmN0aW9uICgpIHtcclxuXHRcdHZtLmFyZUZhY2V0c0Rpc2FibGVkID0gZmFjZXRBdmFpbGFiaWxpdHlTZXJ2aWNlLmZhY2V0c0FyZUVuYWJsZWQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIERhdGUgRmFjZXQgc3R1ZmZcclxuICAgIHZtLkRhdGVGaWx0ZXJzID0gW1xyXG4gICAgICAgIHsgbGFiZWw6ICdMYXN0IDI0IGhvdXJzJywga2V5OiAnZGF5Jywgc2VsZWN0ZWQ6IGZhbHNlIH0sXHJcbiAgICAgICAgeyBsYWJlbDogJ0xhc3QgMyBkYXlzJywga2V5OiAndGhyZWVkYXlzJywgc2VsZWN0ZWQ6IGZhbHNlIH0sXHJcbiAgICAgICAgeyBsYWJlbDogJ0xhc3Qgd2VlaycsIGtleTogJ3dlZWsnLCBzZWxlY3RlZDogZmFsc2UgfSxcclxuICAgICAgICB7IGxhYmVsOiAnTGFzdCBtb250aCcsIGtleTogJ21vbnRoJywgc2VsZWN0ZWQ6IGZhbHNlIH0sXHJcbiAgICAgICAgeyBsYWJlbDogJ0xhc3QgeWVhcicsIGtleTogJ3llYXInLCBzZWxlY3RlZDogZmFsc2UgfSxcclxuICAgICAgICB7IGxhYmVsOiAnU2VsZWN0IGRhdGUgcmFuZ2UnLCBrZXk6ICdjdXN0b20nLCBzZWxlY3RlZDogZmFsc2UgfVxyXG4gICAgXTtcclxuXHJcbiAgICB2bS5vcmlnaW5hbEdyb3VwID0gW107XHJcblxyXG4gICAgdmFyIGRUb2RheSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IERhdGUoKS5jbGVhclRpbWUoKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGpzRGF0ZXMgPSB7XHJcbiAgICAgICAgbWludXMxWWVhcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIganNEYXRlVG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoanNEYXRlVG9kYXkuc2V0RnVsbFllYXIoanNEYXRlVG9kYXkuZ2V0RnVsbFllYXIoKSAtIDEpKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1pbnVzMU1vbnRoOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBqc0RhdGVUb2RheSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgIHZhciBtID0ganNEYXRlVG9kYXkuZ2V0TW9udGgoKTtcclxuICAgICAgICAgICAganNEYXRlVG9kYXkuc2V0TW9udGgoanNEYXRlVG9kYXkuZ2V0TW9udGgoKSAtIDEpO1xyXG5cclxuICAgICAgICAgICAgLy8gSWYgc3RpbGwgaW4gc2FtZSBtb250aCwgc2V0IGRhdGUgdG8gbGFzdCBkYXkgb2YgcHJldmlvdXMgbW9udGhcclxuICAgICAgICAgICAgaWYgKGpzRGF0ZVRvZGF5LmdldE1vbnRoKCkgPT0gbSkge1xyXG4gICAgICAgICAgICAgICAganNEYXRlVG9kYXkuc2V0RGF0ZSgwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoanNEYXRlVG9kYXkuc2V0SG91cnMoMCwgMCwgMCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWludXNYZGF5czogZnVuY3Rpb24gKGRheXMpIHtcclxuICAgICAgICAgICAgdmFyIGpzRGF0ZVRvZGF5ID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGpzRGF0ZVRvZGF5LnNldERhdGUoanNEYXRlVG9kYXkuZ2V0RGF0ZSgpIC0gZGF5cykpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdmFyIGZvcm1hdERhdGVPYmplY3QgPSBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgIHJldHVybiAoZC5nZXRNb250aCgpICsgMSkgKyAnLycgKyBkLmdldERhdGUoKSArICcvJyArIGQuZ2V0RnVsbFllYXIoKTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uZGF0ZXNPYmplY3QgPSB7XHJcbiAgICAgICAgeWVhcjogZm9ybWF0RGF0ZU9iamVjdChqc0RhdGVzLm1pbnVzMVllYXIoKSksXHJcbiAgICAgICAgZGF5OiBmb3JtYXREYXRlT2JqZWN0KGpzRGF0ZXMubWludXNYZGF5cygxKSksXHJcbiAgICAgICAgdGhyZWVkYXlzOiBmb3JtYXREYXRlT2JqZWN0KGpzRGF0ZXMubWludXNYZGF5cygzKSksXHJcbiAgICAgICAgbW9udGg6IGZvcm1hdERhdGVPYmplY3QoanNEYXRlcy5taW51czFNb250aCgpKSxcclxuICAgICAgICB3ZWVrOiBmb3JtYXREYXRlT2JqZWN0KGpzRGF0ZXMubWludXNYZGF5cyg3KSlcclxuICAgIH07XHJcblxyXG5cclxuICAgIHZtLnRpbWVzT2JqZWN0ID0ge1xyXG4gICAgICAgIHllYXI6IHsgaWQ6IFwieWVhclwiLCB2YWx1ZTogXCIxXCIgfSxcclxuICAgICAgICBkYXk6IHsgaWQ6IFwiaG91clwiLCB2YWx1ZTogXCIyNFwiIH0sXHJcbiAgICAgICAgdGhyZWVkYXlzOiB7IGlkOiBcImRheVwiLCB2YWx1ZTogXCIzXCIgfSxcclxuICAgICAgICBtb250aDogeyBpZDogXCJtb250aFwiLCB2YWx1ZTogXCIxXCIgfSxcclxuICAgICAgICB3ZWVrOiB7IGlkOiBcIndlZWtcIiwgdmFsdWU6IFwiMVwiIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gQ3JlYXRlIHBsYWNlaG9sZGVyIHZhbHVlcyBmb3IgRnJvbTogYW5kIFRvOiBkYXRlIHZhbHVlc1xyXG4gICAgJHNjb3BlLmRhdGVWYWx1ZXMgPSB7XHJcbiAgICAgICAgZHRGcm9tOiAnJyxcclxuICAgICAgICBkdFRvOiAnJ1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBuZWVkIHRvIGRpZmZlcmVudGlhdGUgdGhlIDIgZGF0ZXBpY2tlcnNcclxuICAgICRzY29wZS5kYXRlcGlja2VycyA9IHtcclxuICAgICAgICBkdEZyb206IGZhbHNlLFxyXG4gICAgICAgIGR0VG86IGZhbHNlXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIE9uIGZpcnN0IHJ1biwgY2hlY2sgYWxsIGRhdGUgZmlsdGVycyBhZ2FpbnN0IGRhdGUgZmlsdGVyIHNldCBpbiBVUkxcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uRGF0ZUZpbHRlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoJGxvY2F0aW9uLnNlYXJjaCgpLmRhdGVGaWx0ZXJMYWJlbCA9PSB2bS5EYXRlRmlsdGVyc1tpXS5rZXkpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIE1hcmsgZGF0ZSBmaWx0ZXIgYXMgc2VsZWN0ZWQgdG8gbWF0Y2ggVVJMXHJcbiAgICAgICAgICAgIHZtLkRhdGVGaWx0ZXJzW2ldLnNlbGVjdGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIC8vIElmIGRhdGUgZmlsdGVyIGlzIGEgZGF0ZSByYW5nZSBmaWx0ZXIuLi5cclxuICAgICAgICAgICAgaWYgKHZtLkRhdGVGaWx0ZXJzW2ldLmtleSA9PT0gJ2N1c3RvbScpIHtcclxuICAgICAgICAgICAgICAgIC8vIC4uLmNvbnZlcnQgdGhlIGRhdGUgZGF0YSBpbiB0aGUgVVJMIHRvIGBEYXRlYHMuLi5cclxuICAgICAgICAgICAgICAgIC8vIGV4YW1wbGU6IGRhdGU9My8yOS8yMDE1OzQvNS8yMDE2XHJcbiAgICAgICAgICAgICAgICB2YXIgc3BsaXREYXRlcyA9ICRsb2NhdGlvbi5zZWFyY2goKS5kYXRlLnNwbGl0KCc7Jyk7XHJcbiAgICAgICAgICAgICAgICAvLyAuLi5hbmQgdXBkYXRlIHRoZSBtb2RlbCBzbyB0aGUgVUkgc2hvd3MgdGhlIHJpZ2h0IGRhdGEuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGF0ZVZhbHVlcy5kdEZyb20gPSBuZXcgRGF0ZShzcGxpdERhdGVzWzBdKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kYXRlVmFsdWVzLmR0VG8gPSBuZXcgRGF0ZShzcGxpdERhdGVzWzFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gc2VhcmNoU2VydmljZS5nZXRQYWdlcigpO1xyXG4gICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZtLmZhY2V0R3JvdXBzID0gc2VhcmNoU2VydmljZS5nZXRGYWNldEdyb3VwcygpO1xyXG4gICAgICAgIHZtLm9yaWdpbmFsR3JvdXAgPSBzZWFyY2hTZXJ2aWNlLmdldEZhY2V0R3JvdXBzKCk7XHJcblxyXG4gICAgICAgIGlmIChzZWFyY2hTZXJ2aWNlLmdldE5ld1NlYXJjaCgpKSB7XHJcblxyXG4gICAgICAgICAgICB2bS5mYWNldEdyb3VwcyA9IHZtLm9yaWdpbmFsR3JvdXA7XHJcbiAgICAgICAgICAgIHZtLmNsZWFyQWxsRmFjZXRzKCk7XHJcblxyXG4gICAgICAgICAgICBzZWFyY2hTZXJ2aWNlLl9pc05ld1NlYXJjaCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9LCB0cnVlKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgLy8qKiBUaGlzIGNvbGxlY3RzIHRoZSB1c2VyJ3Mgc2F2ZWQgY29tcGFuaWVzICoqLy9cclxuICAgIHZtLnNhdmVkQ29tcGFuaWVzID0ge307XHJcblxyXG4gICAgdm0uc2F2ZUNvbXBhbnkgPSBmdW5jdGlvbiAoJGl0ZW0sIG1vZGVsLCBsYWJlbCkge1xyXG4gICAgICAgIHZtLnNhdmVkQ29tcGFuaWVzWyRpdGVtXSA9IHtcclxuICAgICAgICAgICAgc2VsZWN0ZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIGxhYmVsOiAkaXRlbVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5yZW1vdmVDb21wYW55ID0gZnVuY3Rpb24gKCRpdGVtLCBtb2RlbCwgbGFiZWwpIHtcclxuICAgICAgICBkZWxldGUgJHNjb3BlLnNhdmVkQ29tcGFuaWVzWyRpdGVtLmxhYmVsXTtcclxuICAgIH07XHJcblxyXG5cdHZhciBmYWNldHNGb3JBbmFseXRpY3MgPSBmYWxzZTtcclxuICAgIC8vKiogVGhpcyB1cGRhdGVzIHRoZSByb3V0ZXIvdXJsIHdpdGggdGhlIGxhdGVzdCBzZWFyY2ggcGFyYW1ldGVycyAqKi8vXHJcbiAgICB2bS51cGRhdGUgPSBmdW5jdGlvbiAoZmFjZXRHcm91cElkKSB7XHJcblxyXG5cdFx0aWYoZmFjZXRHcm91cElkKSB7XHJcblxyXG5cdFx0XHR2YXIgZmFjZXRHcm91cDtcclxuXHRcdFx0ZmFjZXRzRm9yQW5hbHl0aWNzID0gZmFsc2U7XHJcblxyXG5cdFx0XHRfLmVhY2godm0uZmFjZXRHcm91cHMsIGZ1bmN0aW9uKGdyb3VwKSB7XHJcblx0XHRcdFx0aWYoZ3JvdXAuaWQgPT09IGZhY2V0R3JvdXBJZCkge1xyXG5cdFx0XHRcdFx0ZmFjZXRHcm91cCA9IGdyb3VwO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRfLmVhY2goZmFjZXRHcm91cC5nZXRTZWxlY3RlZEZhY2V0cygpLCBmdW5jdGlvbiAoZmFjZXQpIHtcclxuXHRcdFx0XHRpZihmYWNldCkge1xyXG5cdFx0XHRcdFx0aWYoIWZhY2V0c0ZvckFuYWx5dGljcykge1xyXG5cdFx0XHRcdFx0XHRmYWNldHNGb3JBbmFseXRpY3MgPSBmYWNldC5sYWJlbDtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGZhY2V0c0ZvckFuYWx5dGljcyArPSAnfCcgKyBmYWNldC5sYWJlbDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0dmFyIGV2ZW50X2RhdGEgPSB7XHJcblx0XHRcdFx0ZXZlbnRfbmFtZTogJ3NlYXJjaF9mYWNldHMnLFxyXG5cdFx0XHRcdHNlYXJjaF9mYWNldF9jYXRlZ29yeTogZmFjZXRHcm91cC5sYWJlbFxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0aWYoZmFjZXRzRm9yQW5hbHl0aWNzKSB7XHJcblx0XHRcdFx0ZXZlbnRfZGF0YS5zZWFyY2hfZmFjZXQgPSBmYWNldEdyb3VwLmxhYmVsICsgXCI6IFwiICsgZmFjZXRzRm9yQW5hbHl0aWNzO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRhbmFseXRpY3NFdmVudChcdCQuZXh0ZW5kKGFuYWx5dGljc19kYXRhLCBldmVudF9kYXRhKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBEaXNhYmxlIGFsbCBmYWNldCBvcHRpb25zIHdoaWxlIHVwZGF0aW5nIHNlYXJjaCByZXN1bHRzXHJcblx0XHRmYWNldEF2YWlsYWJpbGl0eVNlcnZpY2UuZGlzYWJsZUZhY2V0cygpO1xyXG5cclxuICAgICAgICB2YXIgcGFyYW1zID0gdGhpcy5zZWFyY2hTZXJ2aWNlLmdldFJvdXRlQnVpbGRlcigpLmdldFJvdXRlKCkuc3BsaXQoJyYnKTtcclxuICAgICAgICBpZiAodGhpcy5zZWFyY2hTZXJ2aWNlLmdldFJvdXRlQnVpbGRlcigpLmdldFJvdXRlKCkuaW5kZXhPZihcImNvbXBhbmllc1wiKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGlkeF9wYXJhbSBpbiBwYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJhbXNbaWR4X3BhcmFtXS5pbmRleE9mKFwiY29tcGFuaWVzXCIpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29tcFZhbHVlID0gcGFyYW1zW2lkeF9wYXJhbV0uc3BsaXQoJz0nKVsxXTtcclxuICAgICAgICAgICAgICAgICAgICB2bS5jb21wYW5pZXNbXCJpc0NvbXBhbnlTZWxlY3RlZFwiXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uY29tcGFuaWVzW1wiY29tcGFuaWVzXCJdID0gY29tcFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdm0uY29tcGFuaWVzW1wiaXNDb21wYW55U2VsZWN0ZWRcIl0gPSBmYWxzZTtcclxuICAgICAgICAgICAgdm0uY29tcGFuaWVzW1wiY29tcGFuaWVzXCJdID0gXCJcIjtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgdm0uc2VhcmNoU2VydmljZS5nZXRGaWx0ZXIoJ3BhZ2UnKS5zZXRWYWx1ZSgnMScpO1xyXG4gICAgICAgIHZhciByb3V0ZUJ1aWxkZXIgPSB0aGlzLnNlYXJjaFNlcnZpY2UuZ2V0Um91dGVCdWlsZGVyKCk7XHJcbiAgICAgICAgdm0ubG9jYXRpb24uc2VhcmNoKHJvdXRlQnVpbGRlci5nZXRSb3V0ZSgpKTtcclxuICAgICAgICB2bS5zZWFyY2hTZXJ2aWNlLnF1ZXJ5KCk7XHJcbiAgICAgICAgLy9TY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcmVzdWx0cyB3aGVuIGEgbmV3IHBhZ2UgaXMgY2hvc2VuXHJcbiAgICAgICAgdm0ubG9jYXRpb24uaGFzaChcInNlYXJjaFRvcFwiKTtcclxuICAgICAgICB2bS5hbmNob3JTY3JvbGwoKTtcclxuXHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICB2bS51cGRhdGVUaW1lID0gZnVuY3Rpb24gKGZpbHRlcikge1xyXG4gICAgICAgIHZtLnNlYXJjaFNlcnZpY2UuZ2V0RmlsdGVyKCdwYWdlJykuc2V0VmFsdWUoJzEnKTtcclxuICAgICAgICB2YXIgcm91dGVCdWlsZGVyID0gdGhpcy5zZWFyY2hTZXJ2aWNlLmdldFJvdXRlQnVpbGRlcigpO1xyXG5cclxuICAgICAgICB2YXIgaGFzaCA9IHt9O1xyXG4gICAgICAgIHZhciB1cmxRdWVyeSA9IFwiJlwiO1xyXG4gICAgICAgIHZhciBoID0gZGVjb2RlVVJJQ29tcG9uZW50KHJvdXRlQnVpbGRlci5nZXRSb3V0ZSgpKS5zcGxpdChcIiZcIik7XHJcbiAgICAgICAgZm9yICh2YXIgaWR4IGluIGgpIHtcclxuICAgICAgICAgICAgaWYgKGhbaWR4XSAhPSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFBhcmFtZXRlciA9IGhbaWR4XS5zcGxpdChcIj1cIik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRQYXJhbWV0ZXJbMF0gPT0gXCJkYXRlRmlsdGVyTGFiZWxcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc2hbY3VycmVudFBhcmFtZXRlclswXV0gPSB2bS50aW1lc09iamVjdFtmaWx0ZXJdLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgIHVybFF1ZXJ5ID0gdXJsUXVlcnkgKyBcIiZcIiArIGN1cnJlbnRQYXJhbWV0ZXJbMF0gKyBcIj1cIiArIHZtLnRpbWVzT2JqZWN0W2ZpbHRlcl0uaWQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UGFyYW1ldGVyWzBdICE9IFwiZGF0ZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc2hbY3VycmVudFBhcmFtZXRlclswXV0gPSBjdXJyZW50UGFyYW1ldGVyWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmxRdWVyeSA9IHVybFF1ZXJ5ICsgXCImXCIgKyBjdXJyZW50UGFyYW1ldGVyWzBdICsgXCI9XCIgKyBjdXJyZW50UGFyYW1ldGVyWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGhhc2hbXCJ0aW1lXCJdID0gdm0udGltZXNPYmplY3RbZmlsdGVyXS52YWx1ZTtcclxuICAgICAgICB1cmxRdWVyeSA9IHVybFF1ZXJ5ICsgXCImdGltZT1cIiArIHZtLnRpbWVzT2JqZWN0W2ZpbHRlcl0udmFsdWU7XHJcblxyXG5cclxuICAgICAgICBpZiAodm0uY29tcGFuaWVzW1wiaXNDb21wYW55U2VsZWN0ZWRcIl0pIHtcclxuICAgICAgICAgICAgaGFzaFtcImNvbXBhbmllc1wiXSA9IHZtLmNvbXBhbmllc1tcImNvbXBhbmllc1wiXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChcImNvbXBhbmllc1wiIGluIGhhc2gpIHtcclxuICAgICAgICAgICAgdm0uaXNDb21wYW55U2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBoYXNoW1wiY29tcGFuaWVzXCJdID0gaGFzaFtcImNvbXBhbmllc1wiXS5yZXBsYWNlKC8lMjAvZywgXCIgXCIpLnJlcGxhY2UoLyUzQi9nLCAnOycpO1xyXG4gICAgICAgICAgICB2bS5jb21wYW5pZXNbXCJjb21wYW5pZXNcIl0gPSBoYXNoW1wiY29tcGFuaWVzXCJdLnJlcGxhY2UoLyUyMC9nLCBcIiBcIikucmVwbGFjZSgvJTNCL2csICc7Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICB2bS5sb2NhdGlvbi5zZWFyY2godXJsUXVlcnkpO1xyXG5cclxuXHJcbiAgICAgICAgdm0uc2VhcmNoU2VydmljZS5xdWVyeVRpbWVQZXJpb2QoaGFzaCk7XHJcbiAgICAgICAgLy9TY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcmVzdWx0cyB3aGVuIGEgbmV3IHBhZ2UgaXMgY2hvc2VuXHJcbiAgICAgICAgdm0ubG9jYXRpb24uaGFzaChcInNlYXJjaFRvcFwiKTtcclxuICAgICAgICB2bS5hbmNob3JTY3JvbGwoKTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uZmFjZXRDaGFuZ2UgPSBmdW5jdGlvbiAoZmFjZXQpIHtcclxuXHJcblx0XHR2bS5zZWFyY2hTZXJ2aWNlLmdldEZhY2V0R3JvdXAoZmFjZXQucGFyZW50SWQpLmdldEZhY2V0KGZhY2V0LmlkKS5zZWxlY3RlZCA9IGZhY2V0LnNlbGVjdGVkO1xyXG4gICAgICAgIHZtLnVwZGF0ZShmYWNldC5wYXJlbnRJZCk7XHJcblxyXG4gICAgfTtcclxuXHJcblx0Ly8gZmFjZXRHcm91cElkOiAncHVibGljYXRpb24nXHJcblx0Ly8gZmFjZXRJZHM6IFsnSW4gVml2bycsICdSb3NlIFNoZWV0J11cclxuICAgIHZtLmZhY2V0Q2hhbmdlTXVsdGlwbGUgPSBmdW5jdGlvbihmYWNldEdyb3VwSWQsIGZhY2V0SWRzKSB7XHJcblxyXG5cdFx0dmFyIGZhY2V0cztcclxuXHJcblx0XHRfLmVhY2godm0uZmFjZXRHcm91cHMsIGZ1bmN0aW9uKGdyb3VwKSB7XHJcblx0XHRcdGlmKGdyb3VwLmlkID09PSBmYWNldEdyb3VwSWQpIHtcclxuXHRcdFx0XHRmYWNldHMgPSBncm91cDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG4gICAgICAgIF8uZWFjaChmYWNldHMuZ2V0U2VsZWN0ZWRGYWNldHMoKSwgZnVuY3Rpb24gKGZhY2V0KSB7XHJcblx0XHRcdGlmKGZhY2V0KSB7XHJcblx0XHRcdFx0ZmFjZXQuc2VsZWN0ZWQgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBfLmVhY2goZmFjZXRJZHMsIGZ1bmN0aW9uKGlkKSB7XHJcblx0XHRcdHZhciBmYWNldCA9IGZhY2V0cy5nZXRGYWNldChpZCk7XHJcblx0XHRcdGlmIChmYWNldCkge1xyXG5cdFx0XHRcdGZhY2V0LnNlbGVjdGVkID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG4gICAgICAgIH0pO1xyXG5cclxuXHRcdHZtLnVwZGF0ZShmYWNldEdyb3VwSWQpO1xyXG5cclxuICAgIH07XHJcblxyXG5cclxuICAgIC8vIFRPRE86IHRoaXMgY29tZXMgZnJvbSBhIGRpZmYgc2VhcmNoIGFwcCwgYW5kIG5lZWRzIGpxdWVyeSB0byB3b3JrLlxyXG4gICAgLy8gICAgICAgZWl0aGVyIGhvb2sgdXAganEgdG8gdGhpcyBjb250cm9sbGVyIG9yIG1vdmUgdGhpcyBlbHNld2hlcmVcclxuICAgIHZtLnNjcm9sbFRvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyB2YXIgbG9jYXRpb24gPSBqcShcIi5zZWFyY2gtZmFjZXRzX19oZWFkZXJcIikub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgIC8vd2luZG93LnNjcm9sbFRvKDAsIGxvY2F0aW9uIC0gODApO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5oYXNTZWxlY3RlZCA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcclxuICAgICAgICByZXR1cm4gXy5maW5kKHZhbHVlcywgeyBzZWxlY3RlZDogdHJ1ZSB9KSA/IHRydWUgOiBmYWxzZTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uZ2V0RmlsdGVyID0gZnVuY3Rpb24gKGZpbHRlcktleSkge1xyXG4gICAgICAgIHZhciBmaWx0ZXIgPSB2bS5zZWFyY2hTZXJ2aWNlLmdldEZpbHRlcihmaWx0ZXJLZXkpO1xyXG4gICAgICAgIGlmICghZmlsdGVyKSB7XHJcbiAgICAgICAgICAgIHZtLnNlYXJjaEJvb3RzdHJhcHBlci5jcmVhdGVGaWx0ZXIoZmlsdGVyS2V5LCBcIlwiKTtcclxuICAgICAgICAgICAgZmlsdGVyID0gdm0uc2VhcmNoU2VydmljZS5nZXRGaWx0ZXIoZmlsdGVyS2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZpbHRlcjtcclxuICAgIH07XHJcblxyXG4gICAgLyogVGhpcyBkZXNlbGVjdHMgYW55IHNlbGVjdGVkIGZhY2V0IGNoZWNrYm94ZXMsIGNsZWFycyBhbGwgZmFjZXQgcGFyYW1ldGVyc1xyXG4gICAgICAgIGZyb20gdGhlIHNlYXJjaCBxdWVyeSwgYW5kIHJ1bnMgdGhlIGNsZWFyRGF0ZVJhbmdlIGZ1bmN0aW9uICovXHJcbiAgICB2bS5jbGVhckFsbEZhY2V0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZmFjZXRDbGVhciA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGZhY2V0R3JvdXBzID0gZmFjZXRDbGVhci5mYWNldEdyb3VwcztcclxuICAgICAgICBfLmVhY2goZmFjZXRHcm91cHMsIGZ1bmN0aW9uIChncm91cCkge1xyXG4gICAgICAgICAgICB2YXIgZmFjZXRzID0gdm0uc2VhcmNoU2VydmljZS5nZXRGYWNldEdyb3VwKGdyb3VwLmlkKS5nZXRTZWxlY3RlZEZhY2V0cygpO1xyXG4gICAgICAgICAgICBfLmVhY2goZmFjZXRzLCBmdW5jdGlvbiAoZmFjZXQpIHtcclxuICAgICAgICAgICAgICAgIGZhY2V0LnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZtLmNsZWFyRGF0ZVJhbmdlKCk7XHJcbiAgICAgICAgdm0udXBkYXRlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLmNsZWFyRmlsdGVyID0gZnVuY3Rpb24gKGZpbHRlcktleSkge1xyXG4gICAgICAgIHZhciBmaWx0ZXIgPSB2bS5nZXRGaWx0ZXIoZmlsdGVyS2V5KTtcclxuICAgICAgICBmaWx0ZXIuc2V0VmFsdWUoXCJcIik7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qIFRoaXMgY2xlYXJzIHRoZSBkYXRlIHBhcmFtZXRlcnMgZnJvbSB0aGUgc2VhcmNoLCBkZXNlbGN0cyBhbnkgZGF0ZSByYWRpb1xyXG4gICAgYnV0dG9ucywgYW5kIGNsZWFycyBib3RoIGN1c3RvbSBkYXRlIGlucHV0IGZpZWxkcyAqKi9cclxuICAgIHZtLmNsZWFyRGF0ZVJhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBmaWx0ZXIgPSB2bS5nZXRGaWx0ZXIoJ2RhdGUnKTtcclxuICAgICAgICBmaWx0ZXIuc2V0VmFsdWUoXCJcIik7XHJcbiAgICAgICAgZmlsdGVyLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIGZpbHRlckRhdGVMYWJlbCA9IHZtLmdldEZpbHRlcignZGF0ZUZpbHRlckxhYmVsJyk7XHJcbiAgICAgICAgZmlsdGVyRGF0ZUxhYmVsLnNldFZhbHVlKFwiXCIpO1xyXG4gICAgICAgIHZhciBkYXRlcyA9IHZtLkRhdGVGaWx0ZXJzO1xyXG4gICAgICAgIF8uZWFjaChkYXRlcywgZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgZGF0ZS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgdm0uZ2V0RGF0ZUZpbHRlckxhYmVsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBmaWx0ZXJEYXRlTGFiZWwgPSB2bS5nZXRGaWx0ZXIoJ2RhdGVGaWx0ZXJMYWJlbCcpO1xyXG4gICAgICAgIHJldHVybiBmaWx0ZXJEYXRlTGFiZWwuX3ZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5zZWFyY2hGb3JDb21wYW55ID0gZnVuY3Rpb24gKHNlbGVjdGVkQ29tcGFueSkge1xyXG5cclxuICAgICAgICAvL1RoaXMgaXMgbm90IGNvcnJlY3QgcmlnaHQgbm93LCBzaG91bGQgYmUgdXNpbmcgZmFjZXQgZ3JvdXBzIGluc3RlYWRcclxuICAgICAgICAvL3dpbGwgZml4IGxhdGVyXHJcbiAgICAgICAgdmFyIGZhY2V0cyA9IHZtLnNlYXJjaFNlcnZpY2UuZ2V0RmFjZXRHcm91cCgnY29tcGFuaWVzJykuZ2V0U2VsZWN0ZWRGYWNldHMoKTtcclxuXHJcbiAgICAgICAgdmFyIGZpbHRlciA9IHZtLmdldEZpbHRlcignY29tcGFuaWVzJyk7XHJcblxyXG4gICAgICAgIHZhciBjb21wYW55RmlsdGVyID0gc2VsZWN0ZWRDb21wYW55O1xyXG4gICAgICAgIHZhciBzZXAgPSAnOyc7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmFjZXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbXBhbnlGaWx0ZXIgKz0gc2VwICsgZmFjZXRzW2ldLmlkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZmlsdGVyLnNldFZhbHVlKGNvbXBhbnlGaWx0ZXIpO1xyXG5cclxuICAgICAgICB2bS51cGRhdGUoKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIHZtLnZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gKGRhdGUsIHR5cGUpIHtcclxuICAgICAgICBpZihkYXRlID09IHVuZGVmaW5lZCkgXHJcbiAgICAgICAgICAgIGFsZXJ0KFwiVGhlICdcIit0eXBlK1wiJyBkYXRlIHZhbHVlIGlzbid0IHByb3Blcmx5IGZvcm1hdHRlZFwiKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIHZtLmN1c3RvbURhdGVSYW5nZVNlYXJjaCA9IGZ1bmN0aW9uIChmaWx0ZXJLZXksIHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgc291cmNlQ29udHJvbCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBmaWx0ZXIgPSB2bS5nZXRGaWx0ZXIoZmlsdGVyS2V5KTtcclxuICAgICAgICB2YXIgZmlsdGVyRGF0ZUxhYmVsID0gdm0uZ2V0RmlsdGVyKCdkYXRlRmlsdGVyTGFiZWwnKTtcclxuICAgICAgICBmaWx0ZXJEYXRlTGFiZWwuc2V0VmFsdWUoJ2N1c3RvbScpO1xyXG5cclxuICAgICAgICBpZihzdGFydERhdGUgPiBuZXcgRGF0ZSgpKXtcclxuICAgICAgICAgICAgYWxlcnQoXCJGcm9tIGRhdGUgY2FuIG5vdCBiZSBncmVhdGVyIHRoYW4gdG9kYXlcIik7Ly8gIHlvdSBjYW4ndCBzZWxlY3QgZGF0ZSBiaWdnZXIgdGhhbiB0b2RheVwiKTtcclxuICAgICAgICAgICAgJHNjb3BlLmRhdGVWYWx1ZXMuZHRGcm9tPVwiXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihlbmREYXRlID4gbmV3IERhdGUoKSl7XHJcbiAgICAgICAgICAgIGFsZXJ0KFwiVG8gZGF0ZSBjYW4gbm90IGJlIGdyZWF0ZXIgdGhhbiB0b2RheVwiKTsvL1xyXG4gICAgICAgICAgICAkc2NvcGUuZGF0ZVZhbHVlcy5kdFRvPVwiXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc3RhcnREYXRlID4gMCAmJiBlbmREYXRlID4gMCAmJiBzdGFydERhdGUgPCBlbmREYXRlKSB7XHJcbiAgICAgICAgICAgIHZhciBkYXRlMVVucGFyc2VkID0gbmV3IERhdGUoc3RhcnREYXRlKTtcclxuICAgICAgICAgICAgdmFyIGRhdGUxID0gKGRhdGUxVW5wYXJzZWQuZ2V0TW9udGgoKSArIDEpICsgJy8nICsgZGF0ZTFVbnBhcnNlZC5nZXREYXRlKCkgKyAnLycgKyBkYXRlMVVucGFyc2VkLmdldEZ1bGxZZWFyKCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZGF0ZTJVbnBhcnNlZCA9IG5ldyBEYXRlKGVuZERhdGUpO1xyXG4gICAgICAgICAgICB2YXIgZGF0ZTIgPSAoZGF0ZTJVbnBhcnNlZC5nZXRNb250aCgpICsgMSkgKyAnLycgKyBkYXRlMlVucGFyc2VkLmdldERhdGUoKSArICcvJyArIGRhdGUyVW5wYXJzZWQuZ2V0RnVsbFllYXIoKTtcclxuXHJcbiAgICAgICAgICAgIGZpbHRlci5zZXRWYWx1ZShkYXRlMSArIFwiO1wiICsgZGF0ZTIpO1xyXG5cclxuICAgICAgICAgICAgdm0udXBkYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICBpZiggKHN0YXJ0RGF0ZSE9XCJcIiAmJiBzdGFydERhdGUgIT0gdW5kZWZpbmVkKSAmJiAoZW5kRGF0ZSE9XCJcIiAmJiBlbmREYXRlIT11bmRlZmluZWQpICl7XHJcbiAgICAgICAgICAgICAgICBpZihzdGFydERhdGUgPiBlbmREYXRlKXtcclxuICAgICAgICAgICAgICAgICAgICBhbGVydChcIkZyb20gZGF0ZSBjYW4gbm90IGJlIGdyZWF0ZXIgdGhhbiBUbyBkYXRlXCIpOy8vICBZb3UgY2FudCBwdXQgJ2Zyb20nIGRhdGUgYmlnZ2VyIHRoYW4gJ3RvJyBkYXRlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHNvdXJjZUNvbnRyb2wgPT0gJ2Zyb20nKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGVWYWx1ZXMuZHRGcm9tPVwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRlVmFsdWVzLmR0VG89XCJcIjtcclxuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICBcclxuICAgICAgICAkc2NvcGUub3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgIHNob3dXZWVrczogZmFsc2VcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAvLyoqIFRoaXMgYnVpbGRzIGRhdGUgcGFyYW1ldGVycyBmb3IgdGhlIHNlYXJjaCBxdWVyeSAqKi8vXHJcbiAgICB2bS5kYXRlUmFuZ2VTZWFyY2ggPSBmdW5jdGlvbiAoZmlsdGVyS2V5LCBkYXRlRmlsdGVyKSB7XHJcblxyXG4gICAgICAgIGlmIChkYXRlRmlsdGVyID09ICdjdXN0b20nKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBmaWx0ZXIgPSB2bS5nZXRGaWx0ZXIoZmlsdGVyS2V5KTtcclxuICAgICAgICB2YXIgZmlsdGVyRGF0ZUxhYmVsID0gdm0uZ2V0RmlsdGVyKCdkYXRlRmlsdGVyTGFiZWwnKTtcclxuXHJcbiAgICAgICAgdmFyIHN0YXJ0RGF0ZSA9IHZtLmRhdGVzT2JqZWN0W2RhdGVGaWx0ZXJdO1xyXG4gICAgICAgIHZhciBlbmREYXRlID0gZm9ybWF0RGF0ZU9iamVjdChuZXcgRGF0ZSgpKTtcclxuXHJcbiAgICAgICAgZmlsdGVyRGF0ZUxhYmVsLnNldFZhbHVlKGRhdGVGaWx0ZXIpO1xyXG4gICAgICAgIGZpbHRlci5zZXRWYWx1ZShzdGFydERhdGUgKyBcIjtcIiArIGVuZERhdGUpO1xyXG5cclxuXHJcblxyXG5cclxuICAgICAgICB2bS51cGRhdGVTZWxlY3RlZERhdGUoZGF0ZUZpbHRlcik7XHJcbiAgICAgICAgdm0udXBkYXRlVGltZShkYXRlRmlsdGVyKTtcclxuICAgICAgICAvL3ZtLnVwZGF0ZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS51cGRhdGVTZWxlY3RlZERhdGUgPSBmdW5jdGlvbiAoZGF0ZUZpbHRlcikge1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLkRhdGVGaWx0ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRlRmlsdGVyID09IHZtLkRhdGVGaWx0ZXJzW2ldLmtleSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZtLkRhdGVGaWx0ZXJzW2ldLnNlbGVjdGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdm0uRGF0ZUZpbHRlcnNbaV0uc2VsZWN0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxufTtcclxuXHJcbnZhciBpbmZvcm1hU2VhcmNoQXBwID0gYW5ndWxhci5tb2R1bGUoJ2luZm9ybWFTZWFyY2hBcHAnKTtcclxuaW5mb3JtYVNlYXJjaEFwcC5jb250cm9sbGVyKFwiSW5mb3JtYUZhY2V0Q29udHJvbGxlclwiLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRsb2NhdGlvbicsICckaHR0cCcsICckYW5jaG9yU2Nyb2xsJywgJyR0aW1lb3V0JywgJ3NlYXJjaFNlcnZpY2UnLCAnc2VhcmNoQm9vdHN0cmFwcGVyJywgJ2ZhY2V0QXZhaWxhYmlsaXR5U2VydmljZScsIEluZm9ybWFGYWNldENvbnRyb2xsZXJdKTtcclxuIiwiLyogZ2xvYmFsIGFuZ3VsYXIsIGFuYWx5dGljc19kYXRhLCB1dGFnICovXHJcblxyXG52YXIgaW5mb3JtYVNlYXJjaEFwcCA9IGFuZ3VsYXIubW9kdWxlKCdpbmZvcm1hU2VhcmNoQXBwJyk7XHJcblxyXG52YXIgSW5mb3JtYVJlc3VsdHNDb250cm9sbGVyID0gZnVuY3Rpb24gSW5mb3JtYVJlc3VsdHNDb250cm9sbGVyKCRzY29wZSwgJHNhbml0aXplLCBzZWFyY2hTZXJ2aWNlLCB2aWV3SGVhZGxpbmVzU3RhdGVTZXJ2aWNlLCAkdGltZW91dCwgJHdpbmRvdywgZmFjZXRBdmFpbGFiaWxpdHlTZXJ2aWNlKSB7XHJcblxyXG4gICAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgICB2bS5zZXJ2aWNlID0gc2VhcmNoU2VydmljZTtcclxuICAgIHZtLmRvY3MgPSBbXTtcclxuXHJcbiAgICAkc2NvcGUuaGVhZGxpbmVzT25seSA9IHZpZXdIZWFkbGluZXNTdGF0ZVNlcnZpY2U7XHJcbiAgICB2YXIgY291bnQgPSAwO1xyXG5cclxuICAgICRzY29wZS51dGFnQW5hbHl0aWNzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChjb3VudCA+IDApIHtcclxuICAgICAgICAgICAgIHZhciBldmVudERldGFpbHMgPSB7XHJcbiAgICAgICAgICAgICAgICBOdW1iZXJfb2ZfUmVzdWx0czogJ1wiJyArICQoXCIuanMtc2VhcmNoVG90YWxSZXN1bHRzXCIpLnRleHQoKSArICdcIicsXHJcbiAgICAgICAgICAgICAgICBzZWFyY2hfS2V5d29yZDogJ1wiJyArICQoXCIuanMtc2VhcmNoS2V5d29yZFwiKS50ZXh0KCkgKyAnXCInXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBkYXRhT2JqID0gJC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsIGV2ZW50RGV0YWlscyk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdXRhZyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIHV0YWcubGluayhkYXRhT2JqKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcbiAgICAgICAgY291bnQgPSBjb3VudCArIDE7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gc2VhcmNoU2VydmljZS5nZXRSZXN1bHRzKCk7XHJcbiAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdm0uZG9jcyA9IHNlYXJjaFNlcnZpY2UuZ2V0UmVzdWx0cygpO1xyXG4gICAgICAgICRzY29wZS51dGFnQW5hbHl0aWNzKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuZmlsdGVyUmVzdWx0ID0gZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHVybDtcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5maXJlQm9va21hcmsgPSBmdW5jdGlvbiAoYXJ0aWNsZSwgZXZlbnQsIGtleSkge1xyXG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0dm0uZG9jc1trZXldLmlzQXJ0aWNsZUJvb2ttYXJrZWQgPSB2bS5kb2NzW2tleV0uaXNBcnRpY2xlQm9va21hcmtlZCA/IGZhbHNlIDogdHJ1ZTtcclxuXHRcdH0sIDUwMCk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS4kb24oJ3JlZnJlc2hQb3BPdXRzJywgZnVuY3Rpb24gKG5nUmVwZWF0RmluaXNoZWRFdmVudCkge1xyXG5cclxuXHRcdC8vIEVuYWJsZSBhbGwgZmFjZXQgb3B0aW9ucyB3aGVuIHNlYXJjaCByZXN1bHRzIGxhbmRcclxuXHRcdC8vICQoJy5mYWNldHNfX3NlY3Rpb24gaW5wdXQnKS5hdHRyKCdkaXNhYmxlZCcsIG51bGwpO1xyXG5cdFx0ZmFjZXRBdmFpbGFiaWxpdHlTZXJ2aWNlLmVuYWJsZUZhY2V0cygpO1xyXG5cclxuICAgICAgICB3aW5kb3cuaW5kZXhQb3BPdXRzKCk7XHJcbiAgICAgICAgd2luZG93LmluZGV4Qm9va21hcmtzKCk7XHJcbiAgICAgICAgd2luZG93LmF1dG9Cb29rbWFyaygpO1xyXG5cdFx0d2luZG93LmZpbmRUb29sdGlwcygpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5mb3JjZVJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoZmFsc2UpO1xyXG4gICAgfTtcclxuXHJcbn07XHJcblxyXG5pbmZvcm1hU2VhcmNoQXBwLmRpcmVjdGl2ZSgnb25GaW5pc2hSZW5kZXInLCBmdW5jdGlvbiAoJHRpbWVvdXQpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcclxuICAgICAgICAgICAgaWYgKHNjb3BlLiRsYXN0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ3JlZnJlc2hQb3BPdXRzJyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0pO1xyXG5cclxuaW5mb3JtYVNlYXJjaEFwcC5jb250cm9sbGVyKFwiSW5mb3JtYVJlc3VsdHNDb250cm9sbGVyXCIsIFsnJHNjb3BlJywgJyRzYW5pdGl6ZScsICdzZWFyY2hTZXJ2aWNlJywgJ3ZpZXdIZWFkbGluZXNTdGF0ZVNlcnZpY2UnLCAnJHRpbWVvdXQnLCAnJHdpbmRvdycsICdmYWNldEF2YWlsYWJpbGl0eVNlcnZpY2UnLCBJbmZvcm1hUmVzdWx0c0NvbnRyb2xsZXJdKTtcclxuIiwiLyogZ2xvYmFsIGFuZ3VsYXIsIGFuYWx5dGljc19kYXRhICovXHJcbmltcG9ydCB7IGFuYWx5dGljc0V2ZW50IH0gZnJvbSAnLi4vLi4vY29udHJvbGxlcnMvYW5hbHl0aWNzLWNvbnRyb2xsZXInO1xyXG5cclxudmFyIFBhZ2VTaXplQ29udHJvbGxlciA9IGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJGFuY2hvclNjcm9sbCwgc2VhcmNoU2VydmljZSwgc2VhcmNoQm9vdHN0cmFwcGVyKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgcGVyUGFnZUtleSA9ICdwZXJQYWdlJztcclxuXHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICAgIHZtLmxvY2F0aW9uID0gJGxvY2F0aW9uO1xyXG4gICAgdm0uYW5jaG9yU2Nyb2xsID0gJGFuY2hvclNjcm9sbDtcclxuICAgIHZtLnNlYXJjaFNlcnZpY2UgPSBzZWFyY2hTZXJ2aWNlO1xyXG4gICAgdm0uc2VhcmNoQm9vdHN0cmFwcGVyID0gc2VhcmNoQm9vdHN0cmFwcGVyO1xyXG5cclxuICAgIHZtLnVwZGF0ZSA9IGZ1bmN0aW9uIChwYWdlU2l6ZSkge1xyXG4gICAgICAgIHZhciBmaWx0ZXIgPSB2bS5zZWFyY2hTZXJ2aWNlLmdldEZpbHRlcihwZXJQYWdlS2V5KTtcclxuXHJcbiAgICAgICAgaWYgKCFmaWx0ZXIpIHtcclxuICAgICAgICAgICAgdm0uc2VhcmNoQm9vdHN0cmFwcGVyLmNyZWF0ZUZpbHRlcihwZXJQYWdlS2V5LCBwYWdlU2l6ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZmlsdGVyLnNldFZhbHVlKHBhZ2VTaXplKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZtLnNlYXJjaFNlcnZpY2UuZ2V0RmlsdGVyKCdwYWdlJykuc2V0VmFsdWUoJzEnKTtcclxuICAgICAgICB2YXIgcm91dGVCdWlsZGVyID0gdGhpcy5zZWFyY2hTZXJ2aWNlLmdldFJvdXRlQnVpbGRlcigpO1xyXG4gICAgICAgIHZtLmxvY2F0aW9uLnNlYXJjaChyb3V0ZUJ1aWxkZXIuZ2V0Um91dGUoKSk7XHJcbiAgICAgICAgdm0uc2VhcmNoU2VydmljZS5xdWVyeSgpO1xyXG5cclxuICAgICAgICAvL1Njcm9sbCB0byB0aGUgdG9wIG9mIHRoZSByZXN1bHRzIHdoZW4gYSBuZXcgcGFnZSBpcyBjaG9zZW5cclxuICAgICAgICB2bS5sb2NhdGlvbi5oYXNoKFwic2VhcmNoVG9wXCIpO1xyXG4gICAgICAgIHZtLmFuY2hvclNjcm9sbCgpO1xyXG5cclxuXHRcdGFuYWx5dGljc0V2ZW50KCAkLmV4dGVuZChhbmFseXRpY3NfZGF0YSwge1xyXG5cdFx0XHRldmVudF9uYW1lOiAnc2VhcmNoX3V0aWxpdHknLFxyXG5cdFx0XHRzZWFyY2hfdXRpbGl0eTogJ3Jlc3VsdHNfcGVyX3BhZ2VfJyArIHBhZ2VTaXplXHJcblx0XHR9KSk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICB2bS5pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGZpbHRlciA9IHZtLnNlYXJjaFNlcnZpY2UuZ2V0RmlsdGVyKHBlclBhZ2VLZXkpO1xyXG5cclxuICAgICAgICAkc2NvcGUucGFnZVNpemUgPSBmaWx0ZXIgPyBmaWx0ZXIuX3ZhbHVlIDogJzEwJztcclxuICAgIH07XHJcbn07XHJcbnZhciBpbmZvcm1hU2VhcmNoQXBwID0gYW5ndWxhci5tb2R1bGUoJ2luZm9ybWFTZWFyY2hBcHAnKTtcclxuaW5mb3JtYVNlYXJjaEFwcC5jb250cm9sbGVyKFwiUGFnZVNpemVDb250cm9sbGVyXCIsIFsnJHNjb3BlJywgJyRsb2NhdGlvbicsICckYW5jaG9yU2Nyb2xsJywgJ3NlYXJjaFNlcnZpY2UnLCAnc2VhcmNoQm9vdHN0cmFwcGVyJywgUGFnZVNpemVDb250cm9sbGVyXSk7XHJcbiIsIi8qIGdsb2JhbCBhbmd1bGFyICovXHJcblxyXG52YXIgU2F2ZWRTZWFyY2hDb250cm9sbGVyID0gZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCAkdGltZW91dCwgJGh0dHAsIHNlYXJjaFNlcnZpY2UsIHNhdmVkU2VhcmNoU2VydmljZSkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgICB2bS5zZWFyY2hTZXJ2aWNlID0gc2VhcmNoU2VydmljZTtcclxuICAgICRzY29wZS5zZWFyY2hJc1NhdmVkID0gZmFsc2U7XHJcblxyXG4gICAgJHNjb3BlLm9uZUNsaWNrU2F2ZUZvY3VzID0gZmFsc2U7XHJcblxyXG4gICAgLy8gQSB1c2VyIGNhbiBsYW5kIG9uIHRoZSBzZWFyY2ggcGFnZSBmcm9tIGEgXCIxLWNsaWNrIFN1YnNjcmliZVwiIGxpbmsgaW4gYW4gZW1haWxcclxuICAgIC8vIFRoaXMgaGFuZGxlcyBkZXRlY3Rpb24gb2YgdGhhdCBxdWVyeSBwYXJhbWV0ZXIsIHRyaWdnZXJzIGFwcHJvcHJpYXRlIFVJIGNoYW5nZXNcclxuICAgIGZ1bmN0aW9uIG9wZW5TYXZlU2VhcmNoSWYxQ2xpY2soKSB7XHJcblxyXG4gICAgICAgIHZhciB1cmxRdWVyeSA9ICRsb2NhdGlvbi5zZWFyY2goKTtcclxuICAgICAgICB2YXIgY2xpY2tLZXkgPSBPYmplY3Qua2V5cyh1cmxRdWVyeSkuZmlsdGVyKGZ1bmN0aW9uIChjdXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGN1ci50b0xvd2VyQ2FzZSgpID09PSBcIjFjbGlja1wiO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoY2xpY2tLZXkubGVuZ3RoID4gMCAmJiB1cmxRdWVyeVtjbGlja0tleVswXV0gPT09IFwiMVwiKSB7XHJcbiAgICAgICAgICAgIGpRdWVyeShcIi5qcy1zYXZlLXNlYXJjaFwiKS5jbGljaygpO1xyXG4gICAgICAgICAgICAkbG9jYXRpb24uc2VhcmNoKGNsaWNrS2V5WzBdLCBudWxsKTtcclxuICAgICAgICAgICAgJHNjb3BlLm9uZUNsaWNrU2F2ZUZvY3VzID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgb3BlblNhdmVTZWFyY2hJZjFDbGljaygpO1xyXG4gICAgfSwgMTAwMCk7XHJcblxyXG4gICAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlYXJjaFNlcnZpY2UuZ2V0UGFnZXIoKTtcclxuICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKCcuanMtc2F2ZS1zZWFyY2gtdXJsJykudmFsKHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKSk7XHJcbiAgICAgICAgJHNjb3BlLnRpdGxlID0gc2VhcmNoU2VydmljZS5nZXRGaWx0ZXIoJ3EnKS5nZXRWYWx1ZSgpO1xyXG4gICAgICAgICRzY29wZS5jdXJyZW50TG9jYXRpb24gPSAkbG9jYXRpb24udXJsKCk7XHJcbiAgICAgICAgaWYgKCRzY29wZS5pc0F1dGhlbnRpY2F0ZWQpIHtcclxuICAgICAgICAgICAgc2F2ZWRTZWFyY2hTZXJ2aWNlLmlzU2F2ZWQoKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaElzU2F2ZWQgPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LCB0cnVlKTtcclxuXHJcbiAgICAvLyBEZXBlbmRpbmcgb24gaG93IHF1aWNrbHkgQW5ndWxhciBib290c3RyYXBzLCBzb21lIGxpZ2h0Ym94IHRyaWdnZXIgY2xhc3Nlc1xyXG4gICAgLy8gbWlnaHQgbm90IGJlIGFkZGVkIGJlZm9yZSB0aGUgbGlnaHRib3ggZXZlbnQgbGlzdG5lcnMgYXJlIGJvdW5kLiBUaGlzXHJcbiAgICAvLyBtYW51YWxseSBmaXJlcyB0aGUgU2F2ZWQgU2VhcmNoIGxpZ2h0Ym94LCBpbiBjYXNlIHRoZSBub3JtYWwgbGlzdGVuZXIgd2Fzbid0XHJcbiAgICAvLyBib3VuZCBpbiB0aW1lLlxyXG4gICAgdm0uc2hvd0xpZ2h0Ym94ID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAkKCcuanMtc2F2ZS1zZWFyY2gtdGl0bGUnKS52YWwoJycpO1xyXG4gICAgICAgIGlmKCRzY29wZS5zZWFyY2hJc1NhdmVkKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5saWdodGJveENvbnRyb2xsZXIuc2hvd0xpZ2h0Ym94KCQoZS50YXJnZXQpLmNsb3Nlc3QoJy5hbmd1bGFyLWxpZ2h0Ym94LW1vZGFsLXRyaWdnZXInKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcblx0dm0uc2VhcmNoSXNTYXZlZCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0JHNjb3BlLnNlYXJjaElzU2F2ZWQgPSB0cnVlO1xyXG5cdFx0JHNjb3BlLiRhcHBseSgpO1xyXG5cdH07XHJcbn07XHJcblxyXG52YXIgaW5mb3JtYVNlYXJjaEFwcCA9IGFuZ3VsYXIubW9kdWxlKCdpbmZvcm1hU2VhcmNoQXBwJyk7XHJcbmluZm9ybWFTZWFyY2hBcHAuY29udHJvbGxlcihcIlNhdmVkU2VhcmNoQ29udHJvbGxlclwiLCBbJyRzY29wZScsICckbG9jYXRpb24nLCAnJHRpbWVvdXQnLCAnJGh0dHAnLCAnc2VhcmNoU2VydmljZScsICdzYXZlZFNlYXJjaFNlcnZpY2UnLCBTYXZlZFNlYXJjaENvbnRyb2xsZXJdKTtcclxuIiwiLyogZ2xvYmFsIGFuZ3VsYXIsIGFuYWx5dGljc19kYXRhICovXHJcbmltcG9ydCB7IGFuYWx5dGljc0V2ZW50IH0gZnJvbSAnLi4vLi4vY29udHJvbGxlcnMvYW5hbHl0aWNzLWNvbnRyb2xsZXInO1xyXG5cclxudmFyIFNvcnRCeURhdGVDb250cm9sbGVyID0gZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCAkdGltZW91dCwgJGh0dHAsIHNlYXJjaFNlcnZpY2UsIHNhdmVkU2VhcmNoU2VydmljZSkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIHZtID0gdGhpcztcclxuXHJcblx0dm0ucmVzdWx0c1NvcnRlZCA9IGZ1bmN0aW9uKHNvcnRpbmdBc2MpIHtcclxuXHRcdGlmKHNvcnRpbmdBc2MpIHtcclxuXHRcdFx0YW5hbHl0aWNzRXZlbnQoICQuZXh0ZW5kKGFuYWx5dGljc19kYXRhLCB7XHJcblx0XHRcdFx0ZXZlbnRfbmFtZTogJ3NlYXJjaF91dGlsaXR5JyxcclxuXHRcdFx0XHRzZWFyY2hfdXRpbGl0eTogJ3NvcnRfYnlfZGF0ZTphc2MnXHJcblx0XHRcdH0pKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGFuYWx5dGljc0V2ZW50KCAkLmV4dGVuZChhbmFseXRpY3NfZGF0YSwge1xyXG5cdFx0XHRcdGV2ZW50X25hbWU6ICdzZWFyY2hfdXRpbGl0eScsXHJcblx0XHRcdFx0c2VhcmNoX3V0aWxpdHk6ICdzb3J0X2J5X2RhdGU6ZGVzYydcclxuXHRcdFx0fSkpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG59O1xyXG5cclxudmFyIGluZm9ybWFTZWFyY2hBcHAgPSBhbmd1bGFyLm1vZHVsZSgnaW5mb3JtYVNlYXJjaEFwcCcpO1xyXG5pbmZvcm1hU2VhcmNoQXBwLmNvbnRyb2xsZXIoXCJTb3J0QnlEYXRlQ29udHJvbGxlclwiLCBbJyRzY29wZScsICckbG9jYXRpb24nLCAnJHRpbWVvdXQnLCAnJGh0dHAnLCAnc2VhcmNoU2VydmljZScsICdzYXZlZFNlYXJjaFNlcnZpY2UnLCBTb3J0QnlEYXRlQ29udHJvbGxlcl0pO1xyXG4iLCJ2YXIgaW5mb3JtYVNlYXJjaEFwcCA9IGFuZ3VsYXIubW9kdWxlKCdpbmZvcm1hU2VhcmNoQXBwJyk7XHJcblxyXG4vLyBmYWN0b3J5IHRvIGhhbmRsZSBjYWxsIHRvIGNvbXBhbmllcyBzZXJ2aWNlXHJcbi8vIG5vdGU6IGEgZmFjdG9yeSBsaXZlcyB0aHJvdWdoIHRoZSBlbnRpcmUgYXBwbGljYXRpb24gbGlmZWN5Y2xlXHJcbmluZm9ybWFTZWFyY2hBcHAuZmFjdG9yeSgnZ2V0Q29tcGFuaWVzU2VydmljZScsIFsnJGh0dHAnLCAnJGxvY2F0aW9uJywgZnVuY3Rpb24gKCRodHRwLCAkbG9jYXRpb24pIHtcclxuXHJcbiAgICB2YXIgZmV0Y2hDb21wYW5pZXMgPSBmdW5jdGlvbihwYWdlSWQpIHtcclxuXHJcbiAgICAgICAgdmFyIGZ1bGxVcmwgPSAnL2FwaS90eXBlYWhlYWQvZ2V0Y29tcGFuaWVzP3BJZD0nICsgcGFnZUlkO1xyXG5cclxuICAgICAgICBpZiAoJGxvY2F0aW9uLnVybCgpKSB7XHJcbiAgICAgICAgICAgIGZ1bGxVcmwgKz0gJyYnICsgJGxvY2F0aW9uLnVybCgpLnJlcGxhY2UoJz8nLCAnJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gJGh0dHAoe1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgICAgICB1cmw6IGZ1bGxVcmxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiB7ZmV0Y2hDb21wYW5pZXMgOiBmZXRjaENvbXBhbmllc307XHJcblxyXG59XSk7XHJcbiIsIu+7v3ZhciBpbmZvcm1hU2VhcmNoQXBwID0gYW5ndWxhci5tb2R1bGUoJ2luZm9ybWFTZWFyY2hBcHAnKTtcclxuXHJcbi8vIGZhY3RvcnkgdG8gaGFuZGxlIGNhbGwgdG8gY29tcGFuaWVzIHNlcnZpY2VcclxuLy8gbm90ZTogYSBmYWN0b3J5IGxpdmVzIHRocm91Z2ggdGhlIGVudGlyZSBhcHBsaWNhdGlvbiBsaWZlY3ljbGVcclxuaW5mb3JtYVNlYXJjaEFwcC5mYWN0b3J5KCdzYXZlZFNlYXJjaFNlcnZpY2UnLCBbJyRodHRwJywgJyRsb2NhdGlvbicsIGZ1bmN0aW9uICgkaHR0cCwgJGxvY2F0aW9uKSB7XHJcblxyXG4gICAgdmFyIGlzU2F2ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGZ1bGxVcmwgPSAnL2FwaS9TYXZlZFNlYXJjaGVzP3VybD0nICsgZXNjYXBlKCRsb2NhdGlvbi51cmwoKSk7XHJcblxyXG4gICAgICAgIHJldHVybiAkaHR0cCh7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgIHVybDogZnVsbFVybFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpc1NhdmVkOiBpc1NhdmVkXHJcbiAgICB9O1xyXG5cclxufV0pO1xyXG4iLCIvKiBnbG9iYWwgYW5ndWxhciwgYW5hbHl0aWNzX2RhdGEgKi9cclxuaW1wb3J0IHsgYW5hbHl0aWNzRXZlbnQgfSBmcm9tICcuLi9jb250cm9sbGVycy9hbmFseXRpY3MtY29udHJvbGxlcic7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBpbmZvcm1hU2VhcmNoQXBwID0gYW5ndWxhci5tb2R1bGUoJ2luZm9ybWFTZWFyY2hBcHAnLCBbXHJcbiAgICAgICAgJ3ZlbGlyLnNlYXJjaCcsXHJcbiAgICAgICAgJ3VpLmJvb3RzdHJhcCcsXHJcbiAgICAgICAgJ25nU2FuaXRpemUnLFxyXG4gICAgICAgICduZ0FuaW1hdGUnXHJcbiAgICAgICAgXSkuY29uc3RhbnQoJ2FwaUVuZHBvaW50cycsIHtcclxuICAgICAgICAgICAgQVBJX0JBU0U6ICcvYXBpJyxcclxuICAgICAgICAgICAgU0VBUkNIX0VORFBPSU5UOiAnL3NlYXJjaCdcclxuICAgICAgICB9KS5jb25maWcoWyckbG9nUHJvdmlkZXInLCBmdW5jdGlvbiAoJGxvZ1Byb3ZpZGVyKSB7XHJcbiAgICAgICAgICAgIC8vIEFsbCBkZWJ1Z2dpbmcgc2hvdWxkIGJlIGRvbmUgdmlhICRsb2cgaW5zdGVhZCBvZiBkaXJlY3RseSB0byBjb25zb2xlXHJcbiAgICAgICAgICAgIC8vIFRoaXMgZmxhZyBkaXNhYmxlcyAkbG9nLmRlYnVnKCkgb3V0cHV0XHJcbiAgICAgICAgICAgIC8vJGxvZ1Byb3ZpZGVyLmRlYnVnRW5hYmxlZChmYWxzZSk7XHJcbiAgICAgICAgfV0pLmNvbmZpZyhbJyRjb21waWxlUHJvdmlkZXInLCBmdW5jdGlvbiAoJGNvbXBpbGVQcm92aWRlcikge1xyXG5cclxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nL3Byb3ZpZGVyLyRjb21waWxlUHJvdmlkZXIjZGVidWdJbmZvRW5hYmxlZFxyXG4gICAgICAgICAgICAvLyBVTkNPTU1FTlQgVEhFIExJTkUgQkVMT1cgSU4gUFJPRFVDVElPTiBGT1IgUEVSRk9STUFOQ0UgR0FJTlNcclxuXHJcbiAgICAgICAgICAgIC8vICRjb21waWxlUHJvdmlkZXIuZGVidWdJbmZvRW5hYmxlZChmYWxzZSk7XHJcblxyXG4gICAgICAgIH1dKTtcclxuXHJcbiAgICBpbmZvcm1hU2VhcmNoQXBwLmZhY3RvcnkoJ3ZpZXdIZWFkbGluZXNTdGF0ZVNlcnZpY2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGhlYWRsaW5lcyA9IGZhbHNlO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzaG93T25seUhlYWRsaW5lczogZnVuY3Rpb24gKCkgeyByZXR1cm4gaGVhZGxpbmVzOyB9LFxyXG4gICAgICAgICAgICB1cGRhdGVWYWx1ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0XHRpZighaGVhZGxpbmVzKSB7XHJcblx0XHRcdFx0XHRhbmFseXRpY3NFdmVudCggJC5leHRlbmQoYW5hbHl0aWNzX2RhdGEsIHtcclxuXHRcdFx0XHRcdFx0ZXZlbnRfbmFtZTogJ3NlYXJjaF91dGlsaXR5JyxcclxuXHRcdFx0XHRcdFx0c2VhcmNoX3V0aWxpdHk6ICd2aWV3X2hlYWRsaW5lc19vbmx5J1xyXG5cdFx0XHRcdFx0fSkgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGhlYWRsaW5lcyA9ICFoZWFkbGluZXM7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG5cclxuXHRpbmZvcm1hU2VhcmNoQXBwLmZhY3RvcnkoJ2ZhY2V0QXZhaWxhYmlsaXR5U2VydmljZScsIGZ1bmN0aW9uICgkcm9vdFNjb3BlKSB7XHJcblxyXG5cdFx0dmFyIGZhY2V0c1N0YXRlID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcblx0XHRcdGZhY2V0c0FyZUVuYWJsZWQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBmYWNldHNTdGF0ZTtcclxuXHRcdFx0fSxcclxuICAgICAgICAgICAgZW5hYmxlRmFjZXRzOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0ZmFjZXRzU3RhdGUgPSBmYWxzZTtcclxuXHRcdFx0XHQkcm9vdFNjb3BlLmZhY2V0QXZhaWxhYmlsaXR5ID0gZmFjZXRzU3RhdGU7XHJcblx0XHRcdH0sXHJcblx0XHRcdGRpc2FibGVGYWNldHM6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRmYWNldHNTdGF0ZSA9IHRydWU7XHJcblx0XHRcdFx0JHJvb3RTY29wZS5mYWNldEF2YWlsYWJpbGl0eSA9IGZhY2V0c1N0YXRlO1xyXG4gICAgICAgICAgICB9LFxyXG5cdFx0XHR0b2dnbGVGYWNldHM6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRmYWNldHNTdGF0ZSA9ICFmYWNldHNTdGF0ZTtcclxuXHRcdFx0XHQkcm9vdFNjb3BlLmZhY2V0QXZhaWxhYmlsaXR5ID0gZmFjZXRzU3RhdGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgIH0pO1xyXG5cclxufSkoKTtcclxuIiwiaW1wb3J0IEFwcCBmcm9tICcuL2luZm9ybWFTZWFyY2hBcHAuanMnO1xyXG5pbXBvcnQgQ29tcGFuaWVzRmFjdG9yeSBmcm9tICcuL2ZhY3Rvcmllcy9jb21wYW5pZXNGYWN0b3J5LmpzJztcclxuaW1wb3J0IFNhdmVkU2VhcmNoRmFjdG9yeSBmcm9tICcuL2ZhY3Rvcmllcy9zYXZlZFNlYXJjaEZhY3RvcnkuanMnO1xyXG5pbXBvcnQgSGVhZGxpbmVUb2dnbGVDb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcnMvaGVhZGxpbmVUb2dnbGVDb250cm9sbGVyLmpzJztcclxuaW1wb3J0IEluZm9ybWFGYWNldHNDb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcnMvaW5mb3JtYUZhY2V0c0NvbnRyb2xsZXIuanMnO1xyXG5pbXBvcnQgSW5mb3JtYURhdGVzQ29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXJzL2luZm9ybWFEYXRlc0NvbnRyb2xsZXIuanMnO1xyXG5pbXBvcnQgSW5mb3JtYVJlc3VsdHNDb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcnMvaW5mb3JtYVJlc3VsdHNDb250cm9sbGVyLmpzJztcclxuaW1wb3J0IEVtYWlsUnNzQ29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXJzL2VtYWlsUnNzQ29udHJvbGxlci5qcyc7XHJcbmltcG9ydCBUeXBlYWhlYWRDb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcnMvVHlwZWFoZWFkQ29udHJvbGxlci5qcyc7XHJcbmltcG9ydCBIZWFkbGluZVNlYXJjaENvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVycy9oZWFkbGluZVNlYXJjaENvbnRyb2xsZXIuanMnO1xyXG5pbXBvcnQgUGFnZVNpemVDb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcnMvcGFnZVNpemVDb250cm9sbGVyLmpzJztcclxuaW1wb3J0IFNhdmVkU2VhcmNoQ29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXJzL3NhdmVkU2VhcmNoQ29udHJvbGxlci5qcyc7XHJcbmltcG9ydCBTb3J0QnlEYXRlQ29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXJzL3NvcnRCeURhdGVDb250cm9sbGVyLmpzJztcclxuXHJcbmltcG9ydCBBbmd1bGFyVUlCb290c3RyYXAgZnJvbSAnLi91aS1ib290c3RyYXAtY3VzdG9tLXRwbHMtMS4yLjQubWluLmpzJztcclxuIiwiLypcclxuICogYW5ndWxhci11aS1ib290c3RyYXBcclxuICogaHR0cDovL2FuZ3VsYXItdWkuZ2l0aHViLmlvL2Jvb3RzdHJhcC9cclxuXHJcbiAqIFZlcnNpb246IDEuMi40IC0gMjAxNi0wMy0wNlxyXG4gKiBMaWNlbnNlOiBNSVRcclxuICovYW5ndWxhci5tb2R1bGUoXCJ1aS5ib290c3RyYXBcIixbXCJ1aS5ib290c3RyYXAudHBsc1wiLFwidWkuYm9vdHN0cmFwLmRhdGVwaWNrZXJcIixcInVpLmJvb3RzdHJhcC5kYXRlcGFyc2VyXCIsXCJ1aS5ib290c3RyYXAuaXNDbGFzc1wiLFwidWkuYm9vdHN0cmFwLnBvc2l0aW9uXCIsXCJ1aS5ib290c3RyYXAudHlwZWFoZWFkXCIsXCJ1aS5ib290c3RyYXAuZGVib3VuY2VcIl0pLGFuZ3VsYXIubW9kdWxlKFwidWkuYm9vdHN0cmFwLnRwbHNcIixbXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9kYXRlcGlja2VyLmh0bWxcIixcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL2RheS5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9tb250aC5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9wb3B1cC5odG1sXCIsXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci95ZWFyLmh0bWxcIixcInVpYi90ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLW1hdGNoLmh0bWxcIixcInVpYi90ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLXBvcHVwLmh0bWxcIl0pLGFuZ3VsYXIubW9kdWxlKFwidWkuYm9vdHN0cmFwLmRhdGVwaWNrZXJcIixbXCJ1aS5ib290c3RyYXAuZGF0ZXBhcnNlclwiLFwidWkuYm9vdHN0cmFwLmlzQ2xhc3NcIixcInVpLmJvb3RzdHJhcC5wb3NpdGlvblwiXSkudmFsdWUoXCIkZGF0ZXBpY2tlclN1cHByZXNzRXJyb3JcIiwhMSkudmFsdWUoXCJ1aWJEYXRlcGlja2VyQXR0cmlidXRlV2FybmluZ1wiLCEwKS5jb25zdGFudChcInVpYkRhdGVwaWNrZXJDb25maWdcIix7ZGF0ZXBpY2tlck1vZGU6XCJkYXlcIixmb3JtYXREYXk6XCJkZFwiLGZvcm1hdE1vbnRoOlwiTU1NTVwiLGZvcm1hdFllYXI6XCJ5eXl5XCIsZm9ybWF0RGF5SGVhZGVyOlwiRUVFXCIsZm9ybWF0RGF5VGl0bGU6XCJNTU1NIHl5eXlcIixmb3JtYXRNb250aFRpdGxlOlwieXl5eVwiLG1heERhdGU6bnVsbCxtYXhNb2RlOlwieWVhclwiLG1pbkRhdGU6bnVsbCxtaW5Nb2RlOlwiZGF5XCIsbmdNb2RlbE9wdGlvbnM6e30sc2hvcnRjdXRQcm9wYWdhdGlvbjohMSxzaG93V2Vla3M6ITAseWVhckNvbHVtbnM6NSx5ZWFyUm93czo0fSkuY29udHJvbGxlcihcIlVpYkRhdGVwaWNrZXJDb250cm9sbGVyXCIsW1wiJHNjb3BlXCIsXCIkYXR0cnNcIixcIiRwYXJzZVwiLFwiJGludGVycG9sYXRlXCIsXCIkbG9jYWxlXCIsXCIkbG9nXCIsXCJkYXRlRmlsdGVyXCIsXCJ1aWJEYXRlcGlja2VyQ29uZmlnXCIsXCIkZGF0ZXBpY2tlclN1cHByZXNzRXJyb3JcIixcInVpYkRhdGVwaWNrZXJBdHRyaWJ1dGVXYXJuaW5nXCIsXCJ1aWJEYXRlUGFyc2VyXCIsZnVuY3Rpb24oZSx0LGEsaSxuLHIsbyxzLGwsdSxwKXtmdW5jdGlvbiBjKHQpe2UuZGF0ZXBpY2tlck1vZGU9dCxnJiYoZS5kYXRlcGlja2VyT3B0aW9ucy5kYXRlcGlja2VyTW9kZT10KX12YXIgZD10aGlzLGg9eyRzZXRWaWV3VmFsdWU6YW5ndWxhci5ub29wfSxmPXt9LG09W10sZz0hIXQuZGF0ZXBpY2tlck9wdGlvbnM7aWYodGhpcy5tb2Rlcz1bXCJkYXlcIixcIm1vbnRoXCIsXCJ5ZWFyXCJdLGcpW1wiY3VzdG9tQ2xhc3NcIixcImRhdGVEaXNhYmxlZFwiLFwiZGF0ZXBpY2tlck1vZGVcIixcImZvcm1hdERheVwiLFwiZm9ybWF0RGF5SGVhZGVyXCIsXCJmb3JtYXREYXlUaXRsZVwiLFwiZm9ybWF0TW9udGhcIixcImZvcm1hdE1vbnRoVGl0bGVcIixcImZvcm1hdFllYXJcIixcImluaXREYXRlXCIsXCJtYXhEYXRlXCIsXCJtYXhNb2RlXCIsXCJtaW5EYXRlXCIsXCJtaW5Nb2RlXCIsXCJzaG93V2Vla3NcIixcInNob3J0Y3V0UHJvcGFnYXRpb25cIixcInN0YXJ0aW5nRGF5XCIsXCJ5ZWFyQ29sdW1uc1wiLFwieWVhclJvd3NcIl0uZm9yRWFjaChmdW5jdGlvbih0KXtzd2l0Y2godCl7Y2FzZVwiY3VzdG9tQ2xhc3NcIjpjYXNlXCJkYXRlRGlzYWJsZWRcIjplW3RdPWUuZGF0ZXBpY2tlck9wdGlvbnNbdF18fGFuZ3VsYXIubm9vcDticmVhaztjYXNlXCJkYXRlcGlja2VyTW9kZVwiOmUuZGF0ZXBpY2tlck1vZGU9YW5ndWxhci5pc0RlZmluZWQoZS5kYXRlcGlja2VyT3B0aW9ucy5kYXRlcGlja2VyTW9kZSk/ZS5kYXRlcGlja2VyT3B0aW9ucy5kYXRlcGlja2VyTW9kZTpzLmRhdGVwaWNrZXJNb2RlO2JyZWFrO2Nhc2VcImZvcm1hdERheVwiOmNhc2VcImZvcm1hdERheUhlYWRlclwiOmNhc2VcImZvcm1hdERheVRpdGxlXCI6Y2FzZVwiZm9ybWF0TW9udGhcIjpjYXNlXCJmb3JtYXRNb250aFRpdGxlXCI6Y2FzZVwiZm9ybWF0WWVhclwiOmRbdF09YW5ndWxhci5pc0RlZmluZWQoZS5kYXRlcGlja2VyT3B0aW9uc1t0XSk/aShlLmRhdGVwaWNrZXJPcHRpb25zW3RdKShlLiRwYXJlbnQpOnNbdF07YnJlYWs7Y2FzZVwic2hvd1dlZWtzXCI6Y2FzZVwic2hvcnRjdXRQcm9wYWdhdGlvblwiOmNhc2VcInllYXJDb2x1bW5zXCI6Y2FzZVwieWVhclJvd3NcIjpkW3RdPWFuZ3VsYXIuaXNEZWZpbmVkKGUuZGF0ZXBpY2tlck9wdGlvbnNbdF0pP2UuZGF0ZXBpY2tlck9wdGlvbnNbdF06c1t0XTticmVhaztjYXNlXCJzdGFydGluZ0RheVwiOmQuc3RhcnRpbmdEYXk9YW5ndWxhci5pc0RlZmluZWQoZS5kYXRlcGlja2VyT3B0aW9ucy5zdGFydGluZ0RheSk/ZS5kYXRlcGlja2VyT3B0aW9ucy5zdGFydGluZ0RheTphbmd1bGFyLmlzTnVtYmVyKHMuc3RhcnRpbmdEYXkpP3Muc3RhcnRpbmdEYXk6KG4uREFURVRJTUVfRk9STUFUUy5GSVJTVERBWU9GV0VFSys4KSU3O2JyZWFrO2Nhc2VcIm1heERhdGVcIjpjYXNlXCJtaW5EYXRlXCI6ZS5kYXRlcGlja2VyT3B0aW9uc1t0XT9lLiR3YXRjaChmdW5jdGlvbigpe3JldHVybiBlLmRhdGVwaWNrZXJPcHRpb25zW3RdfSxmdW5jdGlvbihlKXtkW3RdPWU/YW5ndWxhci5pc0RhdGUoZSk/cC5mcm9tVGltZXpvbmUobmV3IERhdGUoZSksZi50aW1lem9uZSk6bmV3IERhdGUobyhlLFwibWVkaXVtXCIpKTpudWxsLGQucmVmcmVzaFZpZXcoKX0pOmRbdF09c1t0XT9wLmZyb21UaW1lem9uZShuZXcgRGF0ZShzW3RdKSxmLnRpbWV6b25lKTpudWxsO2JyZWFrO2Nhc2VcIm1heE1vZGVcIjpjYXNlXCJtaW5Nb2RlXCI6ZS5kYXRlcGlja2VyT3B0aW9uc1t0XT9lLiR3YXRjaChmdW5jdGlvbigpe3JldHVybiBlLmRhdGVwaWNrZXJPcHRpb25zW3RdfSxmdW5jdGlvbihhKXtkW3RdPWVbdF09YW5ndWxhci5pc0RlZmluZWQoYSk/YTpkYXRlcGlja2VyT3B0aW9uc1t0XSwoXCJtaW5Nb2RlXCI9PT10JiZkLm1vZGVzLmluZGV4T2YoZS5kYXRlcGlja2VyT3B0aW9ucy5kYXRlcGlja2VyTW9kZSk8ZC5tb2Rlcy5pbmRleE9mKGRbdF0pfHxcIm1heE1vZGVcIj09PXQmJmQubW9kZXMuaW5kZXhPZihlLmRhdGVwaWNrZXJPcHRpb25zLmRhdGVwaWNrZXJNb2RlKT5kLm1vZGVzLmluZGV4T2YoZFt0XSkpJiYoZS5kYXRlcGlja2VyTW9kZT1kW3RdLGUuZGF0ZXBpY2tlck9wdGlvbnMuZGF0ZXBpY2tlck1vZGU9ZFt0XSl9KTpkW3RdPWVbdF09c1t0XXx8bnVsbDticmVhaztjYXNlXCJpbml0RGF0ZVwiOmUuZGF0ZXBpY2tlck9wdGlvbnMuaW5pdERhdGU/KGQuYWN0aXZlRGF0ZT1wLmZyb21UaW1lem9uZShlLmRhdGVwaWNrZXJPcHRpb25zLmluaXREYXRlLGYudGltZXpvbmUpfHxuZXcgRGF0ZSxlLiR3YXRjaChmdW5jdGlvbigpe3JldHVybiBlLmRhdGVwaWNrZXJPcHRpb25zLmluaXREYXRlfSxmdW5jdGlvbihlKXtlJiYoaC4kaXNFbXB0eShoLiRtb2RlbFZhbHVlKXx8aC4kaW52YWxpZCkmJihkLmFjdGl2ZURhdGU9cC5mcm9tVGltZXpvbmUoZSxmLnRpbWV6b25lKSxkLnJlZnJlc2hWaWV3KCkpfSkpOmQuYWN0aXZlRGF0ZT1uZXcgRGF0ZX19KTtlbHNle2lmKGFuZ3VsYXIuZm9yRWFjaChbXCJmb3JtYXREYXlcIixcImZvcm1hdE1vbnRoXCIsXCJmb3JtYXRZZWFyXCIsXCJmb3JtYXREYXlIZWFkZXJcIixcImZvcm1hdERheVRpdGxlXCIsXCJmb3JtYXRNb250aFRpdGxlXCJdLGZ1bmN0aW9uKGEpe2RbYV09YW5ndWxhci5pc0RlZmluZWQodFthXSk/aSh0W2FdKShlLiRwYXJlbnQpOnNbYV0sYW5ndWxhci5pc0RlZmluZWQodFthXSkmJnUmJnIud2FybihcInVpYi1kYXRlcGlja2VyIFwiK2ErXCIgYXR0cmlidXRlIHVzYWdlIGlzIGRlcHJlY2F0ZWQsIHVzZSBkYXRlcGlja2VyLW9wdGlvbnMgYXR0cmlidXRlIGluc3RlYWRcIil9KSxhbmd1bGFyLmZvckVhY2goW1wic2hvd1dlZWtzXCIsXCJ5ZWFyUm93c1wiLFwieWVhckNvbHVtbnNcIixcInNob3J0Y3V0UHJvcGFnYXRpb25cIl0sZnVuY3Rpb24oYSl7ZFthXT1hbmd1bGFyLmlzRGVmaW5lZCh0W2FdKT9lLiRwYXJlbnQuJGV2YWwodFthXSk6c1thXSxhbmd1bGFyLmlzRGVmaW5lZCh0W2FdKSYmdSYmci53YXJuKFwidWliLWRhdGVwaWNrZXIgXCIrYStcIiBhdHRyaWJ1dGUgdXNhZ2UgaXMgZGVwcmVjYXRlZCwgdXNlIGRhdGVwaWNrZXItb3B0aW9ucyBhdHRyaWJ1dGUgaW5zdGVhZFwiKX0pLGFuZ3VsYXIuZm9yRWFjaChbXCJkYXRlRGlzYWJsZWRcIixcImN1c3RvbUNsYXNzXCJdLGZ1bmN0aW9uKGUpe2FuZ3VsYXIuaXNEZWZpbmVkKHRbZV0pJiZ1JiZyLndhcm4oXCJ1aWItZGF0ZXBpY2tlciBcIitlK1wiIGF0dHJpYnV0ZSB1c2FnZSBpcyBkZXByZWNhdGVkLCB1c2UgZGF0ZXBpY2tlci1vcHRpb25zIGF0dHJpYnV0ZSBpbnN0ZWFkXCIpfSksYW5ndWxhci5pc0RlZmluZWQodC5zdGFydGluZ0RheSk/KHUmJnIud2FybihcInVpYi1kYXRlcGlja2VyIHN0YXJ0aW5nRGF5IGF0dHJpYnV0ZSB1c2FnZSBpcyBkZXByZWNhdGVkLCB1c2UgZGF0ZXBpY2tlci1vcHRpb25zIGF0dHJpYnV0ZSBpbnN0ZWFkXCIpLGQuc3RhcnRpbmdEYXk9ZS4kcGFyZW50LiRldmFsKHQuc3RhcnRpbmdEYXkpKTpkLnN0YXJ0aW5nRGF5PWFuZ3VsYXIuaXNOdW1iZXIocy5zdGFydGluZ0RheSk/cy5zdGFydGluZ0RheToobi5EQVRFVElNRV9GT1JNQVRTLkZJUlNUREFZT0ZXRUVLKzgpJTcsYW5ndWxhci5mb3JFYWNoKFtcIm1pbkRhdGVcIixcIm1heERhdGVcIl0sZnVuY3Rpb24oYSl7dFthXT8odSYmci53YXJuKFwidWliLWRhdGVwaWNrZXIgXCIrYStcIiBhdHRyaWJ1dGUgdXNhZ2UgaXMgZGVwcmVjYXRlZCwgdXNlIGRhdGVwaWNrZXItb3B0aW9ucyBhdHRyaWJ1dGUgaW5zdGVhZFwiKSxtLnB1c2goZS4kcGFyZW50LiR3YXRjaCh0W2FdLGZ1bmN0aW9uKGUpe2RbYV09ZT9hbmd1bGFyLmlzRGF0ZShlKT9wLmZyb21UaW1lem9uZShuZXcgRGF0ZShlKSxmLnRpbWV6b25lKTpuZXcgRGF0ZShvKGUsXCJtZWRpdW1cIikpOm51bGwsZC5yZWZyZXNoVmlldygpfSkpKTpkW2FdPXNbYV0/cC5mcm9tVGltZXpvbmUobmV3IERhdGUoc1thXSksZi50aW1lem9uZSk6bnVsbH0pLGFuZ3VsYXIuZm9yRWFjaChbXCJtaW5Nb2RlXCIsXCJtYXhNb2RlXCJdLGZ1bmN0aW9uKGEpe3RbYV0/KHUmJnIud2FybihcInVpYi1kYXRlcGlja2VyIFwiK2ErXCIgYXR0cmlidXRlIHVzYWdlIGlzIGRlcHJlY2F0ZWQsIHVzZSBkYXRlcGlja2VyLW9wdGlvbnMgYXR0cmlidXRlIGluc3RlYWRcIiksbS5wdXNoKGUuJHBhcmVudC4kd2F0Y2godFthXSxmdW5jdGlvbihpKXtkW2FdPWVbYV09YW5ndWxhci5pc0RlZmluZWQoaSk/aTp0W2FdLChcIm1pbk1vZGVcIj09PWEmJmQubW9kZXMuaW5kZXhPZihlLmRhdGVwaWNrZXJNb2RlKTxkLm1vZGVzLmluZGV4T2YoZFthXSl8fFwibWF4TW9kZVwiPT09YSYmZC5tb2Rlcy5pbmRleE9mKGUuZGF0ZXBpY2tlck1vZGUpPmQubW9kZXMuaW5kZXhPZihkW2FdKSkmJihlLmRhdGVwaWNrZXJNb2RlPWRbYV0pfSkpKTpkW2FdPWVbYV09c1thXXx8bnVsbH0pLGFuZ3VsYXIuaXNEZWZpbmVkKHQuaW5pdERhdGUpKXt1JiZyLndhcm4oXCJ1aWItZGF0ZXBpY2tlciBpbml0RGF0ZSBhdHRyaWJ1dGUgdXNhZ2UgaXMgZGVwcmVjYXRlZCwgdXNlIGRhdGVwaWNrZXItb3B0aW9ucyBhdHRyaWJ1dGUgaW5zdGVhZFwiKTt2YXIgYj1wLmZyb21UaW1lem9uZShlLiRwYXJlbnQuJGV2YWwodC5pbml0RGF0ZSksZi50aW1lem9uZSk7dGhpcy5hY3RpdmVEYXRlPWlzTmFOKGIpP25ldyBEYXRlOmIsbS5wdXNoKGUuJHBhcmVudC4kd2F0Y2godC5pbml0RGF0ZSxmdW5jdGlvbihlKXtlJiYoaC4kaXNFbXB0eShoLiRtb2RlbFZhbHVlKXx8aC4kaW52YWxpZCkmJihlPXAuZnJvbVRpbWV6b25lKGUsZi50aW1lem9uZSksZC5hY3RpdmVEYXRlPWlzTmFOKGUpP25ldyBEYXRlOmUsZC5yZWZyZXNoVmlldygpKX0pKX1lbHNlIHRoaXMuYWN0aXZlRGF0ZT1uZXcgRGF0ZTt0LmRhdGVwaWNrZXJNb2RlJiZ1JiZyLndhcm4oXCJ1aWItZGF0ZXBpY2tlciBkYXRlcGlja2VyTW9kZSBhdHRyaWJ1dGUgdXNhZ2UgaXMgZGVwcmVjYXRlZCwgdXNlIGRhdGVwaWNrZXItb3B0aW9ucyBhdHRyaWJ1dGUgaW5zdGVhZFwiKSxlLmRhdGVwaWNrZXJNb2RlPWUuZGF0ZXBpY2tlck1vZGV8fHMuZGF0ZXBpY2tlck1vZGV9ZS51bmlxdWVJZD1cImRhdGVwaWNrZXItXCIrZS4kaWQrXCItXCIrTWF0aC5mbG9vcigxZTQqTWF0aC5yYW5kb20oKSksZS5kaXNhYmxlZD1hbmd1bGFyLmlzRGVmaW5lZCh0LmRpc2FibGVkKXx8ITEsYW5ndWxhci5pc0RlZmluZWQodC5uZ0Rpc2FibGVkKSYmbS5wdXNoKGUuJHBhcmVudC4kd2F0Y2godC5uZ0Rpc2FibGVkLGZ1bmN0aW9uKHQpe2UuZGlzYWJsZWQ9dCxkLnJlZnJlc2hWaWV3KCl9KSksZS5pc0FjdGl2ZT1mdW5jdGlvbih0KXtyZXR1cm4gMD09PWQuY29tcGFyZSh0LmRhdGUsZC5hY3RpdmVEYXRlKT8oZS5hY3RpdmVEYXRlSWQ9dC51aWQsITApOiExfSx0aGlzLmluaXQ9ZnVuY3Rpb24oZSl7aD1lLGY9ZS4kb3B0aW9uc3x8cy5uZ01vZGVsT3B0aW9ucyx0aGlzLmFjdGl2ZURhdGU9aC4kbW9kZWxWYWx1ZXx8bmV3IERhdGUsaC4kcmVuZGVyPWZ1bmN0aW9uKCl7ZC5yZW5kZXIoKX19LHRoaXMucmVuZGVyPWZ1bmN0aW9uKCl7aWYoaC4kdmlld1ZhbHVlKXt2YXIgZT1uZXcgRGF0ZShoLiR2aWV3VmFsdWUpLHQ9IWlzTmFOKGUpO3Q/dGhpcy5hY3RpdmVEYXRlPXAuZnJvbVRpbWV6b25lKGUsZi50aW1lem9uZSk6bHx8ci5lcnJvcignRGF0ZXBpY2tlciBkaXJlY3RpdmU6IFwibmctbW9kZWxcIiB2YWx1ZSBtdXN0IGJlIGEgRGF0ZSBvYmplY3QnKX10aGlzLnJlZnJlc2hWaWV3KCl9LHRoaXMucmVmcmVzaFZpZXc9ZnVuY3Rpb24oKXtpZih0aGlzLmVsZW1lbnQpe2Uuc2VsZWN0ZWREdD1udWxsLHRoaXMuX3JlZnJlc2hWaWV3KCksZS5hY3RpdmVEdCYmKGUuYWN0aXZlRGF0ZUlkPWUuYWN0aXZlRHQudWlkKTt2YXIgdD1oLiR2aWV3VmFsdWU/bmV3IERhdGUoaC4kdmlld1ZhbHVlKTpudWxsO3Q9cC5mcm9tVGltZXpvbmUodCxmLnRpbWV6b25lKSxoLiRzZXRWYWxpZGl0eShcImRhdGVEaXNhYmxlZFwiLCF0fHx0aGlzLmVsZW1lbnQmJiF0aGlzLmlzRGlzYWJsZWQodCkpfX0sdGhpcy5jcmVhdGVEYXRlT2JqZWN0PWZ1bmN0aW9uKHQsYSl7dmFyIGk9aC4kdmlld1ZhbHVlP25ldyBEYXRlKGguJHZpZXdWYWx1ZSk6bnVsbDtpPXAuZnJvbVRpbWV6b25lKGksZi50aW1lem9uZSk7dmFyIG49bmV3IERhdGU7bj1wLmZyb21UaW1lem9uZShuLGYudGltZXpvbmUpO3ZhciByPXRoaXMuY29tcGFyZSh0LG4pLG89e2RhdGU6dCxsYWJlbDpwLmZpbHRlcih0LGEpLHNlbGVjdGVkOmkmJjA9PT10aGlzLmNvbXBhcmUodCxpKSxkaXNhYmxlZDp0aGlzLmlzRGlzYWJsZWQodCkscGFzdDowPnIsY3VycmVudDowPT09cixmdXR1cmU6cj4wLGN1c3RvbUNsYXNzOnRoaXMuY3VzdG9tQ2xhc3ModCl8fG51bGx9O3JldHVybiBpJiYwPT09dGhpcy5jb21wYXJlKHQsaSkmJihlLnNlbGVjdGVkRHQ9byksZC5hY3RpdmVEYXRlJiYwPT09dGhpcy5jb21wYXJlKG8uZGF0ZSxkLmFjdGl2ZURhdGUpJiYoZS5hY3RpdmVEdD1vKSxvfSx0aGlzLmlzRGlzYWJsZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIGUuZGlzYWJsZWR8fHRoaXMubWluRGF0ZSYmdGhpcy5jb21wYXJlKHQsdGhpcy5taW5EYXRlKTwwfHx0aGlzLm1heERhdGUmJnRoaXMuY29tcGFyZSh0LHRoaXMubWF4RGF0ZSk+MHx8ZS5kYXRlRGlzYWJsZWQmJmUuZGF0ZURpc2FibGVkKHtkYXRlOnQsbW9kZTplLmRhdGVwaWNrZXJNb2RlfSl9LHRoaXMuY3VzdG9tQ2xhc3M9ZnVuY3Rpb24odCl7cmV0dXJuIGUuY3VzdG9tQ2xhc3Moe2RhdGU6dCxtb2RlOmUuZGF0ZXBpY2tlck1vZGV9KX0sdGhpcy5zcGxpdD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgYT1bXTtlLmxlbmd0aD4wOylhLnB1c2goZS5zcGxpY2UoMCx0KSk7cmV0dXJuIGF9LGUuc2VsZWN0PWZ1bmN0aW9uKHQpe2lmKGUuZGF0ZXBpY2tlck1vZGU9PT1kLm1pbk1vZGUpe3ZhciBhPWguJHZpZXdWYWx1ZT9wLmZyb21UaW1lem9uZShuZXcgRGF0ZShoLiR2aWV3VmFsdWUpLGYudGltZXpvbmUpOm5ldyBEYXRlKDAsMCwwLDAsMCwwLDApO2Euc2V0RnVsbFllYXIodC5nZXRGdWxsWWVhcigpLHQuZ2V0TW9udGgoKSx0LmdldERhdGUoKSksYT1wLnRvVGltZXpvbmUoYSxmLnRpbWV6b25lKSxoLiRzZXRWaWV3VmFsdWUoYSksaC4kcmVuZGVyKCl9ZWxzZSBkLmFjdGl2ZURhdGU9dCxjKGQubW9kZXNbZC5tb2Rlcy5pbmRleE9mKGUuZGF0ZXBpY2tlck1vZGUpLTFdKSxlLiRlbWl0KFwidWliOmRhdGVwaWNrZXIubW9kZVwiKX0sZS5tb3ZlPWZ1bmN0aW9uKGUpe3ZhciB0PWQuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpK2UqKGQuc3RlcC55ZWFyc3x8MCksYT1kLmFjdGl2ZURhdGUuZ2V0TW9udGgoKStlKihkLnN0ZXAubW9udGhzfHwwKTtkLmFjdGl2ZURhdGUuc2V0RnVsbFllYXIodCxhLDEpLGQucmVmcmVzaFZpZXcoKX0sZS50b2dnbGVNb2RlPWZ1bmN0aW9uKHQpe3Q9dHx8MSxlLmRhdGVwaWNrZXJNb2RlPT09ZC5tYXhNb2RlJiYxPT09dHx8ZS5kYXRlcGlja2VyTW9kZT09PWQubWluTW9kZSYmLTE9PT10fHwoYyhkLm1vZGVzW2QubW9kZXMuaW5kZXhPZihlLmRhdGVwaWNrZXJNb2RlKSt0XSksZS4kZW1pdChcInVpYjpkYXRlcGlja2VyLm1vZGVcIikpfSxlLmtleXM9ezEzOlwiZW50ZXJcIiwzMjpcInNwYWNlXCIsMzM6XCJwYWdldXBcIiwzNDpcInBhZ2Vkb3duXCIsMzU6XCJlbmRcIiwzNjpcImhvbWVcIiwzNzpcImxlZnRcIiwzODpcInVwXCIsMzk6XCJyaWdodFwiLDQwOlwiZG93blwifTt2YXIgeT1mdW5jdGlvbigpe2QuZWxlbWVudFswXS5mb2N1cygpfTtlLiRvbihcInVpYjpkYXRlcGlja2VyLmZvY3VzXCIseSksZS5rZXlkb3duPWZ1bmN0aW9uKHQpe3ZhciBhPWUua2V5c1t0LndoaWNoXTtpZihhJiYhdC5zaGlmdEtleSYmIXQuYWx0S2V5JiYhZS5kaXNhYmxlZClpZih0LnByZXZlbnREZWZhdWx0KCksZC5zaG9ydGN1dFByb3BhZ2F0aW9ufHx0LnN0b3BQcm9wYWdhdGlvbigpLFwiZW50ZXJcIj09PWF8fFwic3BhY2VcIj09PWEpe2lmKGQuaXNEaXNhYmxlZChkLmFjdGl2ZURhdGUpKXJldHVybjtlLnNlbGVjdChkLmFjdGl2ZURhdGUpfWVsc2UhdC5jdHJsS2V5fHxcInVwXCIhPT1hJiZcImRvd25cIiE9PWE/KGQuaGFuZGxlS2V5RG93bihhLHQpLGQucmVmcmVzaFZpZXcoKSk6ZS50b2dnbGVNb2RlKFwidXBcIj09PWE/MTotMSl9LGUuJG9uKFwiJGRlc3Ryb3lcIixmdW5jdGlvbigpe2Zvcig7bS5sZW5ndGg7KW0uc2hpZnQoKSgpfSl9XSkuY29udHJvbGxlcihcIlVpYkRheXBpY2tlckNvbnRyb2xsZXJcIixbXCIkc2NvcGVcIixcIiRlbGVtZW50XCIsXCJkYXRlRmlsdGVyXCIsZnVuY3Rpb24oZSx0LGEpe2Z1bmN0aW9uIGkoZSx0KXtyZXR1cm4gMSE9PXR8fGUlNCE9PTB8fGUlMTAwPT09MCYmZSU0MDAhPT0wP3JbdF06Mjl9ZnVuY3Rpb24gbihlKXt2YXIgdD1uZXcgRGF0ZShlKTt0LnNldERhdGUodC5nZXREYXRlKCkrNC0odC5nZXREYXkoKXx8NykpO3ZhciBhPXQuZ2V0VGltZSgpO3JldHVybiB0LnNldE1vbnRoKDApLHQuc2V0RGF0ZSgxKSxNYXRoLmZsb29yKE1hdGgucm91bmQoKGEtdCkvODY0ZTUpLzcpKzF9dmFyIHI9WzMxLDI4LDMxLDMwLDMxLDMwLDMxLDMxLDMwLDMxLDMwLDMxXTt0aGlzLnN0ZXA9e21vbnRoczoxfSx0aGlzLmVsZW1lbnQ9dCx0aGlzLmluaXQ9ZnVuY3Rpb24odCl7YW5ndWxhci5leHRlbmQodCx0aGlzKSxlLnNob3dXZWVrcz10LnNob3dXZWVrcyx0LnJlZnJlc2hWaWV3KCl9LHRoaXMuZ2V0RGF0ZXM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIGEsaT1uZXcgQXJyYXkodCksbj1uZXcgRGF0ZShlKSxyPTA7dD5yOylhPW5ldyBEYXRlKG4pLGlbcisrXT1hLG4uc2V0RGF0ZShuLmdldERhdGUoKSsxKTtyZXR1cm4gaX0sdGhpcy5fcmVmcmVzaFZpZXc9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSxpPXRoaXMuYWN0aXZlRGF0ZS5nZXRNb250aCgpLHI9bmV3IERhdGUodGhpcy5hY3RpdmVEYXRlKTtyLnNldEZ1bGxZZWFyKHQsaSwxKTt2YXIgbz10aGlzLnN0YXJ0aW5nRGF5LXIuZ2V0RGF5KCkscz1vPjA/Ny1vOi1vLGw9bmV3IERhdGUocik7cz4wJiZsLnNldERhdGUoLXMrMSk7Zm9yKHZhciB1PXRoaXMuZ2V0RGF0ZXMobCw0MikscD0wOzQyPnA7cCsrKXVbcF09YW5ndWxhci5leHRlbmQodGhpcy5jcmVhdGVEYXRlT2JqZWN0KHVbcF0sdGhpcy5mb3JtYXREYXkpLHtzZWNvbmRhcnk6dVtwXS5nZXRNb250aCgpIT09aSx1aWQ6ZS51bmlxdWVJZCtcIi1cIitwfSk7ZS5sYWJlbHM9bmV3IEFycmF5KDcpO2Zvcih2YXIgYz0wOzc+YztjKyspZS5sYWJlbHNbY109e2FiYnI6YSh1W2NdLmRhdGUsdGhpcy5mb3JtYXREYXlIZWFkZXIpLGZ1bGw6YSh1W2NdLmRhdGUsXCJFRUVFXCIpfTtpZihlLnRpdGxlPWEodGhpcy5hY3RpdmVEYXRlLHRoaXMuZm9ybWF0RGF5VGl0bGUpLGUucm93cz10aGlzLnNwbGl0KHUsNyksZS5zaG93V2Vla3Mpe2Uud2Vla051bWJlcnM9W107Zm9yKHZhciBkPSgxMS10aGlzLnN0YXJ0aW5nRGF5KSU3LGg9ZS5yb3dzLmxlbmd0aCxmPTA7aD5mO2YrKyllLndlZWtOdW1iZXJzLnB1c2gobihlLnJvd3NbZl1bZF0uZGF0ZSkpfX0sdGhpcy5jb21wYXJlPWZ1bmN0aW9uKGUsdCl7dmFyIGE9bmV3IERhdGUoZS5nZXRGdWxsWWVhcigpLGUuZ2V0TW9udGgoKSxlLmdldERhdGUoKSksaT1uZXcgRGF0ZSh0LmdldEZ1bGxZZWFyKCksdC5nZXRNb250aCgpLHQuZ2V0RGF0ZSgpKTtyZXR1cm4gYS5zZXRGdWxsWWVhcihlLmdldEZ1bGxZZWFyKCkpLGkuc2V0RnVsbFllYXIodC5nZXRGdWxsWWVhcigpKSxhLWl9LHRoaXMuaGFuZGxlS2V5RG93bj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmFjdGl2ZURhdGUuZ2V0RGF0ZSgpO2lmKFwibGVmdFwiPT09ZSl0LT0xO2Vsc2UgaWYoXCJ1cFwiPT09ZSl0LT03O2Vsc2UgaWYoXCJyaWdodFwiPT09ZSl0Kz0xO2Vsc2UgaWYoXCJkb3duXCI9PT1lKXQrPTc7ZWxzZSBpZihcInBhZ2V1cFwiPT09ZXx8XCJwYWdlZG93blwiPT09ZSl7dmFyIGE9dGhpcy5hY3RpdmVEYXRlLmdldE1vbnRoKCkrKFwicGFnZXVwXCI9PT1lPy0xOjEpO3RoaXMuYWN0aXZlRGF0ZS5zZXRNb250aChhLDEpLHQ9TWF0aC5taW4oaSh0aGlzLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSx0aGlzLmFjdGl2ZURhdGUuZ2V0TW9udGgoKSksdCl9ZWxzZVwiaG9tZVwiPT09ZT90PTE6XCJlbmRcIj09PWUmJih0PWkodGhpcy5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCksdGhpcy5hY3RpdmVEYXRlLmdldE1vbnRoKCkpKTt0aGlzLmFjdGl2ZURhdGUuc2V0RGF0ZSh0KX19XSkuY29udHJvbGxlcihcIlVpYk1vbnRocGlja2VyQ29udHJvbGxlclwiLFtcIiRzY29wZVwiLFwiJGVsZW1lbnRcIixcImRhdGVGaWx0ZXJcIixmdW5jdGlvbihlLHQsYSl7dGhpcy5zdGVwPXt5ZWFyczoxfSx0aGlzLmVsZW1lbnQ9dCx0aGlzLmluaXQ9ZnVuY3Rpb24oZSl7YW5ndWxhci5leHRlbmQoZSx0aGlzKSxlLnJlZnJlc2hWaWV3KCl9LHRoaXMuX3JlZnJlc2hWaWV3PWZ1bmN0aW9uKCl7Zm9yKHZhciB0LGk9bmV3IEFycmF5KDEyKSxuPXRoaXMuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpLHI9MDsxMj5yO3IrKyl0PW5ldyBEYXRlKHRoaXMuYWN0aXZlRGF0ZSksdC5zZXRGdWxsWWVhcihuLHIsMSksaVtyXT1hbmd1bGFyLmV4dGVuZCh0aGlzLmNyZWF0ZURhdGVPYmplY3QodCx0aGlzLmZvcm1hdE1vbnRoKSx7dWlkOmUudW5pcXVlSWQrXCItXCIrcn0pO2UudGl0bGU9YSh0aGlzLmFjdGl2ZURhdGUsdGhpcy5mb3JtYXRNb250aFRpdGxlKSxlLnJvd3M9dGhpcy5zcGxpdChpLDMpfSx0aGlzLmNvbXBhcmU9ZnVuY3Rpb24oZSx0KXt2YXIgYT1uZXcgRGF0ZShlLmdldEZ1bGxZZWFyKCksZS5nZXRNb250aCgpKSxpPW5ldyBEYXRlKHQuZ2V0RnVsbFllYXIoKSx0LmdldE1vbnRoKCkpO3JldHVybiBhLnNldEZ1bGxZZWFyKGUuZ2V0RnVsbFllYXIoKSksaS5zZXRGdWxsWWVhcih0LmdldEZ1bGxZZWFyKCkpLGEtaX0sdGhpcy5oYW5kbGVLZXlEb3duPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuYWN0aXZlRGF0ZS5nZXRNb250aCgpO2lmKFwibGVmdFwiPT09ZSl0LT0xO2Vsc2UgaWYoXCJ1cFwiPT09ZSl0LT0zO2Vsc2UgaWYoXCJyaWdodFwiPT09ZSl0Kz0xO2Vsc2UgaWYoXCJkb3duXCI9PT1lKXQrPTM7ZWxzZSBpZihcInBhZ2V1cFwiPT09ZXx8XCJwYWdlZG93blwiPT09ZSl7dmFyIGE9dGhpcy5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCkrKFwicGFnZXVwXCI9PT1lPy0xOjEpO3RoaXMuYWN0aXZlRGF0ZS5zZXRGdWxsWWVhcihhKX1lbHNlXCJob21lXCI9PT1lP3Q9MDpcImVuZFwiPT09ZSYmKHQ9MTEpO3RoaXMuYWN0aXZlRGF0ZS5zZXRNb250aCh0KX19XSkuY29udHJvbGxlcihcIlVpYlllYXJwaWNrZXJDb250cm9sbGVyXCIsW1wiJHNjb3BlXCIsXCIkZWxlbWVudFwiLFwiZGF0ZUZpbHRlclwiLGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gYShlKXtyZXR1cm4gcGFyc2VJbnQoKGUtMSkvbiwxMCkqbisxfXZhciBpLG47dGhpcy5lbGVtZW50PXQsdGhpcy55ZWFycGlja2VySW5pdD1mdW5jdGlvbigpe2k9dGhpcy55ZWFyQ29sdW1ucyxuPXRoaXMueWVhclJvd3MqaSx0aGlzLnN0ZXA9e3llYXJzOm59fSx0aGlzLl9yZWZyZXNoVmlldz1mdW5jdGlvbigpe2Zvcih2YXIgdCxyPW5ldyBBcnJheShuKSxvPTAscz1hKHRoaXMuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpKTtuPm87bysrKXQ9bmV3IERhdGUodGhpcy5hY3RpdmVEYXRlKSx0LnNldEZ1bGxZZWFyKHMrbywwLDEpLHJbb109YW5ndWxhci5leHRlbmQodGhpcy5jcmVhdGVEYXRlT2JqZWN0KHQsdGhpcy5mb3JtYXRZZWFyKSx7dWlkOmUudW5pcXVlSWQrXCItXCIrb30pO2UudGl0bGU9W3JbMF0ubGFiZWwscltuLTFdLmxhYmVsXS5qb2luKFwiIC0gXCIpLGUucm93cz10aGlzLnNwbGl0KHIsaSksZS5jb2x1bW5zPWl9LHRoaXMuY29tcGFyZT1mdW5jdGlvbihlLHQpe3JldHVybiBlLmdldEZ1bGxZZWFyKCktdC5nZXRGdWxsWWVhcigpfSx0aGlzLmhhbmRsZUtleURvd249ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCk7XCJsZWZ0XCI9PT1lP3QtPTE6XCJ1cFwiPT09ZT90LT1pOlwicmlnaHRcIj09PWU/dCs9MTpcImRvd25cIj09PWU/dCs9aTpcInBhZ2V1cFwiPT09ZXx8XCJwYWdlZG93blwiPT09ZT90Kz0oXCJwYWdldXBcIj09PWU/LTE6MSkqbjpcImhvbWVcIj09PWU/dD1hKHRoaXMuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpKTpcImVuZFwiPT09ZSYmKHQ9YSh0aGlzLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSkrbi0xKSx0aGlzLmFjdGl2ZURhdGUuc2V0RnVsbFllYXIodCl9fV0pLmRpcmVjdGl2ZShcInVpYkRhdGVwaWNrZXJcIixmdW5jdGlvbigpe3JldHVybntyZXBsYWNlOiEwLHRlbXBsYXRlVXJsOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQudGVtcGxhdGVVcmx8fFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvZGF0ZXBpY2tlci5odG1sXCJ9LHNjb3BlOntkYXRlcGlja2VyTW9kZTpcIj0/XCIsZGF0ZXBpY2tlck9wdGlvbnM6XCI9P1wiLGRhdGVEaXNhYmxlZDpcIiZcIixjdXN0b21DbGFzczpcIiZcIixzaG9ydGN1dFByb3BhZ2F0aW9uOlwiJj9cIn0scmVxdWlyZTpbXCJ1aWJEYXRlcGlja2VyXCIsXCJebmdNb2RlbFwiXSxjb250cm9sbGVyOlwiVWliRGF0ZXBpY2tlckNvbnRyb2xsZXJcIixjb250cm9sbGVyQXM6XCJkYXRlcGlja2VyXCIsbGluazpmdW5jdGlvbihlLHQsYSxpKXt2YXIgbj1pWzBdLHI9aVsxXTtuLmluaXQocil9fX0pLmRpcmVjdGl2ZShcInVpYkRheXBpY2tlclwiLGZ1bmN0aW9uKCl7cmV0dXJue3JlcGxhY2U6ITAsdGVtcGxhdGVVcmw6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC50ZW1wbGF0ZVVybHx8XCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9kYXkuaHRtbFwifSxyZXF1aXJlOltcIl51aWJEYXRlcGlja2VyXCIsXCJ1aWJEYXlwaWNrZXJcIl0sY29udHJvbGxlcjpcIlVpYkRheXBpY2tlckNvbnRyb2xsZXJcIixsaW5rOmZ1bmN0aW9uKGUsdCxhLGkpe3ZhciBuPWlbMF0scj1pWzFdO3IuaW5pdChuKX19fSkuZGlyZWN0aXZlKFwidWliTW9udGhwaWNrZXJcIixmdW5jdGlvbigpe3JldHVybntyZXBsYWNlOiEwLHRlbXBsYXRlVXJsOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQudGVtcGxhdGVVcmx8fFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvbW9udGguaHRtbFwifSxyZXF1aXJlOltcIl51aWJEYXRlcGlja2VyXCIsXCJ1aWJNb250aHBpY2tlclwiXSxjb250cm9sbGVyOlwiVWliTW9udGhwaWNrZXJDb250cm9sbGVyXCIsbGluazpmdW5jdGlvbihlLHQsYSxpKXt2YXIgbj1pWzBdLHI9aVsxXTtyLmluaXQobil9fX0pLmRpcmVjdGl2ZShcInVpYlllYXJwaWNrZXJcIixmdW5jdGlvbigpe3JldHVybntyZXBsYWNlOiEwLHRlbXBsYXRlVXJsOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQudGVtcGxhdGVVcmx8fFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIveWVhci5odG1sXCJ9LHJlcXVpcmU6W1wiXnVpYkRhdGVwaWNrZXJcIixcInVpYlllYXJwaWNrZXJcIl0sY29udHJvbGxlcjpcIlVpYlllYXJwaWNrZXJDb250cm9sbGVyXCIsbGluazpmdW5jdGlvbihlLHQsYSxpKXt2YXIgbj1pWzBdO2FuZ3VsYXIuZXh0ZW5kKG4saVsxXSksbi55ZWFycGlja2VySW5pdCgpLG4ucmVmcmVzaFZpZXcoKX19fSkudmFsdWUoXCJ1aWJEYXRlcGlja2VyUG9wdXBBdHRyaWJ1dGVXYXJuaW5nXCIsITApLmNvbnN0YW50KFwidWliRGF0ZXBpY2tlclBvcHVwQ29uZmlnXCIse2FsdElucHV0Rm9ybWF0czpbXSxhcHBlbmRUb0JvZHk6ITEsY2xlYXJUZXh0OlwiQ2xlYXJcIixjbG9zZU9uRGF0ZVNlbGVjdGlvbjohMCxjbG9zZVRleHQ6XCJEb25lXCIsY3VycmVudFRleHQ6XCJUb2RheVwiLGRhdGVwaWNrZXJQb3B1cDpcInl5eXktTU0tZGRcIixkYXRlcGlja2VyUG9wdXBUZW1wbGF0ZVVybDpcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL3BvcHVwLmh0bWxcIixkYXRlcGlja2VyVGVtcGxhdGVVcmw6XCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9kYXRlcGlja2VyLmh0bWxcIixodG1sNVR5cGVzOntkYXRlOlwieXl5eS1NTS1kZFwiLFwiZGF0ZXRpbWUtbG9jYWxcIjpcInl5eXktTU0tZGRUSEg6bW06c3Muc3NzXCIsbW9udGg6XCJ5eXl5LU1NXCJ9LG9uT3BlbkZvY3VzOiEwLHNob3dCdXR0b25CYXI6ITAscGxhY2VtZW50OlwiYXV0byBib3R0b20tbGVmdFwifSkuY29udHJvbGxlcihcIlVpYkRhdGVwaWNrZXJQb3B1cENvbnRyb2xsZXJcIixbXCIkc2NvcGVcIixcIiRlbGVtZW50XCIsXCIkYXR0cnNcIixcIiRjb21waWxlXCIsXCIkbG9nXCIsXCIkcGFyc2VcIixcIiR3aW5kb3dcIixcIiRkb2N1bWVudFwiLFwiJHJvb3RTY29wZVwiLFwiJHVpYlBvc2l0aW9uXCIsXCJkYXRlRmlsdGVyXCIsXCJ1aWJEYXRlUGFyc2VyXCIsXCJ1aWJEYXRlcGlja2VyUG9wdXBDb25maWdcIixcIiR0aW1lb3V0XCIsXCJ1aWJEYXRlcGlja2VyQ29uZmlnXCIsXCJ1aWJEYXRlcGlja2VyUG9wdXBBdHRyaWJ1dGVXYXJuaW5nXCIsZnVuY3Rpb24oZSx0LGEsaSxuLHIsbyxzLGwsdSxwLGMsZCxoLGYsbSl7ZnVuY3Rpb24gZyhlKXtyZXR1cm4gZS5yZXBsYWNlKC8oW0EtWl0pL2csZnVuY3Rpb24oZSl7cmV0dXJuXCItXCIrZS50b0xvd2VyQ2FzZSgpfSl9ZnVuY3Rpb24gYih0KXt2YXIgYT1jLnBhcnNlKHQsJCxlLmRhdGUpO2lmKGlzTmFOKGEpKWZvcih2YXIgaT0wO2k8Ti5sZW5ndGg7aSsrKWlmKGE9Yy5wYXJzZSh0LE5baV0sZS5kYXRlKSwhaXNOYU4oYSkpcmV0dXJuIGE7cmV0dXJuIGF9ZnVuY3Rpb24geShlKXtpZihhbmd1bGFyLmlzTnVtYmVyKGUpJiYoZT1uZXcgRGF0ZShlKSksIWUpcmV0dXJuIG51bGw7aWYoYW5ndWxhci5pc0RhdGUoZSkmJiFpc05hTihlKSlyZXR1cm4gZTtpZihhbmd1bGFyLmlzU3RyaW5nKGUpKXt2YXIgdD1iKGUpO2lmKCFpc05hTih0KSlyZXR1cm4gYy50b1RpbWV6b25lKHQsUC50aW1lem9uZSl9cmV0dXJuIEMuJG9wdGlvbnMmJkMuJG9wdGlvbnMuYWxsb3dJbnZhbGlkP2U6dm9pZCAwfWZ1bmN0aW9uIHYoZSx0KXt2YXIgaT1lfHx0O3JldHVybiBhLm5nUmVxdWlyZWR8fGk/KGFuZ3VsYXIuaXNOdW1iZXIoaSkmJihpPW5ldyBEYXRlKGkpKSxpP2FuZ3VsYXIuaXNEYXRlKGkpJiYhaXNOYU4oaSk/ITA6YW5ndWxhci5pc1N0cmluZyhpKT8haXNOYU4oYih0KSk6ITE6ITApOiEwfWZ1bmN0aW9uIEQoYSl7aWYoZS5pc09wZW58fCFlLmRpc2FibGVkKXt2YXIgaT1BWzBdLG49dFswXS5jb250YWlucyhhLnRhcmdldCkscj12b2lkIDAhPT1pLmNvbnRhaW5zJiZpLmNvbnRhaW5zKGEudGFyZ2V0KTshZS5pc09wZW58fG58fHJ8fGUuJGFwcGx5KGZ1bmN0aW9uKCl7ZS5pc09wZW49ITF9KX19ZnVuY3Rpb24gayhhKXsyNz09PWEud2hpY2gmJmUuaXNPcGVuPyhhLnByZXZlbnREZWZhdWx0KCksYS5zdG9wUHJvcGFnYXRpb24oKSxlLiRhcHBseShmdW5jdGlvbigpe2UuaXNPcGVuPSExfSksdFswXS5mb2N1cygpKTo0MCE9PWEud2hpY2h8fGUuaXNPcGVufHwoYS5wcmV2ZW50RGVmYXVsdCgpLGEuc3RvcFByb3BhZ2F0aW9uKCksZS4kYXBwbHkoZnVuY3Rpb24oKXtlLmlzT3Blbj0hMH0pKX1mdW5jdGlvbiB3KCl7aWYoZS5pc09wZW4pe3ZhciBpPWFuZ3VsYXIuZWxlbWVudChBWzBdLnF1ZXJ5U2VsZWN0b3IoXCIudWliLWRhdGVwaWNrZXItcG9wdXBcIikpLG49YS5wb3B1cFBsYWNlbWVudD9hLnBvcHVwUGxhY2VtZW50OmQucGxhY2VtZW50LHI9dS5wb3NpdGlvbkVsZW1lbnRzKHQsaSxuLHgpO2kuY3NzKHt0b3A6ci50b3ArXCJweFwiLGxlZnQ6ci5sZWZ0K1wicHhcIn0pLGkuaGFzQ2xhc3MoXCJ1aWItcG9zaXRpb24tbWVhc3VyZVwiKSYmaS5yZW1vdmVDbGFzcyhcInVpYi1wb3NpdGlvbi1tZWFzdXJlXCIpfX12YXIgJCxNLHgsVCxPLEUsRixTLEksQyxQLEEsTixVPXt9LFk9ITEsej1bXTtlLndhdGNoRGF0YT17fSx0aGlzLmluaXQ9ZnVuY3Rpb24odSl7aWYoQz11LFA9dS4kb3B0aW9uc3x8Zi5uZ01vZGVsT3B0aW9ucyxNPWFuZ3VsYXIuaXNEZWZpbmVkKGEuY2xvc2VPbkRhdGVTZWxlY3Rpb24pP2UuJHBhcmVudC4kZXZhbChhLmNsb3NlT25EYXRlU2VsZWN0aW9uKTpkLmNsb3NlT25EYXRlU2VsZWN0aW9uLHg9YW5ndWxhci5pc0RlZmluZWQoYS5kYXRlcGlja2VyQXBwZW5kVG9Cb2R5KT9lLiRwYXJlbnQuJGV2YWwoYS5kYXRlcGlja2VyQXBwZW5kVG9Cb2R5KTpkLmFwcGVuZFRvQm9keSxUPWFuZ3VsYXIuaXNEZWZpbmVkKGEub25PcGVuRm9jdXMpP2UuJHBhcmVudC4kZXZhbChhLm9uT3BlbkZvY3VzKTpkLm9uT3BlbkZvY3VzLE89YW5ndWxhci5pc0RlZmluZWQoYS5kYXRlcGlja2VyUG9wdXBUZW1wbGF0ZVVybCk/YS5kYXRlcGlja2VyUG9wdXBUZW1wbGF0ZVVybDpkLmRhdGVwaWNrZXJQb3B1cFRlbXBsYXRlVXJsLEU9YW5ndWxhci5pc0RlZmluZWQoYS5kYXRlcGlja2VyVGVtcGxhdGVVcmwpP2EuZGF0ZXBpY2tlclRlbXBsYXRlVXJsOmQuZGF0ZXBpY2tlclRlbXBsYXRlVXJsLE49YW5ndWxhci5pc0RlZmluZWQoYS5hbHRJbnB1dEZvcm1hdHMpP2UuJHBhcmVudC4kZXZhbChhLmFsdElucHV0Rm9ybWF0cyk6ZC5hbHRJbnB1dEZvcm1hdHMsZS5zaG93QnV0dG9uQmFyPWFuZ3VsYXIuaXNEZWZpbmVkKGEuc2hvd0J1dHRvbkJhcik/ZS4kcGFyZW50LiRldmFsKGEuc2hvd0J1dHRvbkJhcik6ZC5zaG93QnV0dG9uQmFyLGQuaHRtbDVUeXBlc1thLnR5cGVdPygkPWQuaHRtbDVUeXBlc1thLnR5cGVdLFk9ITApOigkPWEudWliRGF0ZXBpY2tlclBvcHVwfHxkLmRhdGVwaWNrZXJQb3B1cCxhLiRvYnNlcnZlKFwidWliRGF0ZXBpY2tlclBvcHVwXCIsZnVuY3Rpb24oZSl7dmFyIHQ9ZXx8ZC5kYXRlcGlja2VyUG9wdXA7aWYodCE9PSQmJigkPXQsQy4kbW9kZWxWYWx1ZT1udWxsLCEkKSl0aHJvdyBuZXcgRXJyb3IoXCJ1aWJEYXRlcGlja2VyUG9wdXAgbXVzdCBoYXZlIGEgZGF0ZSBmb3JtYXQgc3BlY2lmaWVkLlwiKX0pKSwhJCl0aHJvdyBuZXcgRXJyb3IoXCJ1aWJEYXRlcGlja2VyUG9wdXAgbXVzdCBoYXZlIGEgZGF0ZSBmb3JtYXQgc3BlY2lmaWVkLlwiKTtpZihZJiZhLnVpYkRhdGVwaWNrZXJQb3B1cCl0aHJvdyBuZXcgRXJyb3IoXCJIVE1MNSBkYXRlIGlucHV0IHR5cGVzIGRvIG5vdCBzdXBwb3J0IGN1c3RvbSBmb3JtYXRzLlwiKTtGPWFuZ3VsYXIuZWxlbWVudChcIjxkaXYgdWliLWRhdGVwaWNrZXItcG9wdXAtd3JhcD48ZGl2IHVpYi1kYXRlcGlja2VyPjwvZGl2PjwvZGl2PlwiKSxlLm5nTW9kZWxPcHRpb25zPWFuZ3VsYXIuY29weShQKSxlLm5nTW9kZWxPcHRpb25zLnRpbWV6b25lPW51bGwsZS5uZ01vZGVsT3B0aW9ucy51cGRhdGVPbkRlZmF1bHQ9PT0hMCYmKGUubmdNb2RlbE9wdGlvbnMudXBkYXRlT249ZS5uZ01vZGVsT3B0aW9ucy51cGRhdGVPbj9lLm5nTW9kZWxPcHRpb25zLnVwZGF0ZU9uK1wiIGRlZmF1bHRcIjpcImRlZmF1bHRcIiksRi5hdHRyKHtcIm5nLW1vZGVsXCI6XCJkYXRlXCIsXCJuZy1tb2RlbC1vcHRpb25zXCI6XCJuZ01vZGVsT3B0aW9uc1wiLFwibmctY2hhbmdlXCI6XCJkYXRlU2VsZWN0aW9uKGRhdGUpXCIsXCJ0ZW1wbGF0ZS11cmxcIjpPfSksUz1hbmd1bGFyLmVsZW1lbnQoRi5jaGlsZHJlbigpWzBdKSxTLmF0dHIoXCJ0ZW1wbGF0ZS11cmxcIixFKSxZJiZcIm1vbnRoXCI9PT1hLnR5cGUmJihTLmF0dHIoXCJkYXRlcGlja2VyLW1vZGVcIiwnXCJtb250aFwiJyksUy5hdHRyKFwibWluLW1vZGVcIixcIm1vbnRoXCIpKSxlLmRhdGVwaWNrZXJPcHRpb25zJiZTLmF0dHIoXCJkYXRlcGlja2VyLW9wdGlvbnNcIixcImRhdGVwaWNrZXJPcHRpb25zXCIpLGFuZ3VsYXIuZm9yRWFjaChbXCJtaW5Nb2RlXCIsXCJtYXhNb2RlXCIsXCJkYXRlcGlja2VyTW9kZVwiLFwic2hvcnRjdXRQcm9wYWdhdGlvblwiXSxmdW5jdGlvbih0KXtpZihhW3RdKXttJiZuLndhcm4oXCJ1aWItZGF0ZXBpY2tlciBzZXR0aW5ncyB2aWEgdWliLWRhdGVwaWNrZXItcG9wdXAgYXR0cmlidXRlcyBhcmUgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIFVJIEJvb3RzdHJhcCAxLjMsIHVzZSBkYXRlcGlja2VyLW9wdGlvbnMgYXR0cmlidXRlIGluc3RlYWRcIik7dmFyIGk9cihhW3RdKSxvPXtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaShlLiRwYXJlbnQpfX07aWYoUy5hdHRyKGcodCksXCJ3YXRjaERhdGEuXCIrdCksXCJkYXRlcGlja2VyTW9kZVwiPT09dCl7dmFyIHM9aS5hc3NpZ247by5zZXQ9ZnVuY3Rpb24odCl7cyhlLiRwYXJlbnQsdCl9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLndhdGNoRGF0YSx0LG8pfX0pLGFuZ3VsYXIuZm9yRWFjaChbXCJtaW5EYXRlXCIsXCJtYXhEYXRlXCIsXCJpbml0RGF0ZVwiXSxmdW5jdGlvbih0KXtpZihhW3RdKXttJiZuLndhcm4oXCJ1aWItZGF0ZXBpY2tlciBzZXR0aW5ncyB2aWEgdWliLWRhdGVwaWNrZXItcG9wdXAgYXR0cmlidXRlcyBhcmUgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIFVJIEJvb3RzdHJhcCAxLjMsIHVzZSBkYXRlcGlja2VyLW9wdGlvbnMgYXR0cmlidXRlIGluc3RlYWRcIik7dmFyIGk9cihhW3RdKTt6LnB1c2goZS4kcGFyZW50LiR3YXRjaChpLGZ1bmN0aW9uKGEpe2lmKFwibWluRGF0ZVwiPT09dHx8XCJtYXhEYXRlXCI9PT10KVVbdF09bnVsbD09PWE/bnVsbDphbmd1bGFyLmlzRGF0ZShhKT9jLmZyb21UaW1lem9uZShuZXcgRGF0ZShhKSxQLnRpbWV6b25lKTpuZXcgRGF0ZShwKGEsXCJtZWRpdW1cIikpLGUud2F0Y2hEYXRhW3RdPW51bGw9PT1hP251bGw6VVt0XTtlbHNle3ZhciBpPWE/bmV3IERhdGUoYSk6bmV3IERhdGU7ZS53YXRjaERhdGFbdF09Yy5mcm9tVGltZXpvbmUoaSxQLnRpbWV6b25lKX19KSksUy5hdHRyKGcodCksXCJ3YXRjaERhdGEuXCIrdCl9fSksYS5kYXRlRGlzYWJsZWQmJihtJiZuLndhcm4oXCJ1aWItZGF0ZXBpY2tlciBzZXR0aW5ncyB2aWEgdWliLWRhdGVwaWNrZXItcG9wdXAgYXR0cmlidXRlcyBhcmUgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIFVJIEJvb3RzdHJhcCAxLjMsIHVzZSBkYXRlcGlja2VyLW9wdGlvbnMgYXR0cmlidXRlIGluc3RlYWRcIiksUy5hdHRyKFwiZGF0ZS1kaXNhYmxlZFwiLFwiZGF0ZURpc2FibGVkKHsgZGF0ZTogZGF0ZSwgbW9kZTogbW9kZSB9KVwiKSksYW5ndWxhci5mb3JFYWNoKFtcImZvcm1hdERheVwiLFwiZm9ybWF0TW9udGhcIixcImZvcm1hdFllYXJcIixcImZvcm1hdERheUhlYWRlclwiLFwiZm9ybWF0RGF5VGl0bGVcIixcImZvcm1hdE1vbnRoVGl0bGVcIixcInNob3dXZWVrc1wiLFwic3RhcnRpbmdEYXlcIixcInllYXJSb3dzXCIsXCJ5ZWFyQ29sdW1uc1wiXSxmdW5jdGlvbihlKXthbmd1bGFyLmlzRGVmaW5lZChhW2VdKSYmKG0mJm4ud2FybihcInVpYi1kYXRlcGlja2VyIHNldHRpbmdzIHZpYSB1aWItZGF0ZXBpY2tlci1wb3B1cCBhdHRyaWJ1dGVzIGFyZSBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gVUkgQm9vdHN0cmFwIDEuMywgdXNlIGRhdGVwaWNrZXItb3B0aW9ucyBhdHRyaWJ1dGUgaW5zdGVhZFwiKSxTLmF0dHIoZyhlKSxhW2VdKSl9KSxhLmN1c3RvbUNsYXNzJiYobSYmbi53YXJuKFwidWliLWRhdGVwaWNrZXIgc2V0dGluZ3MgdmlhIHVpYi1kYXRlcGlja2VyLXBvcHVwIGF0dHJpYnV0ZXMgYXJlIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBVSSBCb290c3RyYXAgMS4zLCB1c2UgZGF0ZXBpY2tlci1vcHRpb25zIGF0dHJpYnV0ZSBpbnN0ZWFkXCIpLFMuYXR0cihcImN1c3RvbS1jbGFzc1wiLFwiY3VzdG9tQ2xhc3MoeyBkYXRlOiBkYXRlLCBtb2RlOiBtb2RlIH0pXCIpKSxZP0MuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih0KXtyZXR1cm4gZS5kYXRlPWMuZnJvbVRpbWV6b25lKHQsUC50aW1lem9uZSksdH0pOihDLiQkcGFyc2VyTmFtZT1cImRhdGVcIixDLiR2YWxpZGF0b3JzLmRhdGU9dixDLiRwYXJzZXJzLnVuc2hpZnQoeSksQy4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHQpe3JldHVybiBDLiRpc0VtcHR5KHQpPyhlLmRhdGU9dCx0KTooZS5kYXRlPWMuZnJvbVRpbWV6b25lKHQsUC50aW1lem9uZSksYW5ndWxhci5pc051bWJlcihlLmRhdGUpJiYoZS5kYXRlPW5ldyBEYXRlKGUuZGF0ZSkpLGMuZmlsdGVyKGUuZGF0ZSwkKSl9KSksQy4kdmlld0NoYW5nZUxpc3RlbmVycy5wdXNoKGZ1bmN0aW9uKCl7ZS5kYXRlPWIoQy4kdmlld1ZhbHVlKX0pLHQub24oXCJrZXlkb3duXCIsayksQT1pKEYpKGUpLEYucmVtb3ZlKCkseD9zLmZpbmQoXCJib2R5XCIpLmFwcGVuZChBKTp0LmFmdGVyKEEpLGUuJG9uKFwiJGRlc3Ryb3lcIixmdW5jdGlvbigpe2ZvcihlLmlzT3Blbj09PSEwJiYobC4kJHBoYXNlfHxlLiRhcHBseShmdW5jdGlvbigpe2UuaXNPcGVuPSExfSkpLEEucmVtb3ZlKCksdC5vZmYoXCJrZXlkb3duXCIsaykscy5vZmYoXCJjbGlja1wiLEQpLEkmJkkub2ZmKFwic2Nyb2xsXCIsdyksYW5ndWxhci5lbGVtZW50KG8pLm9mZihcInJlc2l6ZVwiLHcpO3oubGVuZ3RoOyl6LnNoaWZ0KCkoKX0pfSxlLmdldFRleHQ9ZnVuY3Rpb24odCl7cmV0dXJuIGVbdCtcIlRleHRcIl18fGRbdCtcIlRleHRcIl19LGUuaXNEaXNhYmxlZD1mdW5jdGlvbih0KXtyZXR1cm5cInRvZGF5XCI9PT10JiYodD1uZXcgRGF0ZSksZS53YXRjaERhdGEubWluRGF0ZSYmZS5jb21wYXJlKHQsVS5taW5EYXRlKTwwfHxlLndhdGNoRGF0YS5tYXhEYXRlJiZlLmNvbXBhcmUodCxVLm1heERhdGUpPjB9LGUuY29tcGFyZT1mdW5jdGlvbihlLHQpe3JldHVybiBuZXcgRGF0ZShlLmdldEZ1bGxZZWFyKCksZS5nZXRNb250aCgpLGUuZ2V0RGF0ZSgpKS1uZXcgRGF0ZSh0LmdldEZ1bGxZZWFyKCksdC5nZXRNb250aCgpLHQuZ2V0RGF0ZSgpKX0sZS5kYXRlU2VsZWN0aW9uPWZ1bmN0aW9uKGEpe2FuZ3VsYXIuaXNEZWZpbmVkKGEpJiYoZS5kYXRlPWEpO3ZhciBpPWUuZGF0ZT9jLmZpbHRlcihlLmRhdGUsJCk6bnVsbDt0LnZhbChpKSxDLiRzZXRWaWV3VmFsdWUoaSksTSYmKGUuaXNPcGVuPSExLHRbMF0uZm9jdXMoKSl9LGUua2V5ZG93bj1mdW5jdGlvbihhKXsyNz09PWEud2hpY2gmJihhLnN0b3BQcm9wYWdhdGlvbigpLGUuaXNPcGVuPSExLHRbMF0uZm9jdXMoKSl9LGUuc2VsZWN0PWZ1bmN0aW9uKHQsYSl7aWYoYS5zdG9wUHJvcGFnYXRpb24oKSxcInRvZGF5XCI9PT10KXt2YXIgaT1uZXcgRGF0ZTthbmd1bGFyLmlzRGF0ZShlLmRhdGUpPyh0PW5ldyBEYXRlKGUuZGF0ZSksdC5zZXRGdWxsWWVhcihpLmdldEZ1bGxZZWFyKCksaS5nZXRNb250aCgpLGkuZ2V0RGF0ZSgpKSk6dD1uZXcgRGF0ZShpLnNldEhvdXJzKDAsMCwwLDApKX1lLmRhdGVTZWxlY3Rpb24odCl9LGUuY2xvc2U9ZnVuY3Rpb24oYSl7YS5zdG9wUHJvcGFnYXRpb24oKSxlLmlzT3Blbj0hMSx0WzBdLmZvY3VzKCl9LGUuZGlzYWJsZWQ9YW5ndWxhci5pc0RlZmluZWQoYS5kaXNhYmxlZCl8fCExLGEubmdEaXNhYmxlZCYmei5wdXNoKGUuJHBhcmVudC4kd2F0Y2gocihhLm5nRGlzYWJsZWQpLGZ1bmN0aW9uKHQpe2UuZGlzYWJsZWQ9dH0pKSxlLiR3YXRjaChcImlzT3BlblwiLGZ1bmN0aW9uKGkpe2k/ZS5kaXNhYmxlZD9lLmlzT3Blbj0hMTpoKGZ1bmN0aW9uKCl7dygpLFQmJmUuJGJyb2FkY2FzdChcInVpYjpkYXRlcGlja2VyLmZvY3VzXCIpLHMub24oXCJjbGlja1wiLEQpO3ZhciBpPWEucG9wdXBQbGFjZW1lbnQ/YS5wb3B1cFBsYWNlbWVudDpkLnBsYWNlbWVudDt4fHx1LnBhcnNlUGxhY2VtZW50KGkpWzJdPyhJPUl8fGFuZ3VsYXIuZWxlbWVudCh1LnNjcm9sbFBhcmVudCh0KSksSSYmSS5vbihcInNjcm9sbFwiLHcpKTpJPW51bGwsYW5ndWxhci5lbGVtZW50KG8pLm9uKFwicmVzaXplXCIsdyl9LDAsITEpOihzLm9mZihcImNsaWNrXCIsRCksSSYmSS5vZmYoXCJzY3JvbGxcIix3KSxhbmd1bGFyLmVsZW1lbnQobykub2ZmKFwicmVzaXplXCIsdykpfSksZS4kb24oXCJ1aWI6ZGF0ZXBpY2tlci5tb2RlXCIsZnVuY3Rpb24oKXtoKHcsMCwhMSl9KX1dKS5kaXJlY3RpdmUoXCJ1aWJEYXRlcGlja2VyUG9wdXBcIixmdW5jdGlvbigpe3JldHVybntyZXF1aXJlOltcIm5nTW9kZWxcIixcInVpYkRhdGVwaWNrZXJQb3B1cFwiXSxjb250cm9sbGVyOlwiVWliRGF0ZXBpY2tlclBvcHVwQ29udHJvbGxlclwiLHNjb3BlOntkYXRlcGlja2VyT3B0aW9uczpcIj0/XCIsaXNPcGVuOlwiPT9cIixjdXJyZW50VGV4dDpcIkBcIixjbGVhclRleHQ6XCJAXCIsY2xvc2VUZXh0OlwiQFwiLGRhdGVEaXNhYmxlZDpcIiZcIixjdXN0b21DbGFzczpcIiZcIn0sbGluazpmdW5jdGlvbihlLHQsYSxpKXt2YXIgbj1pWzBdLHI9aVsxXTtyLmluaXQobil9fX0pLmRpcmVjdGl2ZShcInVpYkRhdGVwaWNrZXJQb3B1cFdyYXBcIixmdW5jdGlvbigpe3JldHVybntyZXBsYWNlOiEwLHRyYW5zY2x1ZGU6ITAsdGVtcGxhdGVVcmw6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC50ZW1wbGF0ZVVybHx8XCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9wb3B1cC5odG1sXCJ9fX0pLGFuZ3VsYXIubW9kdWxlKFwidWkuYm9vdHN0cmFwLmRhdGVwYXJzZXJcIixbXSkuc2VydmljZShcInVpYkRhdGVQYXJzZXJcIixbXCIkbG9nXCIsXCIkbG9jYWxlXCIsXCJkYXRlRmlsdGVyXCIsXCJvcmRlckJ5RmlsdGVyXCIsZnVuY3Rpb24oZSx0LGEsaSl7ZnVuY3Rpb24gbihlLHQpe3ZhciBhPVtdLG49ZS5zcGxpdChcIlwiKSxyPWUuaW5kZXhPZihcIidcIik7aWYocj4tMSl7dmFyIG89ITE7ZT1lLnNwbGl0KFwiXCIpO2Zvcih2YXIgcz1yO3M8ZS5sZW5ndGg7cysrKW8/KFwiJ1wiPT09ZVtzXSYmKHMrMTxlLmxlbmd0aCYmXCInXCI9PT1lW3MrMV0/KGVbcysxXT1cIiRcIixuW3MrMV09XCJcIik6KG5bc109XCJcIixvPSExKSksZVtzXT1cIiRcIik6XCInXCI9PT1lW3NdJiYoZVtzXT1cIiRcIixuW3NdPVwiXCIsbz0hMCk7ZT1lLmpvaW4oXCJcIil9cmV0dXJuIGFuZ3VsYXIuZm9yRWFjaChoLGZ1bmN0aW9uKGkpe3ZhciByPWUuaW5kZXhPZihpLmtleSk7aWYocj4tMSl7ZT1lLnNwbGl0KFwiXCIpLG5bcl09XCIoXCIraS5yZWdleCtcIilcIixlW3JdPVwiJFwiO2Zvcih2YXIgbz1yKzEscz1yK2kua2V5Lmxlbmd0aDtzPm87bysrKW5bb109XCJcIixlW29dPVwiJFwiO2U9ZS5qb2luKFwiXCIpLGEucHVzaCh7aW5kZXg6cixrZXk6aS5rZXksYXBwbHk6aVt0XSxtYXRjaGVyOmkucmVnZXh9KX19KSx7cmVnZXg6bmV3IFJlZ0V4cChcIl5cIituLmpvaW4oXCJcIikrXCIkXCIpLG1hcDppKGEsXCJpbmRleFwiKX19ZnVuY3Rpb24gcihlLHQsYSl7cmV0dXJuIDE+YT8hMToxPT09dCYmYT4yOD8yOT09PWEmJihlJTQ9PT0wJiZlJTEwMCE9PTB8fGUlNDAwPT09MCk6Mz09PXR8fDU9PT10fHw4PT09dHx8MTA9PT10PzMxPmE6ITB9ZnVuY3Rpb24gbyhlKXtyZXR1cm4gcGFyc2VJbnQoZSwxMCl9ZnVuY3Rpb24gcyhlLHQpe3JldHVybiBlJiZ0P2MoZSx0KTplfWZ1bmN0aW9uIGwoZSx0KXtyZXR1cm4gZSYmdD9jKGUsdCwhMCk6ZX1mdW5jdGlvbiB1KGUsdCl7dmFyIGE9RGF0ZS5wYXJzZShcIkphbiAwMSwgMTk3MCAwMDowMDowMCBcIitlKS82ZTQ7cmV0dXJuIGlzTmFOKGEpP3Q6YX1mdW5jdGlvbiBwKGUsdCl7cmV0dXJuIGU9bmV3IERhdGUoZS5nZXRUaW1lKCkpLGUuc2V0TWludXRlcyhlLmdldE1pbnV0ZXMoKSt0KSxlfWZ1bmN0aW9uIGMoZSx0LGEpe2E9YT8tMToxO3ZhciBpPXUodCxlLmdldFRpbWV6b25lT2Zmc2V0KCkpO3JldHVybiBwKGUsYSooaS1lLmdldFRpbWV6b25lT2Zmc2V0KCkpKX12YXIgZCxoLGY9L1tcXFxcXFxeXFwkXFwqXFwrXFw/XFx8XFxbXFxdXFwoXFwpXFwuXFx7XFx9XS9nO3RoaXMuaW5pdD1mdW5jdGlvbigpe2Q9dC5pZCx0aGlzLnBhcnNlcnM9e30sdGhpcy5mb3JtYXR0ZXJzPXt9LGg9W3trZXk6XCJ5eXl5XCIscmVnZXg6XCJcXFxcZHs0fVwiLGFwcGx5OmZ1bmN0aW9uKGUpe3RoaXMueWVhcj0rZX0sZm9ybWF0dGVyOmZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBEYXRlO3JldHVybiB0LnNldEZ1bGxZZWFyKE1hdGguYWJzKGUuZ2V0RnVsbFllYXIoKSkpLGEodCxcInl5eXlcIil9fSx7a2V5OlwieXlcIixyZWdleDpcIlxcXFxkezJ9XCIsYXBwbHk6ZnVuY3Rpb24oZSl7dGhpcy55ZWFyPStlKzJlM30sZm9ybWF0dGVyOmZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBEYXRlO3JldHVybiB0LnNldEZ1bGxZZWFyKE1hdGguYWJzKGUuZ2V0RnVsbFllYXIoKSkpLGEodCxcInl5XCIpfX0se2tleTpcInlcIixyZWdleDpcIlxcXFxkezEsNH1cIixhcHBseTpmdW5jdGlvbihlKXt0aGlzLnllYXI9K2V9LGZvcm1hdHRlcjpmdW5jdGlvbihlKXt2YXIgdD1uZXcgRGF0ZTtyZXR1cm4gdC5zZXRGdWxsWWVhcihNYXRoLmFicyhlLmdldEZ1bGxZZWFyKCkpKSxhKHQsXCJ5XCIpfX0se2tleTpcIk0hXCIscmVnZXg6XCIwP1sxLTldfDFbMC0yXVwiLGFwcGx5OmZ1bmN0aW9uKGUpe3RoaXMubW9udGg9ZS0xfSxmb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5nZXRNb250aCgpO3JldHVybi9eWzAtOV0kLy50ZXN0KHQpP2EoZSxcIk1NXCIpOmEoZSxcIk1cIil9fSx7a2V5OlwiTU1NTVwiLHJlZ2V4OnQuREFURVRJTUVfRk9STUFUUy5NT05USC5qb2luKFwifFwiKSxhcHBseTpmdW5jdGlvbihlKXt0aGlzLm1vbnRoPXQuREFURVRJTUVfRk9STUFUUy5NT05USC5pbmRleE9mKGUpfSxmb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSxcIk1NTU1cIil9fSx7a2V5OlwiTU1NXCIscmVnZXg6dC5EQVRFVElNRV9GT1JNQVRTLlNIT1JUTU9OVEguam9pbihcInxcIiksYXBwbHk6ZnVuY3Rpb24oZSl7dGhpcy5tb250aD10LkRBVEVUSU1FX0ZPUk1BVFMuU0hPUlRNT05USC5pbmRleE9mKGUpfSxmb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSxcIk1NTVwiKX19LHtrZXk6XCJNTVwiLHJlZ2V4OlwiMFsxLTldfDFbMC0yXVwiLGFwcGx5OmZ1bmN0aW9uKGUpe3RoaXMubW9udGg9ZS0xfSxmb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSxcIk1NXCIpfX0se2tleTpcIk1cIixyZWdleDpcIlsxLTldfDFbMC0yXVwiLGFwcGx5OmZ1bmN0aW9uKGUpe3RoaXMubW9udGg9ZS0xfSxmb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSxcIk1cIil9fSx7a2V5OlwiZCFcIixyZWdleDpcIlswLTJdP1swLTldezF9fDNbMC0xXXsxfVwiLGFwcGx5OmZ1bmN0aW9uKGUpe3RoaXMuZGF0ZT0rZX0sZm9ybWF0dGVyOmZ1bmN0aW9uKGUpe3ZhciB0PWUuZ2V0RGF0ZSgpO3JldHVybi9eWzEtOV0kLy50ZXN0KHQpP2EoZSxcImRkXCIpOmEoZSxcImRcIil9fSx7a2V5OlwiZGRcIixyZWdleDpcIlswLTJdWzAtOV17MX18M1swLTFdezF9XCIsYXBwbHk6ZnVuY3Rpb24oZSl7dGhpcy5kYXRlPStlfSxmb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSxcImRkXCIpfX0se2tleTpcImRcIixyZWdleDpcIlsxLTJdP1swLTldezF9fDNbMC0xXXsxfVwiLGFwcGx5OmZ1bmN0aW9uKGUpe3RoaXMuZGF0ZT0rZX0sZm9ybWF0dGVyOmZ1bmN0aW9uKGUpe3JldHVybiBhKGUsXCJkXCIpfX0se2tleTpcIkVFRUVcIixyZWdleDp0LkRBVEVUSU1FX0ZPUk1BVFMuREFZLmpvaW4oXCJ8XCIpLGZvcm1hdHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gYShlLFwiRUVFRVwiKX19LHtrZXk6XCJFRUVcIixyZWdleDp0LkRBVEVUSU1FX0ZPUk1BVFMuU0hPUlREQVkuam9pbihcInxcIiksZm9ybWF0dGVyOmZ1bmN0aW9uKGUpe3JldHVybiBhKGUsXCJFRUVcIil9fSx7a2V5OlwiSEhcIixyZWdleDpcIig/OjB8MSlbMC05XXwyWzAtM11cIixhcHBseTpmdW5jdGlvbihlKXt0aGlzLmhvdXJzPStlfSxmb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSxcIkhIXCIpfX0se2tleTpcImhoXCIscmVnZXg6XCIwWzAtOV18MVswLTJdXCIsYXBwbHk6ZnVuY3Rpb24oZSl7dGhpcy5ob3Vycz0rZX0sZm9ybWF0dGVyOmZ1bmN0aW9uKGUpe3JldHVybiBhKGUsXCJoaFwiKX19LHtrZXk6XCJIXCIscmVnZXg6XCIxP1swLTldfDJbMC0zXVwiLGFwcGx5OmZ1bmN0aW9uKGUpe3RoaXMuaG91cnM9K2V9LGZvcm1hdHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gYShlLFwiSFwiKX19LHtrZXk6XCJoXCIscmVnZXg6XCJbMC05XXwxWzAtMl1cIixhcHBseTpmdW5jdGlvbihlKXt0aGlzLmhvdXJzPStlfSxmb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSxcImhcIil9fSx7a2V5OlwibW1cIixyZWdleDpcIlswLTVdWzAtOV1cIixhcHBseTpmdW5jdGlvbihlKXt0aGlzLm1pbnV0ZXM9K2V9LGZvcm1hdHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gYShlLFwibW1cIil9fSx7a2V5OlwibVwiLHJlZ2V4OlwiWzAtOV18WzEtNV1bMC05XVwiLGFwcGx5OmZ1bmN0aW9uKGUpe3RoaXMubWludXRlcz0rZX0sZm9ybWF0dGVyOmZ1bmN0aW9uKGUpe3JldHVybiBhKGUsXCJtXCIpfX0se2tleTpcInNzc1wiLHJlZ2V4OlwiWzAtOV1bMC05XVswLTldXCIsYXBwbHk6ZnVuY3Rpb24oZSl7dGhpcy5taWxsaXNlY29uZHM9K2V9LGZvcm1hdHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gYShlLFwic3NzXCIpfX0se2tleTpcInNzXCIscmVnZXg6XCJbMC01XVswLTldXCIsYXBwbHk6ZnVuY3Rpb24oZSl7dGhpcy5zZWNvbmRzPStlfSxmb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSxcInNzXCIpfX0se2tleTpcInNcIixyZWdleDpcIlswLTldfFsxLTVdWzAtOV1cIixhcHBseTpmdW5jdGlvbihlKXt0aGlzLnNlY29uZHM9K2V9LGZvcm1hdHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gYShlLFwic1wiKX19LHtrZXk6XCJhXCIscmVnZXg6dC5EQVRFVElNRV9GT1JNQVRTLkFNUE1TLmpvaW4oXCJ8XCIpLGFwcGx5OmZ1bmN0aW9uKGUpezEyPT09dGhpcy5ob3VycyYmKHRoaXMuaG91cnM9MCksXCJQTVwiPT09ZSYmKHRoaXMuaG91cnMrPTEyKX0sZm9ybWF0dGVyOmZ1bmN0aW9uKGUpe3JldHVybiBhKGUsXCJhXCIpfX0se2tleTpcIlpcIixyZWdleDpcIlsrLV1cXFxcZHs0fVwiLGFwcGx5OmZ1bmN0aW9uKGUpe3ZhciB0PWUubWF0Y2goLyhbKy1dKShcXGR7Mn0pKFxcZHsyfSkvKSxhPXRbMV0saT10WzJdLG49dFszXTt0aGlzLmhvdXJzKz1vKGEraSksdGhpcy5taW51dGVzKz1vKGErbil9LGZvcm1hdHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gYShlLFwiWlwiKX19LHtrZXk6XCJ3d1wiLHJlZ2V4OlwiWzAtNF1bMC05XXw1WzAtM11cIixmb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSxcInd3XCIpfX0se2tleTpcIndcIixyZWdleDpcIlswLTldfFsxLTRdWzAtOV18NVswLTNdXCIsZm9ybWF0dGVyOmZ1bmN0aW9uKGUpe3JldHVybiBhKGUsXCJ3XCIpfX0se2tleTpcIkdHR0dcIixyZWdleDp0LkRBVEVUSU1FX0ZPUk1BVFMuRVJBTkFNRVMuam9pbihcInxcIikucmVwbGFjZSgvXFxzL2csXCJcXFxcc1wiKSxmb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSxcIkdHR0dcIil9fSx7a2V5OlwiR0dHXCIscmVnZXg6dC5EQVRFVElNRV9GT1JNQVRTLkVSQVMuam9pbihcInxcIiksZm9ybWF0dGVyOmZ1bmN0aW9uKGUpe3JldHVybiBhKGUsXCJHR0dcIil9fSx7a2V5OlwiR0dcIixyZWdleDp0LkRBVEVUSU1FX0ZPUk1BVFMuRVJBUy5qb2luKFwifFwiKSxmb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSxcIkdHXCIpfX0se2tleTpcIkdcIixyZWdleDp0LkRBVEVUSU1FX0ZPUk1BVFMuRVJBUy5qb2luKFwifFwiKSxmb3JtYXR0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSxcIkdcIil9fV19LHRoaXMuaW5pdCgpLHRoaXMuZmlsdGVyPWZ1bmN0aW9uKGUsYSl7aWYoIWFuZ3VsYXIuaXNEYXRlKGUpfHxpc05hTihlKXx8IWEpcmV0dXJuXCJcIjthPXQuREFURVRJTUVfRk9STUFUU1thXXx8YSx0LmlkIT09ZCYmdGhpcy5pbml0KCksdGhpcy5mb3JtYXR0ZXJzW2FdfHwodGhpcy5mb3JtYXR0ZXJzW2FdPW4oYSxcImZvcm1hdHRlclwiKSk7dmFyIGk9dGhpcy5mb3JtYXR0ZXJzW2FdLHI9aS5tYXAsbz1hO3JldHVybiByLnJlZHVjZShmdW5jdGlvbih0LGEsaSl7dmFyIG49by5tYXRjaChuZXcgUmVnRXhwKFwiKC4qKVwiK2Eua2V5KSk7biYmYW5ndWxhci5pc1N0cmluZyhuWzFdKSYmKHQrPW5bMV0sbz1vLnJlcGxhY2UoblsxXSthLmtleSxcIlwiKSk7dmFyIHM9aT09PXIubGVuZ3RoLTE/bzpcIlwiO3JldHVybiBhLmFwcGx5P3QrYS5hcHBseS5jYWxsKG51bGwsZSkrczp0K3N9LFwiXCIpfSx0aGlzLnBhcnNlPWZ1bmN0aW9uKGEsaSxvKXtpZighYW5ndWxhci5pc1N0cmluZyhhKXx8IWkpcmV0dXJuIGE7aT10LkRBVEVUSU1FX0ZPUk1BVFNbaV18fGksaT1pLnJlcGxhY2UoZixcIlxcXFwkJlwiKSx0LmlkIT09ZCYmdGhpcy5pbml0KCksdGhpcy5wYXJzZXJzW2ldfHwodGhpcy5wYXJzZXJzW2ldPW4oaSxcImFwcGx5XCIpKTt2YXIgcz10aGlzLnBhcnNlcnNbaV0sbD1zLnJlZ2V4LHU9cy5tYXAscD1hLm1hdGNoKGwpLGM9ITE7aWYocCYmcC5sZW5ndGgpe3ZhciBoLG07YW5ndWxhci5pc0RhdGUobykmJiFpc05hTihvLmdldFRpbWUoKSk/aD17eWVhcjpvLmdldEZ1bGxZZWFyKCksbW9udGg6by5nZXRNb250aCgpLGRhdGU6by5nZXREYXRlKCksaG91cnM6by5nZXRIb3VycygpLG1pbnV0ZXM6by5nZXRNaW51dGVzKCksc2Vjb25kczpvLmdldFNlY29uZHMoKSxtaWxsaXNlY29uZHM6by5nZXRNaWxsaXNlY29uZHMoKX06KG8mJmUud2FybihcImRhdGVwYXJzZXI6XCIsXCJiYXNlRGF0ZSBpcyBub3QgYSB2YWxpZCBkYXRlXCIpLGg9e3llYXI6MTkwMCxtb250aDowLGRhdGU6MSxob3VyczowLG1pbnV0ZXM6MCxzZWNvbmRzOjAsbWlsbGlzZWNvbmRzOjB9KTtmb3IodmFyIGc9MSxiPXAubGVuZ3RoO2I+ZztnKyspe3ZhciB5PXVbZy0xXTtcIlpcIj09PXkubWF0Y2hlciYmKGM9ITApLHkuYXBwbHkmJnkuYXBwbHkuY2FsbChoLHBbZ10pfXZhciB2PWM/RGF0ZS5wcm90b3R5cGUuc2V0VVRDRnVsbFllYXI6RGF0ZS5wcm90b3R5cGUuc2V0RnVsbFllYXIsRD1jP0RhdGUucHJvdG90eXBlLnNldFVUQ0hvdXJzOkRhdGUucHJvdG90eXBlLnNldEhvdXJzO3JldHVybiByKGgueWVhcixoLm1vbnRoLGguZGF0ZSkmJighYW5ndWxhci5pc0RhdGUobyl8fGlzTmFOKG8uZ2V0VGltZSgpKXx8Yz8obT1uZXcgRGF0ZSgwKSx2LmNhbGwobSxoLnllYXIsaC5tb250aCxoLmRhdGUpLEQuY2FsbChtLGguaG91cnN8fDAsaC5taW51dGVzfHwwLGguc2Vjb25kc3x8MCxoLm1pbGxpc2Vjb25kc3x8MCkpOihtPW5ldyBEYXRlKG8pLHYuY2FsbChtLGgueWVhcixoLm1vbnRoLGguZGF0ZSksRC5jYWxsKG0saC5ob3VycyxoLm1pbnV0ZXMsaC5zZWNvbmRzLGgubWlsbGlzZWNvbmRzKSkpLG19fSx0aGlzLnRvVGltZXpvbmU9cyx0aGlzLmZyb21UaW1lem9uZT1sLHRoaXMudGltZXpvbmVUb09mZnNldD11LHRoaXMuYWRkRGF0ZU1pbnV0ZXM9cCx0aGlzLmNvbnZlcnRUaW1lem9uZVRvTG9jYWw9Y31dKSxhbmd1bGFyLm1vZHVsZShcInVpLmJvb3RzdHJhcC5pc0NsYXNzXCIsW10pLmRpcmVjdGl2ZShcInVpYklzQ2xhc3NcIixbXCIkYW5pbWF0ZVwiLGZ1bmN0aW9uKGUpe3ZhciB0PS9eXFxzKihbXFxzXFxTXSs/KVxccytvblxccysoW1xcc1xcU10rPylcXHMqJC8sYT0vXlxccyooW1xcc1xcU10rPylcXHMrZm9yXFxzKyhbXFxzXFxTXSs/KVxccyokLztyZXR1cm57cmVzdHJpY3Q6XCJBXCIsY29tcGlsZTpmdW5jdGlvbihpLG4pe2Z1bmN0aW9uIHIoZSx0KXtsLnB1c2goZSksdS5wdXNoKHtzY29wZTplLGVsZW1lbnQ6dH0pLGYuZm9yRWFjaChmdW5jdGlvbih0KXtvKHQsZSl9KSxlLiRvbihcIiRkZXN0cm95XCIscyl9ZnVuY3Rpb24gbyh0LGkpe3ZhciBuPXQubWF0Y2goYSkscj1pLiRldmFsKG5bMV0pLG89blsyXSxzPXBbdF07aWYoIXMpe3ZhciBsPWZ1bmN0aW9uKHQpe3ZhciBhPW51bGw7dS5zb21lKGZ1bmN0aW9uKGUpe3ZhciBpPWUuc2NvcGUuJGV2YWwoZCk7cmV0dXJuIGk9PT10PyhhPWUsITApOnZvaWQgMH0pLHMubGFzdEFjdGl2YXRlZCE9PWEmJihzLmxhc3RBY3RpdmF0ZWQmJmUucmVtb3ZlQ2xhc3Mocy5sYXN0QWN0aXZhdGVkLmVsZW1lbnQsciksYSYmZS5hZGRDbGFzcyhhLmVsZW1lbnQscikscy5sYXN0QWN0aXZhdGVkPWEpfTtwW3RdPXM9e2xhc3RBY3RpdmF0ZWQ6bnVsbCxzY29wZTppLHdhdGNoRm46bCxjb21wYXJlV2l0aEV4cDpvLHdhdGNoZXI6aS4kd2F0Y2gobyxsKX19cy53YXRjaEZuKGkuJGV2YWwobykpfWZ1bmN0aW9uIHMoZSl7dmFyIHQ9ZS50YXJnZXRTY29wZSxhPWwuaW5kZXhPZih0KTtpZihsLnNwbGljZShhLDEpLHUuc3BsaWNlKGEsMSksbC5sZW5ndGgpe3ZhciBpPWxbMF07YW5ndWxhci5mb3JFYWNoKHAsZnVuY3Rpb24oZSl7ZS5zY29wZT09PXQmJihlLndhdGNoZXI9aS4kd2F0Y2goZS5jb21wYXJlV2l0aEV4cCxlLndhdGNoRm4pLGUuc2NvcGU9aSl9KX1lbHNlIHA9e319dmFyIGw9W10sdT1bXSxwPXt9LGM9bi51aWJJc0NsYXNzLm1hdGNoKHQpLGQ9Y1syXSxoPWNbMV0sZj1oLnNwbGl0KFwiLFwiKTtyZXR1cm4gcn19fV0pLGFuZ3VsYXIubW9kdWxlKFwidWkuYm9vdHN0cmFwLnBvc2l0aW9uXCIsW10pLmZhY3RvcnkoXCIkdWliUG9zaXRpb25cIixbXCIkZG9jdW1lbnRcIixcIiR3aW5kb3dcIixmdW5jdGlvbihlLHQpe3ZhciBhLGk9e25vcm1hbDovKGF1dG98c2Nyb2xsKS8saGlkZGVuOi8oYXV0b3xzY3JvbGx8aGlkZGVuKS99LG49e2F1dG86L1xccz9hdXRvP1xccz8vaSxwcmltYXJ5Oi9eKHRvcHxib3R0b218bGVmdHxyaWdodCkkLyxzZWNvbmRhcnk6L14odG9wfGJvdHRvbXxsZWZ0fHJpZ2h0fGNlbnRlcikkLyx2ZXJ0aWNhbDovXih0b3B8Ym90dG9tKSQvfTtyZXR1cm57Z2V0UmF3Tm9kZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5ub2RlTmFtZT9lOmVbMF18fGV9LHBhcnNlU3R5bGU6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9cGFyc2VGbG9hdChlKSxpc0Zpbml0ZShlKT9lOjB9LG9mZnNldFBhcmVudDpmdW5jdGlvbihhKXtmdW5jdGlvbiBpKGUpe3JldHVyblwic3RhdGljXCI9PT0odC5nZXRDb21wdXRlZFN0eWxlKGUpLnBvc2l0aW9ufHxcInN0YXRpY1wiKX1hPXRoaXMuZ2V0UmF3Tm9kZShhKTtmb3IodmFyIG49YS5vZmZzZXRQYXJlbnR8fGVbMF0uZG9jdW1lbnRFbGVtZW50O24mJm4hPT1lWzBdLmRvY3VtZW50RWxlbWVudCYmaShuKTspbj1uLm9mZnNldFBhcmVudDtyZXR1cm4gbnx8ZVswXS5kb2N1bWVudEVsZW1lbnR9LHNjcm9sbGJhcldpZHRoOmZ1bmN0aW9uKCl7aWYoYW5ndWxhci5pc1VuZGVmaW5lZChhKSl7dmFyIHQ9YW5ndWxhci5lbGVtZW50KCc8ZGl2IGNsYXNzPVwidWliLXBvc2l0aW9uLXNjcm9sbGJhci1tZWFzdXJlXCI+PC9kaXY+Jyk7ZS5maW5kKFwiYm9keVwiKS5hcHBlbmQodCksYT10WzBdLm9mZnNldFdpZHRoLXRbMF0uY2xpZW50V2lkdGgsYT1pc0Zpbml0ZShhKT9hOjAsdC5yZW1vdmUoKX1yZXR1cm4gYX0saXNTY3JvbGxhYmxlOmZ1bmN0aW9uKGUsYSl7ZT10aGlzLmdldFJhd05vZGUoZSk7dmFyIG49YT9pLmhpZGRlbjppLm5vcm1hbCxyPXQuZ2V0Q29tcHV0ZWRTdHlsZShlKTtyZXR1cm4gbi50ZXN0KHIub3ZlcmZsb3crci5vdmVyZmxvd1krci5vdmVyZmxvd1gpfSxzY3JvbGxQYXJlbnQ6ZnVuY3Rpb24oYSxuKXthPXRoaXMuZ2V0UmF3Tm9kZShhKTt2YXIgcj1uP2kuaGlkZGVuOmkubm9ybWFsLG89ZVswXS5kb2N1bWVudEVsZW1lbnQscz10LmdldENvbXB1dGVkU3R5bGUoYSksbD1cImFic29sdXRlXCI9PT1zLnBvc2l0aW9uLHU9YS5wYXJlbnRFbGVtZW50fHxvO2lmKHU9PT1vfHxcImZpeGVkXCI9PT1zLnBvc2l0aW9uKXJldHVybiBvO2Zvcig7dS5wYXJlbnRFbGVtZW50JiZ1IT09bzspe3ZhciBwPXQuZ2V0Q29tcHV0ZWRTdHlsZSh1KTtpZihsJiZcInN0YXRpY1wiIT09cC5wb3NpdGlvbiYmKGw9ITEpLCFsJiZyLnRlc3QocC5vdmVyZmxvdytwLm92ZXJmbG93WStwLm92ZXJmbG93WCkpYnJlYWs7XHJcbnU9dS5wYXJlbnRFbGVtZW50fXJldHVybiB1fSxwb3NpdGlvbjpmdW5jdGlvbihhLGkpe2E9dGhpcy5nZXRSYXdOb2RlKGEpO3ZhciBuPXRoaXMub2Zmc2V0KGEpO2lmKGkpe3ZhciByPXQuZ2V0Q29tcHV0ZWRTdHlsZShhKTtuLnRvcC09dGhpcy5wYXJzZVN0eWxlKHIubWFyZ2luVG9wKSxuLmxlZnQtPXRoaXMucGFyc2VTdHlsZShyLm1hcmdpbkxlZnQpfXZhciBvPXRoaXMub2Zmc2V0UGFyZW50KGEpLHM9e3RvcDowLGxlZnQ6MH07cmV0dXJuIG8hPT1lWzBdLmRvY3VtZW50RWxlbWVudCYmKHM9dGhpcy5vZmZzZXQobykscy50b3ArPW8uY2xpZW50VG9wLW8uc2Nyb2xsVG9wLHMubGVmdCs9by5jbGllbnRMZWZ0LW8uc2Nyb2xsTGVmdCkse3dpZHRoOk1hdGgucm91bmQoYW5ndWxhci5pc051bWJlcihuLndpZHRoKT9uLndpZHRoOmEub2Zmc2V0V2lkdGgpLGhlaWdodDpNYXRoLnJvdW5kKGFuZ3VsYXIuaXNOdW1iZXIobi5oZWlnaHQpP24uaGVpZ2h0OmEub2Zmc2V0SGVpZ2h0KSx0b3A6TWF0aC5yb3VuZChuLnRvcC1zLnRvcCksbGVmdDpNYXRoLnJvdW5kKG4ubGVmdC1zLmxlZnQpfX0sb2Zmc2V0OmZ1bmN0aW9uKGEpe2E9dGhpcy5nZXRSYXdOb2RlKGEpO3ZhciBpPWEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7cmV0dXJue3dpZHRoOk1hdGgucm91bmQoYW5ndWxhci5pc051bWJlcihpLndpZHRoKT9pLndpZHRoOmEub2Zmc2V0V2lkdGgpLGhlaWdodDpNYXRoLnJvdW5kKGFuZ3VsYXIuaXNOdW1iZXIoaS5oZWlnaHQpP2kuaGVpZ2h0OmEub2Zmc2V0SGVpZ2h0KSx0b3A6TWF0aC5yb3VuZChpLnRvcCsodC5wYWdlWU9mZnNldHx8ZVswXS5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKSksbGVmdDpNYXRoLnJvdW5kKGkubGVmdCsodC5wYWdlWE9mZnNldHx8ZVswXS5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCkpfX0sdmlld3BvcnRPZmZzZXQ6ZnVuY3Rpb24oYSxpLG4pe2E9dGhpcy5nZXRSYXdOb2RlKGEpLG49biE9PSExPyEwOiExO3ZhciByPWEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbz17dG9wOjAsbGVmdDowLGJvdHRvbTowLHJpZ2h0OjB9LHM9aT9lWzBdLmRvY3VtZW50RWxlbWVudDp0aGlzLnNjcm9sbFBhcmVudChhKSxsPXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7aWYoby50b3A9bC50b3Arcy5jbGllbnRUb3Asby5sZWZ0PWwubGVmdCtzLmNsaWVudExlZnQscz09PWVbMF0uZG9jdW1lbnRFbGVtZW50JiYoby50b3ArPXQucGFnZVlPZmZzZXQsby5sZWZ0Kz10LnBhZ2VYT2Zmc2V0KSxvLmJvdHRvbT1vLnRvcCtzLmNsaWVudEhlaWdodCxvLnJpZ2h0PW8ubGVmdCtzLmNsaWVudFdpZHRoLG4pe3ZhciB1PXQuZ2V0Q29tcHV0ZWRTdHlsZShzKTtvLnRvcCs9dGhpcy5wYXJzZVN0eWxlKHUucGFkZGluZ1RvcCksby5ib3R0b20tPXRoaXMucGFyc2VTdHlsZSh1LnBhZGRpbmdCb3R0b20pLG8ubGVmdCs9dGhpcy5wYXJzZVN0eWxlKHUucGFkZGluZ0xlZnQpLG8ucmlnaHQtPXRoaXMucGFyc2VTdHlsZSh1LnBhZGRpbmdSaWdodCl9cmV0dXJue3RvcDpNYXRoLnJvdW5kKHIudG9wLW8udG9wKSxib3R0b206TWF0aC5yb3VuZChvLmJvdHRvbS1yLmJvdHRvbSksbGVmdDpNYXRoLnJvdW5kKHIubGVmdC1vLmxlZnQpLHJpZ2h0Ok1hdGgucm91bmQoby5yaWdodC1yLnJpZ2h0KX19LHBhcnNlUGxhY2VtZW50OmZ1bmN0aW9uKGUpe3ZhciB0PW4uYXV0by50ZXN0KGUpO3JldHVybiB0JiYoZT1lLnJlcGxhY2Uobi5hdXRvLFwiXCIpKSxlPWUuc3BsaXQoXCItXCIpLGVbMF09ZVswXXx8XCJ0b3BcIixuLnByaW1hcnkudGVzdChlWzBdKXx8KGVbMF09XCJ0b3BcIiksZVsxXT1lWzFdfHxcImNlbnRlclwiLG4uc2Vjb25kYXJ5LnRlc3QoZVsxXSl8fChlWzFdPVwiY2VudGVyXCIpLGVbMl09dD8hMDohMSxlfSxwb3NpdGlvbkVsZW1lbnRzOmZ1bmN0aW9uKGUsYSxpLHIpe2U9dGhpcy5nZXRSYXdOb2RlKGUpLGE9dGhpcy5nZXRSYXdOb2RlKGEpO3ZhciBvPWFuZ3VsYXIuaXNEZWZpbmVkKGEub2Zmc2V0V2lkdGgpP2Eub2Zmc2V0V2lkdGg6YS5wcm9wKFwib2Zmc2V0V2lkdGhcIikscz1hbmd1bGFyLmlzRGVmaW5lZChhLm9mZnNldEhlaWdodCk/YS5vZmZzZXRIZWlnaHQ6YS5wcm9wKFwib2Zmc2V0SGVpZ2h0XCIpO2k9dGhpcy5wYXJzZVBsYWNlbWVudChpKTt2YXIgbD1yP3RoaXMub2Zmc2V0KGUpOnRoaXMucG9zaXRpb24oZSksdT17dG9wOjAsbGVmdDowLHBsYWNlbWVudDpcIlwifTtpZihpWzJdKXt2YXIgcD10aGlzLnZpZXdwb3J0T2Zmc2V0KGUsciksYz10LmdldENvbXB1dGVkU3R5bGUoYSksZD17d2lkdGg6bytNYXRoLnJvdW5kKE1hdGguYWJzKHRoaXMucGFyc2VTdHlsZShjLm1hcmdpbkxlZnQpK3RoaXMucGFyc2VTdHlsZShjLm1hcmdpblJpZ2h0KSkpLGhlaWdodDpzK01hdGgucm91bmQoTWF0aC5hYnModGhpcy5wYXJzZVN0eWxlKGMubWFyZ2luVG9wKSt0aGlzLnBhcnNlU3R5bGUoYy5tYXJnaW5Cb3R0b20pKSl9O2lmKGlbMF09XCJ0b3BcIj09PWlbMF0mJmQuaGVpZ2h0PnAudG9wJiZkLmhlaWdodDw9cC5ib3R0b20/XCJib3R0b21cIjpcImJvdHRvbVwiPT09aVswXSYmZC5oZWlnaHQ+cC5ib3R0b20mJmQuaGVpZ2h0PD1wLnRvcD9cInRvcFwiOlwibGVmdFwiPT09aVswXSYmZC53aWR0aD5wLmxlZnQmJmQud2lkdGg8PXAucmlnaHQ/XCJyaWdodFwiOlwicmlnaHRcIj09PWlbMF0mJmQud2lkdGg+cC5yaWdodCYmZC53aWR0aDw9cC5sZWZ0P1wibGVmdFwiOmlbMF0saVsxXT1cInRvcFwiPT09aVsxXSYmZC5oZWlnaHQtbC5oZWlnaHQ+cC5ib3R0b20mJmQuaGVpZ2h0LWwuaGVpZ2h0PD1wLnRvcD9cImJvdHRvbVwiOlwiYm90dG9tXCI9PT1pWzFdJiZkLmhlaWdodC1sLmhlaWdodD5wLnRvcCYmZC5oZWlnaHQtbC5oZWlnaHQ8PXAuYm90dG9tP1widG9wXCI6XCJsZWZ0XCI9PT1pWzFdJiZkLndpZHRoLWwud2lkdGg+cC5yaWdodCYmZC53aWR0aC1sLndpZHRoPD1wLmxlZnQ/XCJyaWdodFwiOlwicmlnaHRcIj09PWlbMV0mJmQud2lkdGgtbC53aWR0aD5wLmxlZnQmJmQud2lkdGgtbC53aWR0aDw9cC5yaWdodD9cImxlZnRcIjppWzFdLFwiY2VudGVyXCI9PT1pWzFdKWlmKG4udmVydGljYWwudGVzdChpWzBdKSl7dmFyIGg9bC53aWR0aC8yLW8vMjtwLmxlZnQraDwwJiZkLndpZHRoLWwud2lkdGg8PXAucmlnaHQ/aVsxXT1cImxlZnRcIjpwLnJpZ2h0K2g8MCYmZC53aWR0aC1sLndpZHRoPD1wLmxlZnQmJihpWzFdPVwicmlnaHRcIil9ZWxzZXt2YXIgZj1sLmhlaWdodC8yLWQuaGVpZ2h0LzI7cC50b3ArZjwwJiZkLmhlaWdodC1sLmhlaWdodDw9cC5ib3R0b20/aVsxXT1cInRvcFwiOnAuYm90dG9tK2Y8MCYmZC5oZWlnaHQtbC5oZWlnaHQ8PXAudG9wJiYoaVsxXT1cImJvdHRvbVwiKX19c3dpdGNoKGlbMF0pe2Nhc2VcInRvcFwiOnUudG9wPWwudG9wLXM7YnJlYWs7Y2FzZVwiYm90dG9tXCI6dS50b3A9bC50b3ArbC5oZWlnaHQ7YnJlYWs7Y2FzZVwibGVmdFwiOnUubGVmdD1sLmxlZnQtbzticmVhaztjYXNlXCJyaWdodFwiOnUubGVmdD1sLmxlZnQrbC53aWR0aH1zd2l0Y2goaVsxXSl7Y2FzZVwidG9wXCI6dS50b3A9bC50b3A7YnJlYWs7Y2FzZVwiYm90dG9tXCI6dS50b3A9bC50b3ArbC5oZWlnaHQtczticmVhaztjYXNlXCJsZWZ0XCI6dS5sZWZ0PWwubGVmdDticmVhaztjYXNlXCJyaWdodFwiOnUubGVmdD1sLmxlZnQrbC53aWR0aC1vO2JyZWFrO2Nhc2VcImNlbnRlclwiOm4udmVydGljYWwudGVzdChpWzBdKT91LmxlZnQ9bC5sZWZ0K2wud2lkdGgvMi1vLzI6dS50b3A9bC50b3ArbC5oZWlnaHQvMi1zLzJ9cmV0dXJuIHUudG9wPU1hdGgucm91bmQodS50b3ApLHUubGVmdD1NYXRoLnJvdW5kKHUubGVmdCksdS5wbGFjZW1lbnQ9XCJjZW50ZXJcIj09PWlbMV0/aVswXTppWzBdK1wiLVwiK2lbMV0sdX0scG9zaXRpb25BcnJvdzpmdW5jdGlvbihlLGEpe2U9dGhpcy5nZXRSYXdOb2RlKGUpO3ZhciBpPWUucXVlcnlTZWxlY3RvcihcIi50b29sdGlwLWlubmVyLCAucG9wb3Zlci1pbm5lclwiKTtpZihpKXt2YXIgcj1hbmd1bGFyLmVsZW1lbnQoaSkuaGFzQ2xhc3MoXCJ0b29sdGlwLWlubmVyXCIpLG89ZS5xdWVyeVNlbGVjdG9yKHI/XCIudG9vbHRpcC1hcnJvd1wiOlwiLmFycm93XCIpO2lmKG8pe3ZhciBzPXt0b3A6XCJcIixib3R0b206XCJcIixsZWZ0OlwiXCIscmlnaHQ6XCJcIn07aWYoYT10aGlzLnBhcnNlUGxhY2VtZW50KGEpLFwiY2VudGVyXCI9PT1hWzFdKXJldHVybiB2b2lkIGFuZ3VsYXIuZWxlbWVudChvKS5jc3Mocyk7dmFyIGw9XCJib3JkZXItXCIrYVswXStcIi13aWR0aFwiLHU9dC5nZXRDb21wdXRlZFN0eWxlKG8pW2xdLHA9XCJib3JkZXItXCI7cCs9bi52ZXJ0aWNhbC50ZXN0KGFbMF0pP2FbMF0rXCItXCIrYVsxXTphWzFdK1wiLVwiK2FbMF0scCs9XCItcmFkaXVzXCI7dmFyIGM9dC5nZXRDb21wdXRlZFN0eWxlKHI/aTplKVtwXTtzd2l0Y2goYVswXSl7Y2FzZVwidG9wXCI6cy5ib3R0b209cj9cIjBcIjpcIi1cIit1O2JyZWFrO2Nhc2VcImJvdHRvbVwiOnMudG9wPXI/XCIwXCI6XCItXCIrdTticmVhaztjYXNlXCJsZWZ0XCI6cy5yaWdodD1yP1wiMFwiOlwiLVwiK3U7YnJlYWs7Y2FzZVwicmlnaHRcIjpzLmxlZnQ9cj9cIjBcIjpcIi1cIit1fXNbYVsxXV09Yyxhbmd1bGFyLmVsZW1lbnQobykuY3NzKHMpfX19fX1dKSxhbmd1bGFyLm1vZHVsZShcInVpLmJvb3RzdHJhcC50eXBlYWhlYWRcIixbXCJ1aS5ib290c3RyYXAuZGVib3VuY2VcIixcInVpLmJvb3RzdHJhcC5wb3NpdGlvblwiXSkuZmFjdG9yeShcInVpYlR5cGVhaGVhZFBhcnNlclwiLFtcIiRwYXJzZVwiLGZ1bmN0aW9uKGUpe3ZhciB0PS9eXFxzKihbXFxzXFxTXSs/KSg/Olxccythc1xccysoW1xcc1xcU10rPykpP1xccytmb3JcXHMrKD86KFtcXCRcXHddW1xcJFxcd1xcZF0qKSlcXHMraW5cXHMrKFtcXHNcXFNdKz8pJC87cmV0dXJue3BhcnNlOmZ1bmN0aW9uKGEpe3ZhciBpPWEubWF0Y2godCk7aWYoIWkpdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0eXBlYWhlYWQgc3BlY2lmaWNhdGlvbiBpbiBmb3JtIG9mIFwiX21vZGVsVmFsdWVfIChhcyBfbGFiZWxfKT8gZm9yIF9pdGVtXyBpbiBfY29sbGVjdGlvbl9cIiBidXQgZ290IFwiJythKydcIi4nKTtyZXR1cm57aXRlbU5hbWU6aVszXSxzb3VyY2U6ZShpWzRdKSx2aWV3TWFwcGVyOmUoaVsyXXx8aVsxXSksbW9kZWxNYXBwZXI6ZShpWzFdKX19fX1dKS5jb250cm9sbGVyKFwiVWliVHlwZWFoZWFkQ29udHJvbGxlclwiLFtcIiRzY29wZVwiLFwiJGVsZW1lbnRcIixcIiRhdHRyc1wiLFwiJGNvbXBpbGVcIixcIiRwYXJzZVwiLFwiJHFcIixcIiR0aW1lb3V0XCIsXCIkZG9jdW1lbnRcIixcIiR3aW5kb3dcIixcIiRyb290U2NvcGVcIixcIiQkZGVib3VuY2VcIixcIiR1aWJQb3NpdGlvblwiLFwidWliVHlwZWFoZWFkUGFyc2VyXCIsZnVuY3Rpb24oZSx0LGEsaSxuLHIsbyxzLGwsdSxwLGMsZCl7ZnVuY3Rpb24gaCgpe1IubW92ZUluUHJvZ3Jlc3N8fChSLm1vdmVJblByb2dyZXNzPSEwLFIuJGRpZ2VzdCgpKSxYKCl9ZnVuY3Rpb24gZigpe1IucG9zaXRpb249Rj9jLm9mZnNldCh0KTpjLnBvc2l0aW9uKHQpLFIucG9zaXRpb24udG9wKz10LnByb3AoXCJvZmZzZXRIZWlnaHRcIil9dmFyIG0sZyxiPVs5LDEzLDI3LDM4LDQwXSx5PTIwMCx2PWUuJGV2YWwoYS50eXBlYWhlYWRNaW5MZW5ndGgpO3Z8fDA9PT12fHwodj0xKSxlLiR3YXRjaChhLnR5cGVhaGVhZE1pbkxlbmd0aCxmdW5jdGlvbihlKXt2PWV8fDA9PT1lP2U6MX0pO3ZhciBEPWUuJGV2YWwoYS50eXBlYWhlYWRXYWl0TXMpfHwwLGs9ZS4kZXZhbChhLnR5cGVhaGVhZEVkaXRhYmxlKSE9PSExO2UuJHdhdGNoKGEudHlwZWFoZWFkRWRpdGFibGUsZnVuY3Rpb24oZSl7az1lIT09ITF9KTt2YXIgdywkLE09bihhLnR5cGVhaGVhZExvYWRpbmcpLmFzc2lnbnx8YW5ndWxhci5ub29wLHg9bihhLnR5cGVhaGVhZE9uU2VsZWN0KSxUPWFuZ3VsYXIuaXNEZWZpbmVkKGEudHlwZWFoZWFkU2VsZWN0T25CbHVyKT9lLiRldmFsKGEudHlwZWFoZWFkU2VsZWN0T25CbHVyKTohMSxPPW4oYS50eXBlYWhlYWROb1Jlc3VsdHMpLmFzc2lnbnx8YW5ndWxhci5ub29wLEU9YS50eXBlYWhlYWRJbnB1dEZvcm1hdHRlcj9uKGEudHlwZWFoZWFkSW5wdXRGb3JtYXR0ZXIpOnZvaWQgMCxGPWEudHlwZWFoZWFkQXBwZW5kVG9Cb2R5P2UuJGV2YWwoYS50eXBlYWhlYWRBcHBlbmRUb0JvZHkpOiExLFM9YS50eXBlYWhlYWRBcHBlbmRUbz9lLiRldmFsKGEudHlwZWFoZWFkQXBwZW5kVG8pOm51bGwsST1lLiRldmFsKGEudHlwZWFoZWFkRm9jdXNGaXJzdCkhPT0hMSxDPWEudHlwZWFoZWFkU2VsZWN0T25FeGFjdD9lLiRldmFsKGEudHlwZWFoZWFkU2VsZWN0T25FeGFjdCk6ITEsUD1uKGEudHlwZWFoZWFkSXNPcGVuKS5hc3NpZ258fGFuZ3VsYXIubm9vcCxBPWUuJGV2YWwoYS50eXBlYWhlYWRTaG93SGludCl8fCExLE49bihhLm5nTW9kZWwpLFU9bihhLm5nTW9kZWwrXCIoJCQkcClcIiksWT1mdW5jdGlvbih0LGEpe3JldHVybiBhbmd1bGFyLmlzRnVuY3Rpb24oTihlKSkmJmcmJmcuJG9wdGlvbnMmJmcuJG9wdGlvbnMuZ2V0dGVyU2V0dGVyP1UodCx7JCQkcDphfSk6Ti5hc3NpZ24odCxhKX0sej1kLnBhcnNlKGEudWliVHlwZWFoZWFkKSxSPWUuJG5ldygpLFY9ZS4kb24oXCIkZGVzdHJveVwiLGZ1bmN0aW9uKCl7Ui4kZGVzdHJveSgpfSk7Ui4kb24oXCIkZGVzdHJveVwiLFYpO3ZhciBIPVwidHlwZWFoZWFkLVwiK1IuJGlkK1wiLVwiK01hdGguZmxvb3IoMWU0Kk1hdGgucmFuZG9tKCkpO3QuYXR0cih7XCJhcmlhLWF1dG9jb21wbGV0ZVwiOlwibGlzdFwiLFwiYXJpYS1leHBhbmRlZFwiOiExLFwiYXJpYS1vd25zXCI6SH0pO3ZhciBCLFc7QSYmKEI9YW5ndWxhci5lbGVtZW50KFwiPGRpdj48L2Rpdj5cIiksQi5jc3MoXCJwb3NpdGlvblwiLFwicmVsYXRpdmVcIiksdC5hZnRlcihCKSxXPXQuY2xvbmUoKSxXLmF0dHIoXCJwbGFjZWhvbGRlclwiLFwiXCIpLFcuYXR0cihcInRhYmluZGV4XCIsXCItMVwiKSxXLnZhbChcIlwiKSxXLmNzcyh7cG9zaXRpb246XCJhYnNvbHV0ZVwiLHRvcDpcIjBweFwiLGxlZnQ6XCIwcHhcIixcImJvcmRlci1jb2xvclwiOlwidHJhbnNwYXJlbnRcIixcImJveC1zaGFkb3dcIjpcIm5vbmVcIixvcGFjaXR5OjEsYmFja2dyb3VuZDpcIm5vbmUgMCUgMCUgLyBhdXRvIHJlcGVhdCBzY3JvbGwgcGFkZGluZy1ib3ggYm9yZGVyLWJveCByZ2IoMjU1LCAyNTUsIDI1NSlcIixjb2xvcjpcIiM5OTlcIn0pLHQuY3NzKHtwb3NpdGlvbjpcInJlbGF0aXZlXCIsXCJ2ZXJ0aWNhbC1hbGlnblwiOlwidG9wXCIsXCJiYWNrZ3JvdW5kLWNvbG9yXCI6XCJ0cmFuc3BhcmVudFwifSksQi5hcHBlbmQoVyksVy5hZnRlcih0KSk7dmFyIHE9YW5ndWxhci5lbGVtZW50KFwiPGRpdiB1aWItdHlwZWFoZWFkLXBvcHVwPjwvZGl2PlwiKTtxLmF0dHIoe2lkOkgsbWF0Y2hlczpcIm1hdGNoZXNcIixhY3RpdmU6XCJhY3RpdmVJZHhcIixzZWxlY3Q6XCJzZWxlY3QoYWN0aXZlSWR4LCBldnQpXCIsXCJtb3ZlLWluLXByb2dyZXNzXCI6XCJtb3ZlSW5Qcm9ncmVzc1wiLHF1ZXJ5OlwicXVlcnlcIixwb3NpdGlvbjpcInBvc2l0aW9uXCIsXCJhc3NpZ24taXMtb3BlblwiOlwiYXNzaWduSXNPcGVuKGlzT3BlbilcIixkZWJvdW5jZTpcImRlYm91bmNlVXBkYXRlXCJ9KSxhbmd1bGFyLmlzRGVmaW5lZChhLnR5cGVhaGVhZFRlbXBsYXRlVXJsKSYmcS5hdHRyKFwidGVtcGxhdGUtdXJsXCIsYS50eXBlYWhlYWRUZW1wbGF0ZVVybCksYW5ndWxhci5pc0RlZmluZWQoYS50eXBlYWhlYWRQb3B1cFRlbXBsYXRlVXJsKSYmcS5hdHRyKFwicG9wdXAtdGVtcGxhdGUtdXJsXCIsYS50eXBlYWhlYWRQb3B1cFRlbXBsYXRlVXJsKTt2YXIgXz1mdW5jdGlvbigpe0EmJlcudmFsKFwiXCIpfSxqPWZ1bmN0aW9uKCl7Ui5tYXRjaGVzPVtdLFIuYWN0aXZlSWR4PS0xLHQuYXR0cihcImFyaWEtZXhwYW5kZWRcIiwhMSksXygpfSxHPWZ1bmN0aW9uKGUpe3JldHVybiBIK1wiLW9wdGlvbi1cIitlfTtSLiR3YXRjaChcImFjdGl2ZUlkeFwiLGZ1bmN0aW9uKGUpezA+ZT90LnJlbW92ZUF0dHIoXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIik6dC5hdHRyKFwiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCIsRyhlKSl9KTt2YXIgTD1mdW5jdGlvbihlLHQpe3JldHVybiBSLm1hdGNoZXMubGVuZ3RoPnQmJmU/ZS50b1VwcGVyQ2FzZSgpPT09Ui5tYXRjaGVzW3RdLmxhYmVsLnRvVXBwZXJDYXNlKCk6ITF9LEs9ZnVuY3Rpb24oYSxpKXt2YXIgbj17JHZpZXdWYWx1ZTphfTtNKGUsITApLE8oZSwhMSksci53aGVuKHouc291cmNlKGUsbikpLnRoZW4oZnVuY3Rpb24ocil7dmFyIG89YT09PW0uJHZpZXdWYWx1ZTtpZihvJiZ3KWlmKHImJnIubGVuZ3RoPjApe1IuYWN0aXZlSWR4PUk/MDotMSxPKGUsITEpLFIubWF0Y2hlcy5sZW5ndGg9MDtmb3IodmFyIHM9MDtzPHIubGVuZ3RoO3MrKyluW3ouaXRlbU5hbWVdPXJbc10sUi5tYXRjaGVzLnB1c2goe2lkOkcocyksbGFiZWw6ei52aWV3TWFwcGVyKFIsbiksbW9kZWw6cltzXX0pO2lmKFIucXVlcnk9YSxmKCksdC5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLCEwKSxDJiYxPT09Ui5tYXRjaGVzLmxlbmd0aCYmTChhLDApJiYoYW5ndWxhci5pc051bWJlcihSLmRlYm91bmNlVXBkYXRlKXx8YW5ndWxhci5pc09iamVjdChSLmRlYm91bmNlVXBkYXRlKT9wKGZ1bmN0aW9uKCl7Ui5zZWxlY3QoMCxpKX0sYW5ndWxhci5pc051bWJlcihSLmRlYm91bmNlVXBkYXRlKT9SLmRlYm91bmNlVXBkYXRlOlIuZGVib3VuY2VVcGRhdGVbXCJkZWZhdWx0XCJdKTpSLnNlbGVjdCgwLGkpKSxBKXt2YXIgbD1SLm1hdGNoZXNbMF0ubGFiZWw7Vy52YWwoYW5ndWxhci5pc1N0cmluZyhhKSYmYS5sZW5ndGg+MCYmbC5zbGljZSgwLGEubGVuZ3RoKS50b1VwcGVyQ2FzZSgpPT09YS50b1VwcGVyQ2FzZSgpP2ErbC5zbGljZShhLmxlbmd0aCk6XCJcIil9fWVsc2UgaigpLE8oZSwhMCk7byYmTShlLCExKX0sZnVuY3Rpb24oKXtqKCksTShlLCExKSxPKGUsITApfSl9O0YmJihhbmd1bGFyLmVsZW1lbnQobCkub24oXCJyZXNpemVcIixoKSxzLmZpbmQoXCJib2R5XCIpLm9uKFwic2Nyb2xsXCIsaCkpO3ZhciBYPXAoZnVuY3Rpb24oKXtSLm1hdGNoZXMubGVuZ3RoJiZmKCksUi5tb3ZlSW5Qcm9ncmVzcz0hMX0seSk7Ui5tb3ZlSW5Qcm9ncmVzcz0hMSxSLnF1ZXJ5PXZvaWQgMDt2YXIgWixKPWZ1bmN0aW9uKGUpe1o9byhmdW5jdGlvbigpe0soZSl9LEQpfSxRPWZ1bmN0aW9uKCl7WiYmby5jYW5jZWwoWil9O2ooKSxSLmFzc2lnbklzT3Blbj1mdW5jdGlvbih0KXtQKGUsdCl9LFIuc2VsZWN0PWZ1bmN0aW9uKGksbil7dmFyIHIscyxsPXt9OyQ9ITAsbFt6Lml0ZW1OYW1lXT1zPVIubWF0Y2hlc1tpXS5tb2RlbCxyPXoubW9kZWxNYXBwZXIoZSxsKSxZKGUsciksbS4kc2V0VmFsaWRpdHkoXCJlZGl0YWJsZVwiLCEwKSxtLiRzZXRWYWxpZGl0eShcInBhcnNlXCIsITApLHgoZSx7JGl0ZW06cywkbW9kZWw6ciwkbGFiZWw6ei52aWV3TWFwcGVyKGUsbCksJGV2ZW50Om59KSxqKCksUi4kZXZhbChhLnR5cGVhaGVhZEZvY3VzT25TZWxlY3QpIT09ITEmJm8oZnVuY3Rpb24oKXt0WzBdLmZvY3VzKCl9LDAsITEpfSx0Lm9uKFwia2V5ZG93blwiLGZ1bmN0aW9uKHQpe2lmKDAhPT1SLm1hdGNoZXMubGVuZ3RoJiYtMSE9PWIuaW5kZXhPZih0LndoaWNoKSl7aWYoLTE9PT1SLmFjdGl2ZUlkeCYmKDk9PT10LndoaWNofHwxMz09PXQud2hpY2gpfHw5PT09dC53aGljaCYmdC5zaGlmdEtleSlyZXR1cm4gaigpLHZvaWQgUi4kZGlnZXN0KCk7dC5wcmV2ZW50RGVmYXVsdCgpO3ZhciBhO3N3aXRjaCh0LndoaWNoKXtjYXNlIDk6Y2FzZSAxMzpSLiRhcHBseShmdW5jdGlvbigpe2FuZ3VsYXIuaXNOdW1iZXIoUi5kZWJvdW5jZVVwZGF0ZSl8fGFuZ3VsYXIuaXNPYmplY3QoUi5kZWJvdW5jZVVwZGF0ZSk/cChmdW5jdGlvbigpe1Iuc2VsZWN0KFIuYWN0aXZlSWR4LHQpfSxhbmd1bGFyLmlzTnVtYmVyKFIuZGVib3VuY2VVcGRhdGUpP1IuZGVib3VuY2VVcGRhdGU6Ui5kZWJvdW5jZVVwZGF0ZVtcImRlZmF1bHRcIl0pOlIuc2VsZWN0KFIuYWN0aXZlSWR4LHQpfSk7YnJlYWs7Y2FzZSAyNzp0LnN0b3BQcm9wYWdhdGlvbigpLGooKSxlLiRkaWdlc3QoKTticmVhaztjYXNlIDM4OlIuYWN0aXZlSWR4PShSLmFjdGl2ZUlkeD4wP1IuYWN0aXZlSWR4OlIubWF0Y2hlcy5sZW5ndGgpLTEsUi4kZGlnZXN0KCksYT1xLmZpbmQoXCJsaVwiKVtSLmFjdGl2ZUlkeF0sYS5wYXJlbnROb2RlLnNjcm9sbFRvcD1hLm9mZnNldFRvcDticmVhaztjYXNlIDQwOlIuYWN0aXZlSWR4PShSLmFjdGl2ZUlkeCsxKSVSLm1hdGNoZXMubGVuZ3RoLFIuJGRpZ2VzdCgpLGE9cS5maW5kKFwibGlcIilbUi5hY3RpdmVJZHhdLGEucGFyZW50Tm9kZS5zY3JvbGxUb3A9YS5vZmZzZXRUb3B9fX0pLHQuYmluZChcImZvY3VzXCIsZnVuY3Rpb24oZSl7dz0hMCwwIT09dnx8bS4kdmlld1ZhbHVlfHxvKGZ1bmN0aW9uKCl7SyhtLiR2aWV3VmFsdWUsZSl9LDApfSksdC5iaW5kKFwiYmx1clwiLGZ1bmN0aW9uKGUpe1QmJlIubWF0Y2hlcy5sZW5ndGgmJi0xIT09Ui5hY3RpdmVJZHgmJiEkJiYoJD0hMCxSLiRhcHBseShmdW5jdGlvbigpe2FuZ3VsYXIuaXNPYmplY3QoUi5kZWJvdW5jZVVwZGF0ZSkmJmFuZ3VsYXIuaXNOdW1iZXIoUi5kZWJvdW5jZVVwZGF0ZS5ibHVyKT9wKGZ1bmN0aW9uKCl7Ui5zZWxlY3QoUi5hY3RpdmVJZHgsZSl9LFIuZGVib3VuY2VVcGRhdGUuYmx1cik6Ui5zZWxlY3QoUi5hY3RpdmVJZHgsZSl9KSksIWsmJm0uJGVycm9yLmVkaXRhYmxlJiYobS4kdmlld1ZhbHVlPVwiXCIsdC52YWwoXCJcIikpLHc9ITEsJD0hMX0pO3ZhciBldD1mdW5jdGlvbihhKXt0WzBdIT09YS50YXJnZXQmJjMhPT1hLndoaWNoJiYwIT09Ui5tYXRjaGVzLmxlbmd0aCYmKGooKSx1LiQkcGhhc2V8fGUuJGRpZ2VzdCgpKX07cy5vbihcImNsaWNrXCIsZXQpLGUuJG9uKFwiJGRlc3Ryb3lcIixmdW5jdGlvbigpe3Mub2ZmKFwiY2xpY2tcIixldCksKEZ8fFMpJiZ0dC5yZW1vdmUoKSxGJiYoYW5ndWxhci5lbGVtZW50KGwpLm9mZihcInJlc2l6ZVwiLGgpLHMuZmluZChcImJvZHlcIikub2ZmKFwic2Nyb2xsXCIsaCkpLHEucmVtb3ZlKCksQSYmQi5yZW1vdmUoKX0pO3ZhciB0dD1pKHEpKFIpO0Y/cy5maW5kKFwiYm9keVwiKS5hcHBlbmQodHQpOlM/YW5ndWxhci5lbGVtZW50KFMpLmVxKDApLmFwcGVuZCh0dCk6dC5hZnRlcih0dCksdGhpcy5pbml0PWZ1bmN0aW9uKHQsYSl7bT10LGc9YSxSLmRlYm91bmNlVXBkYXRlPW0uJG9wdGlvbnMmJm4obS4kb3B0aW9ucy5kZWJvdW5jZSkoZSksbS4kcGFyc2Vycy51bnNoaWZ0KGZ1bmN0aW9uKHQpe3JldHVybiB3PSEwLDA9PT12fHx0JiZ0Lmxlbmd0aD49dj9EPjA/KFEoKSxKKHQpKTpLKHQpOihNKGUsITEpLFEoKSxqKCkpLGs/dDp0P3ZvaWQgbS4kc2V0VmFsaWRpdHkoXCJlZGl0YWJsZVwiLCExKToobS4kc2V0VmFsaWRpdHkoXCJlZGl0YWJsZVwiLCEwKSxudWxsKX0pLG0uJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih0KXt2YXIgYSxpLG49e307cmV0dXJuIGt8fG0uJHNldFZhbGlkaXR5KFwiZWRpdGFibGVcIiwhMCksRT8obi4kbW9kZWw9dCxFKGUsbikpOihuW3ouaXRlbU5hbWVdPXQsYT16LnZpZXdNYXBwZXIoZSxuKSxuW3ouaXRlbU5hbWVdPXZvaWQgMCxpPXoudmlld01hcHBlcihlLG4pLGEhPT1pP2E6dCl9KX19XSkuZGlyZWN0aXZlKFwidWliVHlwZWFoZWFkXCIsZnVuY3Rpb24oKXtyZXR1cm57Y29udHJvbGxlcjpcIlVpYlR5cGVhaGVhZENvbnRyb2xsZXJcIixyZXF1aXJlOltcIm5nTW9kZWxcIixcIl4/bmdNb2RlbE9wdGlvbnNcIixcInVpYlR5cGVhaGVhZFwiXSxsaW5rOmZ1bmN0aW9uKGUsdCxhLGkpe2lbMl0uaW5pdChpWzBdLGlbMV0pfX19KS5kaXJlY3RpdmUoXCJ1aWJUeXBlYWhlYWRQb3B1cFwiLFtcIiQkZGVib3VuY2VcIixmdW5jdGlvbihlKXtyZXR1cm57c2NvcGU6e21hdGNoZXM6XCI9XCIscXVlcnk6XCI9XCIsYWN0aXZlOlwiPVwiLHBvc2l0aW9uOlwiJlwiLG1vdmVJblByb2dyZXNzOlwiPVwiLHNlbGVjdDpcIiZcIixhc3NpZ25Jc09wZW46XCImXCIsZGVib3VuY2U6XCImXCJ9LHJlcGxhY2U6ITAsdGVtcGxhdGVVcmw6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5wb3B1cFRlbXBsYXRlVXJsfHxcInVpYi90ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLXBvcHVwLmh0bWxcIn0sbGluazpmdW5jdGlvbih0LGEsaSl7dC50ZW1wbGF0ZVVybD1pLnRlbXBsYXRlVXJsLHQuaXNPcGVuPWZ1bmN0aW9uKCl7dmFyIGU9dC5tYXRjaGVzLmxlbmd0aD4wO3JldHVybiB0LmFzc2lnbklzT3Blbih7aXNPcGVuOmV9KSxlfSx0LmlzQWN0aXZlPWZ1bmN0aW9uKGUpe3JldHVybiB0LmFjdGl2ZT09PWV9LHQuc2VsZWN0QWN0aXZlPWZ1bmN0aW9uKGUpe3QuYWN0aXZlPWV9LHQuc2VsZWN0TWF0Y2g9ZnVuY3Rpb24oYSxpKXt2YXIgbj10LmRlYm91bmNlKCk7YW5ndWxhci5pc051bWJlcihuKXx8YW5ndWxhci5pc09iamVjdChuKT9lKGZ1bmN0aW9uKCl7dC5zZWxlY3Qoe2FjdGl2ZUlkeDphLGV2dDppfSl9LGFuZ3VsYXIuaXNOdW1iZXIobik/bjpuW1wiZGVmYXVsdFwiXSk6dC5zZWxlY3Qoe2FjdGl2ZUlkeDphLGV2dDppfSl9fX19XSkuZGlyZWN0aXZlKFwidWliVHlwZWFoZWFkTWF0Y2hcIixbXCIkdGVtcGxhdGVSZXF1ZXN0XCIsXCIkY29tcGlsZVwiLFwiJHBhcnNlXCIsZnVuY3Rpb24oZSx0LGEpe3JldHVybntzY29wZTp7aW5kZXg6XCI9XCIsbWF0Y2g6XCI9XCIscXVlcnk6XCI9XCJ9LGxpbms6ZnVuY3Rpb24oaSxuLHIpe3ZhciBvPWEoci50ZW1wbGF0ZVVybCkoaS4kcGFyZW50KXx8XCJ1aWIvdGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1tYXRjaC5odG1sXCI7ZShvKS50aGVuKGZ1bmN0aW9uKGUpe3ZhciBhPWFuZ3VsYXIuZWxlbWVudChlLnRyaW0oKSk7bi5yZXBsYWNlV2l0aChhKSx0KGEpKGkpfSl9fX1dKS5maWx0ZXIoXCJ1aWJUeXBlYWhlYWRIaWdobGlnaHRcIixbXCIkc2NlXCIsXCIkaW5qZWN0b3JcIixcIiRsb2dcIixmdW5jdGlvbihlLHQsYSl7ZnVuY3Rpb24gaShlKXtyZXR1cm4gZS5yZXBsYWNlKC8oWy4/KiteJFtcXF1cXFxcKCl7fXwtXSkvZyxcIlxcXFwkMVwiKX1mdW5jdGlvbiBuKGUpe3JldHVybi88Lio+L2cudGVzdChlKX12YXIgcjtyZXR1cm4gcj10LmhhcyhcIiRzYW5pdGl6ZVwiKSxmdW5jdGlvbih0LG8pe3JldHVybiFyJiZuKHQpJiZhLndhcm4oXCJVbnNhZmUgdXNlIG9mIHR5cGVhaGVhZCBwbGVhc2UgdXNlIG5nU2FuaXRpemVcIiksdD1vPyhcIlwiK3QpLnJlcGxhY2UobmV3IFJlZ0V4cChpKG8pLFwiZ2lcIiksXCI8c3Ryb25nPiQmPC9zdHJvbmc+XCIpOnQscnx8KHQ9ZS50cnVzdEFzSHRtbCh0KSksdH19XSksYW5ndWxhci5tb2R1bGUoXCJ1aS5ib290c3RyYXAuZGVib3VuY2VcIixbXSkuZmFjdG9yeShcIiQkZGVib3VuY2VcIixbXCIkdGltZW91dFwiLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LGEpe3ZhciBpO3JldHVybiBmdW5jdGlvbigpe3ZhciBuPXRoaXMscj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO2kmJmUuY2FuY2VsKGkpLGk9ZShmdW5jdGlvbigpe3QuYXBwbHkobixyKX0sYSl9fX1dKSxhbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL2RhdGVwaWNrZXIuaHRtbFwiLFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIixmdW5jdGlvbihlKXtlLnB1dChcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL2RhdGVwaWNrZXIuaHRtbFwiLCc8ZGl2IGNsYXNzPVwidWliLWRhdGVwaWNrZXJcIiBuZy1zd2l0Y2g9XCJkYXRlcGlja2VyTW9kZVwiIHJvbGU9XCJhcHBsaWNhdGlvblwiIG5nLWtleWRvd249XCJrZXlkb3duKCRldmVudClcIj5cXG4gIDx1aWItZGF5cGlja2VyIG5nLXN3aXRjaC13aGVuPVwiZGF5XCIgdGFiaW5kZXg9XCIwXCI+PC91aWItZGF5cGlja2VyPlxcbiAgPHVpYi1tb250aHBpY2tlciBuZy1zd2l0Y2gtd2hlbj1cIm1vbnRoXCIgdGFiaW5kZXg9XCIwXCI+PC91aWItbW9udGhwaWNrZXI+XFxuICA8dWliLXllYXJwaWNrZXIgbmctc3dpdGNoLXdoZW49XCJ5ZWFyXCIgdGFiaW5kZXg9XCIwXCI+PC91aWIteWVhcnBpY2tlcj5cXG48L2Rpdj5cXG4nKX1dKSxhbmd1bGFyLm1vZHVsZShcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL2RheS5odG1sXCIsW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLGZ1bmN0aW9uKGUpe2UucHV0KFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvZGF5Lmh0bWxcIiwnPHRhYmxlIGNsYXNzPVwidWliLWRheXBpY2tlclwiIHJvbGU9XCJncmlkXCIgYXJpYS1sYWJlbGxlZGJ5PVwie3s6OnVuaXF1ZUlkfX0tdGl0bGVcIiBhcmlhLWFjdGl2ZWRlc2NlbmRhbnQ9XCJ7e2FjdGl2ZURhdGVJZH19XCI+XFxuICA8dGhlYWQ+XFxuICAgIDx0cj5cXG4gICAgICA8dGg+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHB1bGwtbGVmdCB1aWItbGVmdFwiIG5nLWNsaWNrPVwibW92ZSgtMSlcIiB0YWJpbmRleD1cIi0xXCI+PGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdFwiPjwvaT48L2J1dHRvbj48L3RoPlxcbiAgICAgIDx0aCBjb2xzcGFuPVwie3s6OjUgKyBzaG93V2Vla3N9fVwiPjxidXR0b24gaWQ9XCJ7ezo6dW5pcXVlSWR9fS10aXRsZVwiIHJvbGU9XCJoZWFkaW5nXCIgYXJpYS1saXZlPVwiYXNzZXJ0aXZlXCIgYXJpYS1hdG9taWM9XCJ0cnVlXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSB1aWItdGl0bGVcIiBuZy1jbGljaz1cInRvZ2dsZU1vZGUoKVwiIG5nLWRpc2FibGVkPVwiZGF0ZXBpY2tlck1vZGUgPT09IG1heE1vZGVcIiB0YWJpbmRleD1cIi0xXCI+PHN0cm9uZz57e3RpdGxlfX08L3N0cm9uZz48L2J1dHRvbj48L3RoPlxcbiAgICAgIDx0aD48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBidG4tc20gcHVsbC1yaWdodCB1aWItcmlnaHRcIiBuZy1jbGljaz1cIm1vdmUoMSlcIiB0YWJpbmRleD1cIi0xXCI+PGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHRcIj48L2k+PC9idXR0b24+PC90aD5cXG4gICAgPC90cj5cXG4gICAgPHRyPlxcbiAgICAgIDx0aCBuZy1pZj1cInNob3dXZWVrc1wiIGNsYXNzPVwidGV4dC1jZW50ZXJcIj48L3RoPlxcbiAgICAgIDx0aCBuZy1yZXBlYXQ9XCJsYWJlbCBpbiA6OmxhYmVscyB0cmFjayBieSAkaW5kZXhcIiBjbGFzcz1cInRleHQtY2VudGVyXCI+PHNtYWxsIGFyaWEtbGFiZWw9XCJ7ezo6bGFiZWwuZnVsbH19XCI+e3s6OmxhYmVsLmFiYnJ9fTwvc21hbGw+PC90aD5cXG4gICAgPC90cj5cXG4gIDwvdGhlYWQ+XFxuICA8dGJvZHk+XFxuICAgIDx0ciBjbGFzcz1cInVpYi13ZWVrc1wiIG5nLXJlcGVhdD1cInJvdyBpbiByb3dzIHRyYWNrIGJ5ICRpbmRleFwiPlxcbiAgICAgIDx0ZCBuZy1pZj1cInNob3dXZWVrc1wiIGNsYXNzPVwidGV4dC1jZW50ZXIgaDZcIj48ZW0+e3sgd2Vla051bWJlcnNbJGluZGV4XSB9fTwvZW0+PC90ZD5cXG4gICAgICA8dGQgbmctcmVwZWF0PVwiZHQgaW4gcm93XCIgY2xhc3M9XCJ1aWItZGF5IHRleHQtY2VudGVyXCIgcm9sZT1cImdyaWRjZWxsXCJcXG4gICAgICAgIGlkPVwie3s6OmR0LnVpZH19XCJcXG4gICAgICAgIG5nLWNsYXNzPVwiOjpkdC5jdXN0b21DbGFzc1wiPlxcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtXCJcXG4gICAgICAgICAgdWliLWlzLWNsYXNzPVwiXFxuICAgICAgICAgICAgXFwnYnRuLWluZm9cXCcgZm9yIHNlbGVjdGVkRHQsXFxuICAgICAgICAgICAgXFwnYWN0aXZlXFwnIGZvciBhY3RpdmVEdFxcbiAgICAgICAgICAgIG9uIGR0XCJcXG4gICAgICAgICAgbmctY2xpY2s9XCJzZWxlY3QoZHQuZGF0ZSlcIlxcbiAgICAgICAgICBuZy1kaXNhYmxlZD1cIjo6ZHQuZGlzYWJsZWRcIlxcbiAgICAgICAgICB0YWJpbmRleD1cIi0xXCI+PHNwYW4gbmctY2xhc3M9XCI6OntcXCd0ZXh0LW11dGVkXFwnOiBkdC5zZWNvbmRhcnksIFxcJ3RleHQtaW5mb1xcJzogZHQuY3VycmVudH1cIj57ezo6ZHQubGFiZWx9fTwvc3Bhbj48L2J1dHRvbj5cXG4gICAgICA8L3RkPlxcbiAgICA8L3RyPlxcbiAgPC90Ym9keT5cXG48L3RhYmxlPlxcbicpfV0pLGFuZ3VsYXIubW9kdWxlKFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvbW9udGguaHRtbFwiLFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIixmdW5jdGlvbihlKXtlLnB1dChcInVpYi90ZW1wbGF0ZS9kYXRlcGlja2VyL21vbnRoLmh0bWxcIiwnPHRhYmxlIGNsYXNzPVwidWliLW1vbnRocGlja2VyXCIgcm9sZT1cImdyaWRcIiBhcmlhLWxhYmVsbGVkYnk9XCJ7ezo6dW5pcXVlSWR9fS10aXRsZVwiIGFyaWEtYWN0aXZlZGVzY2VuZGFudD1cInt7YWN0aXZlRGF0ZUlkfX1cIj5cXG4gIDx0aGVhZD5cXG4gICAgPHRyPlxcbiAgICAgIDx0aD48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBidG4tc20gcHVsbC1sZWZ0IHVpYi1sZWZ0XCIgbmctY2xpY2s9XCJtb3ZlKC0xKVwiIHRhYmluZGV4PVwiLTFcIj48aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1sZWZ0XCI+PC9pPjwvYnV0dG9uPjwvdGg+XFxuICAgICAgPHRoPjxidXR0b24gaWQ9XCJ7ezo6dW5pcXVlSWR9fS10aXRsZVwiIHJvbGU9XCJoZWFkaW5nXCIgYXJpYS1saXZlPVwiYXNzZXJ0aXZlXCIgYXJpYS1hdG9taWM9XCJ0cnVlXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSB1aWItdGl0bGVcIiBuZy1jbGljaz1cInRvZ2dsZU1vZGUoKVwiIG5nLWRpc2FibGVkPVwiZGF0ZXBpY2tlck1vZGUgPT09IG1heE1vZGVcIiB0YWJpbmRleD1cIi0xXCI+PHN0cm9uZz57e3RpdGxlfX08L3N0cm9uZz48L2J1dHRvbj48L3RoPlxcbiAgICAgIDx0aD48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBidG4tc20gcHVsbC1yaWdodCB1aWItcmlnaHRcIiBuZy1jbGljaz1cIm1vdmUoMSlcIiB0YWJpbmRleD1cIi0xXCI+PGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHRcIj48L2k+PC9idXR0b24+PC90aD5cXG4gICAgPC90cj5cXG4gIDwvdGhlYWQ+XFxuICA8dGJvZHk+XFxuICAgIDx0ciBjbGFzcz1cInVpYi1tb250aHNcIiBuZy1yZXBlYXQ9XCJyb3cgaW4gcm93cyB0cmFjayBieSAkaW5kZXhcIj5cXG4gICAgICA8dGQgbmctcmVwZWF0PVwiZHQgaW4gcm93XCIgY2xhc3M9XCJ1aWItbW9udGggdGV4dC1jZW50ZXJcIiByb2xlPVwiZ3JpZGNlbGxcIlxcbiAgICAgICAgaWQ9XCJ7ezo6ZHQudWlkfX1cIlxcbiAgICAgICAgbmctY2xhc3M9XCI6OmR0LmN1c3RvbUNsYXNzXCI+XFxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiXFxuICAgICAgICAgIHVpYi1pcy1jbGFzcz1cIlxcbiAgICAgICAgICAgIFxcJ2J0bi1pbmZvXFwnIGZvciBzZWxlY3RlZER0LFxcbiAgICAgICAgICAgIFxcJ2FjdGl2ZVxcJyBmb3IgYWN0aXZlRHRcXG4gICAgICAgICAgICBvbiBkdFwiXFxuICAgICAgICAgIG5nLWNsaWNrPVwic2VsZWN0KGR0LmRhdGUpXCJcXG4gICAgICAgICAgbmctZGlzYWJsZWQ9XCI6OmR0LmRpc2FibGVkXCJcXG4gICAgICAgICAgdGFiaW5kZXg9XCItMVwiPjxzcGFuIG5nLWNsYXNzPVwiOjp7XFwndGV4dC1pbmZvXFwnOiBkdC5jdXJyZW50fVwiPnt7OjpkdC5sYWJlbH19PC9zcGFuPjwvYnV0dG9uPlxcbiAgICAgIDwvdGQ+XFxuICAgIDwvdHI+XFxuICA8L3Rib2R5PlxcbjwvdGFibGU+XFxuJyl9XSksYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci9wb3B1cC5odG1sXCIsW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLGZ1bmN0aW9uKGUpe2UucHV0KFwidWliL3RlbXBsYXRlL2RhdGVwaWNrZXIvcG9wdXAuaHRtbFwiLCc8ZGl2PlxcbiAgPHVsIGNsYXNzPVwidWliLWRhdGVwaWNrZXItcG9wdXAgZHJvcGRvd24tbWVudSB1aWItcG9zaXRpb24tbWVhc3VyZVwiIGRyb3Bkb3duLW5lc3RlZCBuZy1pZj1cImlzT3BlblwiIG5nLWtleWRvd249XCJrZXlkb3duKCRldmVudClcIiBuZy1jbGljaz1cIiRldmVudC5zdG9wUHJvcGFnYXRpb24oKVwiPlxcbiAgICA8bGkgbmctdHJhbnNjbHVkZT48L2xpPlxcbiAgICA8bGkgbmctaWY9XCJzaG93QnV0dG9uQmFyXCIgY2xhc3M9XCJ1aWItYnV0dG9uLWJhclwiPlxcbiAgICAgIDxzcGFuIGNsYXNzPVwiYnRuLWdyb3VwIHB1bGwtbGVmdFwiPlxcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1pbmZvIHVpYi1kYXRlcGlja2VyLWN1cnJlbnRcIiBuZy1jbGljaz1cInNlbGVjdChcXCd0b2RheVxcJywgJGV2ZW50KVwiIG5nLWRpc2FibGVkPVwiaXNEaXNhYmxlZChcXCd0b2RheVxcJylcIj57eyBnZXRUZXh0KFxcJ2N1cnJlbnRcXCcpIH19PC9idXR0b24+XFxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWRhbmdlciB1aWItY2xlYXJcIiBuZy1jbGljaz1cInNlbGVjdChudWxsLCAkZXZlbnQpXCI+e3sgZ2V0VGV4dChcXCdjbGVhclxcJykgfX08L2J1dHRvbj5cXG4gICAgICA8L3NwYW4+XFxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1zdWNjZXNzIHB1bGwtcmlnaHQgdWliLWNsb3NlXCIgbmctY2xpY2s9XCJjbG9zZSgkZXZlbnQpXCI+e3sgZ2V0VGV4dChcXCdjbG9zZVxcJykgfX08L2J1dHRvbj5cXG4gICAgPC9saT5cXG4gIDwvdWw+XFxuPC9kaXY+XFxuJyl9XSksYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci95ZWFyLmh0bWxcIixbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsZnVuY3Rpb24oZSl7ZS5wdXQoXCJ1aWIvdGVtcGxhdGUvZGF0ZXBpY2tlci95ZWFyLmh0bWxcIiwnPHRhYmxlIGNsYXNzPVwidWliLXllYXJwaWNrZXJcIiByb2xlPVwiZ3JpZFwiIGFyaWEtbGFiZWxsZWRieT1cInt7Ojp1bmlxdWVJZH19LXRpdGxlXCIgYXJpYS1hY3RpdmVkZXNjZW5kYW50PVwie3thY3RpdmVEYXRlSWR9fVwiPlxcbiAgPHRoZWFkPlxcbiAgICA8dHI+XFxuICAgICAgPHRoPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBwdWxsLWxlZnQgdWliLWxlZnRcIiBuZy1jbGljaz1cIm1vdmUoLTEpXCIgdGFiaW5kZXg9XCItMVwiPjxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnRcIj48L2k+PC9idXR0b24+PC90aD5cXG4gICAgICA8dGggY29sc3Bhbj1cInt7Ojpjb2x1bW5zIC0gMn19XCI+PGJ1dHRvbiBpZD1cInt7Ojp1bmlxdWVJZH19LXRpdGxlXCIgcm9sZT1cImhlYWRpbmdcIiBhcmlhLWxpdmU9XCJhc3NlcnRpdmVcIiBhcmlhLWF0b21pYz1cInRydWVcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHVpYi10aXRsZVwiIG5nLWNsaWNrPVwidG9nZ2xlTW9kZSgpXCIgbmctZGlzYWJsZWQ9XCJkYXRlcGlja2VyTW9kZSA9PT0gbWF4TW9kZVwiIHRhYmluZGV4PVwiLTFcIj48c3Ryb25nPnt7dGl0bGV9fTwvc3Ryb25nPjwvYnV0dG9uPjwvdGg+XFxuICAgICAgPHRoPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBwdWxsLXJpZ2h0IHVpYi1yaWdodFwiIG5nLWNsaWNrPVwibW92ZSgxKVwiIHRhYmluZGV4PVwiLTFcIj48aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1yaWdodFwiPjwvaT48L2J1dHRvbj48L3RoPlxcbiAgICA8L3RyPlxcbiAgPC90aGVhZD5cXG4gIDx0Ym9keT5cXG4gICAgPHRyIGNsYXNzPVwidWliLXllYXJzXCIgbmctcmVwZWF0PVwicm93IGluIHJvd3MgdHJhY2sgYnkgJGluZGV4XCI+XFxuICAgICAgPHRkIG5nLXJlcGVhdD1cImR0IGluIHJvd1wiIGNsYXNzPVwidWliLXllYXIgdGV4dC1jZW50ZXJcIiByb2xlPVwiZ3JpZGNlbGxcIlxcbiAgICAgICAgaWQ9XCJ7ezo6ZHQudWlkfX1cIlxcbiAgICAgICAgbmctY2xhc3M9XCI6OmR0LmN1c3RvbUNsYXNzXCI+XFxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiXFxuICAgICAgICAgIHVpYi1pcy1jbGFzcz1cIlxcbiAgICAgICAgICAgIFxcJ2J0bi1pbmZvXFwnIGZvciBzZWxlY3RlZER0LFxcbiAgICAgICAgICAgIFxcJ2FjdGl2ZVxcJyBmb3IgYWN0aXZlRHRcXG4gICAgICAgICAgICBvbiBkdFwiXFxuICAgICAgICAgIG5nLWNsaWNrPVwic2VsZWN0KGR0LmRhdGUpXCJcXG4gICAgICAgICAgbmctZGlzYWJsZWQ9XCI6OmR0LmRpc2FibGVkXCJcXG4gICAgICAgICAgdGFiaW5kZXg9XCItMVwiPjxzcGFuIG5nLWNsYXNzPVwiOjp7XFwndGV4dC1pbmZvXFwnOiBkdC5jdXJyZW50fVwiPnt7OjpkdC5sYWJlbH19PC9zcGFuPjwvYnV0dG9uPlxcbiAgICAgIDwvdGQ+XFxuICAgIDwvdHI+XFxuICA8L3Rib2R5PlxcbjwvdGFibGU+XFxuJyl9XSksYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1tYXRjaC5odG1sXCIsW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLGZ1bmN0aW9uKGUpe2UucHV0KFwidWliL3RlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtbWF0Y2guaHRtbFwiLCc8YSBocmVmXFxuICAgdGFiaW5kZXg9XCItMVwiXFxuICAgbmctYmluZC1odG1sPVwibWF0Y2gubGFiZWwgfCB1aWJUeXBlYWhlYWRIaWdobGlnaHQ6cXVlcnlcIlxcbiAgIG5nLWF0dHItdGl0bGU9XCJ7e21hdGNoLmxhYmVsfX1cIj48L2E+XFxuJyl9XSksYW5ndWxhci5tb2R1bGUoXCJ1aWIvdGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1wb3B1cC5odG1sXCIsW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLGZ1bmN0aW9uKGUpe2UucHV0KFwidWliL3RlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtcG9wdXAuaHRtbFwiLCc8dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51XCIgbmctc2hvdz1cImlzT3BlbigpICYmICFtb3ZlSW5Qcm9ncmVzc1wiIG5nLXN0eWxlPVwie3RvcDogcG9zaXRpb24oKS50b3ArXFwncHhcXCcsIGxlZnQ6IHBvc2l0aW9uKCkubGVmdCtcXCdweFxcJ31cIiByb2xlPVwibGlzdGJveFwiIGFyaWEtaGlkZGVuPVwie3shaXNPcGVuKCl9fVwiPlxcbiAgICA8bGkgbmctcmVwZWF0PVwibWF0Y2ggaW4gbWF0Y2hlcyB0cmFjayBieSAkaW5kZXhcIiBuZy1jbGFzcz1cInthY3RpdmU6IGlzQWN0aXZlKCRpbmRleCkgfVwiIG5nLW1vdXNlZW50ZXI9XCJzZWxlY3RBY3RpdmUoJGluZGV4KVwiIG5nLWNsaWNrPVwic2VsZWN0TWF0Y2goJGluZGV4LCAkZXZlbnQpXCIgcm9sZT1cIm9wdGlvblwiIGlkPVwie3s6Om1hdGNoLmlkfX1cIj5cXG4gICAgICAgIDxkaXYgdWliLXR5cGVhaGVhZC1tYXRjaCBpbmRleD1cIiRpbmRleFwiIG1hdGNoPVwibWF0Y2hcIiBxdWVyeT1cInF1ZXJ5XCIgdGVtcGxhdGUtdXJsPVwidGVtcGxhdGVVcmxcIj48L2Rpdj5cXG4gICAgPC9saT5cXG48L3VsPlxcbicpfV0pLGFuZ3VsYXIubW9kdWxlKFwidWkuYm9vdHN0cmFwLmRhdGVwaWNrZXJcIikucnVuKGZ1bmN0aW9uKCl7IWFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlJiYhYW5ndWxhci4kJHVpYkRhdGVwaWNrZXJDc3MmJmFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuZmluZChcImhlYWRcIikucHJlcGVuZCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi51aWItZGF0ZXBpY2tlciAudWliLXRpdGxle3dpZHRoOjEwMCU7fS51aWItZGF5IGJ1dHRvbiwudWliLW1vbnRoIGJ1dHRvbiwudWliLXllYXIgYnV0dG9ue21pbi13aWR0aDoxMDAlO30udWliLWRhdGVwaWNrZXItcG9wdXAuZHJvcGRvd24tbWVudXtkaXNwbGF5OmJsb2NrO2Zsb2F0Om5vbmU7bWFyZ2luOjA7fS51aWItYnV0dG9uLWJhcntwYWRkaW5nOjEwcHggOXB4IDJweDt9LnVpYi1sZWZ0LC51aWItcmlnaHR7d2lkdGg6MTAwJX08L3N0eWxlPicpLGFuZ3VsYXIuJCR1aWJEYXRlcGlja2VyQ3NzPSEwfSksYW5ndWxhci5tb2R1bGUoXCJ1aS5ib290c3RyYXAucG9zaXRpb25cIikucnVuKGZ1bmN0aW9uKCl7IWFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlJiYhYW5ndWxhci4kJHVpYlBvc2l0aW9uQ3NzJiZhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoXCJoZWFkXCIpLnByZXBlbmQoJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4udWliLXBvc2l0aW9uLW1lYXN1cmV7ZGlzcGxheTpibG9jayAhaW1wb3J0YW50O3Zpc2liaWxpdHk6aGlkZGVuICFpbXBvcnRhbnQ7cG9zaXRpb246YWJzb2x1dGUgIWltcG9ydGFudDt0b3A6LTk5OTlweCAhaW1wb3J0YW50O2xlZnQ6LTk5OTlweCAhaW1wb3J0YW50O30udWliLXBvc2l0aW9uLXNjcm9sbGJhci1tZWFzdXJle3Bvc2l0aW9uOmFic29sdXRlO3RvcDotOTk5OXB4O3dpZHRoOjUwcHg7aGVpZ2h0OjUwcHg7b3ZlcmZsb3c6c2Nyb2xsO308L3N0eWxlPicpLGFuZ3VsYXIuJCR1aWJQb3NpdGlvbkNzcz0hMH0pLGFuZ3VsYXIubW9kdWxlKFwidWkuYm9vdHN0cmFwLnR5cGVhaGVhZFwiKS5ydW4oZnVuY3Rpb24oKXshYW5ndWxhci4kJGNzcCgpLm5vSW5saW5lU3R5bGUmJiFhbmd1bGFyLiQkdWliVHlwZWFoZWFkQ3NzJiZhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoXCJoZWFkXCIpLnByZXBlbmQoJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj5bdWliLXR5cGVhaGVhZC1wb3B1cF0uZHJvcGRvd24tbWVudXtkaXNwbGF5OmJsb2NrO308L3N0eWxlPicpLGFuZ3VsYXIuJCR1aWJUeXBlYWhlYWRDc3M9ITB9KTsiXX0=