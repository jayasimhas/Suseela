@model Informa.Web.Areas.Account.ViewModels.Management.EmailPreferencesViewModel

@if (Model.IsAuthenticated)
{
    <div class="page-account">

        <h1 class="page-account__header">@Html.Glass().Editable(m => m.GlassModel.Title)</h1>
        <div class="page-account__introduction">
            @Html.Glass().Editable(m => m.GlassModel.Body)
        </div>
        <div class="page-preferences js-preferences-user-container">

            <p class="page-account__error js-form-error js-form-error-general">
                @Model.GeneralErrorText
            </p>

            <form class="form-email-preferences"
                  data-on-submit="/Account/api/PreferencesApi/Update/">

                <h2 class="page-account__table-headline">@Model.NewsletterTitle</h2>

                <table class="page-account__table sortable-table js-sortable-table">
                    <thead class="sortable-table__header">
                        <tr>
                            <td class="sortable-table__col sortable-table__col--full-width js-sortable-table-sorter"
                                data-sortable-table-col="1">
                                @Model.NewsletterOptInTitleHeading
                                <div class="sorting-arrows">
                                    <svg class="sorting-arrows__arrow sorting-arrows__arrow--up">
                                        <use xlink:href="/dist/img/svg-sprite.svg#sort-up-arrow"></use>
                                    </svg>
                                    <svg class="sorting-arrows__arrow sorting-arrows__arrow--down">
                                        <use xlink:href="/dist/img/svg-sprite.svg#sort-down-arrow"></use>
                                    </svg>
                                </div>
                            </td>
                            @if (Model.IsNewSalesforceEnabled)
                            {
                                <td class="sortable-table__col l-no-wrap">
                                    @Model.DailyEmailLabel
                                </td>
                                <td class="sortable-table__col l-no-wrap">
                                    @Model.WeeklyEmailLabel
                                </td>
                            }
                            else
                            {
                                <td class="sortable-table__col l-no-wrap">
                                    @Model.NewsletterOptInReceiveEmailHeading
                                </td>
                            }

                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var newsletterOptIn in Model.PublicationNewsletterOptIns.Select((value, i) => new { i, value }))
                        {
                            if (Model.IsNewSalesforceEnabled)
                            {
                                <tr>
                                    <td class="sortable-table__col">
                                        @newsletterOptIn.value.Publication.Name
                                    </td>
                                    <td class="sortable-table__col checkbox-field">
                                        <p class="email-preference-mobile">@Model.DailyEmailLabel</p>
                                        <div class="labeled-checkbox">
                                            <input type="hidden" name="NewsletterPublications[@newsletterOptIn.i].publication" value="@newsletterOptIn.value.Publication.Code" />
                                            <input name="NewsletterPublications[@newsletterOptIn.i].DailyPublications"
                                                   id="newsletterPublications"
                                                   class="js-account-email-checkbox"
                                                   type="checkbox"
                                                   @(newsletterOptIn.value.DailyOptIn ? "checked='checked'" : string.Empty)
                                                   data-checkbox-type="boolean" />
                                            <label class="checkbox-label" for="@newsletterOptIn.value.Publication.Code">Yes</label>
                                        </div>
                                    </td>
                                    <td class="sortable-table__col checkbox-field">
                                        <p class="email-preference-mobile">@Model.WeeklyEmailLabel</p>
                                        <div class="labeled-checkbox">
                                            <input name="NewsletterPublications[@newsletterOptIn.i].WeeklyPublications"
                                                   id="newsletterPublications"
                                                   class="js-account-email-checkbox"
                                                   type="checkbox"
                                                   @(newsletterOptIn.value.WeeklyOptIn ? "checked='checked'" : string.Empty)
                                                   data-checkbox-type="boolean" />
                                            <label class="checkbox-label" for="@newsletterOptIn.value.Publication.Code">Yes</label>
                                        </div>
                                    </td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td class="sortable-table__col">
                                        @newsletterOptIn.value.Publication.Name
                                    </td>
                                    <td class="sortable-table__col l-centered">
                                        <div class="labeled-checkbox">
                                            <input type="hidden" name="NewsletterPublications[@newsletterOptIn.i].publication" value="@newsletterOptIn.value.Publication.Code" />
                                            <input name="NewsletterPublications[@newsletterOptIn.i].OptIns"
                                                   id="newsletterPublications"
                                                   class="js-account-email-checkbox"
                                                   type="checkbox" 
                                                   @(newsletterOptIn.value.OptIn ? "checked='checked'" : string.Empty)
                                                   data-checkbox-type="boolean"/>
                                                  
                                            <label class="checkbox-label" for="@newsletterOptIn.value.Publication.Code">Yes</label>
                                        </div>
                                    </td>
                                </tr>
                            }

                        }
                    </tbody>
                </table>

                <div class="labeled-checkbox page-preferences__offersoptin-confirm is-hidden">
                    @*
                        This field is named a bit weird, but on purpose.
                        Email regulations require that promo emails are opt IN,
                        not opt OUT, so we needed to reverse this checkbox's
                        meaning. But, until the @Model name is updated, keeping
                        the field name and id the same for consistency.

                        If checked: user is opting-IN for promo emails
                        If not checked: user is opting-OUT of promo emails
                    *@
                    <input name="DoNotSendOffersOptIn"
                           id="DoNotSendOffersOptIn"
                           class="js-account-email-toggle-all"
                           type="checkbox"
                           data-checkbox-type="boolean"
                           @(@Model.DoNotSendOfferEmails ? "" : "checked")>
                    <label for="DoNotSendOffersOptIn" class="checkbox-label">@Model.EmailsLabel</label>
                </div>

                <div class="page-account__submit-wrapper">
                    <button type="submit" class="button--filled button--fly-right js-update-email-prefs" disabled="disabled">@Model.SubmitText</button>
                </div>

                <div class="alert-success js-form-success">
                    <svg class="alert__icon">
                        <use xlink:href="/dist/img/svg-sprite.svg#check"></use>
                    </svg>
                    <p>@Model.PreferencesSavedMessage</p>
                </div>

            </form>

        </div>
    </div>
}
else
{
    <div class="page-account__sign-in-solo">
        @{ Html.RenderPartial("_SignInForm", Model.SignInViewModel); }
    </div>
            }
