#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Informa.Models.DCD
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="InformaOld_DCD")]
	public partial class DCDContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertRelatedCompany(RelatedCompany instance);
    partial void UpdateRelatedCompany(RelatedCompany instance);
    partial void DeleteRelatedCompany(RelatedCompany instance);
    partial void InsertCompanyRecordImportLog(CompanyRecordImportLog instance);
    partial void UpdateCompanyRecordImportLog(CompanyRecordImportLog instance);
    partial void DeleteCompanyRecordImportLog(CompanyRecordImportLog instance);
    partial void InsertDealRecordImportLog(DealRecordImportLog instance);
    partial void UpdateDealRecordImportLog(DealRecordImportLog instance);
    partial void DeleteDealRecordImportLog(DealRecordImportLog instance);
    partial void InsertDeal(Deal instance);
    partial void UpdateDeal(Deal instance);
    partial void DeleteDeal(Deal instance);
    partial void InsertDrugRecordImportLog(DrugRecordImportLog instance);
    partial void UpdateDrugRecordImportLog(DrugRecordImportLog instance);
    partial void DeleteDrugRecordImportLog(DrugRecordImportLog instance);
    partial void InsertDrug(Drug instance);
    partial void UpdateDrug(Drug instance);
    partial void DeleteDrug(Drug instance);
    partial void InsertImportLog(ImportLog instance);
    partial void UpdateImportLog(ImportLog instance);
    partial void DeleteImportLog(ImportLog instance);
    #endregion
		
		public DCDContext() : 
				base("Data Source=.\\SQL2012;Initial Catalog=InformaOld_DCD;User ID=sa;Password=1100M@ss" +
						"!;MultipleActiveResultSets=True;Application Name=EntityFramework", mappingSource)
		{
			OnCreated();
		}
		
		public DCDContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<RelatedCompany> RelatedCompanies
		{
			get
			{
				return this.GetTable<RelatedCompany>();
			}
		}
		
		public System.Data.Linq.Table<CompanyRecordImportLog> CompanyRecordImportLogs
		{
			get
			{
				return this.GetTable<CompanyRecordImportLog>();
			}
		}
		
		public System.Data.Linq.Table<DealRecordImportLog> DealRecordImportLogs
		{
			get
			{
				return this.GetTable<DealRecordImportLog>();
			}
		}
		
		public System.Data.Linq.Table<Deal> Deals
		{
			get
			{
				return this.GetTable<Deal>();
			}
		}
		
		public System.Data.Linq.Table<DrugRecordImportLog> DrugRecordImportLogs
		{
			get
			{
				return this.GetTable<DrugRecordImportLog>();
			}
		}
		
		public System.Data.Linq.Table<Drug> Drugs
		{
			get
			{
				return this.GetTable<Drug>();
			}
		}
		
		public System.Data.Linq.Table<ImportLog> ImportLogs
		{
			get
			{
				return this.GetTable<ImportLog>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Companies")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordId;
		
		private string _RecordNumber;
		
		private System.DateTime _Created;
		
		private System.DateTime _LastModified;
		
		private string _Title;
		
		private string _Content;
		
		private System.DateTime _Published;
		
		private EntitySet<RelatedCompany> _RelatedCompanies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIdChanging(int value);
    partial void OnRecordIdChanged();
    partial void OnRecordNumberChanging(string value);
    partial void OnRecordNumberChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastModifiedChanging(System.DateTime value);
    partial void OnLastModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnPublishedChanging(System.DateTime value);
    partial void OnPublishedChanged();
    #endregion
		
		public Company()
		{
			this._RelatedCompanies = new EntitySet<RelatedCompany>(new Action<RelatedCompany>(this.attach_RelatedCompanies), new Action<RelatedCompany>(this.detach_RelatedCompanies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RecordId
		{
			get
			{
				return this._RecordId;
			}
			set
			{
				if ((this._RecordId != value))
				{
					this.OnRecordIdChanging(value);
					this.SendPropertyChanging();
					this._RecordId = value;
					this.SendPropertyChanged("RecordId");
					this.OnRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordNumber", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string RecordNumber
		{
			get
			{
				return this._RecordNumber;
			}
			set
			{
				if ((this._RecordNumber != value))
				{
					this.OnRecordNumberChanging(value);
					this.SendPropertyChanging();
					this._RecordNumber = value;
					this.SendPropertyChanged("RecordNumber");
					this.OnRecordNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL")]
		public System.DateTime LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Content]", Storage="_Content", DbType="VarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Published", DbType="DateTime")]
		public System.DateTime Published
		{
			get
			{
				return this._Published;
			}
			set
			{
				if ((this._Published != value))
				{
					this.OnPublishedChanging(value);
					this.SendPropertyChanging();
					this._Published = value;
					this.SendPropertyChanged("Published");
					this.OnPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_RelatedCompany", Storage="_RelatedCompanies", ThisKey="RecordId", OtherKey="CompanyRecordId")]
		public EntitySet<RelatedCompany> RelatedCompanies
		{
			get
			{
				return this._RelatedCompanies;
			}
			set
			{
				this._RelatedCompanies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RelatedCompanies(RelatedCompany entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_RelatedCompanies(RelatedCompany entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RelatedCompanies")]
	public partial class RelatedCompany : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CompanyRecordId;
		
		private string _RelatedCompanyRecordNumber;
		
		private string _RelatedCompanyPath;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCompanyRecordIdChanging(int value);
    partial void OnCompanyRecordIdChanged();
    partial void OnRelatedCompanyRecordNumberChanging(string value);
    partial void OnRelatedCompanyRecordNumberChanged();
    partial void OnRelatedCompanyPathChanging(string value);
    partial void OnRelatedCompanyPathChanged();
    #endregion
		
		public RelatedCompany()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyRecordId", DbType="Int NOT NULL")]
		public int CompanyRecordId
		{
			get
			{
				return this._CompanyRecordId;
			}
			set
			{
				if ((this._CompanyRecordId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyRecordIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyRecordId = value;
					this.SendPropertyChanged("CompanyRecordId");
					this.OnCompanyRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelatedCompanyRecordNumber", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string RelatedCompanyRecordNumber
		{
			get
			{
				return this._RelatedCompanyRecordNumber;
			}
			set
			{
				if ((this._RelatedCompanyRecordNumber != value))
				{
					this.OnRelatedCompanyRecordNumberChanging(value);
					this.SendPropertyChanging();
					this._RelatedCompanyRecordNumber = value;
					this.SendPropertyChanged("RelatedCompanyRecordNumber");
					this.OnRelatedCompanyRecordNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelatedCompanyPath", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string RelatedCompanyPath
		{
			get
			{
				return this._RelatedCompanyPath;
			}
			set
			{
				if ((this._RelatedCompanyPath != value))
				{
					this.OnRelatedCompanyPathChanging(value);
					this.SendPropertyChanging();
					this._RelatedCompanyPath = value;
					this.SendPropertyChanged("RelatedCompanyPath");
					this.OnRelatedCompanyPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_RelatedCompany", Storage="_Company", ThisKey="CompanyRecordId", OtherKey="RecordId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.RelatedCompanies.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.RelatedCompanies.Add(this);
						this._CompanyRecordId = value.RecordId;
					}
					else
					{
						this._CompanyRecordId = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyRecordImportLog")]
	public partial class CompanyRecordImportLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _RecordId;
		
		private int _ImportId;
		
		private string _Operation;
		
		private string _Result;
		
		private System.DateTime _TimeStamp;
		
		private string _Notes;
		
		private EntityRef<ImportLog> _ImportLog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRecordIdChanging(System.Nullable<int> value);
    partial void OnRecordIdChanged();
    partial void OnImportIdChanging(int value);
    partial void OnImportIdChanged();
    partial void OnOperationChanging(string value);
    partial void OnOperationChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public CompanyRecordImportLog()
		{
			this._ImportLog = default(EntityRef<ImportLog>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordId", DbType="Int")]
		public System.Nullable<int> RecordId
		{
			get
			{
				return this._RecordId;
			}
			set
			{
				if ((this._RecordId != value))
				{
					this.OnRecordIdChanging(value);
					this.SendPropertyChanging();
					this._RecordId = value;
					this.SendPropertyChanged("RecordId");
					this.OnRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportId", DbType="Int NOT NULL")]
		public int ImportId
		{
			get
			{
				return this._ImportId;
			}
			set
			{
				if ((this._ImportId != value))
				{
					if (this._ImportLog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImportIdChanging(value);
					this.SendPropertyChanging();
					this._ImportId = value;
					this.SendPropertyChanged("ImportId");
					this.OnImportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Operation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged("Operation");
					this.OnOperationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ImportLog_CompanyRecordImportLog", Storage="_ImportLog", ThisKey="ImportId", OtherKey="Id", IsForeignKey=true)]
		public ImportLog ImportLog
		{
			get
			{
				return this._ImportLog.Entity;
			}
			set
			{
				ImportLog previousValue = this._ImportLog.Entity;
				if (((previousValue != value) 
							|| (this._ImportLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ImportLog.Entity = null;
						previousValue.CompanyRecordImportLogs.Remove(this);
					}
					this._ImportLog.Entity = value;
					if ((value != null))
					{
						value.CompanyRecordImportLogs.Add(this);
						this._ImportId = value.Id;
					}
					else
					{
						this._ImportId = default(int);
					}
					this.SendPropertyChanged("ImportLog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DealRecordImportLog")]
	public partial class DealRecordImportLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _RecordId;
		
		private int _ImportId;
		
		private string _Operation;
		
		private string _Result;
		
		private System.DateTime _TimeStamp;
		
		private string _Notes;
		
		private EntityRef<ImportLog> _ImportLog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRecordIdChanging(System.Nullable<int> value);
    partial void OnRecordIdChanged();
    partial void OnImportIdChanging(int value);
    partial void OnImportIdChanged();
    partial void OnOperationChanging(string value);
    partial void OnOperationChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public DealRecordImportLog()
		{
			this._ImportLog = default(EntityRef<ImportLog>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordId", DbType="Int")]
		public System.Nullable<int> RecordId
		{
			get
			{
				return this._RecordId;
			}
			set
			{
				if ((this._RecordId != value))
				{
					this.OnRecordIdChanging(value);
					this.SendPropertyChanging();
					this._RecordId = value;
					this.SendPropertyChanged("RecordId");
					this.OnRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportId", DbType="Int NOT NULL")]
		public int ImportId
		{
			get
			{
				return this._ImportId;
			}
			set
			{
				if ((this._ImportId != value))
				{
					if (this._ImportLog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImportIdChanging(value);
					this.SendPropertyChanging();
					this._ImportId = value;
					this.SendPropertyChanged("ImportId");
					this.OnImportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Operation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged("Operation");
					this.OnOperationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ImportLog_DealRecordImportLog", Storage="_ImportLog", ThisKey="ImportId", OtherKey="Id", IsForeignKey=true)]
		public ImportLog ImportLog
		{
			get
			{
				return this._ImportLog.Entity;
			}
			set
			{
				ImportLog previousValue = this._ImportLog.Entity;
				if (((previousValue != value) 
							|| (this._ImportLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ImportLog.Entity = null;
						previousValue.DealRecordImportLogs.Remove(this);
					}
					this._ImportLog.Entity = value;
					if ((value != null))
					{
						value.DealRecordImportLogs.Add(this);
						this._ImportId = value.Id;
					}
					else
					{
						this._ImportId = default(int);
					}
					this.SendPropertyChanged("ImportLog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Deals")]
	public partial class Deal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordId;
		
		private string _RecordNumber;
		
		private System.DateTime _Created;
		
		private System.DateTime _LastModified;
		
		private string _Title;
		
		private string _Content;
		
		private System.DateTime _Published;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIdChanging(int value);
    partial void OnRecordIdChanged();
    partial void OnRecordNumberChanging(string value);
    partial void OnRecordNumberChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastModifiedChanging(System.DateTime value);
    partial void OnLastModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnPublishedChanging(System.DateTime value);
    partial void OnPublishedChanged();
    #endregion
		
		public Deal()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RecordId
		{
			get
			{
				return this._RecordId;
			}
			set
			{
				if ((this._RecordId != value))
				{
					this.OnRecordIdChanging(value);
					this.SendPropertyChanging();
					this._RecordId = value;
					this.SendPropertyChanged("RecordId");
					this.OnRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordNumber", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string RecordNumber
		{
			get
			{
				return this._RecordNumber;
			}
			set
			{
				if ((this._RecordNumber != value))
				{
					this.OnRecordNumberChanging(value);
					this.SendPropertyChanging();
					this._RecordNumber = value;
					this.SendPropertyChanged("RecordNumber");
					this.OnRecordNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL")]
		public System.DateTime LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Content]", Storage="_Content", DbType="varchar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Published", DbType="DateTime")]
		public System.DateTime Published
		{
			get
			{
				return this._Published;
			}
			set
			{
				if ((this._Published != value))
				{
					this.OnPublishedChanging(value);
					this.SendPropertyChanging();
					this._Published = value;
					this.SendPropertyChanged("Published");
					this.OnPublishedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrugRecordImportLog")]
	public partial class DrugRecordImportLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _RecordId;
		
		private int _ImportId;
		
		private string _Operation;
		
		private string _Result;
		
		private System.DateTime _TimeStamp;
		
		private string _Notes;
		
		private EntityRef<ImportLog> _ImportLog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRecordIdChanging(System.Nullable<int> value);
    partial void OnRecordIdChanged();
    partial void OnImportIdChanging(int value);
    partial void OnImportIdChanged();
    partial void OnOperationChanging(string value);
    partial void OnOperationChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public DrugRecordImportLog()
		{
			this._ImportLog = default(EntityRef<ImportLog>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordId", DbType="Int")]
		public System.Nullable<int> RecordId
		{
			get
			{
				return this._RecordId;
			}
			set
			{
				if ((this._RecordId != value))
				{
					this.OnRecordIdChanging(value);
					this.SendPropertyChanging();
					this._RecordId = value;
					this.SendPropertyChanged("RecordId");
					this.OnRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportId", DbType="Int NOT NULL")]
		public int ImportId
		{
			get
			{
				return this._ImportId;
			}
			set
			{
				if ((this._ImportId != value))
				{
					if (this._ImportLog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImportIdChanging(value);
					this.SendPropertyChanging();
					this._ImportId = value;
					this.SendPropertyChanged("ImportId");
					this.OnImportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Operation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged("Operation");
					this.OnOperationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ImportLog_DrugRecordImportLog", Storage="_ImportLog", ThisKey="ImportId", OtherKey="Id", IsForeignKey=true)]
		public ImportLog ImportLog
		{
			get
			{
				return this._ImportLog.Entity;
			}
			set
			{
				ImportLog previousValue = this._ImportLog.Entity;
				if (((previousValue != value) 
							|| (this._ImportLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ImportLog.Entity = null;
						previousValue.DrugRecordImportLogs.Remove(this);
					}
					this._ImportLog.Entity = value;
					if ((value != null))
					{
						value.DrugRecordImportLogs.Add(this);
						this._ImportId = value.Id;
					}
					else
					{
						this._ImportId = default(int);
					}
					this.SendPropertyChanged("ImportLog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drugs")]
	public partial class Drug : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordId;
		
		private string _RecordNumber;
		
		private System.DateTime _Created;
		
		private System.DateTime _LastModified;
		
		private string _Title;
		
		private string _Content;
		
		private System.DateTime _Published;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIdChanging(int value);
    partial void OnRecordIdChanged();
    partial void OnRecordNumberChanging(string value);
    partial void OnRecordNumberChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastModifiedChanging(System.DateTime value);
    partial void OnLastModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnPublishedChanging(System.DateTime value);
    partial void OnPublishedChanged();
    #endregion
		
		public Drug()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RecordId
		{
			get
			{
				return this._RecordId;
			}
			set
			{
				if ((this._RecordId != value))
				{
					this.OnRecordIdChanging(value);
					this.SendPropertyChanging();
					this._RecordId = value;
					this.SendPropertyChanged("RecordId");
					this.OnRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordNumber", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string RecordNumber
		{
			get
			{
				return this._RecordNumber;
			}
			set
			{
				if ((this._RecordNumber != value))
				{
					this.OnRecordNumberChanging(value);
					this.SendPropertyChanging();
					this._RecordNumber = value;
					this.SendPropertyChanged("RecordNumber");
					this.OnRecordNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL")]
		public System.DateTime LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Content]", Storage="_Content", DbType="varchar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Published", DbType="datetime")]
		public System.DateTime Published
		{
			get
			{
				return this._Published;
			}
			set
			{
				if ((this._Published != value))
				{
					this.OnPublishedChanging(value);
					this.SendPropertyChanging();
					this._Published = value;
					this.SendPropertyChanged("Published");
					this.OnPublishedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImportLog")]
	public partial class ImportLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _ImportStart;
		
		private System.DateTime _ImportEnd;
		
		private string _FileName;
		
		private string _Result;
		
		private string _Notes;
		
		private EntitySet<CompanyRecordImportLog> _CompanyRecordImportLogs;
		
		private EntitySet<DealRecordImportLog> _DealRecordImportLogs;
		
		private EntitySet<DrugRecordImportLog> _DrugRecordImportLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnImportStartChanging(System.DateTime value);
    partial void OnImportStartChanged();
    partial void OnImportEndChanging(System.DateTime value);
    partial void OnImportEndChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public ImportLog()
		{
			this._CompanyRecordImportLogs = new EntitySet<CompanyRecordImportLog>(new Action<CompanyRecordImportLog>(this.attach_CompanyRecordImportLogs), new Action<CompanyRecordImportLog>(this.detach_CompanyRecordImportLogs));
			this._DealRecordImportLogs = new EntitySet<DealRecordImportLog>(new Action<DealRecordImportLog>(this.attach_DealRecordImportLogs), new Action<DealRecordImportLog>(this.detach_DealRecordImportLogs));
			this._DrugRecordImportLogs = new EntitySet<DrugRecordImportLog>(new Action<DrugRecordImportLog>(this.attach_DrugRecordImportLogs), new Action<DrugRecordImportLog>(this.detach_DrugRecordImportLogs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportStart", DbType="DateTime NOT NULL")]
		public System.DateTime ImportStart
		{
			get
			{
				return this._ImportStart;
			}
			set
			{
				if ((this._ImportStart != value))
				{
					this.OnImportStartChanging(value);
					this.SendPropertyChanging();
					this._ImportStart = value;
					this.SendPropertyChanged("ImportStart");
					this.OnImportStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportEnd", DbType="DateTime NOT NULL")]
		public System.DateTime ImportEnd
		{
			get
			{
				return this._ImportEnd;
			}
			set
			{
				if ((this._ImportEnd != value))
				{
					this.OnImportEndChanging(value);
					this.SendPropertyChanging();
					this._ImportEnd = value;
					this.SendPropertyChanged("ImportEnd");
					this.OnImportEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ImportLog_CompanyRecordImportLog", Storage="_CompanyRecordImportLogs", ThisKey="Id", OtherKey="ImportId")]
		public EntitySet<CompanyRecordImportLog> CompanyRecordImportLogs
		{
			get
			{
				return this._CompanyRecordImportLogs;
			}
			set
			{
				this._CompanyRecordImportLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ImportLog_DealRecordImportLog", Storage="_DealRecordImportLogs", ThisKey="Id", OtherKey="ImportId")]
		public EntitySet<DealRecordImportLog> DealRecordImportLogs
		{
			get
			{
				return this._DealRecordImportLogs;
			}
			set
			{
				this._DealRecordImportLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ImportLog_DrugRecordImportLog", Storage="_DrugRecordImportLogs", ThisKey="Id", OtherKey="ImportId")]
		public EntitySet<DrugRecordImportLog> DrugRecordImportLogs
		{
			get
			{
				return this._DrugRecordImportLogs;
			}
			set
			{
				this._DrugRecordImportLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyRecordImportLogs(CompanyRecordImportLog entity)
		{
			this.SendPropertyChanging();
			entity.ImportLog = this;
		}
		
		private void detach_CompanyRecordImportLogs(CompanyRecordImportLog entity)
		{
			this.SendPropertyChanging();
			entity.ImportLog = null;
		}
		
		private void attach_DealRecordImportLogs(DealRecordImportLog entity)
		{
			this.SendPropertyChanging();
			entity.ImportLog = this;
		}
		
		private void detach_DealRecordImportLogs(DealRecordImportLog entity)
		{
			this.SendPropertyChanging();
			entity.ImportLog = null;
		}
		
		private void attach_DrugRecordImportLogs(DrugRecordImportLog entity)
		{
			this.SendPropertyChanging();
			entity.ImportLog = this;
		}
		
		private void detach_DrugRecordImportLogs(DrugRecordImportLog entity)
		{
			this.SendPropertyChanging();
			entity.ImportLog = null;
		}
	}
}
#pragma warning restore 1591
