<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Velir.Core</name>
    </assembly>
    <members>
        <member name="T:Velir.Core.Collections.IndexedEntry`1">
            <summary>
            The IndexedEntry class represents an item in an enumerable set.  The 
            IndexedEntry has four properties which describe it: the value of the item
            in the set, the index of where the item falls within the set, and IsFirst
            and IsLast properties, which state if the item is the first or last item in 
            the set, respectively.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Velir.Core.Collections.IndexedEntry`1.#ctor(`0,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Velir.Core.Collections.IndexedEntry`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="index">The index.</param>
            <param name="isFirst">if set to <c>true</c> [is first].</param>
            <param name="isLast">if set to <c>true</c> [is last].</param>
        </member>
        <member name="P:Velir.Core.Collections.IndexedEntry`1.Value">
            <summary>
            The value of the item.
            </summary>
        </member>
        <member name="P:Velir.Core.Collections.IndexedEntry`1.Index">
            <summary>
            The index of the item as it falls in the set.
            </summary>
        </member>
        <member name="P:Velir.Core.Collections.IndexedEntry`1.IsFirst">
            <summary>
            Gets a value indicating whether this instance is the first item in the sequence.
            </summary>
            <value>
              <c>true</c> if this instance is the first item in the sequence; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Velir.Core.Collections.IndexedEntry`1.IsLast">
            <summary>
            Gets a value indicating whether this instance is the last item in the sequence.
            </summary>
            <value>
              <c>true</c> if this instance is the first item in the sequence; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Velir.Core.Collections.IndexedEnumerable">
            <summary>
            The static IndexedEnumerable class provides access to static methods for creating
            an Enumerable sequence of IndexedEntry items, either through an extension method
            on an IEnumerable instance, or through a plain static method.
            </summary>
        </member>
        <member name="M:Velir.Core.Collections.IndexedEnumerable.AsIndexedEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an enumerable sequence of IndexedEntry items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns>An enumerable sequence of IndexedEntry items.</returns>
        </member>
        <member name="M:Velir.Core.Collections.IndexedEnumerable.CreateFrom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an enumerable sequence of IndexedEntry items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns>An enumerable sequence of IndexedEntry items.</returns>
        </member>
        <member name="T:Velir.Core.Collections.IndexedEnumerable`1">
            <summary>
            The IndexedEnumerable class is a decorator class which adapts an enumerable
            sequence, and returns indexed items in place of the original items.  Indexed
            items have properties in addition to the value of the item.  These properties
            are the index of where the item falls in the sequence, as well as <c>IsFirst</c>
            and <c>IsLast</c> properties which are true if the item is the first or last 
            item, respectively, in the sequence.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Velir.Core.Collections.IndexedEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Velir.Core.Collections.IndexedEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Velir.Core.Compare.AlphanumericComparer">
             <summary>
             When sorting alphanumeric strings, this comparer will properly sort
             numbers in order of their value, instead of alphabet order.
             
             e.g. "50F" "SR100" "100F" "SR9"
             Sorting these values by alphabet will provide an out-of-order result:
            
             100F 
             50F 
             SR100 
             SR9
             
             But with the AlphanumericComparer, the result will correctly be: 
             
             50F
             100F 
             SR9  
             SR100
             
             Originally from: http://dotnetperls.com/alphanumeric-sorting
             </summary>
        </member>
        <member name="M:Velir.Core.Compare.AlphanumericComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <returns>
            Value 
                                Condition 
                                Less than zero 
                            <paramref name="x"/> is less than <paramref name="y"/>. 
                                Zero 
                            <paramref name="x"/> equals <paramref name="y"/>. 
                                Greater than zero 
                            <paramref name="x"/> is greater than <paramref name="y"/>. 
            </returns>
            <param name="x">The first object to compare. 
                            </param><param name="y">The second object to compare. 
                            </param><exception cref="T:System.ArgumentException">Neither <paramref name="x"/> nor <paramref name="y"/> implements the <see cref="T:System.IComparable"/> interface.
                                -or- 
                            <paramref name="x"/> and <paramref name="y"/> are of different types and neither one can handle comparisons with the other. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Velir.Core.Compare.AlphanumericComparer.Compare(System.String,System.String)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="T:Velir.Core.Compare.ComparisonComparer`1">
            <summary>
            Wraps a generic Comparison delegate in an IComparer to make it easy 
            to use a lambda expression for methods that take an IComparer or IComparer(T)
            </summary>
            <typeparam name="T">The type being compared</typeparam>
        </member>
        <member name="M:Velir.Core.Compare.ComparisonComparer`1.#ctor(System.Comparison{`0})">
            <summary>
             Wraps a generic Comparison delegate in an IComparer so that we may use a 
             lambda expression with methods that accept an IComparer.
            </summary>
            <param name="comparison">A delegate that compares two objects of type T</param>
        </member>
        <member name="M:Velir.Core.Compare.ComparisonComparer`1.Compare(System.Object,System.Object)">
            <summary>
            Compares the specified o1.
            </summary>
            <param name="o1">The o1.</param>
            <param name="o2">The o2.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Compare.ComparisonComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="T:Velir.Core.Compare.ThenByComparer`1">
            <summary>
            A generic Comparer that allows grouping of a series of <see cref="T:System.Collections.Generic.IComparer`1"/>s.
            The first <see cref="T:System.Comparison`1"/> or comparer will take precendence over all subsequent comparisons.
            Only in tie-breaking conditions are the subsequent comparisons considered.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Velir.Core.Compare.ThenByComparer`1.#ctor(System.Collections.Generic.IComparer{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Velir.Core.Compare.ThenByComparer`1"/> class.
            The comparers are in order of precedence.
            </summary>
            <remarks>The <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/> method of each comparer is stored.</remarks>
            <param name="comparers">The comparers in order of precedence. Following comparers are only
            considered in tie-breaking situations.</param>
        </member>
        <member name="M:Velir.Core.Compare.ThenByComparer`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.Comparer{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Velir.Core.Compare.ThenByComparer`1"/> class.
            The comparers are in order of precedence.
            </summary>
            <remarks>The <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/> method of each comparer is stored.</remarks>
            <param name="comparers">The comparers in order of precedence. Following comparers are only
            considered in tie-breaking situations.</param>
        </member>
        <member name="M:Velir.Core.Compare.ThenByComparer`1.#ctor(System.Comparison{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Velir.Core.Compare.ThenByComparer`1"/> class.
            The comparers are in order of precedence.
            </summary>
            <param name="comparisons">The comparisons in order of precedence. Following comparisons are
            only considered in tie-breaking situations.</param>
        </member>
        <member name="M:Velir.Core.Compare.ThenByComparer`1.#ctor(System.Collections.Generic.IEnumerable{System.Comparison{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Velir.Core.Compare.ThenByComparer`1"/> class.
            </summary>
            <param name="comparisons">The comparisons in order of precedence. Following comparisons are
            only considered in tie-breaking situations.</param>
        </member>
        <member name="T:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter">
            <summary>
            Wraps a NameValueCollection so it can be used an IDictionary.
            </summary>
            <remarks>
            Tries to stay as close to the official IDictionary spec as possible, throwing
            exceptions when error conditions on IDictionary would cause them, even if it
            would be OK on a NameValueCollection.
            </remarks>
        </member>
        <member name="M:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adapt a NameValueCollection into an IDictionary
            </summary>
            <param name="nvc">A NameValueCollection</param>
        </member>
        <member name="M:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.Add(System.String,System.String)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception> 
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>		  
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an
            <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements
            copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/>
             must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>		  
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>		  
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is 
            greater than the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.		
            </exception>
        </member>
        <member name="M:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the<see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false. 
            This method also returns false if <paramref name="key"/> was not found in the 
            original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>		  
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the
            <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method 
            also returns false if <paramref name="item"/> is not found in the original 
            <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.TryGetValue(System.String,System.String@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, 
            if the key is found; otherwise, the default value for the type of the <paramref name="value"/> 
            parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> 
            contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used 
            to iterate through the collection.
            </returns>
        </member>
        <member name="M:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used
            to iterate through the collection.
            </returns>
        </member>
        <member name="M:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.DoGet(System.String)">
            <summary>
            Takes care of the Get operation's error checking, etc.
            </summary>
            <param name="key">The key</param>
            <returns>The corresponding value</returns>
        </member>
        <member name="M:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.DoAdd(System.String,System.String)">
            <summary>
            Takes care of the Add operation's error checking
            </summary>
            <param name="key">The key</param>
            <param name="value">the value</param>
        </member>
        <member name="P:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
              </returns>
        </member>
        <member name="P:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="P:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.Item(System.String)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
              </returns>
              
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
              
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is retrieved and <paramref name="key"/> is not found.
            </exception>
              
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="P:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the
            keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys 
            of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Velir.Core.DataStructures.NameValueCollectionDictionaryAdapter.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the
            values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values 
            in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
              </returns>
        </member>
        <member name="T:Velir.Core.DataStructures.SerializableDictionary`2">
            <summary>
            This class extends the built-in C# Dictionary class to enable it to be 
            serialized to XML
            
            Found here: http://weblogs.asp.net/pwelter34/archive/2006/05/03/444961.aspx
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Velir.Core.DataStructures.SerializableDictionary`2.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Velir.Core.DataStructures.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. 
                            </param>
        </member>
        <member name="M:Velir.Core.DataStructures.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. 
                            </param>
        </member>
        <member name="T:Velir.Core.Data.Deliminator">
            <summary>
            Takes a DataTable and converts each row to a delimited value
            </summary>
        </member>
        <member name="M:Velir.Core.Data.Deliminator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Velir.Core.Data.Deliminator"/> class
            using the given string as the delimiter.  By default, this instance
            will prepare individual items by escaping the following characters:
            <c>"</c>, <c>delimiter</c>, <c>Environment.Newline</c>, and <c>
            <![CDATA[\n]]></c>
            </summary>
            <param name="delimiter"></param>
            <exception cref="T:System.ArgumentNullException">Delimiter is null</exception>
        </member>
        <member name="M:Velir.Core.Data.Deliminator.#ctor(System.String,System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Velir.Core.Data.Deliminator"/> class
            using the given string as the delimiter.  The <c>stringPreparer</c>
            delegate is used when preparing a delimited value.
            </summary>
            <param name="delimiter">The delimiter.</param>
            <param name="stringPreparer">The string preparer.</param>
            <exception cref="T:System.ArgumentNullException">delimiter is null</exception>
            <exception cref="T:System.ArgumentNullException">stringPreparer is null</exception>
        </member>
        <member name="M:Velir.Core.Data.Deliminator.Deliminate(System.Data.DataTable,System.Boolean,System.IO.TextWriter)">
            <summary>
             Creates a deliminated string from the given data table, with the 
             option to include or not include the table column names in the
             first row. The output is written to a textwriter.
            </summary>
            <param name="table">The table to deliminate</param>
            <param name="includeColumnHeaders">if <c>true</c>, the table
             columns are output.  If <c>false</c>, the table colum names
             are not output</param>
            <param name="writer">The text writer to output to</param>
        </member>
        <member name="M:Velir.Core.Data.Deliminator.Deliminate(System.Data.DataTable,System.IO.TextWriter)">
            <summary>
            Creates a deliminated string from the given data table.
            By default, the table column names are output with the 
            table data. The deliminated values are written out to the
            provided text writer.
            </summary>
            <param name="table"></param>
            <param name="writer"></param>		
        </member>
        <member name="M:Velir.Core.Data.Deliminator.Deliminate(System.Collections.ICollection,System.IO.TextWriter)">
            <summary>
            Creates a deliminated string from a list of elements and writes
            it to the given text writer
            </summary>
            <param name="elements"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Data.Deliminator.DeliminateToString(System.Data.DataTable,System.Boolean)">
            <summary>
             Creates a deliminated string from the given data table, with the 
             option to include or not include the table column names in the
             first row
            </summary>
            <param name="table">The table to deliminate</param>
            <param name="includeColumnHeaders">if <c>true</c>, the table
             columns are output.  If <c>false</c>, the table colum names
             are not output</param>
            <returns>A deliminated string representing the table</returns>
        </member>
        <member name="M:Velir.Core.Data.Deliminator.DeliminateToString(System.Data.DataTable)">
            <summary>
            Creates a deliminated string from the given data table.
            By default, the table column names are output with the 
            table data
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Data.Deliminator.DeliminateToString(System.Collections.ICollection)">
            <summary>
            Creates a deliminated string from a list of elements.
            </summary>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Data.Deliminator.Prepare(System.String)">
            <summary>
            Prepares a string for being included in a deliminated
            file or other structure. Elements that contain quotes,
            newlines, or the delimiter will be wrapped in quotes.
            Null strings will be returned as empty strings.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Data.Deliminator.DefaultPreparer(System.String)">
            <summary>
            The default string preparer for the Deliminator class.  This method
            will escape quote characters, the delimiter itself, and newlines
            </summary>
            <param name="value">The string value to prepare.</param>
            <returns>A prepared string with the appropriate characters escaped</returns>
        </member>
        <member name="P:Velir.Core.Data.Deliminator.Delimiter">
            <summary>
            Retrieves the delimiter for this instance
            </summary>
        </member>
        <member name="T:Velir.Core.Data.EnumerableDataTable">
            <summary>
            The EnumerableDataTable class represents a way to enumerate over the cells
            in a DataTable.  By enumerating over the cells in a DataTable instance 
            using this class, it is possible to know the row and column indexes, the 
            concrete DataRow and DataColumn instances that the current cell belongs 
            to, and the value in the cell.  This class is useful for when you need to
            cycle through all of the values in a data table, and you need the indexes
            and the DataColumn and DataRow instances.
            
            Enumerated values will be in a "left-to-right, then top-to-bottom" order.
            That is, the first row will be enumerated, and when complete, the next
            row will be enumerated.
            </summary>
        </member>
        <member name="M:Velir.Core.Data.EnumerableDataTable.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Velir.Core.Data.EnumerableDataTable"/> class.
            </summary>
            <param name="dataTable">The data table.</param>
        </member>
        <member name="M:Velir.Core.Data.EnumerableDataTable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Velir.Core.Data.EnumerableDataTable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Velir.Core.Data.DataCell">
            <summary>
            The DataCell class represents a particular value in a DataTable instance.
            The DataCell contains information about the row and column indexes that 
            the cell belongs to, as well as the DataRow and DataColumn instances that
            the cell belongs to.
            </summary>
        </member>
        <member name="M:Velir.Core.Data.DataCell.#ctor(System.Data.DataRow,System.Data.DataColumn,System.Int32,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Velir.Core.Data.DataCell"/> class.
            </summary>
            <param name="dataRow">The data row.</param>
            <param name="dataColumn">The data column.</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Velir.Core.Data.DataCell.Equals(Velir.Core.Data.DataCell)">
            <summary>
            Determines whether the specified <see cref="T:Velir.Core.Data.DataCell"/> is equal to this instance.
            </summary>
            <param name="other">The other DataCell.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Velir.Core.Data.DataCell"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="other"/> parameter is null.
            </exception>
        </member>
        <member name="M:Velir.Core.Data.DataCell.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Velir.Core.Data.DataCell.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Velir.Core.Data.DataCell.DataColumn">
            <summary>
            Gets the DataColumn instance that this cell belongs to.
            </summary>
            <value>The data column.</value>
        </member>
        <member name="P:Velir.Core.Data.DataCell.DataRow">
            <summary>
            Gets the DataRow instance that this cell belongs to.
            </summary>
            <value>The data row.</value>
        </member>
        <member name="P:Velir.Core.Data.DataCell.ColumnIndex">
            <summary>
            Gets the index of the column that this cell belongs to.
            </summary>
            <value>The index of the column.</value>
        </member>
        <member name="P:Velir.Core.Data.DataCell.RowIndex">
            <summary>
            Gets the index of the row that this cell belongs to.
            </summary>
            <value>The index of the row.</value>
        </member>
        <member name="P:Velir.Core.Data.DataCell.Value">
            <summary>
            Gets the value of this cell.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Velir.Core.Extensions.System.Collections.Generic.CollectionExtensions">
            <summary>
             The CollectionExtensions class contains extension methods to be used
             on an instance of an ICollection{T} 
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Predicate{``0})">
            <summary>
            Adds an item to a given collection, provided that item satisfies
            a condition by specified predicate
            </summary>
            <typeparam name="T">The Type of the items in the collection</typeparam>
            <param name="collection">The list.</param>
            <param name="item">The item.</param>
            <param name="addif">A predicate.  If this evaluates to true for the
            given item, the item will be added to the collection.</param>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.CollectionExtensions.AddIfNotNull``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an item to a given collection, provided that the item is 
            not null
            </summary>
            <typeparam name="T">The Type of the items in the collection</typeparam>
            <param name="collection">The collection.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements from the specified collection to the end of the list.
            </summary>
            <typeparam name="T">The type of the items in the list</typeparam>
            <param name="list">The list.</param>
            <param name="collection">The collection of items to add.</param>
            <exception cref="T:System.NotSupportedException">The list is marked as read-only</exception>
        </member>
        <member name="T:Velir.Core.Extensions.System.Collections.Generic.DictionaryExtensions">
            <summary>
            A set of extension methods for Classes that implement the IDictionary 
            interface
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.DictionaryExtensions.ToNameValueCollection(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a NameValueCollection instance from an instance of an
            IDictionary{string,string}
            </summary>
            <param name="dictionary">The dictionary.</param>
            <returns>
            A NameValueCollection instance, populated with the keys
            and values from the dictionary
            </returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.DictionaryExtensions.ToNameValueCollection``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``0,System.String},System.Func{``1,System.String})">
            <summary>
            Creates a NameValueCollection instance from an instance of an
            IDictionary{TKey,TValue}.  Values and keys in the IDictionary are converted
            to strings using Funcs.
            </summary>
            <typeparam name="TKey">The type of the key in the IDictionary instance.</typeparam>
            <typeparam name="TValue">The type of the value in the IDictionary instance.</typeparam>
            <param name="source">The dictionary.</param>
            <param name="keySelector">A Func which transforms an instance of a TKey into a string</param>
            <param name="elementSelector">A Func which transforms an instance of a TValue into a string.</param>
            <returns>
            A NameValueCollection instance, populated with the keys
            and values from the dictionary
            </returns>
            <exception cref="T:System.ArgumentException">keySelector produces duplicate keys for two elements</exception>
            <exception cref="T:System.ArgumentNullException">source, keySelector, or elementSelector is null</exception>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.DictionaryExtensions.GetOrCreate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Gets a value from a dictionary with the specified key.  If the dictionary does not
            contain a value with the specified key, the <c>creator</c> delegate method will be invoked to
            create the value.  This value will then be added to the dictionary and returned.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source dictionary.</param>
            <param name="key">The key.</param>
            <param name="creator">A delegate method which creates the value if the dictionary 
            does not contain a value for the given key.  After calling this method, the generated
            value is added to the dictionary.</param>
            <returns>A value from the given dictionary.</returns>
        </member>
        <member name="T:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions">
            <summary>
             The EnumerableExtensions class defines extension methods for
             classes that implement the IEnumerable{T} interface
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.ForEachWithIndex``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Convenience method to iterate over an enumerable, performing an action
            on each item. The action will receive both the item and its index in 
            the loop.	
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">An enumerable</param>
            <param name="action">The action to perform with each item.</param>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Convenient way to iterate through the items in an enumerable and perform
            some action using each item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable</param>
            <param name="action">The action to perform on each item</param>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the end
            of a sequence.  If the number of items requested is greater than
            or equal to the number of items in the source, the entire source
            is returned.
            </summary>
            <typeparam name="TSource">The type of the items in the source</typeparam>
            <param name="source">A sequence to return elements from</param>
            <param name="count">The number of elements to return</param>
            <returns></returns>
            <remarks>If count is less than or equal to zero, source is not
            enumerated and an empty IEnumerable{TSource} is returned</remarks>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.ToDistinctGroups``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Given a sequence of elements, this method will return those elements
            grouped into consecutive distinct groups, such that all the elements
            in a single group share a distinctive property.  This method is different
            from the Linq "Group By" method in that it will not group similar but
            non-consecutive elements together into a group.  This method is useful
            in the case of dealing with flattened "trees" represented as lists, and
            where the various elements in the tree need to be grouped by their depth.
            </summary>
            <typeparam name="TSource">The type of element in the source</typeparam>
            <typeparam name="TDistinct">The type of the property use to test for distinctiveness</typeparam>
            <param name="source">The source.</param>
            <param name="distinction">The distinction.</param>
            <returns>
            A sequence of groups, each containing consecutive, similar elements.
            </returns>
            <exception cref="T:System.ArgumentNullException">Source is null</exception>
            <exception cref="T:System.ArgumentNullException">Distinction is null</exception>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.AsNonNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
             Returns an empty enumerable with zero items if the current enumerable
             is null.  This is useful in cases where an enumerable object is being
             enumerated in a foreach loop, and the instance could be null.
            </summary>
            <param name="enumerable">The enumerable</param>
            <typeparam name="T">The type of the items in the enumerable</typeparam>
            <returns>An empty enumerable if the instance is null;  
             Otherwise, the original enumerable is returned</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
             Takes an IEnumerable instance and combines its elements into a single string, using the 
             ToString method of the object to create the individual tokens in the list, and separating
             each items string by the delimiter.
            </summary>
            <param name="enumerable">The enumerable to combine</param>
            <param name="delimiter">The string used to delimit each element</param>
            <typeparam name="T">The type of the items in the enumerable</typeparam>
            <returns>A string which has combined all elements in the enumerable</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
             Takes an IEnumerable instance and combines its elements into a single string, using the 
             ToString method of the object to create the individual tokens in the list, and separating
             each items string by the delimiter.  The final delimiter will be used when appending the 
             final element to the string
            </summary>
            <param name="enumerable">The enumerable to combine</param>
            <param name="delimiter">The string used to delimit each element</param>
            <param name="finalDelimiter">The string to append the final element</param>
            <typeparam name="T">The type of the items in the enumerable</typeparam>
            <returns>A string which has combined all elements in the enumerable</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.ToString``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,``1})">
            <summary>
             Takes an IEnumerable instance and combines its elements into a single string, using
             the <c>selector</c> delegate method to selector the individual tokens in the list to
             a new value, and then obtaining the string value of that new value.  Items are separated
             by the delimiter.
             Note that the selector delegate supplied does not necessarily need to convert an item into
             a string.  For whatever type the selector method converts the item to, the <c>toString</c>
             method will be called on that instance.  For example, if the selector delegate returns an
             integer, then this method will concatenate integer string values together.
            </summary>
            <param name="enumerable">The enumerable to combine</param>
            <param name="delimiter">The string used to delimit each element</param>
            <param name="selector">A delegate used when selecting a single item from the sequence</param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.ToString``2(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.Func{``0,``1})">
            <summary>
             Takes an IEnumerable instance and combines its elements into a single string, using the 
             selector delegate method to create the individual tokens in the list, and separating
             each items string by the delimiter.  The last item in the sequence will be separated 
             using the <c>finalDelimiter</c> string.
             Note that the selector delegate supplied does not necessarily need to convert an item into
             a string.  For whatever type the selector method converts the item to, the <c>toString</c>
             method will be called on that instance.  For example, if the selector delegate returns an
             integer, then this method will concatenate integer string values together.
            </summary>
            <param name="enumerable">The enumerable to combine</param>
            <param name="delimiter">The string used to delimit each element</param>
            <param name="finalDelimiter">The string to append the final element</param>
            <param name="selector">A delegate used when selecting a single item from the sequence</param>
            <typeparam name="TSource">The type of the items in the enumerable</typeparam>
            <typeparam name="TResult"></typeparam>
            <returns>A string which has combined all elements in the enumerable</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the minimum elements of a given sequence, based on a projection
            function for the item types in the sequence.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="enumerable">A sequence of items.</param>
            <param name="keySelector">
            A projection delegate which produces a comparable key value.  This key 
            value is compared to all of the other key values produced by each item 
            in the sequence, and all items which produce the same minimum key value 
            through this projection delegate are returned.
            </param>
            <returns>
            A sequence of items with the minimum value as determined by the 
            keySelector projection
            </returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Comparison{``1})">
            <summary>
            Returns the minimum elements of a given sequence, based on a projection
            function for the item types in the sequence.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="enumerable">A sequence of items.</param>
            <param name="keySelector">
            A projection delegate which produces a comparable key value.  This key 
            value is compared to all of the other key values produced by each item 
            in the sequence, and all items which produce the same minimum key value 
            through this projection delegate are returned.
            </param>
            <param name="keyComparison">
            A comparison delegate which is used to compare the old and new 
            projected key values.
            </param>
            <returns>
            A sequence of items with the minimum value as determined by the
            keySelector projection and key comparer.
            </returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the maximum elements of a given sequence, based on a projection
            function for the item types in the sequence.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="enumerable">A sequence of items.</param>
            <param name="keySelector">
            A projection delegate which produces a comparable key value.  This key 
            value is compared to all of the other key values produced by each item 
            in the sequence, and all items which produce the same minimum key value 
            through this projection delegate are returned.
            </param>
            <returns>
            A sequence of items with the maximum value as determined by the 
            keySelector projection
            </returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Comparison{``1})">
            <summary>
            Returns the maximum elements of a given sequence, based on a projection
            function for the item types in the sequence.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="enumerable">A sequence of items.</param>
            <param name="keySelector">
            A projection delegate which produces a comparable key value.  This key 
            value is compared to all of the other key values produced by each item 
            in the sequence, and all items which produce the same minimum key value 
            through this projection delegate are returned.
            </param>
            <param name="keyComparison">
            A comparison delegate which is used to compare the old and new 
            projected key values.
            </param>
            <returns>
            A sequence of items with the maximum value as determined by the
            keySelector projection and key comparer.
            </returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Convenience method on IEnumerable(T) to allow passing of a Comparison delegate
            to the OrderBy method.
            </summary>
            <typeparam name="T">The type of objects the list holds</typeparam>
            <param name="list">The list to be sorted</param>
            <param name="comparison">A delegate defining how to two items in the list</param>
            <returns>An IOrderedEnumerable(T)</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Convenience method on IEnumerable(T) to allow passing of a Comparison delegate
            to the OrderByDescending method.
            </summary>
            <typeparam name="T">The type of objects the list holds</typeparam>
            <param name="list">The list to be sorted</param>
            <param name="comparison">A delegate defining how to two items in the list</param>
            <returns>An IOrderedEnumerable(T)</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.Pack(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Takes a sequence of integers and 'packs' them into a string.
            </summary>
            <remarks>
            This method will attempt to create the shortest possible resulting string
            by encoding consecutive integers into ranges. For instance, the list of
            integers 99,100,101,102,103 will be packed into '99-103'.
            For the best results, make sure the integers are sorted before passing them
            into this method.
            </remarks>
            <param name="integers">A sequence of integers</param>
            <returns>The packed string</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.Product(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the Product of the specified values.
            For example: {1, 2, 4} = 1 x 2 x 4 = 8
            </summary>
            <param name="values">The values.</param>
            <returns>The product of all of the values.</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.SkipIndices``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <summary>
            Skips elements of the enumeration that are at the specified indices.
            Ignores any indices that are out of range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="indicesToSkip">The indices to skip - zero-based index of the items.</param>
            <returns>The elements that aren't at the indices specified.</returns>
            <example>
            <code>
            int[] items = new []{1, 2, 3, 4, 5, 6, 7};
            
            IEnumerable{int} results = items.SkipIndices(2, 5);
            
            foreach (int item in results)
            {
            	System.Console.Out.WriteLine(item);
            }
            // Results will be:
            // 1
            // 2
            // 4
            // 5
            // 7
            </code>
            </example>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.CartesianProduct``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Gets the Cartesian product, or permutations of a series of sequences.
            Implementation by Eric Lippert from: http://stackoverflow.com/questions/3093622/generating-all-possible-combinations
            For example: [['a','b'],['1','2']] -&gt; [['a','1'],['b','1'],['a','2'],['b','2']]
            </summary>
            <seealso cref="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.CartesianProductWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])"/>
            <typeparam name="T"></typeparam>
            <param name="sequences">The sequences.</param>
            <returns>The permutations of the sequences.</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.CartesianProductWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Gets the Cartesian product of the two sequences. This is a convenience method to calculate the product of individual sets. 
            </summary>
            <seealso cref="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.CartesianProduct``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})"/>
            <typeparam name="T"></typeparam>
            <param name="firstSequence">The first sequence.</param>
            <param name="secondSequence">The second sequence.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.Combinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Resolves the combinations of a given number of choices from a given set. Repetition and order of the choices are not considered. 
            </summary>
            <example>
            For example - picking names from a hat. Names may be only chosen once. If we want to choose 3 names
            from the hat. What are the possible distinct results of 3 names could we pick from the hat? 
            Your <see cref="!:sequence"/> would be all of the names in the hat, and 3 would be your <see cref="!:chooseCount"/>.
            
            Say our hat has the following names <c>{"John", "Jacob", "Jingleheimer", "Schmidt"}</c>.
            
            The code to determine this would be:
            <code>
            string[] source = new string[]{"John", "Jacob", "Jingleheimer", "Schmidt"};
            
            IEnumerable{IEnumerable{T}} results = sourceSet.Combinations(2);
            </code>
            
            The possible results are:
            <code>
            {
            	{"John", "Jacob", "Jingleheimer"},
            	{"John", "Jacob", "Scmidt"},
            	{"Jacob", "Jingleheimer", "Scmidt"}
            }
            </code>
            Results like <c>{"John", "Jinglheimer", "Jacob"}</c> are not considered, because the first result has the same distinct results.
            Order is not considered.
            </example>
            <seealso cref="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.CombinationsWithRepetition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
            <seealso cref="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.Permutations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
            <seealso cref="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.PermutationsWithRepetition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
            <typeparam name="T"></typeparam>
            <param name="sequence">The source set of the picking.</param>
            <param name="chooseCount">The number of "picks" from the source set. May not be more than the number of elements in the source set.</param>
            <returns>The combination of chooseCount choices or picks from the source set.</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.CombinationsWithRepetition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Resolves the combinations of a given number of choices from a given set. Repetition is allowed, 
            but order of the choices is not considered.
            </summary>
            <example>
            For example - picking names from a hat. After each choice, we put the name back in the hat to be chosen again.
            If we want to choose 3 names from the hat. What are the possible distinct results of 3 names could we pick from the hat? 
            Your <see cref="!:sequence"/> would be all of the names in the hat, and 3 would be your <see cref="!:chooseCount"/>.
            
            Say our hat has the following names <c>{"John", "Jacob", "Jingleheimer", "Schmidt"}</c>.
            
            The code to determine this would be:
            <code>
            string[] source = new string[]{"John", "Jacob", "Jingleheimer", "Schmidt"};
            
            IEnumerable{IEnumerable{T}} results = sourceSet.CombinationsWithRepetition(2);
            </code>
            
            The possible results are:
            <code>
            {
            	{"John", "John", "John"},
            	{"John", "John", "Jacob"},
            	{"John", "John", "Jingleheimer"},
            	{"John", "John", "Schmidt"}
            	{"John", "Jacob", "Jacob"},
            	{"John", "Jacob", "Jingleheimer"},
            	{"John", "Jacob", "Schmidt"},
            	{"John", "Jingleheimer", "Jingleheimer"},
            	{"John", "Jingleheimer", "Schmidt"}
            	{"John", "Schmidt", "Schmidt"},
            	{"Jacob", "Jacob", "Jacob"},
            	{"Jacob", "Jacob", "Jingleheimer"},
            	{"Jacob", "Jacob", "Schmidt"},
            	{"Jacob", "Jingleheimer", "Jingleheimer"},
            	{"Jacob", "Jingleheimer", "Schmidt"},
            	{"Jacob", "Schmidt", "Schmidt"},
            	{"Jingleheimer", "Jingleheimer", "Jingleheimer"},
            	{"Jingleheimer", "Jingleheimer", "Schmidt"},
            	{"Jingleheimer", "Schmidt", "Schmidt"},
            	{"Scmidt", "Scmidt", "Scmidt"}
            }
            </code>
            Results like <c>{"John", "Jacob", "John"}</c> are not considered, because the second result has the same distinct results.
            Order is not considered.
            </example>
            <seealso cref="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.Combinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
            <seealso cref="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.Permutations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
            <seealso cref="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.PermutationsWithRepetition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
            <typeparam name="T"></typeparam>
            <param name="sequence">The source set of the picking.</param>
            <param name="chooseCount">The number of "picks" from the source set.</param>
            <returns>The combination of chooseCount choices, with repetition, from the source set.</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.Permutations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Resolves the permutations of a given number of choices from a given set. 
            Repetition is not considered, but order of the choices is considered.
            </summary>
            <example>
            For example - picking names from a hat. After each choice, we put the name back in the hat to be chosen again.
            If we want to choose 2 names from the hat. What are the possible distinct results of 3 names could we pick from the hat? 
            Your <see cref="!:sequence"/> would be all of the names in the hat, and 3 would be your <see cref="!:chooseCount"/>.
            
            Say our hat has the following names <c>{"John", "Jacob", "Jingleheimer", "Schmidt"}</c>.
            
            The code to determine this would be:
            <code>
            string[] source = new string[]{"John", "Jacob", "Jingleheimer", "Schmidt"};
            
            IEnumerable{IEnumerable{T}} results = sourceSet.Permutations(2);
            </code>
            
            The possible results are:
            <code>
            {
            	{"John", "Jacob"},
            	{"John", "Jingleheimer"},
            	{"John", "Schmidt"},
            	{"Jacob", "John"},
            	{"Jacob", "Jingleheimer"},
            	{"Jacob", "Schmidt"},
            	{"Jingleheimer", "John"},
            	{"Jingleheimer", "Jacob"},
            	{"Jingleheimer", "Schmidt"},
            	{"Schmidt", "John"},
            	{"Schmidt", "Jacob"},
            	{"Schmidt", "Jingleheimer"}
            }
            </code>
            Results like <c>{"John", "Jacob"}</c> and <c>{"Jacob", "John"}</c> are considered, because order matters in permutations.
            </example>
            <seealso cref="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.Combinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
            <seealso cref="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.CombinationsWithRepetition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
            <seealso cref="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.PermutationsWithRepetition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
            <typeparam name="T"></typeparam>
            <param name="sequence">The source set of the picking.</param>
            <param name="chooseCount">The number of "picks" from the source set.</param>
            <returns>The permutations of chooseCount choices from the source set.</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.PermutationsWithRepetition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Resolves the permutations of a given number of choices from a given set. 
            Repetition and order of the choices is considered.
            </summary>
            <example>
            For example - picking names from a hat. After each choice, we put the name back in the hat to be chosen again.
            If we want to choose 2 names from the hat. What are the possible distinct results of 3 names could we pick from the hat? 
            Your <see cref="!:sequence"/> would be all of the names in the hat, and 3 would be your <see cref="!:chooseCount"/>.
            
            Say our hat has the following names <c>{"John", "Jacob"}</c>.
            
            The code to determine this would be:
            <code>
            string[] source = new string[]{"John", "Jacob"};
            
            IEnumerable{IEnumerable{T}} results = sourceSet.PermutationsWithRepetition(2);
            </code>
            
            The possible results are:
            <code>
            {
            	{"John", "John"},
            	{"John", "Jacob"},
            	{"Jacob", "John"},
            	{"Jacob", "Jacob"}
            }
            </code>
            Results like <c>{"John", "Jacob"}</c> and <c>{"Jacob", "John"}</c> are considered, because order matters in permutations.
            Results that are repeated, like <c>{"John", "John"}</c> are also considered.
            </example>
            <seealso cref="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.Combinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
            <seealso cref="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.CombinationsWithRepetition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
            <seealso cref="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.Permutations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
            <seealso cref="M:Velir.Core.Extensions.System.Collections.Generic.EnumerableExtensions.CartesianProduct``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})"/>
            <typeparam name="T"></typeparam>
            <param name="sequence">The sequence.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="T:Velir.Core.Extensions.System.Collections.Generic.ListExtensions">
            <summary>
            The ListExtensions class contains extension methods to be used on the concrete List{T} class
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.ListExtensions.SortDescending``1(System.Collections.Generic.List{``0})">
            <summary>
            Descendingly sorts the elements in the entire List{T} using the default comparer.
            </summary>
            <remarks>This method uses the Sort method on the List{T} class, and then the 
            Reverse method on the List{T} class.  As such, this method performs an unstable sort.</remarks>
            <typeparam name="T">The Type of the items in the List</typeparam>
            <param name="list">The list.</param>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.ListExtensions.SortDescending``1(System.Collections.Generic.List{``0},System.Comparison{``0})">
            <summary>
            Descendingly sorts the elements in the entire List{T} using the specified System.Comparison{T}.
            </summary>
            <typeparam name="T">The Type of the items in the List</typeparam>
            <param name="list">The list.</param>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.ListExtensions.SortDescending``1(System.Collections.Generic.List{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Descendingly sorts the elements in the entire List{T} using the specified comparer.
            </summary>
            <typeparam name="T">The Type of the items in the List</typeparam>
            <param name="list">The list.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.ListExtensions.SortDescending``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Descendingly sorts the elements in a range of elements in List{T} using the specified comparer.
            </summary>
            <typeparam name="T">The Type of the items in the List</typeparam>
            <param name="list">The list.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Generic.ListExtensions.Sort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Sorts an IList(T) in place.
            </summary>
            <typeparam name="T">The type of objects the list holds</typeparam>
            <param name="list">The list to be sorted</param>
            <param name="comparison">A delegate defining how to compare two items in the list</param>
        </member>
        <member name="T:Velir.Core.Extensions.System.Collections.Generic.ListExtensions.ReverseComparer`1">
            <summary>
            A ReverseComparer is a simple class that takes an IComparer instance
            in the constructor, and returns the opposite value that the instance
            would calculate for two values for the Compare method
            </summary>
            <typeparam name="T">The Type of the items in the List</typeparam>
        </member>
        <member name="T:Velir.Core.Extensions.System.Collections.Specialized.NameValueCollectionExtensions">
            <summary>
            A set of extension methods for the NameValueCollection class
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Specialized.NameValueCollectionExtensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
             Creates an instance of an IDictionary{string,string} from an instance
             of a NameValueCollection
            </summary>
            <param name="source">A NameValueCollection instance</param>
             <exception cref="T:System.ArgumentNullException">source or keySelector is null</exception>
            <returns>An instance of an IDictionary{string,string}, populated with the
             keys and values from the collection</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Specialized.NameValueCollectionExtensions.ToDictionary``2(System.Collections.Specialized.NameValueCollection,System.Func{System.String,``0},System.Func{System.String,``1})">
            <summary>
            Creates an instance of an IDictionary{TKey,TValue} from an instance of a
            NameValueCollection.  Keys and Values in the IDictionary are converted to 
            strings using Funcs.
            </summary>
            <typeparam name="TKey">The type of the key in the IDictionary instance.</typeparam>
            <typeparam name="TValue">The type of the elements in the IDictionary instance.</typeparam>
            <param name="source">A NameValueCollection instance.</param>
            <param name="keySelector">A Func which transforms a string into type TKey.</param>
            <param name="elementSelector">A Func which transforms a string into type TValue.</param>
            <exception cref="T:System.ArgumentNullException">source, keySelector, or elementSelector is null</exception>
            <exception cref="T:System.ArgumentException">keySelector produces duplicate keys for two elements</exception>
            <returns>An instance of an IDictionary{TKey,TValue} populated with the keys an
            values from the collection</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.Specialized.NameValueCollectionExtensions.ToJson(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Turns a NameValueCollection into a JSON object string.
            </summary>
            <remarks>
            Every key and every value is treated as a String, so they are always
            wrapped in quotes.  Note that if the NameValueCollection instance is null,
            this method will return an empty JSON object representation (i.e., "{  }")
            </remarks>
            <param name="nvc">The source object</param>
            <returns>A JSON string containing the contents of the source object</returns>
        </member>
        <member name="T:Velir.Core.Extensions.System.Collections.DictionaryExtensions">
            <summary>
            A set of extension methods for Classes that implement the IDictionary{T} interface
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.DictionaryExtensions.TryGetValue``1(System.Collections.IDictionary,System.Object,``0@)">
            <summary>
             Tries to get a value from a dictionary with a specified key.  If the key does
             not exist in the dictionary, this method returns false.  Otherwise, this method
             returns true, and the value in the out parameter contains the value.
            </summary>
            <param name="dictionary">The dictionary</param>
            <param name="key">The key</param>
            <param name="value">The value associated with the given key, if 
             it exists within the dictionary</param>
            <typeparam name="T">The type of the value to return</typeparam>
            <returns>False, if no value for the specified key; otherwise, true.</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.DictionaryExtensions.ValueOrDefault``1(System.Collections.IDictionary,System.Object)">
            <summary>
             Returns a value from a dictionary associated with a specified key.  If no value
             exists for the key, the default value for the key type is returned.
            </summary>
            <param name="dictionary">The dictionary</param>
            <param name="key">The key</param>
            <typeparam name="T">The type of the value to return</typeparam>
            <returns>A value for the specified key.  If no such value exists, the default
             value for the type is returned</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.DictionaryExtensions.ValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
             Returns a value from a dictionary associated with a specified key.  If no value
             exists for the key, the default value for the key type is returned.
            </summary>
            <param name="dictionary">The dictionary</param>
            <param name="key">The key</param>
            <typeparam name="TKey">The type of the key</typeparam>
            <typeparam name="TValue">The type of the value to return</typeparam>
            <returns>A value for the specified key.  If no such value exists, the default
             value for the type is returned</returns>
        </member>
        <member name="T:Velir.Core.Extensions.System.Collections.EnumerableExtensions">
            <summary>
             The EnumerableExtensions class defines extension methods for
             classes that implement the IEnumerable interface
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.EnumerableExtensions.AsNonNull(System.Collections.IEnumerable)">
            <summary>
             Returns an empty enumerable with zero items if the current enumerable
             is null.  This is useful in cases where an enumerable object is being
             enumerated in a foreach loop, and the instance could be null.
            </summary>
            <param name="enumerable">The enumerable</param>
            <returns>An empty enumerable if the instance is null;  
             Otherwise, the original enumerable is returned</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.EnumerableExtensions.ToString(System.Collections.IEnumerable,System.String)">
            <summary>
             Takes an IEnumerable instance and combines its elements into a single string, using the 
             ToString method of the object to create the individual tokens in the list, and separating
             each items string by the delimiter.
            </summary>
            <param name="enumerable">The enumerable to combine</param>
            <param name="delimiter">The string used to delimit each element</param>
            <returns>A string which has combined all elements in the enumerable</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.EnumerableExtensions.ToString(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
             Takes an IEnumerable instance and combines its elements into a single string, using the 
             ToString method of the object to create the individual tokens in the list, and separating
             each items string by the delimiter.  The final delimiter will be used when appending the 
             final element to the string
            </summary>
            <param name="enumerable">The enumerable to combine</param>
            <param name="delimiter">The string used to delimit each element</param>
            <param name="finalDelimiter">The string to append the final element</param>
            <returns>A string which has combined all elements in the enumerable</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.EnumerableExtensions.ToString(System.Collections.IEnumerable,System.String,System.Func{System.Object,System.String})">
            <summary>
             Takes an IEnumerable instance and combines its elements into a single string, using the 
             toString delegate method to create the individual tokens in the list, and separating
             each items string by the delimiter.  
            </summary>
            <param name="enumerable">The enumerable to combine</param>
            <param name="delimiter">The string used to delimit each element</param>
            <param name="toString">A delegate used when creating the string representation of
             an individual item</param>
            <returns>A string which has combined all elements in the enumerable</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.Collections.EnumerableExtensions.ToString(System.Collections.IEnumerable,System.String,System.String,System.Func{System.Object,System.String})">
            <summary>
             Takes an IEnumerable instance and combines its elements into a single string, using the 
             toString delegate method to create the individual tokens in the list, and separating
             each items string by the delimiter.  
            </summary>
            <param name="enumerable">The enumerable to combine</param>
            <param name="delimiter">The string used to delimit each element</param>
            <param name="finalDelimiter">The string to append the final element</param>
            <param name="toString">A delegate used when creating the string representation of
             an individual item</param>
            <returns>A string which has combined all elements in the enumerable</returns>
        </member>
        <member name="T:Velir.Core.Extensions.System.Data.DataReaderExtensions">
            <summary>
            The DataReaderExtensions class contains extension methods for the 
            System.Data.IDataReader interface
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.Data.DataReaderExtensions.AsEnumerable(System.Data.IDataReader)">
            <summary>
            Treats an IDataReader instance as an enumerable sequence.  Note that the
            IDataReader instance is almost certainly a forward-only reader, so be sure
            to take that into account when you're working with the results of this
            method.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns>An enumerable sequence of values</returns>
        </member>
        <member name="T:Velir.Core.Extensions.System.Data.DataRowExtensions">
            <summary>
            The DataRowExtensions class contains extension methods for the System.Data.DataRow 
            class
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.Data.DataRowExtensions.ToFormattedString(System.Data.DataRow)">
            <summary>
            Prints a DataRow instance into a nicely formatted string.
            </summary>
            <param name="dataRow">The data row.</param>
            <returns>
            A nicely formatted string showing the data row values, combined
            with the associated column names
            </returns>
        </member>
        <member name="T:Velir.Core.Extensions.System.IO.FileInfoExtensions">
            <summary>
             The FileInfoExtensions class contains extension methods to be used on an 
             instance of a FileInfo class
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.IO.FileInfoExtensions.IsOpen(System.IO.FileInfo)">
            <summary>
            Tests if a file has been opened by another process
            </summary>
            <param name="fi">The FileInfo instance</param>		
            <returns>True if the file is open, false otherwise</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.IO.FileInfoExtensions.IsAscii(System.IO.FileInfo)">
            <summary>
            Determines if a file is an ASCII text file
            </summary>
            <param name="fi">The FileInfo instance</param>		
            <returns>True if the file is an ASCII text file</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.IO.FileInfoExtensions.IsBinary(System.IO.FileInfo)">
            <summary>
            Determines if a file is a binary file
            </summary>
            <remarks>
            The generally accepted algorithm here is to read a few bytes
            from the file and count the unprintable characters in it. If
            a certain number of the totalt buffer is unprintable, chances
            are its a binary file.
            </remarks>
            <param name="fi">The FileInfo instance</param>		
            <returns>True if the file is a binary file</returns>
        </member>
        <member name="T:Velir.Core.Extensions.System.IO.FileSystemInfoExtensions">
            <summary>
            The FileSystemInfoExtensions class contains extension methods for the System.IO.FileSystemInfo 
            class
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.IO.FileSystemInfoExtensions.IsHidden(System.IO.FileSystemInfo)">
            <summary>
            Determines whether the specified file is hidden.
            </summary>
            <param name="fi">The FileSystemInfo for the file.</param>
            <returns>
            	<c>true</c> if the specified FileSystemInfo is hidden; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.IO.FileSystemInfoExtensions.IsHidden(System.IO.FileSystemInfo,System.Boolean)">
            <summary>
            Determines whether the specified file is hidden.
            </summary>
            <param name="fsi">The FileSystemInfo for the file.</param>
            <param name="dotFilesAreHidden">if set to <c>true</c> [dot files are hidden].
            This is commonly used on UNIX systems where a '.' preceding the file name
            effectively hides the file.
            </param>
            <returns>
            	<c>true</c> if the specified FileSystemInfo is hidden; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.IO.FileSystemInfoExtensions.ModifiedInPrevious(System.IO.FileSystemInfo,System.TimeSpan)">
            <summary>
            Returns a boolean value indicating if the FileSystemInfo instance
            has been modified within a given timespan from the current time.
            </summary>
            <param name="fsi">The fsi.</param>
            <param name="ts">The ts.</param>
            <returns></returns>
        </member>
        <member name="T:Velir.Core.Extensions.System.Reflection.MethodInfoExtensions">
            <summary>
             The MethodInfoExtensions class provides extension methods for the System.Reflection.MethodInfo class
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.Reflection.MethodInfoExtensions.TryInvoke(System.Reflection.MethodInfo,System.Object,System.Object[],System.Object@)">
            <summary>
             Safely tries to execute a MethodInfo invocation on an object instance.  If the invocation	
             results in an exception being thrown, this method returns false.  Otherwise, <c>true</c> is
             returned, and the <c>invocationResult</c> object contains the result of the invocation.
            </summary>
            <param name="methodInfo">A MethodInfo instance</param>
            <param name="obj">The object on which to invoke the method or constructor. If a method is static, 
             this argument is ignored. If a constructor is static, this argument must be null or an instance 
             of the class that defines the constructor.</param>
            <param name="parameters">An argument list for the invoked method or constructor. This is an array 
             of objects with the same number, order, and type as the parameters of the method or constructor 
             to be invoked. If there are no parameters, parameters should be null.  If the method or constructor 
             represented by this instance takes a ref parameter (ByRef in Visual Basic), no special attribute is 
             required for that parameter in order to invoke the method or constructor using this function. Any 
             object in this array that is not explicitly initialized with a value will contain the default value 
             for that object type. For reference-type elements, this value is null. For value-type elements, this 
             value is 0, 0.0, or false, depending on the specific element type.</param>
            <param name="invocationResult">The result of the invocation</param>
            <returns><c>True</c> if the invocation can be performed without an exception being thrown.  In this
             case, the result of the invocation will be in the <c>invocationResult</c> parameter.
             Otherwise, <c>false</c>.  If <c>false</c> is returned, the <c>invocationResult</c> parameter
             will be null.</returns>
            <exception cref="T:System.ArgumentNullException">The methodInfo instance is null</exception>
        </member>
        <member name="M:Velir.Core.Extensions.System.Reflection.MethodInfoExtensions.TryInvoke(System.Reflection.MethodInfo,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object@)">
            <summary>
             The TryInvoke method safely tries to execute a MethodInfo invocation.  If the invocation
             results in an exception being thrown, this method returns false.  Otherwise, <c>true</c> is
             returned, and the <c>invocationResult</c> object contains the result of the invocation.
            </summary>
            <param name="methodInfo">A MethodInfo instance</param>
            <param name="obj">The object on which to invoke the method or constructor. If a method is static, 
             this argument is ignored. If a constructor is static, this argument must be null or an instance 
             of the class that defines the constructor.</param>
            <param name="invokeAttr">A bitmask that is a combination of 0 or more bit flags from 
             System.Reflection.BindingFlags. If binder is null, this parameter is assigned the value 
             System.Reflection.BindingFlags.Default; thus, whatever you pass in is ignored.</param>
            <param name="binder">An object that enables the binding, coercion of argument types, 
             invocation of members, and retrieval of MemberInfo objects via reflection. If binder is null, 
             the default binder is used.</param>
            <param name="parameters">An argument list for the invoked method or constructor. This is an 
             array of objects with the same number, order, and type as the parameters of the method or 
             constructor to be invoked. If there are no parameters, this should be null.  If the method 
             or constructor represented by this instance takes a ByRef parameter, there is no special 
             attribute required for that parameter in order to invoke the method or constructor using 
             this function. Any object in this array that is not explicitly initialized with a value will 
             contain the default value for that object type. For reference-type elements, this value is null. 
             For value-type elements, this value is 0, 0.0, or false, depending on the specific element type.</param>
            <param name="culture">An instance of CultureInfo used to govern the coercion of types. If this is 
             null, the CultureInfo for the current thread is used. (This is necessary to convert a String that 
             represents 1000 to a Double value, for example, since 1000 is represented differently by different 
             cultures.)</param>
            <param name="invocationResult">The result of the invocation</param>
            <returns><c>True</c> if the invocation can be performed without an exception being thrown.  In this
             case, the result of the invocation will be in the <c>invocationResult</c> parameter.
             Otherwise, <c>false</c>.  If <c>false</c> is returned, the <c>invocationResult</c> parameter
             will be null.</returns>
            <exception cref="T:System.ArgumentNullException">The methodInfo instance is null</exception>
        </member>
        <member name="T:Velir.Core.Extensions.System.Xml.XmlWriterExtensions">
            <summary>
             The XmlWriterExtensions class contains extension methods to use on an
             instance of an XmlWriter class
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.Xml.XmlWriterExtensions.WriteCDataElement(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
             Writes a CDATA element to the writer output
            </summary>
            <param name="writer">The Xml writer</param>
            <param name="elementName">The name of the node</param>
            <param name="content">The content to place inside the CDATA</param>
        </member>
        <member name="T:Velir.Core.Extensions.System.DateTimeExtensions">
            <summary>
             The DateTimeExtensions class contains extension methods to be used on the System.DateTime
             struct.
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.DateTimeExtensions.IsInPrevious(System.DateTime,System.TimeSpan)">
            <summary>
            Determines if a DateTime instance occurs in the prior TimeSpan.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="timeSpan">The time span.</param>
            <returns>A boolean value indicating if the DateTime occurs in the prior TimeSpan</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.DateTimeExtensions.IsInNext(System.DateTime,System.TimeSpan)">
            <summary>
            Determines if a DateTime instances occurs in the next TimeSpan
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="timeSpan">The time span.</param>
            <returns>A boolean value indicating if the DateTime occurs in the next TimeSpan</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.DateTimeExtensions.IsAfter(System.DateTime,System.DateTime)">
            <summary>
            Determines whether or not <paramref name="b"/> is after <paramref name="a"/>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.DateTimeExtensions.IsBefore(System.DateTime,System.DateTime)">
            <summary>
            Determines whether or not <paramref name="b"/> is before <paramref name="a"/>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Velir.Core.Extensions.System.EnumExtensions">
            <summary>
            The EnumExtensions class provides extension methods for working with enums.
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.EnumExtensions.ToDictionary(System.Type)">
            <summary>
            Converts an enum into an IDictionary instance, where the keys of the
            dictionary are the names of the enum values, and the values are the
            values of the associated name.
            </summary>
            <param name="enumType">An enum Type.</param>
            <returns>An IDictionary instance of enum values and names</returns>
            <exception cref="T:System.ArgumentNullException">enumType is null</exception>
            <exception cref="T:System.ArgumentException">enumType is not an enum Type</exception>
        </member>
        <member name="T:Velir.Core.Extensions.System.ExceptionExtensions">
            <summary>
            The ExceptionExtensions class contains extension methods for performing
            various operations on Exception instances
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.ExceptionExtensions.Messages(System.Exception)">
            <summary>
            Returns an IEnumerable{string} of all the exception messages 
            associated with this exception.  If this exception instance has
            an InnerException that is non-null, that exception message
            will be added to the Enumerable.  This will continue until
            an exception with a null InnerException is found.
            </summary>
            <param name="exception">The exception.</param>
            <returns>An Enumerable list of exception messages</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.ExceptionExtensions.StackTraces(System.Exception)">
            <summary>
            Returns an IEnumerable{string} of all the stacktrace messages 
            associated with this exception.  If this exception instance has
            an InnerException that is non-null, that exception stacktrace
            will be added to the Enumerable.  This will continue until
            an exception with a null InnerException is found.
            </summary>
            <param name="exception">The exception.</param>
            <returns>An Enumerable list of stacktrace messages</returns>
        </member>
        <member name="T:Velir.Core.Extensions.System.GuidExtensions">
            <summary>
            Extensions for System.Guid
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.GuidExtensions.NullIfEmpty(System.Guid)">
            <summary>
            Returns null if the guid is empty
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.GuidExtensions.ToShortGuidString(System.Guid)">
            <summary>
            Returns the Guid as a string without dashes
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="T:Velir.Core.Extensions.System.IntExtensions">
            <summary>
            The IntExtensions class contains extension methods for working with integer
            values.
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.IntExtensions.ToOrdinal(System.Int32)">
            <summary>
            The ToOrdinal method returns an ordinal representation of an integer
            value (i.e., "1st" or "103rd").  The default representation of the ordinal
            suffix is a two-character, lowercase string.
            </summary>
            <param name="i">The i.</param>
            <returns>The ordinal representation of the integer</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.IntExtensions.ToOrdinal(System.Int32,System.Func{System.String,System.String})">
            <summary>
            The ToOrdinal method returns an ordinal representation of an integer
            value (i.e., "1st" or "103rd").  This method uses a processSuffix
            Func to apply post-processing formatting to the suffix string.  For example,
            it is possible to apply HTML super-scripting to the suffix by calling:
            <code>
            int i = 10;
            string ordinal = 10.ToOrdinal(s => "<sup>" + s + "</sup>"); // returns 10<sup>th</sup>
            </code>
            </summary>
            <param name="i">The i.</param>
            <param name="processSuffix">A delegate method which formats the 
            ordinal suffix string.</param>
            <returns>The ordinal representation of the integer, with any applicable
            formatting applied to the suffix string.</returns>
        </member>
        <member name="T:Velir.Core.Extensions.System.StringExtensions">
            <summary>
            The StringExtensions class provides extension methods to be used
            on instances of strings
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Replaces all occurances of a specified <c>System.String</c> in this instance, 
            with another <c>System.String</c>
            </summary>
            <param name="s">The s.</param>
            <param name="oldValue">A <c>System.String</c> to be replaced.</param>
            <param name="newValue">A <c>System.String</c> to replace all occurrences of oldValue.</param>
            <param name="comparisonType">Type of the comparison.</param>
            <returns>A <c>System.String</c> equivalent to this instance but with all instances 
            of oldValue (when compared using the given StringComparison type) replaced with newValue</returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.StringExtensions.ParseOrDefault``1(System.String)">
            <summary>
            Extension method wrapper for ParseUtil.ParseOrDefault(T). 
            </summary>
            <typeparam name="T">The type of the desired result.</typeparam>
            <param name="s">The string to be parsed</param>
            <returns>The parsed value, or the default value for the type if parsing fails.</returns>
        </member>
        <member name="T:Velir.Core.Extensions.System.TypeExtensions">
            <summary>
            The TypeExtensions class contains extension methods for working with
            instances of Types
            </summary>
        </member>
        <member name="M:Velir.Core.Extensions.System.TypeExtensions.HasImplicitOperatorTo(System.Type,System.Type)">
            <summary>
            Determines if either the type or the target type has a user-defined
            implicit type conversion operator.
            </summary>
            <param name="type">The specified type.</param>
            <param name="toType">The type that the specified type is trying to be
            converted to.</param>
            <returns>
              <c>true</c> if [the specified type can be implicitly converted to the target type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.TypeExtensions.HasExplicitOperatorTo(System.Type,System.Type)">
            <summary>
            Determines if either the type or the target type has a user-defined
            explicit type conversion operator.
            </summary>
            <param name="type">The specified type.</param>
            <param name="toType">The type that the specified type is trying to be
            converted to.</param>
            <returns>
              <c>true</c> if [the specified type can be explicitly converted to the target type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Velir.Core.Extensions.System.TypeExtensions.HasImplicitOrExplicitOperatorTo(System.Type,System.Type)">
            <summary>
            Determines if either the type or the target type has a user-defined
            implicit or explicit type conversion operator.
            </summary>
            <param name="type">The specified type.</param>
            <param name="toType">The type that the specified type is trying to be
            converted to.</param>
            <returns>
              <c>true</c> if [the specified type can be implicitly or explicitly converted to the target type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Velir.Core.FileTransfer.FileDownloadUtil">
            <summary>
             The FileDownloadUtil class contains methods for downloading files over HTTP
            </summary>
        </member>
        <member name="M:Velir.Core.FileTransfer.FileDownloadUtil.DownloadFile(System.String,System.String,System.String)">
            <summary>
             Downloads a file from a given url into a specified folder and to a specified
             file name.  If the download completes successfully, this method returns true, and
             the file can be found at the given path.
            </summary>
            <param name="fileURL">The Url of the file to download</param>
            <param name="destinationFolder">A local folder in which the downloaded file is saved</param>
            <param name="destinationFileName">A name to give the downloaded file</param>
            <returns>True if the download succeeds; otherwise, false</returns>
        </member>
        <member name="M:Velir.Core.FileTransfer.FileDownloadUtil.DownloadFile(System.Net.WebClient,System.String,System.String,System.String)">
            <summary>
            Downloads a file from a passed in url to the specifiied folder/file name.
            </summary>
            <param name="webClient">The web client.</param>
            <param name="fileURL">The file URL to download.</param>
            <param name="destinationFolder">The destination folder.</param>
            <param name="destinationFileName">Name of the destination file.</param>
            <returns>
            The path to the file if the download was successful
            </returns>
        </member>
        <member name="T:Velir.Core.FileTransfer.FileUploadUtil">
            <summary>
             The FileUploadUtil class contains methods for uploading files to location
             through HTTP or FTP
            </summary>
        </member>
        <member name="M:Velir.Core.FileTransfer.FileUploadUtil.#ctor(System.String,System.String,System.String)">
            <summary>
             Creates a new instance of a FileUploadUtil class.  
            </summary>
            <param name="server">The server to which the file will be uploaded</param>
            <param name="userId">The username to use during the upload</param>
            <param name="password">The password to use during the upload</param>
        </member>
        <member name="M:Velir.Core.FileTransfer.FileUploadUtil.UploadFile(System.String)">
            <summary>
             Uploads a file found at the given path.  If successful, the file
             will be found at ftp://servername/fileName
            </summary>
            <param name="filename"></param>
        </member>
        <member name="P:Velir.Core.FileTransfer.FileUploadUtil.Server">
            <summary>
             The server to which files will be uploaded.
            </summary>
        </member>
        <member name="P:Velir.Core.FileTransfer.FileUploadUtil.UserId">
            <summary>
             The username to use during the upload.
            </summary>
        </member>
        <member name="P:Velir.Core.FileTransfer.FileUploadUtil.Password">
            <summary>
             The password to use during the upload.
            </summary>
        </member>
        <member name="P:Velir.Core.FileTransfer.FileUploadUtil.ExceptionError">
            <summary>
             If an upload fails, this Exception will contain any 
             errors that occurred.
            </summary>
        </member>
        <member name="P:Velir.Core.FileTransfer.FileUploadUtil.IsSuccessfull">
            <summary>
             A value indicating if the most recent upload attempt was successful
            </summary>
        </member>
        <member name="T:Velir.Core.IO.EncodedStringWriter">
            <summary>
             An EncodedStringWriter is a class that inherits from the System.IO.StringWriter class
             which allows you to set the character encoding at instantiation.  Since the StringWriter
             class defaults to UTF-16, and the Encoding property is read-only, it can be difficult
             to work with when your strings need to be in UTF-8
            </summary>
        </member>
        <member name="M:Velir.Core.IO.EncodedStringWriter.#ctor(System.Text.Encoding)">
            <summary>
             Initializes a new instance of an EncodedStringWriter with the specified encoding
            </summary>
            <param name="encoding">The encoding to use</param>
        </member>
        <member name="M:Velir.Core.IO.EncodedStringWriter.#ctor(System.Text.StringBuilder,System.Text.Encoding)">
            <summary>
             Initializes a new instance of an EncodedStringWriter with the specified 
             StringBuilder and encoding
            </summary>
            <param name="sb">The StringBuilder to use</param>
            <param name="encoding"></param>
        </member>
        <member name="M:Velir.Core.IO.EncodedStringWriter.#ctor(System.IFormatProvider,System.Text.Encoding)">
            <summary>
             Initializes a new instance of an EncodedStringWriter with the specified 
             IFormatProvider and encoding
            </summary>
            <param name="formatProvider">The FormatProvider to use</param>
            <param name="encoding">The encoding to use</param>
        </member>
        <member name="M:Velir.Core.IO.EncodedStringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider,System.Text.Encoding)">
            <summary>
             Initializes a new instance of an EncodedStringWriter with the specified 
             StringBuilder, IFormatProvider and encoding
            </summary>
            <param name="sb">The StringBuilder to use</param>
            <param name="formatProvider">The FormatProvider to use</param>
            <param name="encoding">The encoding to use</param>
        </member>
        <member name="P:Velir.Core.IO.EncodedStringWriter.Encoding">
            <summary>
            Gets the <see cref="T:System.Text.Encoding"/> in which the output is written.
            </summary>
            <returns>
            The Encoding in which the output is written.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:Velir.Core.IO.NumericEntityFormat">
            <summary>
            The value printed when formatting an encoded character.
            </summary>
        </member>
        <member name="F:Velir.Core.IO.NumericEntityFormat.Decimal">
            <summary>
            Encoded characters will be printed using the decimal value of the 
            character.  For example: <code>&#160;</code>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Velir.Core.IO.NumericEntityFormat.Hexadecimal" -->
        <member name="T:Velir.Core.IO.NumericEntityTextWriterDecorator">
            <summary>
            The NumericEntityTextWriterDecorator class is a decorator which writes 
            numeric entities for characters, instead of named entities.
            </summary>
        </member>
        <member name="M:Velir.Core.IO.NumericEntityTextWriterDecorator.#ctor(System.IO.TextWriter,Velir.Core.IO.NumericEntityFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Velir.Core.IO.NumericEntityTextWriterDecorator"/> class.
            </summary>
            <param name="writer">The writer.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:Velir.Core.IO.NumericEntityTextWriterDecorator.Write(System.Char)">
            <summary>
            Writes a character to the text stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
              </exception>
              
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
              </exception>
        </member>
        <member name="P:Velir.Core.IO.NumericEntityTextWriterDecorator.Encoding">
            <summary>
            When overridden in a derived class, returns the <see cref="T:System.Text.Encoding"/> in which the output is written.
            </summary>
            <returns>
            The Encoding in which the output is written.
              </returns>
        </member>
        <member name="T:Velir.Core.Mail.EmailSender">
            <summary>
            Encapsulates the logic for sending an email message.
            </summary>
        </member>
        <member name="M:Velir.Core.Mail.EmailSender.#ctor(Velir.Core.Mail.IEmailProvider)">
            <summary>
            Creates a new EmailSender with the given SMTP client
            </summary>
            <param name="provider">The email provider to use</param>
        </member>
        <member name="M:Velir.Core.Mail.EmailSender.#ctor(Velir.Core.Mail.IEmailProvider,System.Action{System.Net.Mail.MailMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:Velir.Core.Mail.EmailSender"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="processor">The processor.</param>
        </member>
        <member name="M:Velir.Core.Mail.EmailSender.#ctor">
            <summary>
            Creates a new EmailSender. If the Smtp property is not set, the
            default one will be used.
            </summary>
        </member>
        <member name="M:Velir.Core.Mail.EmailSender.#ctor(System.Action{System.Net.Mail.MailMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:Velir.Core.Mail.EmailSender"/> class.
            </summary>
            <param name="processor">The processor.</param>
        </member>
        <member name="M:Velir.Core.Mail.EmailSender.CreateMessage(System.String,System.String,System.String,System.String[])">
            <summary>
            Creates a MailMessage object according to the specified parameters.
            This message is not automatically sent.
            </summary>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Mail.EmailSender.SendEmail(System.String,System.String,System.String,System.String[])">
            <summary>
            Creates and sends a basic email message, using the SmptClient contained
            in the instance. The sent email is marked as Html content.
            </summary>
            <param name="subject">The subject of the message</param>
            <param name="body">The HTML body of the message</param>
            <param name="from">The email address the message is from</param>
            <param name="to">Any number of email addresses to send the message to</param>
            <returns>True if the message was sent successfuly, false otherwise</returns>
        </member>
        <member name="M:Velir.Core.Mail.EmailSender.SendEmail(System.Net.Mail.MailMessage)">
            <summary>
            Sends a MailMessage using the SmtpClient in this EmailSender instance.
            The method encapsulates the logic and error checking for sending an
            email message.
            </summary>
            <param name="message">The message to send</param>
            <returns>True if the message was sent successfuly, false otherwise</returns>
        </member>
        <member name="P:Velir.Core.Mail.EmailSender.MessageProcessor">
            <summary>
            Gets or sets the message processor.  The message processor can add or
            modify properties of the MailMessage prior to sending the message.
            </summary>
            <value>The message processor.</value>
        </member>
        <member name="P:Velir.Core.Mail.EmailSender.Provider">
            <summary>
            The email provider to use for this EmailSender. If no provider is 
            specified at the time of sending the mail, then the EmailSender
            will create an SmtpEmailProvider that uses the application configuration
            (ie, the SmtpClient empty constructor).
            </summary>
        </member>
        <member name="P:Velir.Core.Mail.EmailSender.LastMessage">
            <summary>
            Stores a copy of the last successfully sent message
            </summary>
        </member>
        <member name="P:Velir.Core.Mail.EmailSender.Log">
            <summary>
            A logger to use internally to EmailSender
            </summary>
        </member>
        <member name="T:Velir.Core.Mail.IEmailProvider">
            <summary>
            An interface for varying types of email providers
            </summary>
        </member>
        <member name="M:Velir.Core.Mail.IEmailProvider.Send(System.Net.Mail.MailMessage)">
            <summary>
            Sends the given mail message
            </summary>
            <param name="message">A mail message to be sent</param>
            <returns>True if the send was successful, false otherwise</returns>
        </member>
        <member name="T:Velir.Core.Mail.SmtpEmailProvider">
            <summary>
            An email provider that uses the .NET SmtpClient
            </summary>
        </member>
        <member name="M:Velir.Core.Mail.SmtpEmailProvider.#ctor(System.Net.Mail.SmtpClient)">
            <summary>
             Initializes an instance of a SmtpEmailProvider, using the 
             specified SmtpClient for email transport
            </summary>
            <param name="smtpClient">An SmtpClient</param>
        </member>
        <member name="M:Velir.Core.Mail.SmtpEmailProvider.#ctor">
            <summary>
             Initializes an instance of a SmtpEmailProvider, using the 
             specified SmtpClient for email transport
            </summary>
        </member>
        <member name="M:Velir.Core.Mail.SmtpEmailProvider.Send(System.Net.Mail.MailMessage)">
            <summary>
            Sends the given mail message
            </summary>
            <param name="message">A mail message to be sent</param>
            <returns>
            True if the send was successful, false otherwise
            </returns>
        </member>
        <member name="P:Velir.Core.Mail.SmtpEmailProvider.Smtp">
            <summary>
            Gets or sets the SmtpClient to use for sending email
            If no client exists when trying to retrieve it, one 
            will be created using the defaults.
            </summary>
        </member>
        <member name="P:Velir.Core.Mail.SmtpEmailProvider.Log">
            <summary>
            The internal logger for this instance.  This property
            is guaranteed to return a non-null logger.
            </summary>
            <value>The log.</value>
        </member>
        <member name="T:Velir.Core.Utilities.Collections.ArrayUtil">
            <summary>
            Contains utility methds for working with Arrays
            </summary>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.ArrayUtil.IntegerArrayToString(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Creates a string of comma-separated integers from an array of integers.
            </summary>
            <param name="list">The array of integers to put into the comma-separated string</param>
            <returns>A comma-separated string of integers</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.ArrayUtil.AddToFrontOfArray``1(``0,``0[])">
            <summary>
            Adds an item to the front of an array.  The resized and combined 
            array is returned.  If the item is null, the original array is 
            returned.  If the array is null or empty, a one-item array is
            returned.
            </summary>
            <typeparam name="T">The type of the items in the array</typeparam>
            <param name="item">The item.</param>
            <param name="array">The array.</param>
            <returns>An array with new item added as the first element in the array</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.ArrayUtil.AddToEndOfArray``1(``0,``0[])">
            <summary>
            Adds an item to the end of an array.  The resized and combined 
            array is returned.  If the item is null, the original array is 
            returned.  If the array is null or empty, a one-item array is
            returned.
            </summary>
            <typeparam name="T">The type of the items in the array</typeparam>
            <param name="item">The item.</param>
            <param name="array">The array.</param>
            <returns>An array with the new item added as the last element in the array</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.ArrayUtil.AddItemToArray``1(``0,``0[],System.Boolean)">
            <summary>
            Adds a single item to an array.
            </summary>
            <typeparam name="T">The type of the items in the array</typeparam>
            <param name="item">The item.</param>
            <param name="array">The array.</param>
            <param name="addToFront">if set to <c>true</c> [add to front].</param>
            <returns>
            An array with the single item added to either the front or the end
            of the array.
            </returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.ArrayUtil.Combine``1(``0[][])">
            <summary>
            Combines any number of arrays into a single array.
            Any null arrays will be treated as empty arrays.
            </summary>
            <typeparam name="T">The type of the items in the array</typeparam>
            <param name="arrays">The arrays.</param>
            <returns>
            A new array with all of the given arrays combined into a single array
            </returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.ArrayUtil.GetItemRange``1(``0[],System.Int32,System.Int32)">
            <summary>
            Gets a range of items from an array.  The range is a subset
            of the given array, starting at a specified index, and with 
            a specified number of items.
            If the array supplied is null, null is returned.
            If there are no items in the array, an empty array is returned
            If, after starting at the index, the number of available items
            is less than the length, a truncated array will be returned.
            i.e. if the array is [1,2,3,4,5], and a range starting at index
            1 and length 10 is supplied, an array of [1,2,3,4,5] will be returned
            </summary>
            <typeparam name="T">The type of the items in the array</typeparam>
            <param name="items">The items.</param>
            <param name="start">The index of the first item to return.</param>
            <param name="length">The length of the array to return.</param>
            <returns>The subset of items in the specified range</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.ArrayUtil.GetItemRangeFromStart``1(``0[],System.Int32)">
            <summary>
            Gets a range of items, the number of which is specified, beginning 
            at the first item in the array.  
            If the array supplied is null, null is returned.
            If there are no items in the array, an empty array is returned
            If the length of array requested is greater than the total number
            of items in the array, the entire array is returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="length">The length.</param>
            <returns>An array of items starting from the beginning of the given array, and of a specified length</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.ArrayUtil.GetItemRangeAfterIndex``1(``0[],System.Int32)">
            <summary>
            Gets a range of items from an array which occur after a specified index.
            For example, if the array is [1,2,3,4,5] and the index is 2, the returned
            array will be [4,5]
            </summary>
            <typeparam name="T">The type of the items in the array</typeparam>
            <param name="items">The items.</param>
            <param name="index">The index.</param>
            <returns>
            An array of items starting from the specified index of the array, and continuing to the end of the array
            </returns>
        </member>
        <member name="T:Velir.Core.Utilities.Collections.CollectionUtil">
            <summary>
            Contains utility methods for working with Collections
            </summary>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.CollectionUtil.IsNullOrEmpty(System.Collections.ICollection)">
            <summary>
            Determines if a collection is null or if it has no elements.
            </summary>
            <param name="collection">A collection</param>
            <returns>
            True if the collection is null or if it has a count of zero.
            Otherwise, returns false.
            </returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.CollectionUtil.IsNotNullOrEmpty(System.Collections.ICollection)">
            <summary>
            Determines if a collection is not null or empty.  This method will
            return true if the collection is non-null and contains at least one
            element
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if [the specified collection] [is not null or empty]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.CollectionUtil.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            A generics wrapper for IsNullOrEmpty that takes care of
            automatically casting the generic collection to a non-
            generic ICollection.
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="collection">A generic collection</param>
            <returns>
            True if the collection is null or if it has a count of zero.
            Otherwise, returns false.
            </returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.CollectionUtil.IsNotNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            A generics wrapper for IsNotNullOrEmpty that takes care of
            automatically casting the generic collection to a non-
            generic ICollection.
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if [the specified collection] [is not null or empty]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.CollectionUtil.Intersection``1(System.Collections.Generic.ICollection{``0}[])">
            <summary>
            Finds the intersection of multiple collections. The intersection is the
            set that contains elements which exist in all of the sets.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collections"></param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.CollectionUtil.FindUniqueElements``1(System.Collections.Generic.ICollection{``0}[])">
            <summary>
            Finds the unique elements in a set of given collections.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collections">The collections.</param>
            <returns>A collection of elements that are unique</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.CollectionUtil.MinimumElement``1(``0,System.Collections.Generic.ICollection{``0})">
            <summary>
            Given an array of IComparable items, this method will return
            the minimum element in the list.  If the list of elements is null or 
            empty, the defaultValue is returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">The default value.</param>
            <param name="elements">The elements.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.CollectionUtil.MaximumElement``1(``0,System.Collections.Generic.ICollection{``0})">
            <summary>
            Given an array of IComparable items, this method will return
            the maximum element in the list.  If the list of elements is null or 
            empty, the defaultValue is returned.  
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">The default value.</param>
            <param name="elements">The elements.</param>
            <returns></returns>
        </member>
        <member name="T:Velir.Core.Utilities.Collections.Columnizer">
            <summary>
            Contains methods useful for sorting things into columns
            </summary>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.Columnizer.Columnize(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Takes a count of items, figures out how to divide them among a number
            of buckets, as evenly as possible.
            Left over elements are distributed in the buckets depending on the value
            of weightTowardsBack.
            This is useful for dividing lists of items into columns for display, hence 
            the name of the method.
            </summary>
            <param name="itemCount">The total number of items</param>
            <param name="columnCount">The number of buckets to distribute them across</param>
            <param name="weightTowardsBack">
            Use true if left over values should be added to the counts at the back
            of the list. Use false if the left over values should be added to the
            front of the list.
            </param>
            <returns>A list of integers representing the item count per column</returns>
        </member>
        <member name="T:Velir.Core.Utilities.Collections.ListUtil">
            <summary>
            Contains utility methods for working with Lists
            </summary>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.ListUtil.GetItemRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Gets a range of items from a list.  The range is a subset
            of the given list, starting at a specified index, and with 
            a specified number of items.
            If the List supplied is null, null is returned.
            If there are no items in the List, an empty list is returned
            If, after starting at the index, the number of available items
            is less than the length, a truncated list will be returned.
            i.e. if the sequence is {1,2,3,4,5}, and a range starting at index
            1 and length 10 is supplied, a list of {2,3,4,5} will be returned
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="start">The index of the first item to return.</param>
            <param name="length">The length of the list to return.</param>
            <returns>The subset of items in the specified range</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.ListUtil.GetPagedListIndex``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Returns the indicies used for paging of a particular list
            </summary>
            <param name="items">Input array</param>
            <param name="pageNumber">Output Page</param>
            <param name="pageSize">Page Size</param>
            <param name="startIndex">Start Index</param>
            <param name="length">Actual length of returned page</param>
            <param name="pageTotal">Total Pages</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.ListUtil.GetPagedList``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns a section of a collection corresponding to the paging parameters
            </summary>
            <param name="items">Input array</param>
            <param name="pageNumber">Output Page</param>
            <param name="pageSize">Page Size</param>
            <param name="pageTotal">Total Pages</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.ListUtil.GetItemRangeFromStart``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Gets a range of items, the number of which is specified, beginning 
            at the first item in the list.  
            If the List supplied is null, null is returned.
            If there are no items in the List, an empty list is returned
            If the length of items requested is greater than the total number
            of items in the list, the entire list is returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.ListUtil.GetItemRangeAfterIndex``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Gets a range of items from a list which occur after a specified index.
            For example, if the list is {1,2,3,4,5} and the index is 2, the returned
            list will be {4,5}
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.ListUtil.FirstInList``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Returns the first item in a list.  If the list is null or has
            no items, the defaultValue is returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.ListUtil.LastInList``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Returns the last item in a list.  If the list is null or has
            no items, the defaultValue is returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Collections.ListUtil.SplitIntoMultipleLists``1(System.Collections.Generic.IList{``0},System.Int32,System.Boolean)">
            <summary>
            Splits the supplied list into the specified number of lists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list to split</param>
            <param name="numLists">The desired number of new lists</param>
            <param name="weightTowardsBack">If true, left over values will be 
            added to the back of the lists. Otherwise left over values will be 
            added to the front of the lists.</param> 
            <returns>A list of split lists</returns>
        </member>
        <member name="T:Velir.Core.Utilities.Colors.OneColorBehavior">
            <summary>
            A set of behaviors for the ColorSpectrum class to use to determine
            which color in the spectrum to return if there is only one color
            generated
            </summary>
        </member>
        <member name="F:Velir.Core.Utilities.Colors.OneColorBehavior.None">
            <summary>
            No special behavior defined
            </summary>
        </member>
        <member name="F:Velir.Core.Utilities.Colors.OneColorBehavior.ReturnStart">
            <summary>
            Return the start color of the spectrum if only one color exists
            </summary>
        </member>
        <member name="F:Velir.Core.Utilities.Colors.OneColorBehavior.ReturnEnd">
            <summary>
            Return the end color of the spectrum if only one color exists
            </summary>
        </member>
        <member name="T:Velir.Core.Utilities.Colors.ColorSpectrum">
            <summary>
            ColorSpectrum is a class that generates and maintains a spectrum
            of colors, in even steps, from a start color to and end color
            </summary>
        </member>
        <member name="M:Velir.Core.Utilities.Colors.ColorSpectrum.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Velir.Core.Utilities.Colors.ColorSpectrum"/> class.
            By default, the empty constructor creates an instance of a color
            spectrum starting at Black and going to White, with only two
            colors in the spectrum
            </summary>
        </member>
        <member name="M:Velir.Core.Utilities.Colors.ColorSpectrum.#ctor(System.Drawing.Color,System.Drawing.Color,System.Int32,Velir.Core.Utilities.Colors.OneColorBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Velir.Core.Utilities.Colors.ColorSpectrum"/> class.
            </summary>
            <param name="start">The start color.</param>
            <param name="end">The end color.</param>
            <param name="colorCount">The total number of colors in the spectrum.</param>
            <param name="behavior">If there is only one color in the spectrum, the
            OneColorBehavior value determines if the start or end color is returned.</param>
        </member>
        <member name="M:Velir.Core.Utilities.Colors.ColorSpectrum.Generate">
            <summary>
            Generates a spectrum of colors based on the start and end
            colors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Colors.ColorSpectrum.InterpolateRgb(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Does an RGB interpolation of the spectrum between two colors
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="colorCount">The color count.</param>
            <returns></returns>
        </member>
        <member name="P:Velir.Core.Utilities.Colors.ColorSpectrum.Start">
            <summary>
            Gets or sets the start color in the spectrum.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Velir.Core.Utilities.Colors.ColorSpectrum.End">
            <summary>
            Gets or sets the end color in the spectrum.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Velir.Core.Utilities.Colors.ColorSpectrum.ColorCount">
            <summary>
            Gets or sets the number of colors in the spectrum.
            </summary>
            <value>The color count.</value>
        </member>
        <member name="T:Velir.Core.Utilities.Colors.ColorUtil">
            <summary>
            Convertion methods adapted from the code found here: http://www.tecgraf.puc-rio.br/~mgattass/color/ColorIndex.html,
            Fixed errors based on these algorithms: http://130.113.54.154/~monger/hsl-rgb.html
            </summary>
        </member>
        <member name="M:Velir.Core.Utilities.Colors.ColorUtil.RGBtoHSL(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts an RGB value to HSL.  RGB and HSL values are treated as percentages, i.e between 0-1.
            </summary>
            <param name="r">The red value of the color</param>
            <param name="g">The green value of the color</param>
            <param name="b">The blue value of the color</param>
            <param name="h">The calculated hue of the color</param>
            <param name="s">The calculated saturation of the color</param>
            <param name="l">The calculated lightness of the color</param>
        </member>
        <member name="M:Velir.Core.Utilities.Colors.ColorUtil.HSLtoRGB(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts RGB values to HSL.  RGB and HSL values are treated as percentages, i.e between 0-1.
            The .NET Color class has a method GetHue(), which returns the hue in degrees. Divide that value by 360.0 for use with this method.
            </summary>
            <param name="h">The calculated hue of the color</param>
            <param name="s">The calculated saturation of the color</param>
            <param name="l">The calculated lightness of the color</param>
            <param name="r">The red value of the color</param>
            <param name="g">The green value of the color</param>
            <param name="b">The blue value of the color</param>
        </member>
        <member name="M:Velir.Core.Utilities.Colors.ColorUtil.ColorFromHSL(System.Double,System.Double,System.Double)">
            <summary>
            Returns a System.Drawing.Color object from the given HSL.  HSL values are treated as percentages, i.e between 0-1.
            The .NET Color class has a method GetHue(), which returns the hue in degrees. Divide that value by 360.0 for use with this method.
            </summary>
            <param name="h">The hue of the color</param>
            <param name="s">The saturation of the color</param>
            <param name="l">The lightness of the color</param>
            <returns>A new color based on the given hue, saturation, and lightness</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Colors.ColorUtil.Lighten(System.Drawing.Color,System.Double)">
            <summary>
            Lightens the shade of the color passed in by the given percent.
            </summary>
            <param name="inColor">The start color</param>
            <param name="percent">A percentage by which the color will be lightened</param>
            <returns>A color based on <c>inColor</c>, and lightened by <c>percent</c></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Colors.ColorUtil.Darken(System.Drawing.Color,System.Double)">
            <summary>
            Darkens the shade of the color passed in by the given percent.
            </summary>
            <param name="inColor">The start color</param>
            <param name="percent">A percentage by which the color will be darkened</param>
            <returns>A color based on <c>inColor</c>, and darkened by <c>percent</c></returns>
        </member>
        <member name="T:Velir.Core.Utilities.Datetime.DateTimeUtil">
            <summary>
            The DateTimeUtil contains some useful methods for manipulating DateTime
            objects, as many of the properties on a DateTime object are read-only.
            These should probably be turned into extension methods once we move to
            .NET 3.0
            </summary>
        </member>
        <member name="M:Velir.Core.Utilities.Datetime.DateTimeUtil.SetTimeOfDay(System.DateTime,System.Int32)">
            <summary>
            Sets the time of day.
            </summary>
            <param name="dt">The dt.</param>
            <param name="hours">The hours.</param>
            <returns>A new DateTime with the hour set to the given hour</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Datetime.DateTimeUtil.SetTimeOfDay(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Sets the time of day.
            </summary>
            <param name="dt">The dt.</param>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <returns>A new DateTime with the hour and minutes set to the given hour and minutes</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Datetime.DateTimeUtil.SetTimeOfDay(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time of day.
            </summary>
            <param name="dt">The dt.</param>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <returns>A new DateTime with the hour, minutes and seconds set to the given hour, minutes and seconds</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Datetime.DateTimeUtil.SetTimeOfDay(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time of day.
            </summary>
            <param name="dt">The dt.</param>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <param name="milliseconds">The milliseconds.</param>
            <returns>
            A new DateTime with the hour, minutes, seconds and milliseconds 
            set to the given hour, minutes, seconds and milliseconds</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Datetime.DateTimeUtil.Noon(System.DateTime)">
            <summary>
            Returns a DateTime with the same date as the DateTime entered, and with
            the time set to 12:00pm
            </summary>
            <param name="dt">The dt.</param>
            <returns>A new DateTime set to 12:00pm (noon) of the given DateTime</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Datetime.DateTimeUtil.Midnight(System.DateTime)">
            <summary>
            Returns a DateTime with the same date as the DateTime entered, and with
            the time set to 12:00am
            </summary>
            <param name="dt">The dt.</param>
            <returns>A new DateTime set to 12:00am (midnight) of the given DateTime</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Datetime.DateTimeUtil.EndOfDay(System.DateTime)">
            <summary>
            Returns a DateTime with the same date as the DateTime entered, and with
            the time set to exactly one millisecond prior to midnight.
            </summary>
            <param name="dt">The dt.</param>
            <returns>A new DateTime set to one millisecond prior to midnight of the given day</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Datetime.DateTimeUtil.FirstOfMonth(System.DateTime)">
            <summary>
            Returns a DateTime whose date falls on the first of the month 
            </summary>
            <param name="dt">The dt.</param>
            <returns>A new DateTime whose date is set to the first of the month</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Datetime.DateTimeUtil.LastOfMonth(System.DateTime)">
            <summary>
            Returns a DateTime whose date falls on the last of the month
            </summary>
            <param name="dt">The dt.</param>
            <returns>A new DateTime whose date is set to the last of the month</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Datetime.DateTimeUtil.ParseForNullableDateTime(System.String)">
            <summary>
            Parses a string into a DateTime.  If the parse fails, then a null
            is returned.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>
            A nullable DateTime set to the parsed value from the given string.
            If no such DateTime can be determined, a null is returned.
            </returns>
        </member>
        <member name="M:Velir.Core.Utilities.Datetime.DateTimeUtil.ParseForNullableDateTime(System.String,System.IFormatProvider)">
            <summary>
            Parses a string into a DateTime.  If the parse fails, then a null
            is returned.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="provider">The formatting provider.</param>
            <returns>
            A nullable DateTime set to the parsed value from the given string and format provider.
            If no such DateTime can be determined, a null is returned.
            </returns>
        </member>
        <member name="M:Velir.Core.Utilities.Datetime.DateTimeUtil.ParseForNullableDateTime(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Parses a string into a DateTime.  If the parse fails, then a null
            is returned.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="provider">The formatting provider.</param>
            <param name="styles">The DateTime style settings.</param>
            <returns>
            A nullable DateTime set to the parsed value from the given string, format provider,
            and DateTimeStyles. If no such DateTime can be determined, a null is returned.
            </returns>
        </member>
        <member name="M:Velir.Core.Utilities.Datetime.DateTimeUtil.GetRealitiveDateBetween(System.DateTime,System.DateTime)">
            <summary>
            Gets the relative date between past and present
            </summary>
            <param name="past">Older date. Usually the one that was logged at the time of an event</param>
            <param name="present">Current date. Compares how much time has passed between present and past.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Datetime.DateTimeUtil.GetRelativeDateFrom(System.DateTime,System.DateTime)">
            <summary>
            Gets the relative date between past and present
            Recommended use: DateTime.Now.GetRelativeDateFrom(past);
            </summary>
            <param name="present">Current date. Compares how much time has passed between present and passed.</param>
            <param name="past">Older date. Usually the one that was logged at the time of an event.</param>
            <returns></returns>
        </member>
        <member name="T:Velir.Core.Utilities.Files.FileUtil">
            <summary>
            Contains utility methods for working with Files
            </summary>
        </member>
        <member name="M:Velir.Core.Utilities.Files.FileUtil.IsOpen(System.String)">
            <summary>
            Tests if a file has been opened by another process
            </summary>
            <param name="fileName">The path to an existing file</param>		
            <returns>True if the file is open, false otherwise</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Files.FileUtil.IsBinary(System.String)">
            <summary>
            Determines if a file is a binary file
            </summary>
            <remarks>
            The generally accepted algorithm here is to read a few bytes
            from the file and count the unprintable characters in it. If
            a certain number of the totalt buffer is unprintable, chances
            are its a binary file.
            </remarks>
            <param name="fileName">The path to an existing file</param>
            <returns>True if the file is a binary file</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Files.FileUtil.IsAscii(System.String)">
            <summary>
            Determines if a file is an ASCII text file
            </summary>
            <param name="fileName">The path to an existing file</param>
            <returns>True if the file is an ASCII text file</returns>
        </member>
        <member name="T:Velir.Core.Utilities.Files.MimeUtil">
            <summary>
             The MimeUtil class contains various helper methods in working
             with files and their associated MIME types
            </summary>
        </member>
        <member name="M:Velir.Core.Utilities.Files.MimeUtil.GetMimeType(System.String)">
            <summary>
             Gets the MIME type of a file, based upon the file name.  If no MIME type
             can be found from the file name, an empty string is returned.  If the file
             has multiple MIME types associated with it, only the first type found
             is returned.
            </summary>
            <param name="fileName">The name of the file</param>
            <returns>The MIME type of the file</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Files.MimeUtil.GetMimeTypes(System.String)">
            <summary>
             Gets a list of MIME type for the file, based upon the file name.  If no
             MIME type can be found from the file name, an empty list is returned.
            </summary>
            <param name="fileName">The name of the file</param>
            <returns>An IList{string} of MIME types for the file</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Files.MimeUtil.TryGetMimeType(System.String,System.String@)">
            <summary>
             Gets the MIME type of a file, based upon the file name.  This method
             returns a boolean value indicating whether the MIME type could be found.
            </summary>
            <param name="fileName">The name of the file</param>
            <param name="mimeType">The MIME type of the file</param>
            <returns><c>true</c>, if a MIME type could be found for the file; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Files.MimeUtil.TryGetMimeTypes(System.String,System.Collections.Generic.IList{System.String}@)">
            <summary>
             Gets a list of MIME types for a file, based upon the file name.  This 
             method returns a boolean value indicating whether a list of MIME types
             could be found.
            </summary>
            <param name="fileName">The name of the file</param>
            <param name="mimeTypes">The MIME types of the file</param>
            <returns><c>true</c>, if a list of MIME types could be found for the file; otherwise, <c>false</c></returns>
        </member>
        <member name="T:Velir.Core.Utilities.Reflection.EnumUtil">
            <summary>
            Contains utility methods for working with Enums
            </summary>
        </member>
        <member name="M:Velir.Core.Utilities.Reflection.EnumUtil.Parse``1(System.String)">
            <summary>
            Shorthand for getting an enum from its name or value.
            Before: MyEnum enumValue = (MyEnum) Enum.Parse(typeof (MyEnum), nameOrValue);
            After:  MyEnum enumValue = EnumUtil.Parse{MyEnum}(nameOrValue);
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="value">Enum name or value</param>
            <returns>The enum of the specified type with the specified value</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Reflection.EnumUtil.Parse``1(System.String,System.Boolean)">
            <summary>
            Shorthand for getting an enum from its name or value.
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="value">Enum name or value</param>
            <param name="ignoreCase">If true, ignore case</param>
            <returns>The enum of the specified type with the specified value</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Reflection.EnumUtil.TryParse``1(System.String,``0@)">
            <summary>
            Converts the string or number representation of an enum to its equivalent enum object. 
            A return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="value">Enum name or value</param>
            <param name="result">The resulting enum object</param>
            <returns>True if the conversion succeeded, otherwise false.</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Reflection.EnumUtil.TryParse``1(System.String,``0@,System.Boolean)">
            <summary>
            Converts the string or number representation of an enum to its equivalent enum object. 
            A return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="value">Enum name or value</param>
            <param name="result">The resulting enum object</param>
            <param name="ignoreCase">If true, ignore case; otherwise, regard case.</param>
            <returns>True if the conversion succeeded, otherwise false.</returns>
        </member>
        <member name="T:Velir.Core.Utilities.Reflection.ParseUtil">
            <summary>
            A utility class containing methods that assist with parsing strings
            into other data types.
            </summary>
        </member>
        <member name="M:Velir.Core.Utilities.Reflection.ParseUtil.ParseOrDefault``1(System.String)">
            <summary>
            Shorthand for executing a TryParse for value types. Natively supports int16, int32, int64, 
            uint16, unit32, unit64, float, double, char, bool, decimal, and enums. 
            Falls back to using a slower method of invoking TryParse via reflection for any types 
            not listed here.
            </summary>
            <typeparam name="T">The type of the desired result.</typeparam>
            <param name="s">The string to be parsed.</param>
            <returns>The parsed value, or the default value for the type if parsing fails.</returns>
        </member>
        <member name="T:Velir.Core.Utilities.Reflection.ReflectionUtil">
            <summary>
            ReflectionUtil provides a number of useful shorthand methods for getting
            information about a class or object type.
            </summary>
        </member>
        <member name="M:Velir.Core.Utilities.Reflection.ReflectionUtil.PublicMethodsForType(System.Type)">
            <summary>
            Returns a list of key-value pairs containing details about the public 
            methods for a given type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Reflection.ReflectionUtil.PrivateMethodsForType(System.Type)">
            <summary>
            Returns a list of key-value pairs containing details about the private 
            methods for a given type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Reflection.ReflectionUtil.MethodInfoToString(System.Reflection.MethodBase)">
            <summary>
            Given a MethodBase, MethodInfoToString will return a string containg the method name along with all parameter types and names.
            Useful for logging method information.
            </summary>
            <param name="currentMethod">A MethodBase</param>
            <returns>string</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Reflection.ReflectionUtil.MethodsForType(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Internal method to the ReflectionUtil class - used to get the methods of 
            a particular type and with specific BindingFlags
            </summary>
            <param name="type">The type.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Reflection.ReflectionUtil.PublicPropertiesForType(System.Type)">
            <summary>
            Returns a list of key-value pairs containing details about the public 
            properties for a given type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Reflection.ReflectionUtil.PrivateFieldsForType(System.Type)">
            <summary>
            Returns a list of key-value pairs containing details about the private 
            fields for a given type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Reflection.ReflectionUtil.NamedPropertyExistsForType(System.String,System.Type)">
            <summary>
            Returns a boolean value signifying whether a property with a specific
            name exists for a given type.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Reflection.ReflectionUtil.ValueOfNamedProperty``2(``0,System.String,``1)">
            <summary>
            Returns the value for a named property on a given instance of a class 
            or value type.
            If the instance of the class is null, the default value is returned.
            If the named property does not exist on the instance, the default value
            is returned.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="T:Velir.Core.Utilities.Strings.PasswordComplexityRequirement">
            <summary>
            Represents different levels of complexity for passwords
            </summary>
        </member>
        <member name="F:Velir.Core.Utilities.Strings.PasswordComplexityRequirement.None">
            <summary>
            No Complexity. "Anything goes"
            </summary>
        </member>
        <member name="F:Velir.Core.Utilities.Strings.PasswordComplexityRequirement.OneCapital">
            <summary>
            Password must contain at least 1 capital letter
            </summary>
        </member>
        <member name="F:Velir.Core.Utilities.Strings.PasswordComplexityRequirement.OneNumber">
            <summary>
            Password must contain at least 1 number
            </summary>
        </member>
        <member name="F:Velir.Core.Utilities.Strings.PasswordComplexityRequirement.OneNonAlphanumeric">
            <summary>
            Password must contain at least 1 non-alphanumeric
            </summary>
        </member>
        <member name="T:Velir.Core.Utilities.Strings.IPasswordUtil">
            <summary>
            Provides a handy util for validating complexity of passwords
            </summary>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.IPasswordUtil.HasNonAlphaNumeric(System.String)">
            <summary>
            Returns true if the password contains at least 1 non-alphanumeric character
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.IPasswordUtil.PasswordNotBlank(System.String,System.String)">
            <summary>
            Checks to make sure the <paramref name="password1"/> is not blank
            </summary>
            <param name="password1"></param>
            <param name="password2"></param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.IPasswordUtil.MeetsLengthRequirement(System.String,System.Int32)">
            <summary>
            Checks to make sure the <paramref name="password"/> is of the required <paramref name="length"/>
            </summary>
            <param name="password"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.IPasswordUtil.MeetsComplexityRequirement(System.String,Velir.Core.Utilities.Strings.PasswordComplexityRequirement)">
            <summary>
            Checks to make sure that the <paramref name="password"/> meets the Complexity <paramref name="requirements"/>
            </summary>
            <param name="password"></param>
            <param name="requirements"></param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.IPasswordUtil.PasswordsMatch(System.String,System.String)">
            <summary>
            Determines whether or not two passwords are equal
            </summary>
            <param name="password1"></param>
            <param name="password2"></param>
            <returns></returns>
        </member>
        <member name="T:Velir.Core.Utilities.Strings.PasswordUtil">
            <summary>
            Provides a handy util for validating complexity of passwords
            </summary>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.PasswordUtil.HasNonAlphaNumeric(System.String)">
            <summary>
            Returns true if the password contains at least 1 non-alphanumeric character
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.PasswordUtil.PasswordNotBlank(System.String,System.String)">
            <summary>
            Checks to make sure the <paramref name="password1"/> is not blank
            </summary>
            <param name="password1"></param>
            <param name="password2"></param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.PasswordUtil.MeetsLengthRequirement(System.String,System.Int32)">
            <summary>
            Checks to make sure the <paramref name="password"/> is of the required <paramref name="length"/>
            </summary>
            <param name="password"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.PasswordUtil.MeetsComplexityRequirement(System.String,Velir.Core.Utilities.Strings.PasswordComplexityRequirement)">
            <summary>
            Checks to make sure that the <paramref name="password"/> meets the Complexity <paramref name="requirements"/>
            </summary>
            <param name="password"></param>
            <param name="requirements"></param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.PasswordUtil.PasswordsMatch(System.String,System.String)">
            <summary>
            Determines whether or not two passwords are equal
            </summary>
            <param name="password1"></param>
            <param name="password2"></param>
            <returns></returns>
        </member>
        <member name="T:Velir.Core.Utilities.Strings.StringUtil">
            <summary>
            Contains utility methods for working with Strings
            </summary>
        </member>
        <member name="F:Velir.Core.Utilities.Strings.StringUtil.RFCEmailRegex">
            <summary>
             The publically available email validation regex found at: http://www.ex-parrot.com/pdw/Mail-RFC822-Address.html
            </summary>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.StringToInteger(System.String,System.Int32)">
            <summary>
            Converts the given string to an integer, and takes care of error
            checking for the caller. If an error occurs, the defaultValue
            will be returned in place of the converted integer. Given strings
            may have whitespace in them, which is ignored.
            </summary>
            <param name="aString">The string to convert</param>
            <param name="defaultValue">The value to return in case of failure</param>
            <returns>
            On success, returns the integer value of the given string. On failure,
            the defaultValue is returned. Failure can occur if the string is null,
            empty, or otherwise an invalid integer. 
            </returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.StringToIntegerArray(System.String)">
            <summary>
            Unpacks a single string of delimited integer values into the 
            corresponding array of integers. Valid delimiters are comma (,)
            and semicolon (;). Any non-integer items in the list are unpacked
            as zeroes.
            </summary>
            <param name="list">A string containing a comma-separated list of integers</param>
            <returns>An array of integers</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.Unpack(System.String)">
            <summary>
            Performs the opposite operation of the Pack() extension method. That is,
            takes a packed string and produces a list of integers.
            </summary>
            <param name="packed">A packed string of integers</param>
            <returns>
            The list of integers resulting from unpacking the string
            </returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.StringToBool(System.String,System.Boolean,System.Boolean)">
            <summary>
            'Decodes' a string into a boolean value by attempting to match it
            against a set of known string expressions of 'true' and 'false'.
            A string is true if it is one of:
            "1", "true", "yes"
            A string is false if it is one of"
            "0", "false", "no"
            If the string is null or empty, the 'noValueDefault' is returned.
            If the string doesn't match one of the predefined values, the
            'noMatchDefault' value is returned.
            </summary>
            <param name="aString">The string to decode</param>
            <param name="noValueDefault">The value to use if the string is null or empty</param>
            <param name="noMatchDefault">
            The value to use if the string doesn't match one of the predefined value of 'true'
            or 'false'
            </param>
            <returns>The decoded boolean value of the string</returns>    
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.StringToBool(System.String,System.Boolean)">
            <summary>
            Convenience method to call StringToBool with the same value for 
            noValueDefault and noMatchDefault
            </summary>
            <param name="aString">The string to convert</param>
            <param name="defaultValue">
            The value to return in the case the string is null, empty, or does not
            match any value of 'true' or 'false'
            </param>
            <returns>Teh boolean version of the string</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.InsertStringBetweenWords(System.String,System.String)">
            <summary>
            Convenience method to insert a string infront of all words separated by spaces.
            Originally taken from the Brookings Google Search Code.
            </summary>
            <param name="stringOfWords">A string of words with spaces separating the words.</param>
            <param name="stringToInsert">
            The string to insert between the words.
            </param>
            <returns>Returns the reformated string. (e.g. "This is fun." -> "-This-is-fun.")</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.RemoveWhitespace(System.String)">
            <summary>
            Removes all whitespace characters from a string.  Useful for when you
            have to compare two strings where whitespace doesn't matter (JSON),
            for example.
            </summary>
            <param name="s">A string.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.EscapeCharacters(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Char)">
            <summary>
            A simple method for escaping characters in a string, when given a 
            specific set of characters that need to be escaped, and the 
            character that is used to escape those characters.  
            Note: By default we also escape the escape character itself
            </summary>
            <param name="s">The string to escape.</param>
            <param name="charsToEscape">The chars to escape.</param>
            <param name="escapeChar">The escape char.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.Truncate(System.String,System.Int32)">
            <summary>
            Truncates the specified string.  This method is shorthand for calling
            the Substring method on the String class, but with an optional 
            parameter to append a string to the truncated string (such as an 
            ellipsis).
            </summary>
            <param name="s">The s.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.Truncate(System.String,System.Int32,System.String)">
            <summary>
            Truncates the specified string.  This method is shorthand for calling
            the Substring method on the String class, but with an optional 
            parameter to append a string to the truncated string (such as an 
            ellipsis).
            </summary>
            <param name="s">The s.</param>
            <param name="length">The length.</param>
            <param name="append">The append.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.SerializeString(System.String)">
            <summary>
            Serializes a 32 bit integer and then appends
            the serialized string
            </summary>
            <param name="s">The string to serialize</param>
            <returns>a byte array representing the string</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.DeSerializeString(System.Byte[],System.Int32)">
            <summary>
            Deserializes a string with a 32bit int representing length
            </summary>
            <param name="buffer">the buffer containing the string</param>
            <param name="Index">The starting location</param>
            <returns>the string</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.ToLinkifiedString(System.String)">
            <summary>
            Replaces all non-linkified instances of urls within a string with their
            Html anchor tag counterparts.  The default anchor tag has no attributes
            or target set, and the text of the link is simply the url itself.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.ToLinkifiedString(System.String,System.Func{System.String,System.String})">
            <summary>
            Replaces all non-linkified instances of urls within a string with their
            Html anchor tag counterparts.  The toAnchor Func can be used to create
            more robust anchor tags with link targets and additional attributes.
            </summary>
            <param name="s">The s.</param>
            <param name="toAnchor">To anchor.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.GetUrlsInString(System.String)">
            <summary>
             Gets a collection of URL's found in a string based on Regex.
            </summary>
            <param name="s">The string that might contain URLs</param>
            <returns>String Collection of URLs Found.</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.GetHrefsInHtml(System.String)">
            <summary>
             Gets a collection of HREF attributes found in a the Anchor Tags of HTML based on Regex.
            </summary>
            <param name="s">The string that might contain Hrefs</param>
            <returns>String Collection of Hrefs Found.</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.GetEmailsInString(System.String)">
            <summary>
             Gets a collection of HREF attributes found in a the Anchor Tags of HTML based on Regex.
            </summary>
            <param name="s">The string that might contain Hrefs</param>
            <returns>String Collection of Hrefs Found.</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.IsValidEmailFormat(System.String)">
            <summary>
            Determines whether the supplied string is a valid email address.
            Uses the Regex match pattern from MSDN for determining validity
            </summary>
            <param name="address">The address.</param>
            <returns>
            	<c>true</c> if the address is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.IsValidEmailFormat(System.String,System.Boolean)">
            <summary>
            Determines whether the supplied string is a valid email address.
            Uses the Regex match pattern from MSDN for determining validity
            </summary>
            <param name="address">The address.</param>
            <param name="useRfc">Pass <c>true</c>, if you want to use the strong RFC protocol.</param>
            <returns>
            	<c>true</c> if the address is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.StripHtmlTags(System.String,System.String[])">
            <summary>
            Strips the HTML tags from a given string.
            </summary>
            <param name="s">The string.</param>
            <param name="whiteList">A list of possible valid tags that can be kept</param>
            <returns>A string with all instances of Html tags removed.</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.IndexOfCharType(System.String,System.Predicate{System.Char})">
            <summary>
            Returns the first index of a character for which the CharTypeMatcher
            returns true.
            </summary>
            <param name="s">The string.</param>
            <param name="matcher">A CharTypeMatcher which returns true
            if a particular set of criteria are met for a character.  For
            example, the matcher may return true if the character is 
            upper-case, or if it is a whitespace character.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.LastIndexOfCharType(System.String,System.Predicate{System.Char})">
            <summary>
            Returns the last index of a character for which the CharTypeMatcher
            returns true.
            </summary>
            <param name="s">The string.</param>
            <param name="matcher">A CharTypeMatcher which returns true
            if a particular set of criteria are met for a character.  For
            example, the matcher may return true if the character is 
            upper-case, or if it is a whitespace character.</param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.IndexOfWhiteSpace(System.String)">
            <summary>
            Returns the first index of a whitespace character in a string.
            If the string is null or empty, -1 is returned.  If the entire
            string consists of non-whitespace characters, -1 is returned
            </summary>
            <param name="s">The string.</param>
            <returns>The index of the first whitespace character</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.IndexOfNonWhiteSpace(System.String)">
            <summary>
            Returns the first index of a non-whitespace character in a string.
            If the string is null or empty, -1 is returned.  If the entire
            string consists of whitespace characters, -1 is returned
            </summary>
            <param name="s">The s.</param>
            <returns>The index of the first whitespace character</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.LastIndexOfWhiteSpace(System.String)">
            <summary>
            Returns the last index of a whitespace character in a string.
            If the string is null or empty, -1 is returned.  If the entire
            string consists of non-whitespace characters, -1 is returned.
            </summary>
            <param name="s">The string.</param>
            <returns>The index of the last whitespace character</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.LastIndexOfNonWhiteSpace(System.String)">
            <summary>
            Returns the last index of a non-whitespace character in a string.
            If the string is null or empty, -1 is returned.  If the entire 
            string consists of whitespace characters, -1 is returned.
            </summary>
            <param name="s">The string.</param>
            <returns>The index of the last non-whitespace character</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.ToFixedLengthLines(System.String,System.Int32)">
            <summary>
            Takes a string and attempts to break that string into separate
            lines of equal by placing line breaks at the last whitespace
            character on that line.  
            Note: If a word in the string is too large 
            Note: to fit in the defined line-length, that word will be placed
            Note: unsplit into a line of length longer than the defined length.
            Note: This is done to preserve readability of the returned string.
            </summary>
            <param name="s">The string.</param>
            <param name="length">The line length.</param>
            <returns>A string with line breaks as close as possible so as to
            make the resultant line fit within the defined line length</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Returns if two strings are equal without regarding their case.  This
            extension method is shorthand for calling <c>String.Equals</c> with
            an optional <c>StringComparison.OrdinalIgnoreCase</c> parameter, and 
            is also safe to call on null strings.
            </summary>
            <param name="s1">The first string.</param>
            <param name="s2">The second string.</param>
            <returns>Returns true if both strings are equal without regard to case.
            Otherwise, this returns false.</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.EqualsIgnoreWhitespace(System.String,System.String,System.Boolean)">
            <summary>
            Efficiently tests strings for equality while ignoring white space characters,
            and optionally ignoring case
            </summary>
            <param name="s0">The first string</param>
            <param name="s1">The second string</param>
            <param name="ignoreCase">Whether of not to ignore case</param>
            <returns>True if the strings are equal, false otherwise</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.GetNextChar(System.String,System.Int32,System.Predicate{System.Char},System.Char@)">
            <summary>
            Finds the next character in a string that matches the given condition
            </summary>
            <param name="str">The string to look through</param>
            <param name="startingIndex">The index to start looking</param>
            <param name="isValidChar">
            The predicate to use for testing if the character is valid
            </param>
            <param name="ch">The found non-whitespace character</param>
            <returns>The next index to start looking, or -1 if no characters were found</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.Slugify(System.String)">
            <summary>
            "Slugifies" the specified string.
            </summary>
            <param name="str">The specified string.</param>
            <returns>
            A "slugified" string.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>
            Turns any string into a "slugified" version by doing the following:
            <list type="number">
            <item>
            <description>Makes the string lowercase.</description>
            </item>
            <item>
            <description>Trims any leading/trailing whitespace.</description>
            </item>
            <item>
            <description>Strips out anything not a letter, number, space, or dash.</description>
            </item>
            <item>
            <description>
            Replaces any dashes with a space, so that items with a dash
            surrounded by spaces correctly combine into a single dash.
            </description>
            </item>
            <item>
            <description>Replaces runs of whitespace with a single space.</description>
            </item>
            <item>
            <description>Replaces any remaining spaces with a dash.</description>
            </item>
            <item>
            <description>Enforces a max length on the length of the slugified string. When not specified, this length is 80 characters.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.StringUtil.Slugify(System.String,System.Int32)">
            <summary>
            "Slugifies" the specified string.
            </summary>
            <param name="str">The specified string.</param>
            <param name="maxSlugLength">The max length of the slug.</param>
            <returns>
            A "slugified" string.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>
            Turns any string into a "slugified" version by doing the following:
            <list type="number">
            <item>
            <description>Makes the string lowercase.</description>
            </item>
            <item>
            <description>Trims any leading/trailing whitespace.</description>
            </item>
            <item>
            <description>Strips out anything not a letter, number, space, or dash.</description>
            </item>
            <item>
            <description>
            Replaces any dashes with a space, so that items with a dash
            surrounded by spaces correctly combine into a single dash.
            </description>
            </item>
            <item>
            <description>Replaces runs of whitespace with a single space.</description>
            </item>
            <item>
            <description>Replaces any remaining spaces with a dash.</description>
            </item>
            <item>
            <description>Enforces a max length on the length of the slugified string. When not specified, this length is 80 characters.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Velir.Core.Utilities.Strings.TokenReplacer">
            <summary>
            TokenReplacer is a simple utility class used for taking a template and replacing
            tokens within that template. In lieu of a full-blown templating engine (such as 
            NVelocity or StringTemplate) this replacer will work well for the simple cases.
            </summary>
            <example>
            Here's a quick example on how to use the TokenReplacer. Say you have a template
            string:
            <code>
            String madlib = "I saw the %adjective% %noun% and %verb%!";
            </code>
            This template contains three tokens, delimited by percent signs. So now say we
            want to replace these tokens using the TokenReplacer. We'd do that like this:
            <code>
            TokenReplacer replacer = new TokenReplacer();
            replacer.AddToken("adjective", "scary");
            replacer.AddToken("noun", "monster");
            replacer.AddToken("verb", "bugged out");
            String hilariousStory = replacer.ParseTemplateString(madlib);
            </code>
            It's as simple as that. Remember, when specifying tokens to add to the replacer, you
            do not have to incldue the delimiter.
            </example>
            <remarks>
            TODO: Add RemoveToken and ClearTokens methods
            TODO: Allow for left and right delimiters (to do things like {token})
            TODO: Allow for a custom token matcher
            TODO: Allow for setting a default for unspecified tokens
            </remarks>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.TokenReplacer.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Velir.Core.Utilities.Strings.TokenReplacer"/> class.
            </summary>
            <param name="tokenDelimiter">The token delimiter.</param>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.TokenReplacer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Velir.Core.Utilities.Strings.TokenReplacer"/> class.
            </summary>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.TokenReplacer.AddToken(System.String,System.Object)">
            <summary>
            Adds a token/value pair to the list of template tokens to replace. The value
            that will be put in place of the token is  value.ToString()
            </summary>
            <param name="token">The token to replace</param>
            <param name="value">The value to be put in the token's place</param>
            <exception cref="T:System.ArgumentNullException">Replacement values must be non-null</exception>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.TokenReplacer.Replace(System.IO.Stream,System.IO.Stream)">
            <summary>
            Replaces the tokens in the input stream, and copies the output to the output
            stream.
            </summary>
            <param name="input">The input stream</param>
            <param name="output">The output stream</param>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.TokenReplacer.ReplaceInFile(System.String)">
            <summary>
            Replaces all tokens in the given file and returns the contents
            of the file, with replaced values. This methos does not overwrite
            the file.
            </summary>
            <param name="fileName">A path to a file containing tokens to replace</param>
            <returns>The contents of the file, with all tokens replaced</returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.TokenReplacer.ReplaceFileToFile(System.String,System.String)">
            <summary>
            Reads the input file, replaces the tokens, and writes the results
            to the output file. The output file will be overwritten.
            </summary>
            <param name="inFile">The path of the input file</param>
            <param name="outFile">The patch of the output file</param>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.TokenReplacer.ReplaceInString(System.String)">
            <summary>
            Replaces all the template tokens in the given template string according
            the the token/value pairs that are set in the parser
            </summary>
            <param name="template">A string containing the template</param>
            <returns>
            A new string containing the template with all the tokens replaced
            </returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.TokenReplacer.GetReplacementString(System.String)">
            <summary>
            Finds the replacement for a given token
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Velir.Core.Utilities.Strings.TokenReplacer.IsValidTokenCharacter(System.Char)">
            <summary>
            Tracks what is a valid token character
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="P:Velir.Core.Utilities.Strings.TokenReplacer.TokenDelimiter">
            <summary>
            Gets and sets the delimiter for tokens. The default is '%'
            </summary>
        </member>
        <member name="P:Velir.Core.Utilities.Strings.TokenReplacer.ClearUnmatchedTokens">
            <summary>
            When a token in the template is matched, and there is no
            value set for it in the replacer, should the engine replace the
            toekn with an empty string, or should it leave the token alone. The
            default is true -- replace the token with an empty string
            </summary>
        </member>
        <member name="P:Velir.Core.Utilities.Strings.TokenReplacer.BufferSize">
            <summary>
            The size (in bytes) of the buffer to use when reading from the
            input stream. Defaults to 4KB.
            </summary>
        </member>
    </members>
</doc>
